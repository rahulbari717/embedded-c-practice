
002_Tasks_with_SeggerView.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b78  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005d48  08005d48  00006d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e94  08005e94  0000706c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005e94  08005e94  00006e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e9c  08005e9c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e9c  08005e9c  00006e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ea0  08005ea0  00006ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005ea4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a958  2000006c  08005f10  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001a9c4  08005f10  000079c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cdd  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e13  00000000  00000000  0001ad79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0001db90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e97  00000000  00000000  0001ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c31  00000000  00000000  0001fd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001526d  00000000  00000000  00045948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e486e  00000000  00000000  0005abb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013f423  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005504  00000000  00000000  0013f468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ac  00000000  00000000  0014496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005d30 	.word	0x08005d30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005d30 	.word	0x08005d30

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200192a0 	.word	0x200192a0

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b8:	f000 b988 	b.w	80005cc <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	468e      	mov	lr, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	4688      	mov	r8, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d962      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 f806 	lsl.w	r8, r1, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	ea43 0808 	orr.w	r8, r3, r8
 8000302:	40b4      	lsls	r4, r6
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fb0e 8811 	mls	r8, lr, r1, r8
 8000316:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x62>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000328:	f080 80ea 	bcs.w	8000500 <__udivmoddi4+0x22c>
 800032c:	429a      	cmp	r2, r3
 800032e:	f240 80e7 	bls.w	8000500 <__udivmoddi4+0x22c>
 8000332:	3902      	subs	r1, #2
 8000334:	443b      	add	r3, r7
 8000336:	1a9a      	subs	r2, r3, r2
 8000338:	b2a3      	uxth	r3, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb00 fc0c 	mul.w	ip, r0, ip
 800034a:	459c      	cmp	ip, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000354:	f080 80d6 	bcs.w	8000504 <__udivmoddi4+0x230>
 8000358:	459c      	cmp	ip, r3
 800035a:	f240 80d3 	bls.w	8000504 <__udivmoddi4+0x230>
 800035e:	443b      	add	r3, r7
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba3 030c 	sub.w	r3, r3, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f3      	lsrs	r3, r6
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x14c>
 8000392:	4573      	cmp	r3, lr
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xc8>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 8105 	bhi.w	80005a6 <__udivmoddi4+0x2d2>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4690      	mov	r8, r2
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	e9c5 4800 	strd	r4, r8, [r5]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f000 8090 	beq.w	80004d6 <__udivmoddi4+0x202>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f040 80a4 	bne.w	8000508 <__udivmoddi4+0x234>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	b2bc      	uxth	r4, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003da:	fb04 f20c 	mul.w	r2, r4, ip
 80003de:	429a      	cmp	r2, r3
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x11e>
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x11c>
 80003ea:	429a      	cmp	r2, r3
 80003ec:	f200 80e0 	bhi.w	80005b0 <__udivmoddi4+0x2dc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000400:	fb02 f404 	mul.w	r4, r2, r4
 8000404:	429c      	cmp	r4, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x144>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x142>
 8000410:	429c      	cmp	r4, r3
 8000412:	f200 80ca 	bhi.w	80005aa <__udivmoddi4+0x2d6>
 8000416:	4602      	mov	r2, r0
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa0e f401 	lsl.w	r4, lr, r1
 8000430:	fa20 f306 	lsr.w	r3, r0, r6
 8000434:	fa2e fe06 	lsr.w	lr, lr, r6
 8000438:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	fbbe f0f9 	udiv	r0, lr, r9
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000450:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000454:	fb00 fe0c 	mul.w	lr, r0, ip
 8000458:	45a6      	cmp	lr, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d909      	bls.n	8000474 <__udivmoddi4+0x1a0>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000466:	f080 809c 	bcs.w	80005a2 <__udivmoddi4+0x2ce>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f240 8099 	bls.w	80005a2 <__udivmoddi4+0x2ce>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	fa1f fe83 	uxth.w	lr, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000488:	fb03 fc0c 	mul.w	ip, r3, ip
 800048c:	45a4      	cmp	ip, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1ce>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000496:	f080 8082 	bcs.w	800059e <__udivmoddi4+0x2ca>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d97f      	bls.n	800059e <__udivmoddi4+0x2ca>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a6:	eba4 040c 	sub.w	r4, r4, ip
 80004aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ae:	4564      	cmp	r4, ip
 80004b0:	4673      	mov	r3, lr
 80004b2:	46e1      	mov	r9, ip
 80004b4:	d362      	bcc.n	800057c <__udivmoddi4+0x2a8>
 80004b6:	d05f      	beq.n	8000578 <__udivmoddi4+0x2a4>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x1fe>
 80004ba:	ebb8 0203 	subs.w	r2, r8, r3
 80004be:	eb64 0409 	sbc.w	r4, r4, r9
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431e      	orrs	r6, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e74f      	b.n	8000376 <__udivmoddi4+0xa2>
 80004d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004da:	0c01      	lsrs	r1, r0, #16
 80004dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e6:	463b      	mov	r3, r7
 80004e8:	4638      	mov	r0, r7
 80004ea:	463c      	mov	r4, r7
 80004ec:	46b8      	mov	r8, r7
 80004ee:	46be      	mov	lr, r7
 80004f0:	2620      	movs	r6, #32
 80004f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f6:	eba2 0208 	sub.w	r2, r2, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e766      	b.n	80003ce <__udivmoddi4+0xfa>
 8000500:	4601      	mov	r1, r0
 8000502:	e718      	b.n	8000336 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e72c      	b.n	8000362 <__udivmoddi4+0x8e>
 8000508:	f1c6 0220 	rsb	r2, r6, #32
 800050c:	fa2e f302 	lsr.w	r3, lr, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	40b1      	lsls	r1, r6
 8000514:	fa20 f202 	lsr.w	r2, r0, r2
 8000518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051c:	430a      	orrs	r2, r1
 800051e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000522:	b2bc      	uxth	r4, r7
 8000524:	fb0e 3318 	mls	r3, lr, r8, r3
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb08 f904 	mul.w	r9, r8, r4
 8000532:	40b0      	lsls	r0, r6
 8000534:	4589      	cmp	r9, r1
 8000536:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053a:	b280      	uxth	r0, r0
 800053c:	d93e      	bls.n	80005bc <__udivmoddi4+0x2e8>
 800053e:	1879      	adds	r1, r7, r1
 8000540:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000544:	d201      	bcs.n	800054a <__udivmoddi4+0x276>
 8000546:	4589      	cmp	r9, r1
 8000548:	d81f      	bhi.n	800058a <__udivmoddi4+0x2b6>
 800054a:	eba1 0109 	sub.w	r1, r1, r9
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	b292      	uxth	r2, r2
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	4542      	cmp	r2, r8
 8000562:	d229      	bcs.n	80005b8 <__udivmoddi4+0x2e4>
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800056a:	d2c4      	bcs.n	80004f6 <__udivmoddi4+0x222>
 800056c:	4542      	cmp	r2, r8
 800056e:	d2c2      	bcs.n	80004f6 <__udivmoddi4+0x222>
 8000570:	f1a9 0102 	sub.w	r1, r9, #2
 8000574:	443a      	add	r2, r7
 8000576:	e7be      	b.n	80004f6 <__udivmoddi4+0x222>
 8000578:	45f0      	cmp	r8, lr
 800057a:	d29d      	bcs.n	80004b8 <__udivmoddi4+0x1e4>
 800057c:	ebbe 0302 	subs.w	r3, lr, r2
 8000580:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000584:	3801      	subs	r0, #1
 8000586:	46e1      	mov	r9, ip
 8000588:	e796      	b.n	80004b8 <__udivmoddi4+0x1e4>
 800058a:	eba7 0909 	sub.w	r9, r7, r9
 800058e:	4449      	add	r1, r9
 8000590:	f1a8 0c02 	sub.w	ip, r8, #2
 8000594:	fbb1 f9fe 	udiv	r9, r1, lr
 8000598:	fb09 f804 	mul.w	r8, r9, r4
 800059c:	e7db      	b.n	8000556 <__udivmoddi4+0x282>
 800059e:	4673      	mov	r3, lr
 80005a0:	e77f      	b.n	80004a2 <__udivmoddi4+0x1ce>
 80005a2:	4650      	mov	r0, sl
 80005a4:	e766      	b.n	8000474 <__udivmoddi4+0x1a0>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e6fd      	b.n	80003a6 <__udivmoddi4+0xd2>
 80005aa:	443b      	add	r3, r7
 80005ac:	3a02      	subs	r2, #2
 80005ae:	e733      	b.n	8000418 <__udivmoddi4+0x144>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e71c      	b.n	80003f2 <__udivmoddi4+0x11e>
 80005b8:	4649      	mov	r1, r9
 80005ba:	e79c      	b.n	80004f6 <__udivmoddi4+0x222>
 80005bc:	eba1 0109 	sub.w	r1, r1, r9
 80005c0:	46c4      	mov	ip, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c4      	b.n	8000556 <__udivmoddi4+0x282>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fad9 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f853 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f8bf 	bl	8000760 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT Counter
  DWT_CTRL |= (1 << 0);
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <main+0x98>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <main+0x98>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005ee:	f003 f9b1 	bl	8003954 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005f2:	f004 f965 	bl	80048c0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from task-1", 2, &task1_handle);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <main+0x9c>)
 8000602:	22c8      	movs	r2, #200	@ 0xc8
 8000604:	491a      	ldr	r1, [pc, #104]	@ (8000670 <main+0xa0>)
 8000606:	481b      	ldr	r0, [pc, #108]	@ (8000674 <main+0xa4>)
 8000608:	f001 fecd 	bl	80023a6 <xTaskCreate>
 800060c:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00b      	beq.n	800062c <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from task-2", 2, &task2_handle);
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	9301      	str	r3, [sp, #4]
 8000630:	2302      	movs	r3, #2
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4b10      	ldr	r3, [pc, #64]	@ (8000678 <main+0xa8>)
 8000636:	22c8      	movs	r2, #200	@ 0xc8
 8000638:	4910      	ldr	r1, [pc, #64]	@ (800067c <main+0xac>)
 800063a:	4811      	ldr	r0, [pc, #68]	@ (8000680 <main+0xb0>)
 800063c:	f001 feb3 	bl	80023a6 <xTaskCreate>
 8000640:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d00b      	beq.n	8000660 <main+0x90>
    __asm volatile
 8000648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064c:	f383 8811 	msr	BASEPRI, r3
 8000650:	f3bf 8f6f 	isb	sy
 8000654:	f3bf 8f4f 	dsb	sy
 8000658:	60fb      	str	r3, [r7, #12]
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	e7fd      	b.n	800065c <main+0x8c>

  // start FreeRTOS scheduler

  vTaskStartScheduler();
 8000660:	f002 f842 	bl	80026e8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	bf00      	nop
 8000666:	e7fd      	b.n	8000664 <main+0x94>
 8000668:	e0001000 	.word	0xe0001000
 800066c:	08005d48 	.word	0x08005d48
 8000670:	08005d60 	.word	0x08005d60
 8000674:	0800085d 	.word	0x0800085d
 8000678:	08005d68 	.word	0x08005d68
 800067c:	08005d80 	.word	0x08005d80
 8000680:	08000885 	.word	0x08000885

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	@ 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 f894 	bl	80057c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a29      	ldr	r2, [pc, #164]	@ (8000758 <SystemClock_Config+0xd4>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b27      	ldr	r3, [pc, #156]	@ (8000758 <SystemClock_Config+0xd4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b24      	ldr	r3, [pc, #144]	@ (800075c <SystemClock_Config+0xd8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006d0:	4a22      	ldr	r2, [pc, #136]	@ (800075c <SystemClock_Config+0xd8>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b20      	ldr	r3, [pc, #128]	@ (800075c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000700:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000702:	2304      	movs	r3, #4
 8000704:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000706:	2302      	movs	r3, #2
 8000708:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800070a:	2302      	movs	r3, #2
 800070c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4618      	mov	r0, r3
 8000714:	f001 f874 	bl	8001800 <HAL_RCC_OscConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800071e:	f000 f8d7 	bl	80008d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000722:	230f      	movs	r3, #15
 8000724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000726:	2302      	movs	r3, #2
 8000728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2102      	movs	r1, #2
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fcf6 	bl	8001130 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800074a:	f000 f8c1 	bl	80008d0 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	@ 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	4b35      	ldr	r3, [pc, #212]	@ (8000850 <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a34      	ldr	r2, [pc, #208]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a2d      	ldr	r2, [pc, #180]	@ (8000850 <MX_GPIO_Init+0xf0>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	4b27      	ldr	r3, [pc, #156]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	481a      	ldr	r0, [pc, #104]	@ (8000854 <MX_GPIO_Init+0xf4>)
 80007ec:	f000 fc86 	bl	80010fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	4814      	ldr	r0, [pc, #80]	@ (8000858 <MX_GPIO_Init+0xf8>)
 8000808:	f000 fae4 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800080c:	230c      	movs	r3, #12
 800080e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800081c:	2307      	movs	r3, #7
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	480b      	ldr	r0, [pc, #44]	@ (8000854 <MX_GPIO_Init+0xf4>)
 8000828:	f000 fad4 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800082c:	2320      	movs	r3, #32
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0xf4>)
 8000844:	f000 fac6 	bl	8000dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3728      	adds	r7, #40	@ 0x28
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020000 	.word	0x40020000
 8000858:	40020800 	.word	0x40020800

0800085c <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *Parameters)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    while(1)
    {
      printf("%s\n", (char*) Parameters);
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f004 febb 	bl	80055e0 <puts>
      taskYIELD();
 800086a:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <task1_handler+0x24>)
 800086c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	f3bf 8f4f 	dsb	sy
 8000876:	f3bf 8f6f 	isb	sy
      printf("%s\n", (char*) Parameters);
 800087a:	bf00      	nop
 800087c:	e7f2      	b.n	8000864 <task1_handler+0x8>
 800087e:	bf00      	nop
 8000880:	e000ed04 	.word	0xe000ed04

08000884 <task2_handler>:
     }
}

static void task2_handler(void *Parameters)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  while(1)
    {
      printf("%s\n", (char*) Parameters);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f004 fea7 	bl	80055e0 <puts>
      taskYIELD();
 8000892:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <task2_handler+0x24>)
 8000894:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	f3bf 8f4f 	dsb	sy
 800089e:	f3bf 8f6f 	isb	sy
      printf("%s\n", (char*) Parameters);
 80008a2:	bf00      	nop
 80008a4:	e7f2      	b.n	800088c <task2_handler+0x8>
 80008a6:	bf00      	nop
 80008a8:	e000ed04 	.word	0xe000ed04

080008ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a04      	ldr	r2, [pc, #16]	@ (80008cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d101      	bne.n	80008c2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80008be:	f000 f987 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40001000 	.word	0x40001000

080008d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d4:	b672      	cpsid	i
}
 80008d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <Error_Handler+0x8>

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b10      	ldr	r3, [pc, #64]	@ (8000928 <HAL_MspInit+0x4c>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ea:	4a0f      	ldr	r2, [pc, #60]	@ (8000928 <HAL_MspInit+0x4c>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <HAL_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <HAL_MspInit+0x4c>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000906:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x4c>)
 8000908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800090c:	6413      	str	r3, [r2, #64]	@ 0x40
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x4c>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800091a:	f002 fbe3 	bl	80030e4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b08e      	sub	sp, #56	@ 0x38
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	4b33      	ldr	r3, [pc, #204]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000944:	4a32      	ldr	r2, [pc, #200]	@ (8000a10 <HAL_InitTick+0xe4>)
 8000946:	f043 0310 	orr.w	r3, r3, #16
 800094a:	6413      	str	r3, [r2, #64]	@ 0x40
 800094c:	4b30      	ldr	r3, [pc, #192]	@ (8000a10 <HAL_InitTick+0xe4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	f003 0310 	and.w	r3, r3, #16
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f000 fcea 	bl	800133c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000968:	6a3b      	ldr	r3, [r7, #32]
 800096a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800096c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000972:	f000 fccf 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 8000976:	6378      	str	r0, [r7, #52]	@ 0x34
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800097a:	f000 fccb 	bl	8001314 <HAL_RCC_GetPCLK1Freq>
 800097e:	4603      	mov	r3, r0
 8000980:	005b      	lsls	r3, r3, #1
 8000982:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000986:	4a23      	ldr	r2, [pc, #140]	@ (8000a14 <HAL_InitTick+0xe8>)
 8000988:	fba2 2303 	umull	r2, r3, r2, r3
 800098c:	0c9b      	lsrs	r3, r3, #18
 800098e:	3b01      	subs	r3, #1
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000992:	4b21      	ldr	r3, [pc, #132]	@ (8000a18 <HAL_InitTick+0xec>)
 8000994:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <HAL_InitTick+0xf0>)
 8000996:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000998:	4b1f      	ldr	r3, [pc, #124]	@ (8000a18 <HAL_InitTick+0xec>)
 800099a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800099e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009a0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80009a4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a18 <HAL_InitTick+0xec>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b2:	4b19      	ldr	r3, [pc, #100]	@ (8000a18 <HAL_InitTick+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009b8:	4817      	ldr	r0, [pc, #92]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ba:	f001 f9bf 	bl	8001d3c <HAL_TIM_Base_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d11b      	bne.n	8000a04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009cc:	4812      	ldr	r0, [pc, #72]	@ (8000a18 <HAL_InitTick+0xec>)
 80009ce:	f001 fa0f 	bl	8001df0 <HAL_TIM_Base_Start_IT>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d111      	bne.n	8000a04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009e0:	2036      	movs	r0, #54	@ 0x36
 80009e2:	f000 f9e9 	bl	8000db8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	d808      	bhi.n	80009fe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009ec:	2200      	movs	r2, #0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	2036      	movs	r0, #54	@ 0x36
 80009f2:	f000 f9c5 	bl	8000d80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <HAL_InitTick+0xf4>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e002      	b.n	8000a04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3738      	adds	r7, #56	@ 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	431bde83 	.word	0x431bde83
 8000a18:	20000088 	.word	0x20000088
 8000a1c:	40001000 	.word	0x40001000
 8000a20:	20000004 	.word	0x20000004

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <NMI_Handler+0x4>

08000a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a48:	bf00      	nop
 8000a4a:	e7fd      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a60:	4802      	ldr	r0, [pc, #8]	@ (8000a6c <TIM6_DAC_IRQHandler+0x10>)
 8000a62:	f001 fa35 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000088 	.word	0x20000088

08000a70 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
 8000a80:	e00a      	b.n	8000a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a82:	f3af 8000 	nop.w
 8000a86:	4601      	mov	r1, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1c5a      	adds	r2, r3, #1
 8000a8c:	60ba      	str	r2, [r7, #8]
 8000a8e:	b2ca      	uxtb	r2, r1
 8000a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dbf0      	blt.n	8000a82 <_read+0x12>
  }

  return len;
 8000aa0:	687b      	ldr	r3, [r7, #4]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3718      	adds	r7, #24
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b083      	sub	sp, #12
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
 8000aca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ad2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <_isatty>:

int _isatty(int file)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3714      	adds	r7, #20
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f004 fe67 	bl	8005838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd31 	bl	80005d0 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000b7c:	08005ea4 	.word	0x08005ea4
  ldr r2, =_sbss
 8000b80:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000b84:	2001a9c4 	.word	0x2001a9c4

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8d8 	bl	8000d6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f7ff feb6 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe8c 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	200000d0 	.word	0x200000d0

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	200000d0 	.word	0x200000d0

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	@ (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	@ (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4907      	ldr	r1, [pc, #28]	@ (8000cac <__NVIC_EnableIRQ+0x38>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	e000e100 	.word	0xe000e100

08000cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	db0a      	blt.n	8000cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	490c      	ldr	r1, [pc, #48]	@ (8000cfc <__NVIC_SetPriority+0x4c>)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	0112      	lsls	r2, r2, #4
 8000cd0:	b2d2      	uxtb	r2, r2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd8:	e00a      	b.n	8000cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	b2da      	uxtb	r2, r3
 8000cde:	4908      	ldr	r1, [pc, #32]	@ (8000d00 <__NVIC_SetPriority+0x50>)
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	f003 030f 	and.w	r3, r3, #15
 8000ce6:	3b04      	subs	r3, #4
 8000ce8:	0112      	lsls	r2, r2, #4
 8000cea:	b2d2      	uxtb	r2, r2
 8000cec:	440b      	add	r3, r1
 8000cee:	761a      	strb	r2, [r3, #24]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000e100 	.word	0xe000e100
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	@ 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	f1c3 0307 	rsb	r3, r3, #7
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf28      	it	cs
 8000d22:	2304      	movcs	r3, #4
 8000d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	3304      	adds	r3, #4
 8000d2a:	2b06      	cmp	r3, #6
 8000d2c:	d902      	bls.n	8000d34 <NVIC_EncodePriority+0x30>
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	3b03      	subs	r3, #3
 8000d32:	e000      	b.n	8000d36 <NVIC_EncodePriority+0x32>
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	401a      	ands	r2, r3
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	fa01 f303 	lsl.w	r3, r1, r3
 8000d56:	43d9      	mvns	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	4313      	orrs	r3, r2
         );
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3724      	adds	r7, #36	@ 0x24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ff4c 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d92:	f7ff ff61 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000d96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	68b9      	ldr	r1, [r7, #8]
 8000d9c:	6978      	ldr	r0, [r7, #20]
 8000d9e:	f7ff ffb1 	bl	8000d04 <NVIC_EncodePriority>
 8000da2:	4602      	mov	r2, r0
 8000da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da8:	4611      	mov	r1, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff80 	bl	8000cb0 <__NVIC_SetPriority>
}
 8000db0:	bf00      	nop
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff ff54 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	@ 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e165      	b.n	80010bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8154 	bne.w	80010b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d005      	beq.n	8000e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d130      	bne.n	8000e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	f003 0201 	and.w	r2, r3, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d017      	beq.n	8000ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80ae 	beq.w	80010b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a5c      	ldr	r2, [pc, #368]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80010d4 <HAL_GPIO_Init+0x300>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a58      	ldr	r2, [pc, #352]	@ (80010d8 <HAL_GPIO_Init+0x304>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	@ (80010dc <HAL_GPIO_Init+0x308>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d025      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80010e0 <HAL_GPIO_Init+0x30c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01f      	beq.n	8000fea <HAL_GPIO_Init+0x216>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4d      	ldr	r2, [pc, #308]	@ (80010e4 <HAL_GPIO_Init+0x310>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	@ (80010e8 <HAL_GPIO_Init+0x314>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x20e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80010ec <HAL_GPIO_Init+0x318>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x20a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80010f0 <HAL_GPIO_Init+0x31c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x206>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	@ (80010f4 <HAL_GPIO_Init+0x320>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x202>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e00c      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	e00a      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	@ (80010d8 <HAL_GPIO_Init+0x304>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a31      	ldr	r2, [pc, #196]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b2f      	ldr	r3, [pc, #188]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a26      	ldr	r2, [pc, #152]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001086:	4a1c      	ldr	r2, [pc, #112]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108c:	4b1a      	ldr	r3, [pc, #104]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b0:	4a11      	ldr	r2, [pc, #68]	@ (80010f8 <HAL_GPIO_Init+0x324>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f ae96 	bls.w	8000df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	@ 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40021400 	.word	0x40021400
 80010f4:	40021800 	.word	0x40021800
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0cc      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b68      	ldr	r3, [pc, #416]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d90c      	bls.n	800116c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b65      	ldr	r3, [pc, #404]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b63      	ldr	r3, [pc, #396]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0b8      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001184:	4b59      	ldr	r3, [pc, #356]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a58      	ldr	r2, [pc, #352]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800118e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800119c:	4b53      	ldr	r3, [pc, #332]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a52      	ldr	r2, [pc, #328]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a8:	4b50      	ldr	r3, [pc, #320]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	494d      	ldr	r1, [pc, #308]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d044      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d119      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e07f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e06f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3b      	ldr	r3, [pc, #236]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e067      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4934      	ldr	r1, [pc, #208]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fcea 	bl	8000bf8 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fce6 	bl	8000bf8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e04f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2b      	ldr	r3, [pc, #172]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d20c      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e032      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001284:	4b19      	ldr	r3, [pc, #100]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4916      	ldr	r1, [pc, #88]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a2:	4b12      	ldr	r3, [pc, #72]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	490e      	ldr	r1, [pc, #56]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012b6:	f000 f873 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	490a      	ldr	r1, [pc, #40]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	4a09      	ldr	r2, [pc, #36]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012d2:	4b09      	ldr	r3, [pc, #36]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fb28 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	08005e50 	.word	0x08005e50
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001300:	4b03      	ldr	r3, [pc, #12]	@ (8001310 <HAL_RCC_GetHCLKFreq+0x14>)
 8001302:	681b      	ldr	r3, [r3, #0]
}
 8001304:	4618      	mov	r0, r3
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	20000000 	.word	0x20000000

08001314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001318:	f7ff fff0 	bl	80012fc <HAL_RCC_GetHCLKFreq>
 800131c:	4602      	mov	r2, r0
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	0a9b      	lsrs	r3, r3, #10
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	4903      	ldr	r1, [pc, #12]	@ (8001338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800132a:	5ccb      	ldrb	r3, [r1, r3]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800
 8001338:	08005e60 	.word	0x08005e60

0800133c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220f      	movs	r2, #15
 800134a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800134c:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0203 	and.w	r2, r3, #3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	08db      	lsrs	r3, r3, #3
 8001376:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800137e:	4b07      	ldr	r3, [pc, #28]	@ (800139c <HAL_RCC_GetClockConfig+0x60>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 020f 	and.w	r2, r3, #15
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40023c00 	.word	0x40023c00

080013a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b0ae      	sub	sp, #184	@ 0xb8
 80013a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013c6:	4bcb      	ldr	r3, [pc, #812]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	f200 8206 	bhi.w	80017e0 <HAL_RCC_GetSysClockFreq+0x440>
 80013d4:	a201      	add	r2, pc, #4	@ (adr r2, 80013dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80013d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013da:	bf00      	nop
 80013dc:	08001411 	.word	0x08001411
 80013e0:	080017e1 	.word	0x080017e1
 80013e4:	080017e1 	.word	0x080017e1
 80013e8:	080017e1 	.word	0x080017e1
 80013ec:	08001419 	.word	0x08001419
 80013f0:	080017e1 	.word	0x080017e1
 80013f4:	080017e1 	.word	0x080017e1
 80013f8:	080017e1 	.word	0x080017e1
 80013fc:	08001421 	.word	0x08001421
 8001400:	080017e1 	.word	0x080017e1
 8001404:	080017e1 	.word	0x080017e1
 8001408:	080017e1 	.word	0x080017e1
 800140c:	08001611 	.word	0x08001611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001410:	4bb9      	ldr	r3, [pc, #740]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001416:	e1e7      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001418:	4bb8      	ldr	r3, [pc, #736]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800141a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800141e:	e1e3      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001420:	4bb4      	ldr	r3, [pc, #720]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800142c:	4bb1      	ldr	r3, [pc, #708]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d071      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4bae      	ldr	r3, [pc, #696]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001444:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800145a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800145e:	4622      	mov	r2, r4
 8001460:	462b      	mov	r3, r5
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	0159      	lsls	r1, r3, #5
 800146c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001470:	0150      	lsls	r0, r2, #5
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4621      	mov	r1, r4
 8001478:	1a51      	subs	r1, r2, r1
 800147a:	6439      	str	r1, [r7, #64]	@ 0x40
 800147c:	4629      	mov	r1, r5
 800147e:	eb63 0301 	sbc.w	r3, r3, r1
 8001482:	647b      	str	r3, [r7, #68]	@ 0x44
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001490:	4649      	mov	r1, r9
 8001492:	018b      	lsls	r3, r1, #6
 8001494:	4641      	mov	r1, r8
 8001496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800149a:	4641      	mov	r1, r8
 800149c:	018a      	lsls	r2, r1, #6
 800149e:	4641      	mov	r1, r8
 80014a0:	1a51      	subs	r1, r2, r1
 80014a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80014a4:	4649      	mov	r1, r9
 80014a6:	eb63 0301 	sbc.w	r3, r3, r1
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014ac:	f04f 0200 	mov.w	r2, #0
 80014b0:	f04f 0300 	mov.w	r3, #0
 80014b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014b8:	4649      	mov	r1, r9
 80014ba:	00cb      	lsls	r3, r1, #3
 80014bc:	4641      	mov	r1, r8
 80014be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014c2:	4641      	mov	r1, r8
 80014c4:	00ca      	lsls	r2, r1, #3
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	4603      	mov	r3, r0
 80014cc:	4622      	mov	r2, r4
 80014ce:	189b      	adds	r3, r3, r2
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014d2:	462b      	mov	r3, r5
 80014d4:	460a      	mov	r2, r1
 80014d6:	eb42 0303 	adc.w	r3, r2, r3
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014e8:	4629      	mov	r1, r5
 80014ea:	024b      	lsls	r3, r1, #9
 80014ec:	4621      	mov	r1, r4
 80014ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014f2:	4621      	mov	r1, r4
 80014f4:	024a      	lsls	r2, r1, #9
 80014f6:	4610      	mov	r0, r2
 80014f8:	4619      	mov	r1, r3
 80014fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014fe:	2200      	movs	r2, #0
 8001500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800150c:	f7fe feca 	bl	80002a4 <__aeabi_uldivmod>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4613      	mov	r3, r2
 8001516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800151a:	e067      	b.n	80015ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800151c:	4b75      	ldr	r3, [pc, #468]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	099b      	lsrs	r3, r3, #6
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001528:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800152c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001536:	2300      	movs	r3, #0
 8001538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800153a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800153e:	4622      	mov	r2, r4
 8001540:	462b      	mov	r3, r5
 8001542:	f04f 0000 	mov.w	r0, #0
 8001546:	f04f 0100 	mov.w	r1, #0
 800154a:	0159      	lsls	r1, r3, #5
 800154c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001550:	0150      	lsls	r0, r2, #5
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4621      	mov	r1, r4
 8001558:	1a51      	subs	r1, r2, r1
 800155a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800155c:	4629      	mov	r1, r5
 800155e:	eb63 0301 	sbc.w	r3, r3, r1
 8001562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001570:	4649      	mov	r1, r9
 8001572:	018b      	lsls	r3, r1, #6
 8001574:	4641      	mov	r1, r8
 8001576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800157a:	4641      	mov	r1, r8
 800157c:	018a      	lsls	r2, r1, #6
 800157e:	4641      	mov	r1, r8
 8001580:	ebb2 0a01 	subs.w	sl, r2, r1
 8001584:	4649      	mov	r1, r9
 8001586:	eb63 0b01 	sbc.w	fp, r3, r1
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800159a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800159e:	4692      	mov	sl, r2
 80015a0:	469b      	mov	fp, r3
 80015a2:	4623      	mov	r3, r4
 80015a4:	eb1a 0303 	adds.w	r3, sl, r3
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	462b      	mov	r3, r5
 80015ac:	eb4b 0303 	adc.w	r3, fp, r3
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	f04f 0300 	mov.w	r3, #0
 80015ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015be:	4629      	mov	r1, r5
 80015c0:	028b      	lsls	r3, r1, #10
 80015c2:	4621      	mov	r1, r4
 80015c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015c8:	4621      	mov	r1, r4
 80015ca:	028a      	lsls	r2, r1, #10
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015d4:	2200      	movs	r2, #0
 80015d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80015d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80015da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015de:	f7fe fe61 	bl	80002a4 <__aeabi_uldivmod>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4613      	mov	r3, r2
 80015e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015ec:	4b41      	ldr	r3, [pc, #260]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	3301      	adds	r3, #1
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800160e:	e0eb      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001610:	4b38      	ldr	r3, [pc, #224]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800161c:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d06b      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	2200      	movs	r2, #0
 8001630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800163a:	663b      	str	r3, [r7, #96]	@ 0x60
 800163c:	2300      	movs	r3, #0
 800163e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001644:	4622      	mov	r2, r4
 8001646:	462b      	mov	r3, r5
 8001648:	f04f 0000 	mov.w	r0, #0
 800164c:	f04f 0100 	mov.w	r1, #0
 8001650:	0159      	lsls	r1, r3, #5
 8001652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001656:	0150      	lsls	r0, r2, #5
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4621      	mov	r1, r4
 800165e:	1a51      	subs	r1, r2, r1
 8001660:	61b9      	str	r1, [r7, #24]
 8001662:	4629      	mov	r1, r5
 8001664:	eb63 0301 	sbc.w	r3, r3, r1
 8001668:	61fb      	str	r3, [r7, #28]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001676:	4659      	mov	r1, fp
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	4651      	mov	r1, sl
 800167c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001680:	4651      	mov	r1, sl
 8001682:	018a      	lsls	r2, r1, #6
 8001684:	4651      	mov	r1, sl
 8001686:	ebb2 0801 	subs.w	r8, r2, r1
 800168a:	4659      	mov	r1, fp
 800168c:	eb63 0901 	sbc.w	r9, r3, r1
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800169c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016a4:	4690      	mov	r8, r2
 80016a6:	4699      	mov	r9, r3
 80016a8:	4623      	mov	r3, r4
 80016aa:	eb18 0303 	adds.w	r3, r8, r3
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	462b      	mov	r3, r5
 80016b2:	eb49 0303 	adc.w	r3, r9, r3
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016c4:	4629      	mov	r1, r5
 80016c6:	024b      	lsls	r3, r1, #9
 80016c8:	4621      	mov	r1, r4
 80016ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ce:	4621      	mov	r1, r4
 80016d0:	024a      	lsls	r2, r1, #9
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016da:	2200      	movs	r2, #0
 80016dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016e4:	f7fe fdde 	bl	80002a4 <__aeabi_uldivmod>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4613      	mov	r3, r2
 80016ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016f2:	e065      	b.n	80017c0 <HAL_RCC_GetSysClockFreq+0x420>
 80016f4:	40023800 	.word	0x40023800
 80016f8:	00f42400 	.word	0x00f42400
 80016fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b3d      	ldr	r3, [pc, #244]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	2200      	movs	r2, #0
 8001708:	4618      	mov	r0, r3
 800170a:	4611      	mov	r1, r2
 800170c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001710:	653b      	str	r3, [r7, #80]	@ 0x50
 8001712:	2300      	movs	r3, #0
 8001714:	657b      	str	r3, [r7, #84]	@ 0x54
 8001716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800171a:	4642      	mov	r2, r8
 800171c:	464b      	mov	r3, r9
 800171e:	f04f 0000 	mov.w	r0, #0
 8001722:	f04f 0100 	mov.w	r1, #0
 8001726:	0159      	lsls	r1, r3, #5
 8001728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172c:	0150      	lsls	r0, r2, #5
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4641      	mov	r1, r8
 8001734:	1a51      	subs	r1, r2, r1
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	4649      	mov	r1, r9
 800173a:	eb63 0301 	sbc.w	r3, r3, r1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800174c:	4659      	mov	r1, fp
 800174e:	018b      	lsls	r3, r1, #6
 8001750:	4651      	mov	r1, sl
 8001752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001756:	4651      	mov	r1, sl
 8001758:	018a      	lsls	r2, r1, #6
 800175a:	4651      	mov	r1, sl
 800175c:	1a54      	subs	r4, r2, r1
 800175e:	4659      	mov	r1, fp
 8001760:	eb63 0501 	sbc.w	r5, r3, r1
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	00eb      	lsls	r3, r5, #3
 800176e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001772:	00e2      	lsls	r2, r4, #3
 8001774:	4614      	mov	r4, r2
 8001776:	461d      	mov	r5, r3
 8001778:	4643      	mov	r3, r8
 800177a:	18e3      	adds	r3, r4, r3
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	464b      	mov	r3, r9
 8001780:	eb45 0303 	adc.w	r3, r5, r3
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001792:	4629      	mov	r1, r5
 8001794:	028b      	lsls	r3, r1, #10
 8001796:	4621      	mov	r1, r4
 8001798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800179c:	4621      	mov	r1, r4
 800179e:	028a      	lsls	r2, r1, #10
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017a8:	2200      	movs	r2, #0
 80017aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80017ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80017ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80017b2:	f7fe fd77 	bl	80002a4 <__aeabi_uldivmod>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4613      	mov	r3, r2
 80017bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	0f1b      	lsrs	r3, r3, #28
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017de:	e003      	b.n	80017e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80017e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	37b8      	adds	r7, #184	@ 0xb8
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400

08001800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e28d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8083 	beq.w	8001926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001820:	4b94      	ldr	r3, [pc, #592]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b04      	cmp	r3, #4
 800182a:	d019      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800182c:	4b91      	ldr	r3, [pc, #580]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
        || \
 8001834:	2b08      	cmp	r3, #8
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001838:	4b8e      	ldr	r3, [pc, #568]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b8b      	ldr	r3, [pc, #556]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800184e:	2b0c      	cmp	r3, #12
 8001850:	d112      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001852:	4b88      	ldr	r3, [pc, #544]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800185e:	d10b      	bne.n	8001878 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	4b84      	ldr	r3, [pc, #528]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d05b      	beq.n	8001924 <HAL_RCC_OscConfig+0x124>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d157      	bne.n	8001924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e25a      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001880:	d106      	bne.n	8001890 <HAL_RCC_OscConfig+0x90>
 8001882:	4b7c      	ldr	r3, [pc, #496]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7b      	ldr	r2, [pc, #492]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e01d      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0xb4>
 800189a:	4b76      	ldr	r3, [pc, #472]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a75      	ldr	r2, [pc, #468]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b73      	ldr	r3, [pc, #460]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a72      	ldr	r2, [pc, #456]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_OscConfig+0xcc>
 80018b4:	4b6f      	ldr	r3, [pc, #444]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d013      	beq.n	80018fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff f990 	bl	8000bf8 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff f98c 	bl	8000bf8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e21f      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b61      	ldr	r3, [pc, #388]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0xdc>
 80018fa:	e014      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f7ff f97c 	bl	8000bf8 <HAL_GetTick>
 8001900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	e008      	b.n	8001916 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001904:	f7ff f978 	bl	8000bf8 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b64      	cmp	r3, #100	@ 0x64
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e20b      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001916:	4b57      	ldr	r3, [pc, #348]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1f0      	bne.n	8001904 <HAL_RCC_OscConfig+0x104>
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d06f      	beq.n	8001a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001932:	4b50      	ldr	r3, [pc, #320]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	2b00      	cmp	r3, #0
 800193c:	d017      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800193e:	4b4d      	ldr	r3, [pc, #308]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
        || \
 8001946:	2b08      	cmp	r3, #8
 8001948:	d105      	bne.n	8001956 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00b      	beq.n	800196e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d11c      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d116      	bne.n	800199c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196e:	4b41      	ldr	r3, [pc, #260]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e1d3      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001986:	4b3b      	ldr	r3, [pc, #236]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	691b      	ldr	r3, [r3, #16]
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4937      	ldr	r1, [pc, #220]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199a:	e03a      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d020      	beq.n	80019e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019a4:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019aa:	f7ff f925 	bl	8000bf8 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b2:	f7ff f921 	bl	8000bf8 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1b4      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0f0      	beq.n	80019b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b28      	ldr	r3, [pc, #160]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4925      	ldr	r1, [pc, #148]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	600b      	str	r3, [r1, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019e6:	4b24      	ldr	r3, [pc, #144]	@ (8001a78 <HAL_RCC_OscConfig+0x278>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ec:	f7ff f904 	bl	8000bf8 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019f4:	f7ff f900 	bl	8000bf8 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e193      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a06:	4b1b      	ldr	r3, [pc, #108]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d036      	beq.n	8001a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d016      	beq.n	8001a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a26:	4b15      	ldr	r3, [pc, #84]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2c:	f7ff f8e4 	bl	8000bf8 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a34:	f7ff f8e0 	bl	8000bf8 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e173      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a46:	4b0b      	ldr	r3, [pc, #44]	@ (8001a74 <HAL_RCC_OscConfig+0x274>)
 8001a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x234>
 8001a52:	e01b      	b.n	8001a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <HAL_RCC_OscConfig+0x27c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f7ff f8cd 	bl	8000bf8 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a60:	e00e      	b.n	8001a80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a62:	f7ff f8c9 	bl	8000bf8 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d907      	bls.n	8001a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e15c      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470000 	.word	0x42470000
 8001a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a80:	4b8a      	ldr	r3, [pc, #552]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1ea      	bne.n	8001a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8097 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9e:	4b83      	ldr	r3, [pc, #524]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b7f      	ldr	r3, [pc, #508]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aba:	4b7c      	ldr	r3, [pc, #496]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aca:	4b79      	ldr	r3, [pc, #484]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d118      	bne.n	8001b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad6:	4b76      	ldr	r3, [pc, #472]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a75      	ldr	r2, [pc, #468]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f889 	bl	8000bf8 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff f885 	bl	8000bf8 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e118      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b6c      	ldr	r3, [pc, #432]	@ (8001cb0 <HAL_RCC_OscConfig+0x4b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x31e>
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b14:	4a65      	ldr	r2, [pc, #404]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1c:	e01c      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b05      	cmp	r3, #5
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x340>
 8001b26:	4b61      	ldr	r3, [pc, #388]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2a:	4a60      	ldr	r2, [pc, #384]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b32:	4b5e      	ldr	r3, [pc, #376]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b36:	4a5d      	ldr	r2, [pc, #372]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b3e:	e00b      	b.n	8001b58 <HAL_RCC_OscConfig+0x358>
 8001b40:	4b5a      	ldr	r3, [pc, #360]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b44:	4a59      	ldr	r2, [pc, #356]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b46:	f023 0301 	bic.w	r3, r3, #1
 8001b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b4c:	4b57      	ldr	r3, [pc, #348]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b50:	4a56      	ldr	r2, [pc, #344]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d015      	beq.n	8001b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff f84a 	bl	8000bf8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b66:	e00a      	b.n	8001b7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b68:	f7ff f846 	bl	8000bf8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0d7      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ee      	beq.n	8001b68 <HAL_RCC_OscConfig+0x368>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8c:	f7ff f834 	bl	8000bf8 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b94:	f7ff f830 	bl	8000bf8 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e0c1      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001baa:	4b40      	ldr	r3, [pc, #256]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1ee      	bne.n	8001b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d105      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80ad 	beq.w	8001d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bd2:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d060      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d145      	bne.n	8001c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be6:	4b33      	ldr	r3, [pc, #204]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff f804 	bl	8000bf8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f800 	bl	8000bf8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e093      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c06:	4b29      	ldr	r3, [pc, #164]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f0      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69da      	ldr	r2, [r3, #28]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c20:	019b      	lsls	r3, r3, #6
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	041b      	lsls	r3, r3, #16
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c34:	061b      	lsls	r3, r3, #24
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	071b      	lsls	r3, r3, #28
 8001c3e:	491b      	ldr	r1, [pc, #108]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4a:	f7fe ffd5 	bl	8000bf8 <HAL_GetTick>
 8001c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe ffd1 	bl	8000bf8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e064      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	4b11      	ldr	r3, [pc, #68]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x452>
 8001c70:	e05c      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_RCC_OscConfig+0x4b4>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7fe ffbe 	bl	8000bf8 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7fe ffba 	bl	8000bf8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e04d      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c92:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <HAL_RCC_OscConfig+0x4ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x480>
 8001c9e:	e045      	b.n	8001d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e040      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40007000 	.word	0x40007000
 8001cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_RCC_OscConfig+0x538>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d129      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d122      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ce8:	4013      	ands	r3, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d119      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	3b01      	subs	r3, #1
 8001d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d10f      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d001      	beq.n	8001d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f839 	bl	8001dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 f9c0 	bl	8002100 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d001      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e04e      	b.n	8001ea6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a23      	ldr	r2, [pc, #140]	@ (8001eb4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e32:	d01d      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1e      	ldr	r2, [pc, #120]	@ (8001ebc <HAL_TIM_Base_Start_IT+0xcc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a19      	ldr	r2, [pc, #100]	@ (8001ec8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_TIM_Base_Start_IT+0x80>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a18      	ldr	r2, [pc, #96]	@ (8001ecc <HAL_TIM_Base_Start_IT+0xdc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d111      	bne.n	8001e94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d010      	beq.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	e007      	b.n	8001ea4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40000400 	.word	0x40000400
 8001ebc:	40000800 	.word	0x40000800
 8001ec0:	40000c00 	.word	0x40000c00
 8001ec4:	40010400 	.word	0x40010400
 8001ec8:	40014000 	.word	0x40014000
 8001ecc:	40001800 	.word	0x40001800

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0202 	mvn.w	r2, #2
 8001f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f8d2 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f8c4 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f8d5 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d020      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0204 	mvn.w	r2, #4
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f8ac 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f89e 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8af 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d020      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0208 	mvn.w	r2, #8
 8001f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f886 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f878 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f889 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0310 	and.w	r3, r3, #16
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0210 	mvn.w	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2208      	movs	r2, #8
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f860 	bl	80020c4 <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f852 	bl	80020b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f863 	bl	80020d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00c      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0201 	mvn.w	r2, #1
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc38 	bl	80008ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f906 	bl	800226c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f834 	bl	80020ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0320 	and.w	r3, r3, #32
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0220 	mvn.w	r2, #32
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8d8 	bl	8002258 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a46      	ldr	r2, [pc, #280]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d013      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800211e:	d00f      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	4a43      	ldr	r2, [pc, #268]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d00b      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a42      	ldr	r2, [pc, #264]	@ (8002234 <TIM_Base_SetConfig+0x134>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a41      	ldr	r2, [pc, #260]	@ (8002238 <TIM_Base_SetConfig+0x138>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0x40>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a40      	ldr	r2, [pc, #256]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d108      	bne.n	8002152 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	68fa      	ldr	r2, [r7, #12]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a35      	ldr	r2, [pc, #212]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d02b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002160:	d027      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a32      	ldr	r2, [pc, #200]	@ (8002230 <TIM_Base_SetConfig+0x130>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d023      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a31      	ldr	r2, [pc, #196]	@ (8002234 <TIM_Base_SetConfig+0x134>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a30      	ldr	r2, [pc, #192]	@ (8002238 <TIM_Base_SetConfig+0x138>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a2f      	ldr	r2, [pc, #188]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d017      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a2e      	ldr	r2, [pc, #184]	@ (8002240 <TIM_Base_SetConfig+0x140>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a2d      	ldr	r2, [pc, #180]	@ (8002244 <TIM_Base_SetConfig+0x144>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00f      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2c      	ldr	r2, [pc, #176]	@ (8002248 <TIM_Base_SetConfig+0x148>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d00b      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <TIM_Base_SetConfig+0x14c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d007      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002250 <TIM_Base_SetConfig+0x150>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d003      	beq.n	80021b2 <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a29      	ldr	r2, [pc, #164]	@ (8002254 <TIM_Base_SetConfig+0x154>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d108      	bne.n	80021c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	689a      	ldr	r2, [r3, #8]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a10      	ldr	r2, [pc, #64]	@ (800222c <TIM_Base_SetConfig+0x12c>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <TIM_Base_SetConfig+0xf8>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a12      	ldr	r2, [pc, #72]	@ (800223c <TIM_Base_SetConfig+0x13c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d103      	bne.n	8002200 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f023 0201 	bic.w	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	611a      	str	r2, [r3, #16]
  }
}
 800221e:	bf00      	nop
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	40010000 	.word	0x40010000
 8002230:	40000400 	.word	0x40000400
 8002234:	40000800 	.word	0x40000800
 8002238:	40000c00 	.word	0x40000c00
 800223c:	40010400 	.word	0x40010400
 8002240:	40014000 	.word	0x40014000
 8002244:	40014400 	.word	0x40014400
 8002248:	40014800 	.word	0x40014800
 800224c:	40001800 	.word	0x40001800
 8002250:	40001c00 	.word	0x40001c00
 8002254:	40002000 	.word	0x40002000

08002258 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f103 0208 	add.w	r2, r3, #8
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002298:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f103 0208 	add.w	r2, r3, #8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0208 	add.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6892      	ldr	r2, [r2, #8]
 80022f0:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6852      	ldr	r2, [r2, #4]
 80022fa:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	429a      	cmp	r2, r3
 8002304:	d103      	bne.n	800230e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	1e5a      	subs	r2, r3, #1
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800232e:	b580      	push	{r7, lr}
 8002330:	b08a      	sub	sp, #40	@ 0x28
 8002332:	af04      	add	r7, sp, #16
 8002334:	60f8      	str	r0, [r7, #12]
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4618      	mov	r0, r3
 8002342:	f001 f87d 	bl	8003440 <pvPortMalloc>
 8002346:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d013      	beq.n	8002376 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800234e:	2058      	movs	r0, #88	@ 0x58
 8002350:	f001 f876 	bl	8003440 <pvPortMalloc>
 8002354:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800235c:	2258      	movs	r2, #88	@ 0x58
 800235e:	2100      	movs	r1, #0
 8002360:	6978      	ldr	r0, [r7, #20]
 8002362:	f003 fa2d 	bl	80057c0 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
 800236c:	e005      	b.n	800237a <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800236e:	6938      	ldr	r0, [r7, #16]
 8002370:	f001 f998 	bl	80036a4 <vPortFree>
 8002374:	e001      	b.n	800237a <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002380:	2300      	movs	r3, #0
 8002382:	9303      	str	r3, [sp, #12]
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	9302      	str	r3, [sp, #8]
 8002388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238a:	9301      	str	r3, [sp, #4]
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f000 f828 	bl	80023ec <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800239c:	697b      	ldr	r3, [r7, #20]
    }
 800239e:	4618      	mov	r0, r3
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b088      	sub	sp, #32
 80023aa:	af02      	add	r7, sp, #8
 80023ac:	60f8      	str	r0, [r7, #12]
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff ffb3 	bl	800232e <prvCreateTask>
 80023c8:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80023d0:	6938      	ldr	r0, [r7, #16]
 80023d2:	f000 f89b 	bl	800250c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023d6:	2301      	movs	r3, #1
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	e002      	b.n	80023e2 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80023e0:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80023e2:	697b      	ldr	r3, [r7, #20]
    }
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80023fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	21a5      	movs	r1, #165	@ 0xa5
 8002406:	f003 f9db 	bl	80057c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002414:	3b01      	subs	r3, #1
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f023 0307 	bic.w	r3, r3, #7
 8002422:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00b      	beq.n	8002446 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	617b      	str	r3, [r7, #20]
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	e7fd      	b.n	8002442 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01e      	beq.n	800248a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	e012      	b.n	8002478 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002452:	68ba      	ldr	r2, [r7, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	4413      	add	r3, r2
 8002458:	7819      	ldrb	r1, [r3, #0]
 800245a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	3334      	adds	r3, #52	@ 0x34
 8002462:	460a      	mov	r2, r1
 8002464:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3301      	adds	r3, #1
 8002476:	61fb      	str	r3, [r7, #28]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	2b09      	cmp	r3, #9
 800247c:	d9e9      	bls.n	8002452 <prvInitialiseNewTask+0x66>
 800247e:	e000      	b.n	8002482 <prvInitialiseNewTask+0x96>
            {
                break;
 8002480:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	2200      	movs	r2, #0
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800248a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248c:	2b04      	cmp	r3, #4
 800248e:	d90b      	bls.n	80024a8 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002494:	f383 8811 	msr	BASEPRI, r3
 8002498:	f3bf 8f6f 	isb	sy
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	613b      	str	r3, [r7, #16]
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d901      	bls.n	80024b2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024ae:	2304      	movs	r3, #4
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024bc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	3304      	adds	r3, #4
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff fefc 	bl	80022c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ca:	3318      	adds	r3, #24
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fef7 	bl	80022c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024d6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	f1c3 0205 	rsb	r2, r3, #5
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	68f9      	ldr	r1, [r7, #12]
 80024ec:	69b8      	ldr	r0, [r7, #24]
 80024ee:	f000 fc79 	bl	8002de4 <pxPortInitialiseStack>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f6:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002502:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002504:	bf00      	nop
 8002506:	3720      	adds	r7, #32
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800250c:	b5b0      	push	{r4, r5, r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002514:	f000 fe66 	bl	80031e4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002518:	4b48      	ldr	r3, [pc, #288]	@ (800263c <prvAddNewTaskToReadyList+0x130>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	3301      	adds	r3, #1
 800251e:	4a47      	ldr	r2, [pc, #284]	@ (800263c <prvAddNewTaskToReadyList+0x130>)
 8002520:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002522:	4b47      	ldr	r3, [pc, #284]	@ (8002640 <prvAddNewTaskToReadyList+0x134>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800252a:	4a45      	ldr	r2, [pc, #276]	@ (8002640 <prvAddNewTaskToReadyList+0x134>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002530:	4b42      	ldr	r3, [pc, #264]	@ (800263c <prvAddNewTaskToReadyList+0x130>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d110      	bne.n	800255a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002538:	f000 fbba 	bl	8002cb0 <prvInitialiseTaskLists>
 800253c:	e00d      	b.n	800255a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800253e:	4b41      	ldr	r3, [pc, #260]	@ (8002644 <prvAddNewTaskToReadyList+0x138>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002546:	4b3e      	ldr	r3, [pc, #248]	@ (8002640 <prvAddNewTaskToReadyList+0x134>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002550:	429a      	cmp	r2, r3
 8002552:	d802      	bhi.n	800255a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002554:	4a3a      	ldr	r2, [pc, #232]	@ (8002640 <prvAddNewTaskToReadyList+0x134>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800255a:	4b3b      	ldr	r3, [pc, #236]	@ (8002648 <prvAddNewTaskToReadyList+0x13c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3301      	adds	r3, #1
 8002560:	4a39      	ldr	r2, [pc, #228]	@ (8002648 <prvAddNewTaskToReadyList+0x13c>)
 8002562:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002564:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <prvAddNewTaskToReadyList+0x13c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <prvAddNewTaskToReadyList+0x94>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fd01 	bl	8004f7c <SEGGER_SYSVIEW_OnTaskCreate>
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258a:	461d      	mov	r5, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	461c      	mov	r4, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	1ae3      	subs	r3, r4, r3
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	462b      	mov	r3, r5
 800259c:	f001 fa7c 	bl	8003a98 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fd6e 	bl	8005084 <SEGGER_SYSVIEW_OnTaskStartReady>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	2201      	movs	r2, #1
 80025ae:	409a      	lsls	r2, r3
 80025b0:	4b26      	ldr	r3, [pc, #152]	@ (800264c <prvAddNewTaskToReadyList+0x140>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	4a25      	ldr	r2, [pc, #148]	@ (800264c <prvAddNewTaskToReadyList+0x140>)
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025be:	4924      	ldr	r1, [pc, #144]	@ (8002650 <prvAddNewTaskToReadyList+0x144>)
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	3304      	adds	r3, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689a      	ldr	r2, [r3, #8]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	3204      	adds	r2, #4
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	1d1a      	adds	r2, r3, #4
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4a14      	ldr	r2, [pc, #80]	@ (8002650 <prvAddNewTaskToReadyList+0x144>)
 80025fe:	441a      	add	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	615a      	str	r2, [r3, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002608:	4911      	ldr	r1, [pc, #68]	@ (8002650 <prvAddNewTaskToReadyList+0x144>)
 800260a:	4613      	mov	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800261a:	1c59      	adds	r1, r3, #1
 800261c:	480c      	ldr	r0, [pc, #48]	@ (8002650 <prvAddNewTaskToReadyList+0x144>)
 800261e:	4613      	mov	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	4403      	add	r3, r0
 8002628:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800262a:	f000 fe0d 	bl	8003248 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <prvAddNewTaskToReadyList+0x138>)
 8002630:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002632:	bf00      	nop
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bdb0      	pop	{r4, r5, r7, pc}
 800263a:	bf00      	nop
 800263c:	200001ac 	.word	0x200001ac
 8002640:	200000d4 	.word	0x200000d4
 8002644:	200001b8 	.word	0x200001b8
 8002648:	200001c8 	.word	0x200001c8
 800264c:	200001b4 	.word	0x200001b4
 8002650:	200000d8 	.word	0x200000d8

08002654 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800265a:	2301      	movs	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e011      	b.n	800268c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002668:	4a1c      	ldr	r2, [pc, #112]	@ (80026dc <prvCreateIdleTasks+0x88>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	4413      	add	r3, r2
 800266e:	7819      	ldrb	r1, [r3, #0]
 8002670:	1d3a      	adds	r2, r7, #4
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	4413      	add	r3, r2
 8002676:	460a      	mov	r2, r1
 8002678:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800267a:	1d3a      	adds	r2, r7, #4
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	4413      	add	r3, r2
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d006      	beq.n	8002694 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3301      	adds	r3, #1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b09      	cmp	r3, #9
 8002690:	ddea      	ble.n	8002668 <prvCreateIdleTasks+0x14>
 8002692:	e000      	b.n	8002696 <prvCreateIdleTasks+0x42>
        {
            break;
 8002694:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002696:	2300      	movs	r3, #0
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	e015      	b.n	80026c8 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800269c:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <prvCreateIdleTasks+0x8c>)
 800269e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	4a0f      	ldr	r2, [pc, #60]	@ (80026e4 <prvCreateIdleTasks+0x90>)
 80026a6:	4413      	add	r3, r2
 80026a8:	1d39      	adds	r1, r7, #4
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	2300      	movs	r3, #0
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2300      	movs	r3, #0
 80026b2:	2282      	movs	r2, #130	@ 0x82
 80026b4:	6938      	ldr	r0, [r7, #16]
 80026b6:	f7ff fe76 	bl	80023a6 <xTaskCreate>
 80026ba:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	3301      	adds	r3, #1
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	dde6      	ble.n	800269c <prvCreateIdleTasks+0x48>
 80026ce:	e000      	b.n	80026d2 <prvCreateIdleTasks+0x7e>
        {
            break;
 80026d0:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80026d2:	69fb      	ldr	r3, [r7, #28]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	08005d88 	.word	0x08005d88
 80026e0:	08002c8d 	.word	0x08002c8d
 80026e4:	200001d0 	.word	0x200001d0

080026e8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80026ee:	f7ff ffb1 	bl	8002654 <prvCreateIdleTasks>
 80026f2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d124      	bne.n	8002744 <vTaskStartScheduler+0x5c>
    __asm volatile
 80026fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	60bb      	str	r3, [r7, #8]
}
 800270c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800270e:	4b18      	ldr	r3, [pc, #96]	@ (8002770 <vTaskStartScheduler+0x88>)
 8002710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002714:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <vTaskStartScheduler+0x8c>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800271c:	4b16      	ldr	r3, [pc, #88]	@ (8002778 <vTaskStartScheduler+0x90>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002722:	4b16      	ldr	r3, [pc, #88]	@ (800277c <vTaskStartScheduler+0x94>)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	4b16      	ldr	r3, [pc, #88]	@ (8002780 <vTaskStartScheduler+0x98>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d102      	bne.n	8002734 <vTaskStartScheduler+0x4c>
 800272e:	f002 fc09 	bl	8004f44 <SEGGER_SYSVIEW_OnIdle>
 8002732:	e004      	b.n	800273e <vTaskStartScheduler+0x56>
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <vTaskStartScheduler+0x98>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fc61 	bl	8005000 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800273e:	f000 fbe1 	bl	8002f04 <xPortStartScheduler>
 8002742:	e00f      	b.n	8002764 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800274a:	d10b      	bne.n	8002764 <vTaskStartScheduler+0x7c>
    __asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	607b      	str	r3, [r7, #4]
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002764:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <vTaskStartScheduler+0x9c>)
 8002766:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	200001cc 	.word	0x200001cc
 8002774:	200001b8 	.word	0x200001b8
 8002778:	200001b0 	.word	0x200001b0
 800277c:	200001d0 	.word	0x200001d0
 8002780:	200000d4 	.word	0x200000d4
 8002784:	08005e68 	.word	0x08005e68

08002788 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <vTaskSuspendAll+0x18>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a03      	ldr	r2, [pc, #12]	@ (80027a0 <vTaskSuspendAll+0x18>)
 8002794:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	200001d4 	.word	0x200001d4

080027a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80027b2:	f000 fd17 	bl	80031e4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80027b6:	2300      	movs	r3, #0
 80027b8:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80027ba:	4b70      	ldr	r3, [pc, #448]	@ (800297c <xTaskResumeAll+0x1d8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <xTaskResumeAll+0x36>
    __asm volatile
 80027c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c6:	f383 8811 	msr	BASEPRI, r3
 80027ca:	f3bf 8f6f 	isb	sy
 80027ce:	f3bf 8f4f 	dsb	sy
 80027d2:	603b      	str	r3, [r7, #0]
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	e7fd      	b.n	80027d6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80027da:	4b68      	ldr	r3, [pc, #416]	@ (800297c <xTaskResumeAll+0x1d8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	3b01      	subs	r3, #1
 80027e0:	4a66      	ldr	r2, [pc, #408]	@ (800297c <xTaskResumeAll+0x1d8>)
 80027e2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80027e4:	4b65      	ldr	r3, [pc, #404]	@ (800297c <xTaskResumeAll+0x1d8>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 80c0 	bne.w	800296e <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027ee:	4b64      	ldr	r3, [pc, #400]	@ (8002980 <xTaskResumeAll+0x1dc>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	f000 80bb 	beq.w	800296e <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027f8:	e092      	b.n	8002920 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80027fa:	4b62      	ldr	r3, [pc, #392]	@ (8002984 <xTaskResumeAll+0x1e0>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	6a12      	ldr	r2, [r2, #32]
 8002810:	609a      	str	r2, [r3, #8]
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	69d2      	ldr	r2, [r2, #28]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	3318      	adds	r3, #24
 8002824:	429a      	cmp	r2, r3
 8002826:	d103      	bne.n	8002830 <xTaskResumeAll+0x8c>
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	6a1a      	ldr	r2, [r3, #32]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2200      	movs	r2, #0
 8002834:	629a      	str	r2, [r3, #40]	@ 0x28
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	1e5a      	subs	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	6892      	ldr	r2, [r2, #8]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3304      	adds	r3, #4
 8002862:	429a      	cmp	r2, r3
 8002864:	d103      	bne.n	800286e <xTaskResumeAll+0xca>
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	2200      	movs	r2, #0
 8002872:	615a      	str	r2, [r3, #20]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	1e5a      	subs	r2, r3, #1
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4618      	mov	r0, r3
 8002882:	f002 fbff 	bl	8005084 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	2201      	movs	r2, #1
 800288c:	409a      	lsls	r2, r3
 800288e:	4b3e      	ldr	r3, [pc, #248]	@ (8002988 <xTaskResumeAll+0x1e4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4313      	orrs	r3, r2
 8002894:	4a3c      	ldr	r2, [pc, #240]	@ (8002988 <xTaskResumeAll+0x1e4>)
 8002896:	6013      	str	r3, [r2, #0]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289c:	493b      	ldr	r1, [pc, #236]	@ (800298c <xTaskResumeAll+0x1e8>)
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	3304      	adds	r3, #4
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	3204      	adds	r2, #4
 80028c4:	605a      	str	r2, [r3, #4]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <xTaskResumeAll+0x1e8>)
 80028dc:	441a      	add	r2, r3
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	615a      	str	r2, [r3, #20]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028e6:	4929      	ldr	r1, [pc, #164]	@ (800298c <xTaskResumeAll+0x1e8>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	69fa      	ldr	r2, [r7, #28]
 80028f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028f8:	1c59      	adds	r1, r3, #1
 80028fa:	4824      	ldr	r0, [pc, #144]	@ (800298c <xTaskResumeAll+0x1e8>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4403      	add	r3, r0
 8002906:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800290c:	4b20      	ldr	r3, [pc, #128]	@ (8002990 <xTaskResumeAll+0x1ec>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	429a      	cmp	r2, r3
 8002914:	d904      	bls.n	8002920 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002916:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <xTaskResumeAll+0x1f0>)
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2101      	movs	r1, #1
 800291c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002920:	4b18      	ldr	r3, [pc, #96]	@ (8002984 <xTaskResumeAll+0x1e0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	f47f af68 	bne.w	80027fa <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002930:	f000 fa3c 	bl	8002dac <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002934:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <xTaskResumeAll+0x1f4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002940:	f000 f83e 	bl	80029c0 <xTaskIncrementTick>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800294a:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <xTaskResumeAll+0x1f0>)
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	2101      	movs	r1, #1
 8002950:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	3b01      	subs	r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ef      	bne.n	8002940 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002960:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <xTaskResumeAll+0x1f4>)
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002966:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <xTaskResumeAll+0x1f0>)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800296e:	f000 fc6b 	bl	8003248 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8002972:	697b      	ldr	r3, [r7, #20]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200001d4 	.word	0x200001d4
 8002980:	200001ac 	.word	0x200001ac
 8002984:	2000016c 	.word	0x2000016c
 8002988:	200001b4 	.word	0x200001b4
 800298c:	200000d8 	.word	0x200000d8
 8002990:	200000d4 	.word	0x200000d4
 8002994:	200001c0 	.word	0x200001c0
 8002998:	200001bc 	.word	0x200001bc

0800299c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029a2:	f000 fd0b 	bl	80033bc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80029aa:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <xTaskGetTickCountFromISR+0x20>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );

    return xReturn;
 80029b0:	683b      	ldr	r3, [r7, #0]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200001b0 	.word	0x200001b0

080029c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80029ca:	4b71      	ldr	r3, [pc, #452]	@ (8002b90 <xTaskIncrementTick+0x1d0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 80d4 	bne.w	8002b7c <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b94 <xTaskIncrementTick+0x1d4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029dc:	4a6d      	ldr	r2, [pc, #436]	@ (8002b94 <xTaskIncrementTick+0x1d4>)
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d121      	bne.n	8002a2c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80029e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b98 <xTaskIncrementTick+0x1d8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <xTaskIncrementTick+0x4a>
    __asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	607b      	str	r3, [r7, #4]
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	e7fd      	b.n	8002a06 <xTaskIncrementTick+0x46>
 8002a0a:	4b63      	ldr	r3, [pc, #396]	@ (8002b98 <xTaskIncrementTick+0x1d8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	4b62      	ldr	r3, [pc, #392]	@ (8002b9c <xTaskIncrementTick+0x1dc>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a60      	ldr	r2, [pc, #384]	@ (8002b98 <xTaskIncrementTick+0x1d8>)
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4a60      	ldr	r2, [pc, #384]	@ (8002b9c <xTaskIncrementTick+0x1dc>)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ba0 <xTaskIncrementTick+0x1e0>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3301      	adds	r3, #1
 8002a24:	4a5e      	ldr	r2, [pc, #376]	@ (8002ba0 <xTaskIncrementTick+0x1e0>)
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	f000 f9c0 	bl	8002dac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a2c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	f0c0 80a7 	bcc.w	8002b86 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a38:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <xTaskIncrementTick+0x1d8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002a42:	4b58      	ldr	r3, [pc, #352]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a48:	601a      	str	r2, [r3, #0]
                    break;
 8002a4a:	e09c      	b.n	8002b86 <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a4c:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <xTaskIncrementTick+0x1d8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d203      	bcs.n	8002a6c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	6013      	str	r3, [r2, #0]
                        break;
 8002a6a:	e08c      	b.n	8002b86 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	68d2      	ldr	r2, [r2, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	6892      	ldr	r2, [r2, #8]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d103      	bne.n	8002a9a <xTaskIncrementTick+0xda>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01e      	beq.n	8002af0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	6a12      	ldr	r2, [r2, #32]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	69d2      	ldr	r2, [r2, #28]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d103      	bne.n	8002ae0 <xTaskIncrementTick+0x120>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fac6 	bl	8005084 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	2201      	movs	r2, #1
 8002afe:	409a      	lsls	r2, r3
 8002b00:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <xTaskIncrementTick+0x1e8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	4a28      	ldr	r2, [pc, #160]	@ (8002ba8 <xTaskIncrementTick+0x1e8>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0e:	4927      	ldr	r1, [pc, #156]	@ (8002bac <xTaskIncrementTick+0x1ec>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	3204      	adds	r2, #4
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1d1a      	adds	r2, r3, #4
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4a17      	ldr	r2, [pc, #92]	@ (8002bac <xTaskIncrementTick+0x1ec>)
 8002b4e:	441a      	add	r2, r3
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	615a      	str	r2, [r3, #20]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b58:	4914      	ldr	r1, [pc, #80]	@ (8002bac <xTaskIncrementTick+0x1ec>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b6a:	1c59      	adds	r1, r3, #1
 8002b6c:	480f      	ldr	r0, [pc, #60]	@ (8002bac <xTaskIncrementTick+0x1ec>)
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4403      	add	r3, r0
 8002b78:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7a:	e75d      	b.n	8002a38 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <xTaskIncrementTick+0x1f0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	4a0b      	ldr	r2, [pc, #44]	@ (8002bb0 <xTaskIncrementTick+0x1f0>)
 8002b84:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3728      	adds	r7, #40	@ 0x28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200001d4 	.word	0x200001d4
 8002b94:	200001b0 	.word	0x200001b0
 8002b98:	20000164 	.word	0x20000164
 8002b9c:	20000168 	.word	0x20000168
 8002ba0:	200001c4 	.word	0x200001c4
 8002ba4:	200001cc 	.word	0x200001cc
 8002ba8:	200001b4 	.word	0x200001b4
 8002bac:	200000d8 	.word	0x200000d8
 8002bb0:	200001bc 	.word	0x200001bc

08002bb4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002bba:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <vTaskSwitchContext+0xc0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <vTaskSwitchContext+0xc4>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002bc8:	e04f      	b.n	8002c6a <vTaskSwitchContext+0xb6>
            xYieldPendings[ 0 ] = pdFALSE;
 8002bca:	4b2b      	ldr	r3, [pc, #172]	@ (8002c78 <vTaskSwitchContext+0xc4>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <vTaskSwitchContext+0xc8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	f1c3 031f 	rsb	r3, r3, #31
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	4926      	ldr	r1, [pc, #152]	@ (8002c80 <vTaskSwitchContext+0xcc>)
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10b      	bne.n	8002c12 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	607b      	str	r3, [r7, #4]
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	e7fd      	b.n	8002c0e <vTaskSwitchContext+0x5a>
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4a18      	ldr	r2, [pc, #96]	@ (8002c80 <vTaskSwitchContext+0xcc>)
 8002c1e:	4413      	add	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	3308      	adds	r3, #8
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d103      	bne.n	8002c40 <vTaskSwitchContext+0x8c>
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	605a      	str	r2, [r3, #4]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	4a0f      	ldr	r2, [pc, #60]	@ (8002c84 <vTaskSwitchContext+0xd0>)
 8002c48:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <vTaskSwitchContext+0xd4>)
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <vTaskSwitchContext+0xd0>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d102      	bne.n	8002c5c <vTaskSwitchContext+0xa8>
 8002c56:	f002 f975 	bl	8004f44 <SEGGER_SYSVIEW_OnIdle>
 8002c5a:	e004      	b.n	8002c66 <vTaskSwitchContext+0xb2>
 8002c5c:	4b09      	ldr	r3, [pc, #36]	@ (8002c84 <vTaskSwitchContext+0xd0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 f9cd 	bl	8005000 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002c66:	4b07      	ldr	r3, [pc, #28]	@ (8002c84 <vTaskSwitchContext+0xd0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
    }
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200001d4 	.word	0x200001d4
 8002c78:	200001c0 	.word	0x200001c0
 8002c7c:	200001b4 	.word	0x200001b4
 8002c80:	200000d8 	.word	0x200000d8
 8002c84:	200000d4 	.word	0x200000d4
 8002c88:	200001d0 	.word	0x200001d0

08002c8c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002c94:	f000 f84c 	bl	8002d30 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002c98:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <prvIdleTask+0x20>)
 8002c9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002ca8:	bf00      	nop
 8002caa:	e7f3      	b.n	8002c94 <prvIdleTask+0x8>
 8002cac:	e000ed04 	.word	0xe000ed04

08002cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
 8002cba:	e00c      	b.n	8002cd6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4a12      	ldr	r2, [pc, #72]	@ (8002d10 <prvInitialiseTaskLists+0x60>)
 8002cc8:	4413      	add	r3, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fad8 	bl	8002280 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d9ef      	bls.n	8002cbc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cdc:	480d      	ldr	r0, [pc, #52]	@ (8002d14 <prvInitialiseTaskLists+0x64>)
 8002cde:	f7ff facf 	bl	8002280 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002ce2:	480d      	ldr	r0, [pc, #52]	@ (8002d18 <prvInitialiseTaskLists+0x68>)
 8002ce4:	f7ff facc 	bl	8002280 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002ce8:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <prvInitialiseTaskLists+0x6c>)
 8002cea:	f7ff fac9 	bl	8002280 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002cee:	480c      	ldr	r0, [pc, #48]	@ (8002d20 <prvInitialiseTaskLists+0x70>)
 8002cf0:	f7ff fac6 	bl	8002280 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002cf4:	480b      	ldr	r0, [pc, #44]	@ (8002d24 <prvInitialiseTaskLists+0x74>)
 8002cf6:	f7ff fac3 	bl	8002280 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <prvInitialiseTaskLists+0x78>)
 8002cfc:	4a05      	ldr	r2, [pc, #20]	@ (8002d14 <prvInitialiseTaskLists+0x64>)
 8002cfe:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d00:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <prvInitialiseTaskLists+0x7c>)
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <prvInitialiseTaskLists+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200000d8 	.word	0x200000d8
 8002d14:	2000013c 	.word	0x2000013c
 8002d18:	20000150 	.word	0x20000150
 8002d1c:	2000016c 	.word	0x2000016c
 8002d20:	20000180 	.word	0x20000180
 8002d24:	20000198 	.word	0x20000198
 8002d28:	20000164 	.word	0x20000164
 8002d2c:	20000168 	.word	0x20000168

08002d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d36:	e019      	b.n	8002d6c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002d38:	f000 fa54 	bl	80031e4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d3c:	4b10      	ldr	r3, [pc, #64]	@ (8002d80 <prvCheckTasksWaitingTermination+0x50>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fac6 	bl	80022da <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d84 <prvCheckTasksWaitingTermination+0x54>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	4a0b      	ldr	r2, [pc, #44]	@ (8002d84 <prvCheckTasksWaitingTermination+0x54>)
 8002d56:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002d58:	4b0b      	ldr	r3, [pc, #44]	@ (8002d88 <prvCheckTasksWaitingTermination+0x58>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <prvCheckTasksWaitingTermination+0x58>)
 8002d60:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002d62:	f000 fa71 	bl	8003248 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f810 	bl	8002d8c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <prvCheckTasksWaitingTermination+0x58>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e1      	bne.n	8002d38 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000180 	.word	0x20000180
 8002d84:	200001ac 	.word	0x200001ac
 8002d88:	20000194 	.word	0x20000194

08002d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 fc83 	bl	80036a4 <vPortFree>
            vPortFree( pxTCB );
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fc80 	bl	80036a4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <prvResetNextTaskUnblockTime+0x30>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d104      	bne.n	8002dc4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002dba:	4b09      	ldr	r3, [pc, #36]	@ (8002de0 <prvResetNextTaskUnblockTime+0x34>)
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002dc2:	e005      	b.n	8002dd0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002dc4:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <prvResetNextTaskUnblockTime+0x30>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a04      	ldr	r2, [pc, #16]	@ (8002de0 <prvResetNextTaskUnblockTime+0x34>)
 8002dce:	6013      	str	r3, [r2, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	20000164 	.word	0x20000164
 8002de0:	200001cc 	.word	0x200001cc

08002de4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3b04      	subs	r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002dfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	3b04      	subs	r3, #4
 8002e02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f023 0201 	bic.w	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	3b04      	subs	r3, #4
 8002e12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e14:	4a0c      	ldr	r2, [pc, #48]	@ (8002e48 <pxPortInitialiseStack+0x64>)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b14      	subs	r3, #20
 8002e1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	3b04      	subs	r3, #4
 8002e2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f06f 0202 	mvn.w	r2, #2
 8002e32:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3b20      	subs	r3, #32
 8002e38:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr
 8002e48:	08002e4d 	.word	0x08002e4d

08002e4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002e56:	4b13      	ldr	r3, [pc, #76]	@ (8002ea4 <prvTaskExitError+0x58>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e5e:	d00b      	beq.n	8002e78 <prvTaskExitError+0x2c>
    __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	60fb      	str	r3, [r7, #12]
}
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <prvTaskExitError+0x28>
    __asm volatile
 8002e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7c:	f383 8811 	msr	BASEPRI, r3
 8002e80:	f3bf 8f6f 	isb	sy
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	60bb      	str	r3, [r7, #8]
}
 8002e8a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e8c:	bf00      	nop
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0fc      	beq.n	8002e8e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e94:	bf00      	nop
 8002e96:	bf00      	nop
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	2000000c 	.word	0x2000000c
	...

08002eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002eb0:	4b07      	ldr	r3, [pc, #28]	@ (8002ed0 <pxCurrentTCBConst2>)
 8002eb2:	6819      	ldr	r1, [r3, #0]
 8002eb4:	6808      	ldr	r0, [r1, #0]
 8002eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eba:	f380 8809 	msr	PSP, r0
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	f04f 0000 	mov.w	r0, #0
 8002ec6:	f380 8811 	msr	BASEPRI, r0
 8002eca:	4770      	bx	lr
 8002ecc:	f3af 8000 	nop.w

08002ed0 <pxCurrentTCBConst2>:
 8002ed0:	200000d4 	.word	0x200000d4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002ed4:	bf00      	nop
 8002ed6:	bf00      	nop

08002ed8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002ed8:	4808      	ldr	r0, [pc, #32]	@ (8002efc <prvPortStartFirstTask+0x24>)
 8002eda:	6800      	ldr	r0, [r0, #0]
 8002edc:	6800      	ldr	r0, [r0, #0]
 8002ede:	f380 8808 	msr	MSP, r0
 8002ee2:	f04f 0000 	mov.w	r0, #0
 8002ee6:	f380 8814 	msr	CONTROL, r0
 8002eea:	b662      	cpsie	i
 8002eec:	b661      	cpsie	f
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	df00      	svc	0
 8002ef8:	bf00      	nop
 8002efa:	0000      	.short	0x0000
 8002efc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002f00:	bf00      	nop
 8002f02:	bf00      	nop

08002f04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08c      	sub	sp, #48	@ 0x30
 8002f08:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f0a:	4b69      	ldr	r3, [pc, #420]	@ (80030b0 <xPortStartScheduler+0x1ac>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a69      	ldr	r2, [pc, #420]	@ (80030b4 <xPortStartScheduler+0x1b0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d10b      	bne.n	8002f2c <xPortStartScheduler+0x28>
    __asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	623b      	str	r3, [r7, #32]
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002f2c:	4b60      	ldr	r3, [pc, #384]	@ (80030b0 <xPortStartScheduler+0x1ac>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a61      	ldr	r2, [pc, #388]	@ (80030b8 <xPortStartScheduler+0x1b4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10b      	bne.n	8002f4e <xPortStartScheduler+0x4a>
    __asm volatile
 8002f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3a:	f383 8811 	msr	BASEPRI, r3
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	e7fd      	b.n	8002f4a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <xPortStartScheduler+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f56:	332c      	adds	r3, #44	@ 0x2c
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a59      	ldr	r2, [pc, #356]	@ (80030c0 <xPortStartScheduler+0x1bc>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d00b      	beq.n	8002f78 <xPortStartScheduler+0x74>
    __asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	61fb      	str	r3, [r7, #28]
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7a:	3338      	adds	r3, #56	@ 0x38
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a51      	ldr	r2, [pc, #324]	@ (80030c4 <xPortStartScheduler+0x1c0>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d00b      	beq.n	8002f9c <xPortStartScheduler+0x98>
    __asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	61bb      	str	r3, [r7, #24]
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002fa0:	4b49      	ldr	r3, [pc, #292]	@ (80030c8 <xPortStartScheduler+0x1c4>)
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8002fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fae:	22ff      	movs	r2, #255	@ 0xff
 8002fb0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b41      	ldr	r3, [pc, #260]	@ (80030cc <xPortStartScheduler+0x1c8>)
 8002fc6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002fc8:	4b40      	ldr	r3, [pc, #256]	@ (80030cc <xPortStartScheduler+0x1c8>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <xPortStartScheduler+0xe4>
    __asm volatile
 8002fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd4:	f383 8811 	msr	BASEPRI, r3
 8002fd8:	f3bf 8f6f 	isb	sy
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	617b      	str	r3, [r7, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
 8002fe6:	e7fd      	b.n	8002fe4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d013      	beq.n	800301e <xPortStartScheduler+0x11a>
    __asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	613b      	str	r3, [r7, #16]
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	e7fd      	b.n	800300a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	3301      	adds	r3, #1
 8003012:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003014:	79fb      	ldrb	r3, [r7, #7]
 8003016:	b2db      	uxtb	r3, r3
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003026:	2b80      	cmp	r3, #128	@ 0x80
 8003028:	d0f1      	beq.n	800300e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d103      	bne.n	8003038 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003030:	4b27      	ldr	r3, [pc, #156]	@ (80030d0 <xPortStartScheduler+0x1cc>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
 8003036:	e004      	b.n	8003042 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f1c3 0307 	rsb	r3, r3, #7
 800303e:	4a24      	ldr	r2, [pc, #144]	@ (80030d0 <xPortStartScheduler+0x1cc>)
 8003040:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003042:	4b23      	ldr	r3, [pc, #140]	@ (80030d0 <xPortStartScheduler+0x1cc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	021b      	lsls	r3, r3, #8
 8003048:	4a21      	ldr	r2, [pc, #132]	@ (80030d0 <xPortStartScheduler+0x1cc>)
 800304a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800304c:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <xPortStartScheduler+0x1cc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003054:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <xPortStartScheduler+0x1cc>)
 8003056:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	b2da      	uxtb	r2, r3
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003060:	4b1c      	ldr	r3, [pc, #112]	@ (80030d4 <xPortStartScheduler+0x1d0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1b      	ldr	r2, [pc, #108]	@ (80030d4 <xPortStartScheduler+0x1d0>)
 8003066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800306a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800306c:	4b19      	ldr	r3, [pc, #100]	@ (80030d4 <xPortStartScheduler+0x1d0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	@ (80030d4 <xPortStartScheduler+0x1d0>)
 8003072:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003076:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003078:	4b17      	ldr	r3, [pc, #92]	@ (80030d8 <xPortStartScheduler+0x1d4>)
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800307e:	f000 f96d 	bl	800335c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003082:	4b16      	ldr	r3, [pc, #88]	@ (80030dc <xPortStartScheduler+0x1d8>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003088:	f000 f98c 	bl	80033a4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800308c:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <xPortStartScheduler+0x1dc>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a13      	ldr	r2, [pc, #76]	@ (80030e0 <xPortStartScheduler+0x1dc>)
 8003092:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003096:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003098:	f7ff ff1e 	bl	8002ed8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800309c:	f7ff fd8a 	bl	8002bb4 <vTaskSwitchContext>
    prvTaskExitError();
 80030a0:	f7ff fed4 	bl	8002e4c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3730      	adds	r7, #48	@ 0x30
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00
 80030b4:	410fc271 	.word	0x410fc271
 80030b8:	410fc270 	.word	0x410fc270
 80030bc:	e000ed08 	.word	0xe000ed08
 80030c0:	08002eb1 	.word	0x08002eb1
 80030c4:	080032a1 	.word	0x080032a1
 80030c8:	e000e400 	.word	0xe000e400
 80030cc:	200001d8 	.word	0x200001d8
 80030d0:	200001dc 	.word	0x200001dc
 80030d4:	e000ed20 	.word	0xe000ed20
 80030d8:	e000ed1c 	.word	0xe000ed1c
 80030dc:	2000000c 	.word	0x2000000c
 80030e0:	e000ef34 	.word	0xe000ef34

080030e4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80030ea:	4b38      	ldr	r3, [pc, #224]	@ (80031cc <vInitPrioGroupValue+0xe8>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a38      	ldr	r2, [pc, #224]	@ (80031d0 <vInitPrioGroupValue+0xec>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10b      	bne.n	800310c <vInitPrioGroupValue+0x28>
    __asm volatile
 80030f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030f8:	f383 8811 	msr	BASEPRI, r3
 80030fc:	f3bf 8f6f 	isb	sy
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	60fb      	str	r3, [r7, #12]
}
 8003106:	bf00      	nop
 8003108:	bf00      	nop
 800310a:	e7fd      	b.n	8003108 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800310c:	4b2f      	ldr	r3, [pc, #188]	@ (80031cc <vInitPrioGroupValue+0xe8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a30      	ldr	r2, [pc, #192]	@ (80031d4 <vInitPrioGroupValue+0xf0>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d10b      	bne.n	800312e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	613b      	str	r3, [r7, #16]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800312e:	4b2a      	ldr	r3, [pc, #168]	@ (80031d8 <vInitPrioGroupValue+0xf4>)
 8003130:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	22ff      	movs	r2, #255	@ 0xff
 800313e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	b2db      	uxtb	r3, r3
 800314c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4b22      	ldr	r3, [pc, #136]	@ (80031dc <vInitPrioGroupValue+0xf8>)
 8003154:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003156:	4b22      	ldr	r3, [pc, #136]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 8003158:	2207      	movs	r2, #7
 800315a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800315c:	e009      	b.n	8003172 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800315e:	4b20      	ldr	r3, [pc, #128]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3b01      	subs	r3, #1
 8003164:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 8003166:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	b2db      	uxtb	r3, r3
 8003170:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003172:	78fb      	ldrb	r3, [r7, #3]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317a:	2b80      	cmp	r3, #128	@ 0x80
 800317c:	d0ef      	beq.n	800315e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800317e:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1c3 0307 	rsb	r3, r3, #7
 8003186:	2b04      	cmp	r3, #4
 8003188:	d00b      	beq.n	80031a2 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800318a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	60bb      	str	r3, [r7, #8]
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop
 80031a0:	e7fd      	b.n	800319e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031a2:	4b0f      	ldr	r3, [pc, #60]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	021b      	lsls	r3, r3, #8
 80031a8:	4a0d      	ldr	r2, [pc, #52]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 80031aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80031b4:	4a0a      	ldr	r2, [pc, #40]	@ (80031e0 <vInitPrioGroupValue+0xfc>)
 80031b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00
 80031d0:	410fc271 	.word	0x410fc271
 80031d4:	410fc270 	.word	0x410fc270
 80031d8:	e000e400 	.word	0xe000e400
 80031dc:	200001d8 	.word	0x200001d8
 80031e0:	200001dc 	.word	0x200001dc

080031e4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
    __asm volatile
 80031ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f3bf 8f6f 	isb	sy
 80031f6:	f3bf 8f4f 	dsb	sy
 80031fa:	607b      	str	r3, [r7, #4]
}
 80031fc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80031fe:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <vPortEnterCritical+0x5c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3301      	adds	r3, #1
 8003204:	4a0e      	ldr	r2, [pc, #56]	@ (8003240 <vPortEnterCritical+0x5c>)
 8003206:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003208:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <vPortEnterCritical+0x5c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d110      	bne.n	8003232 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003210:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <vPortEnterCritical+0x60>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <vPortEnterCritical+0x4e>
    __asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	603b      	str	r3, [r7, #0]
}
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	e7fd      	b.n	800322e <vPortEnterCritical+0x4a>
    }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	2000000c 	.word	0x2000000c
 8003244:	e000ed04 	.word	0xe000ed04

08003248 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800324e:	4b12      	ldr	r3, [pc, #72]	@ (8003298 <vPortExitCritical+0x50>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <vPortExitCritical+0x26>
    __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	607b      	str	r3, [r7, #4]
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <vPortExitCritical+0x50>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3b01      	subs	r3, #1
 8003274:	4a08      	ldr	r2, [pc, #32]	@ (8003298 <vPortExitCritical+0x50>)
 8003276:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003278:	4b07      	ldr	r3, [pc, #28]	@ (8003298 <vPortExitCritical+0x50>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <vPortExitCritical+0x44>
 8003280:	2300      	movs	r3, #0
 8003282:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800328a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	2000000c 	.word	0x2000000c
 800329c:	00000000 	.word	0x00000000

080032a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80032a0:	f3ef 8009 	mrs	r0, PSP
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	4b15      	ldr	r3, [pc, #84]	@ (8003300 <pxCurrentTCBConst>)
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f01e 0f10 	tst.w	lr, #16
 80032b0:	bf08      	it	eq
 80032b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80032b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80032c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80032c4:	f380 8811 	msr	BASEPRI, r0
 80032c8:	f3bf 8f4f 	dsb	sy
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f7ff fc70 	bl	8002bb4 <vTaskSwitchContext>
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f380 8811 	msr	BASEPRI, r0
 80032dc:	bc09      	pop	{r0, r3}
 80032de:	6819      	ldr	r1, [r3, #0]
 80032e0:	6808      	ldr	r0, [r1, #0]
 80032e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e6:	f01e 0f10 	tst.w	lr, #16
 80032ea:	bf08      	it	eq
 80032ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80032f0:	f380 8809 	msr	PSP, r0
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	f3af 8000 	nop.w

08003300 <pxCurrentTCBConst>:
 8003300:	200000d4 	.word	0x200000d4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003304:	bf00      	nop
 8003306:	bf00      	nop

08003308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
    __asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	607b      	str	r3, [r7, #4]
}
 8003320:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003322:	f001 fd95 	bl	8004e50 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003326:	f7ff fb4b 	bl	80029c0 <xTaskIncrementTick>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d006      	beq.n	800333e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003330:	f001 fdec 	bl	8004f0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003334:	4b08      	ldr	r3, [pc, #32]	@ (8003358 <SysTick_Handler+0x50>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e001      	b.n	8003342 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800333e:	f001 fdc9 	bl	8004ed4 <SEGGER_SYSVIEW_RecordExitISR>
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f383 8811 	msr	BASEPRI, r3
}
 800334c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000ed04 	.word	0xe000ed04

0800335c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <vPortSetupTimerInterrupt+0x34>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003366:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <vPortSetupTimerInterrupt+0x38>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800336c:	4b0a      	ldr	r3, [pc, #40]	@ (8003398 <vPortSetupTimerInterrupt+0x3c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <vPortSetupTimerInterrupt+0x40>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	4a09      	ldr	r2, [pc, #36]	@ (80033a0 <vPortSetupTimerInterrupt+0x44>)
 800337a:	3b01      	subs	r3, #1
 800337c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800337e:	4b04      	ldr	r3, [pc, #16]	@ (8003390 <vPortSetupTimerInterrupt+0x34>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010
 8003394:	e000e018 	.word	0xe000e018
 8003398:	20000000 	.word	0x20000000
 800339c:	10624dd3 	.word	0x10624dd3
 80033a0:	e000e014 	.word	0xe000e014

080033a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80033a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80033b4 <vPortEnableVFP+0x10>
 80033a8:	6801      	ldr	r1, [r0, #0]
 80033aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80033ae:	6001      	str	r1, [r0, #0]
 80033b0:	4770      	bx	lr
 80033b2:	0000      	.short	0x0000
 80033b4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80033b8:	bf00      	nop
 80033ba:	bf00      	nop

080033bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80033c2:	f3ef 8305 	mrs	r3, IPSR
 80033c6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	d915      	bls.n	80033fa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80033ce:	4a18      	ldr	r2, [pc, #96]	@ (8003430 <vPortValidateInterruptPriority+0x74>)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4413      	add	r3, r2
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80033d8:	4b16      	ldr	r3, [pc, #88]	@ (8003434 <vPortValidateInterruptPriority+0x78>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	7afa      	ldrb	r2, [r7, #11]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d20b      	bcs.n	80033fa <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	607b      	str	r3, [r7, #4]
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	e7fd      	b.n	80033f6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80033fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003438 <vPortValidateInterruptPriority+0x7c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003402:	4b0e      	ldr	r3, [pc, #56]	@ (800343c <vPortValidateInterruptPriority+0x80>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d90b      	bls.n	8003422 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	603b      	str	r3, [r7, #0]
}
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <vPortValidateInterruptPriority+0x62>
    }
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000e3f0 	.word	0xe000e3f0
 8003434:	200001d8 	.word	0x200001d8
 8003438:	e000ed0c 	.word	0xe000ed0c
 800343c:	200001dc 	.word	0x200001dc

08003440 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b08e      	sub	sp, #56	@ 0x38
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d022      	beq.n	8003498 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003452:	2308      	movs	r3, #8
 8003454:	43db      	mvns	r3, r3
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	429a      	cmp	r2, r3
 800345a:	d81b      	bhi.n	8003494 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800345c:	2208      	movs	r2, #8
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4413      	add	r3, r2
 8003462:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	2b00      	cmp	r3, #0
 800346c:	d014      	beq.n	8003498 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	f1c3 0308 	rsb	r3, r3, #8
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	43db      	mvns	r3, r3
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d804      	bhi.n	800348e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003488:	4413      	add	r3, r2
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	e004      	b.n	8003498 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
 8003492:	e001      	b.n	8003498 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003498:	f7ff f976 	bl	8002788 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800349c:	4b7a      	ldr	r3, [pc, #488]	@ (8003688 <pvPortMalloc+0x248>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80034a4:	f000 f974 	bl	8003790 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f2c0 80d3 	blt.w	8003656 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80cf 	beq.w	8003656 <pvPortMalloc+0x216>
 80034b8:	4b74      	ldr	r3, [pc, #464]	@ (800368c <pvPortMalloc+0x24c>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	f200 80c9 	bhi.w	8003656 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80034c4:	4b72      	ldr	r3, [pc, #456]	@ (8003690 <pvPortMalloc+0x250>)
 80034c6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80034c8:	4b71      	ldr	r3, [pc, #452]	@ (8003690 <pvPortMalloc+0x250>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80034ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d0:	4a70      	ldr	r2, [pc, #448]	@ (8003694 <pvPortMalloc+0x254>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d305      	bcc.n	80034e2 <pvPortMalloc+0xa2>
 80034d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d8:	4a6f      	ldr	r2, [pc, #444]	@ (8003698 <pvPortMalloc+0x258>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d801      	bhi.n	80034e2 <pvPortMalloc+0xa2>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <pvPortMalloc+0xa4>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d129      	bne.n	800353c <pvPortMalloc+0xfc>
    __asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	623b      	str	r3, [r7, #32]
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003502:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800350a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350c:	4a61      	ldr	r2, [pc, #388]	@ (8003694 <pvPortMalloc+0x254>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d305      	bcc.n	800351e <pvPortMalloc+0xde>
 8003512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003514:	4a60      	ldr	r2, [pc, #384]	@ (8003698 <pvPortMalloc+0x258>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d801      	bhi.n	800351e <pvPortMalloc+0xde>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <pvPortMalloc+0xe0>
 800351e:	2300      	movs	r3, #0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10b      	bne.n	800353c <pvPortMalloc+0xfc>
    __asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	61fb      	str	r3, [r7, #28]
}
 8003536:	bf00      	nop
 8003538:	bf00      	nop
 800353a:	e7fd      	b.n	8003538 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800353c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	429a      	cmp	r2, r3
 8003544:	d903      	bls.n	800354e <pvPortMalloc+0x10e>
 8003546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1d8      	bne.n	8003500 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800354e:	4b4e      	ldr	r3, [pc, #312]	@ (8003688 <pvPortMalloc+0x248>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003554:	429a      	cmp	r2, r3
 8003556:	d07e      	beq.n	8003656 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2208      	movs	r2, #8
 800355e:	4413      	add	r3, r2
 8003560:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003564:	4a4b      	ldr	r2, [pc, #300]	@ (8003694 <pvPortMalloc+0x254>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d305      	bcc.n	8003576 <pvPortMalloc+0x136>
 800356a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800356c:	4a4a      	ldr	r2, [pc, #296]	@ (8003698 <pvPortMalloc+0x258>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d801      	bhi.n	8003576 <pvPortMalloc+0x136>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <pvPortMalloc+0x138>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <pvPortMalloc+0x154>
    __asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	61bb      	str	r3, [r7, #24]
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800359c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d90b      	bls.n	80035be <pvPortMalloc+0x17e>
    __asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	617b      	str	r3, [r7, #20]
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	e7fd      	b.n	80035ba <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80035be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	1ad2      	subs	r2, r2, r3
 80035c6:	2308      	movs	r3, #8
 80035c8:	005b      	lsls	r3, r3, #1
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d924      	bls.n	8003618 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80035ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4413      	add	r3, r2
 80035d4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	f003 0307 	and.w	r3, r3, #7
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <pvPortMalloc+0x1b8>
    __asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	613b      	str	r3, [r7, #16]
}
 80035f2:	bf00      	nop
 80035f4:	bf00      	nop
 80035f6:	e7fd      	b.n	80035f4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80035f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	1ad2      	subs	r2, r2, r3
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800360a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003616:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003618:	4b1c      	ldr	r3, [pc, #112]	@ (800368c <pvPortMalloc+0x24c>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	4a1a      	ldr	r2, [pc, #104]	@ (800368c <pvPortMalloc+0x24c>)
 8003624:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003626:	4b19      	ldr	r3, [pc, #100]	@ (800368c <pvPortMalloc+0x24c>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b1c      	ldr	r3, [pc, #112]	@ (800369c <pvPortMalloc+0x25c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d203      	bcs.n	800363a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003632:	4b16      	ldr	r3, [pc, #88]	@ (800368c <pvPortMalloc+0x24c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a19      	ldr	r2, [pc, #100]	@ (800369c <pvPortMalloc+0x25c>)
 8003638:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800363a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003644:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800364c:	4b14      	ldr	r3, [pc, #80]	@ (80036a0 <pvPortMalloc+0x260>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a13      	ldr	r2, [pc, #76]	@ (80036a0 <pvPortMalloc+0x260>)
 8003654:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003656:	f7ff f8a5 	bl	80027a4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800365a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00b      	beq.n	800367c <pvPortMalloc+0x23c>
    __asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	60fb      	str	r3, [r7, #12]
}
 8003676:	bf00      	nop
 8003678:	bf00      	nop
 800367a:	e7fd      	b.n	8003678 <pvPortMalloc+0x238>
    return pvReturn;
 800367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800367e:	4618      	mov	r0, r3
 8003680:	3738      	adds	r7, #56	@ 0x38
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	200191e8 	.word	0x200191e8
 800368c:	200191ec 	.word	0x200191ec
 8003690:	200191e0 	.word	0x200191e0
 8003694:	200001e0 	.word	0x200001e0
 8003698:	200191df 	.word	0x200191df
 800369c:	200191f0 	.word	0x200191f0
 80036a0:	200191f4 	.word	0x200191f4

080036a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d060      	beq.n	8003778 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80036b6:	2308      	movs	r3, #8
 80036b8:	425b      	negs	r3, r3
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	4413      	add	r3, r2
 80036be:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	4a2e      	ldr	r2, [pc, #184]	@ (8003780 <vPortFree+0xdc>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d305      	bcc.n	80036d8 <vPortFree+0x34>
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <vPortFree+0xe0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d801      	bhi.n	80036d8 <vPortFree+0x34>
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <vPortFree+0x36>
 80036d8:	2300      	movs	r3, #0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10b      	bne.n	80036f6 <vPortFree+0x52>
    __asm volatile
 80036de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e2:	f383 8811 	msr	BASEPRI, r3
 80036e6:	f3bf 8f6f 	isb	sy
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	617b      	str	r3, [r7, #20]
}
 80036f0:	bf00      	nop
 80036f2:	bf00      	nop
 80036f4:	e7fd      	b.n	80036f2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	db0b      	blt.n	8003716 <vPortFree+0x72>
    __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	613b      	str	r3, [r7, #16]
}
 8003710:	bf00      	nop
 8003712:	bf00      	nop
 8003714:	e7fd      	b.n	8003712 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <vPortFree+0x92>
    __asm volatile
 800371e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003722:	f383 8811 	msr	BASEPRI, r3
 8003726:	f3bf 8f6f 	isb	sy
 800372a:	f3bf 8f4f 	dsb	sy
 800372e:	60fb      	str	r3, [r7, #12]
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	e7fd      	b.n	8003732 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	da1c      	bge.n	8003778 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d118      	bne.n	8003778 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003752:	f7ff f819 	bl	8002788 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <vPortFree+0xe4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4413      	add	r3, r2
 8003760:	4a09      	ldr	r2, [pc, #36]	@ (8003788 <vPortFree+0xe4>)
 8003762:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003764:	69b8      	ldr	r0, [r7, #24]
 8003766:	f000 f86d 	bl	8003844 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800376a:	4b08      	ldr	r3, [pc, #32]	@ (800378c <vPortFree+0xe8>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	4a06      	ldr	r2, [pc, #24]	@ (800378c <vPortFree+0xe8>)
 8003772:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003774:	f7ff f816 	bl	80027a4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003778:	bf00      	nop
 800377a:	3720      	adds	r7, #32
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	200001e0 	.word	0x200001e0
 8003784:	200191df 	.word	0x200191df
 8003788:	200191ec 	.word	0x200191ec
 800378c:	200191f8 	.word	0x200191f8

08003790 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003796:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800379a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800379c:	4b24      	ldr	r3, [pc, #144]	@ (8003830 <prvHeapInit+0xa0>)
 800379e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00c      	beq.n	80037c4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3307      	adds	r3, #7
 80037ae:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f023 0307 	bic.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	4a1c      	ldr	r2, [pc, #112]	@ (8003830 <prvHeapInit+0xa0>)
 80037c0:	4413      	add	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003834 <prvHeapInit+0xa4>)
 80037c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80037ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003834 <prvHeapInit+0xa4>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4413      	add	r3, r2
 80037d6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80037d8:	2208      	movs	r2, #8
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a13      	ldr	r2, [pc, #76]	@ (8003838 <prvHeapInit+0xa8>)
 80037ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80037ee:	4b12      	ldr	r3, [pc, #72]	@ (8003838 <prvHeapInit+0xa8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2200      	movs	r2, #0
 80037f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80037f6:	4b10      	ldr	r3, [pc, #64]	@ (8003838 <prvHeapInit+0xa8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2200      	movs	r2, #0
 80037fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	1ad2      	subs	r2, r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800380c:	4b0a      	ldr	r3, [pc, #40]	@ (8003838 <prvHeapInit+0xa8>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	4a08      	ldr	r2, [pc, #32]	@ (800383c <prvHeapInit+0xac>)
 800381a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a07      	ldr	r2, [pc, #28]	@ (8003840 <prvHeapInit+0xb0>)
 8003822:	6013      	str	r3, [r2, #0]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	200001e0 	.word	0x200001e0
 8003834:	200191e0 	.word	0x200191e0
 8003838:	200191e8 	.word	0x200191e8
 800383c:	200191f0 	.word	0x200191f0
 8003840:	200191ec 	.word	0x200191ec

08003844 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003844:	b480      	push	{r7}
 8003846:	b087      	sub	sp, #28
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800384c:	4b36      	ldr	r3, [pc, #216]	@ (8003928 <prvInsertBlockIntoFreeList+0xe4>)
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	e002      	b.n	8003858 <prvInsertBlockIntoFreeList+0x14>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d8f7      	bhi.n	8003852 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	4a30      	ldr	r2, [pc, #192]	@ (8003928 <prvInsertBlockIntoFreeList+0xe4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d018      	beq.n	800389c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4a2f      	ldr	r2, [pc, #188]	@ (800392c <prvInsertBlockIntoFreeList+0xe8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d305      	bcc.n	800387e <prvInsertBlockIntoFreeList+0x3a>
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	4a2e      	ldr	r2, [pc, #184]	@ (8003930 <prvInsertBlockIntoFreeList+0xec>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d801      	bhi.n	800387e <prvInsertBlockIntoFreeList+0x3a>
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <prvInsertBlockIntoFreeList+0x3c>
 800387e:	2300      	movs	r3, #0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	60fb      	str	r3, [r7, #12]
}
 8003896:	bf00      	nop
 8003898:	bf00      	nop
 800389a:	e7fd      	b.n	8003898 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d108      	bne.n	80038c0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	441a      	add	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	441a      	add	r2, r3
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d118      	bne.n	8003906 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	4b16      	ldr	r3, [pc, #88]	@ (8003934 <prvInsertBlockIntoFreeList+0xf0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d00d      	beq.n	80038fc <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	441a      	add	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e008      	b.n	800390e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80038fc:	4b0d      	ldr	r3, [pc, #52]	@ (8003934 <prvInsertBlockIntoFreeList+0xf0>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e003      	b.n	800390e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d002      	beq.n	800391c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	200191e0 	.word	0x200191e0
 800392c:	200001e0 	.word	0x200001e0
 8003930:	200191df 	.word	0x200191df
 8003934:	200191e8 	.word	0x200191e8

08003938 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800393c:	4803      	ldr	r0, [pc, #12]	@ (800394c <_cbSendSystemDesc+0x14>)
 800393e:	f001 fa31 	bl	8004da4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003942:	4803      	ldr	r0, [pc, #12]	@ (8003950 <_cbSendSystemDesc+0x18>)
 8003944:	f001 fa2e 	bl	8004da4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	08005d90 	.word	0x08005d90
 8003950:	08005dcc 	.word	0x08005dcc

08003954 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <SEGGER_SYSVIEW_Conf+0x20>)
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	4b05      	ldr	r3, [pc, #20]	@ (8003974 <SEGGER_SYSVIEW_Conf+0x20>)
 800395e:	6819      	ldr	r1, [r3, #0]
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <SEGGER_SYSVIEW_Conf+0x24>)
 8003962:	4a06      	ldr	r2, [pc, #24]	@ (800397c <SEGGER_SYSVIEW_Conf+0x28>)
 8003964:	f000 fea4 	bl	80046b0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003968:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800396c:	f000 fee4 	bl	8004738 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000000 	.word	0x20000000
 8003978:	08003939 	.word	0x08003939
 800397c:	08005e6c 	.word	0x08005e6c

08003980 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003982:	b085      	sub	sp, #20
 8003984:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	e033      	b.n	80039f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800398c:	491e      	ldr	r1, [pc, #120]	@ (8003a08 <_cbSendTaskList+0x88>)
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	491a      	ldr	r1, [pc, #104]	@ (8003a08 <_cbSendTaskList+0x88>)
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	3304      	adds	r3, #4
 80039ac:	6819      	ldr	r1, [r3, #0]
 80039ae:	4c16      	ldr	r4, [pc, #88]	@ (8003a08 <_cbSendTaskList+0x88>)
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4423      	add	r3, r4
 80039bc:	3308      	adds	r3, #8
 80039be:	681c      	ldr	r4, [r3, #0]
 80039c0:	4d11      	ldr	r5, [pc, #68]	@ (8003a08 <_cbSendTaskList+0x88>)
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	442b      	add	r3, r5
 80039ce:	330c      	adds	r3, #12
 80039d0:	681d      	ldr	r5, [r3, #0]
 80039d2:	4e0d      	ldr	r6, [pc, #52]	@ (8003a08 <_cbSendTaskList+0x88>)
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4433      	add	r3, r6
 80039e0:	3310      	adds	r3, #16
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	462b      	mov	r3, r5
 80039e8:	4622      	mov	r2, r4
 80039ea:	f000 f8bd 	bl	8003b68 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3301      	adds	r3, #1
 80039f2:	607b      	str	r3, [r7, #4]
 80039f4:	4b05      	ldr	r3, [pc, #20]	@ (8003a0c <_cbSendTaskList+0x8c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d3c6      	bcc.n	800398c <_cbSendTaskList+0xc>
  }
}
 80039fe:	bf00      	nop
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a08:	200191fc 	.word	0x200191fc
 8003a0c:	2001929c 	.word	0x2001929c

08003a10 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003a18:	f7fe ffc0 	bl	800299c <xTaskGetTickCountFromISR>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2200      	movs	r2, #0
 8003a20:	469a      	mov	sl, r3
 8003a22:	4693      	mov	fp, r2
 8003a24:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	f04f 0a00 	mov.w	sl, #0
 8003a34:	f04f 0b00 	mov.w	fp, #0
 8003a38:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003a3c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003a40:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003a44:	4652      	mov	r2, sl
 8003a46:	465b      	mov	r3, fp
 8003a48:	1a14      	subs	r4, r2, r0
 8003a4a:	eb63 0501 	sbc.w	r5, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	00ab      	lsls	r3, r5, #2
 8003a58:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003a5c:	00a2      	lsls	r2, r4, #2
 8003a5e:	4614      	mov	r4, r2
 8003a60:	461d      	mov	r5, r3
 8003a62:	eb14 0800 	adds.w	r8, r4, r0
 8003a66:	eb45 0901 	adc.w	r9, r5, r1
 8003a6a:	f04f 0200 	mov.w	r2, #0
 8003a6e:	f04f 0300 	mov.w	r3, #0
 8003a72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a7e:	4690      	mov	r8, r2
 8003a80:	4699      	mov	r9, r3
 8003a82:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003a86:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003a98 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003aa6:	2205      	movs	r2, #5
 8003aa8:	492b      	ldr	r1, [pc, #172]	@ (8003b58 <SYSVIEW_AddTask+0xc0>)
 8003aaa:	68b8      	ldr	r0, [r7, #8]
 8003aac:	f001 fe78 	bl	80057a0 <memcmp>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d04b      	beq.n	8003b4e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003ab6:	4b29      	ldr	r3, [pc, #164]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b07      	cmp	r3, #7
 8003abc:	d903      	bls.n	8003ac6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003abe:	4828      	ldr	r0, [pc, #160]	@ (8003b60 <SYSVIEW_AddTask+0xc8>)
 8003ac0:	f001 fc08 	bl	80052d4 <SEGGER_SYSVIEW_Warn>
    return;
 8003ac4:	e044      	b.n	8003b50 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003ac6:	4b25      	ldr	r3, [pc, #148]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	4926      	ldr	r1, [pc, #152]	@ (8003b64 <SYSVIEW_AddTask+0xcc>)
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003ada:	4b20      	ldr	r3, [pc, #128]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	4921      	ldr	r1, [pc, #132]	@ (8003b64 <SYSVIEW_AddTask+0xcc>)
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	3304      	adds	r3, #4
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003af0:	4b1a      	ldr	r3, [pc, #104]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	491b      	ldr	r1, [pc, #108]	@ (8003b64 <SYSVIEW_AddTask+0xcc>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	3308      	adds	r3, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003b06:	4b15      	ldr	r3, [pc, #84]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4916      	ldr	r1, [pc, #88]	@ (8003b64 <SYSVIEW_AddTask+0xcc>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	330c      	adds	r3, #12
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4910      	ldr	r1, [pc, #64]	@ (8003b64 <SYSVIEW_AddTask+0xcc>)
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3310      	adds	r3, #16
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3301      	adds	r3, #1
 8003b38:	4a08      	ldr	r2, [pc, #32]	@ (8003b5c <SYSVIEW_AddTask+0xc4>)
 8003b3a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f80e 	bl	8003b68 <SYSVIEW_SendTaskInfo>
 8003b4c:	e000      	b.n	8003b50 <SYSVIEW_AddTask+0xb8>
    return;
 8003b4e:	bf00      	nop

}
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	08005ddc 	.word	0x08005ddc
 8003b5c:	2001929c 	.word	0x2001929c
 8003b60:	08005de4 	.word	0x08005de4
 8003b64:	200191fc 	.word	0x200191fc

08003b68 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	@ 0x28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003b76:	f107 0310 	add.w	r3, r7, #16
 8003b7a:	2218      	movs	r2, #24
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f001 fe1e 	bl	80057c0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b96:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003b98:	f107 0310 	add.w	r3, r7, #16
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f809 	bl	8004bb4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003ba2:	bf00      	nop
 8003ba4:	3728      	adds	r7, #40	@ 0x28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003bb2:	4b26      	ldr	r3, [pc, #152]	@ (8003c4c <_DoInit+0xa0>)
 8003bb4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003bb6:	22a8      	movs	r2, #168	@ 0xa8
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6838      	ldr	r0, [r7, #0]
 8003bbc:	f001 fe00 	bl	80057c0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4a20      	ldr	r2, [pc, #128]	@ (8003c50 <_DoInit+0xa4>)
 8003bd0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c54 <_DoInit+0xa8>)
 8003bd6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bde:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2200      	movs	r2, #0
 8003be4:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	2200      	movs	r2, #0
 8003bea:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <_DoInit+0xa4>)
 8003bf6:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	4a17      	ldr	r2, [pc, #92]	@ (8003c58 <_DoInit+0xac>)
 8003bfc:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2210      	movs	r2, #16
 8003c02:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c16:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	e00c      	b.n	8003c3a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f1c3 030f 	rsb	r3, r3, #15
 8003c26:	4a0d      	ldr	r2, [pc, #52]	@ (8003c5c <_DoInit+0xb0>)
 8003c28:	5cd1      	ldrb	r1, [r2, r3]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4413      	add	r3, r2
 8003c30:	460a      	mov	r2, r1
 8003c32:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3301      	adds	r3, #1
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b0f      	cmp	r3, #15
 8003c3e:	d9ef      	bls.n	8003c20 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c40:	f3bf 8f5f 	dmb	sy
}
 8003c44:	bf00      	nop
 8003c46:	3708      	adds	r7, #8
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	200192a0 	.word	0x200192a0
 8003c50:	08005e34 	.word	0x08005e34
 8003c54:	20019348 	.word	0x20019348
 8003c58:	20019748 	.word	0x20019748
 8003c5c:	08005e74 	.word	0x08005e74

08003c60 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	@ 0x28
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d905      	bls.n	8003c90 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c8e:	e007      	b.n	8003ca0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	69b9      	ldr	r1, [r7, #24]
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	1acb      	subs	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003caa:	4293      	cmp	r3, r2
 8003cac:	bf28      	it	cs
 8003cae:	4613      	movcs	r3, r2
 8003cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	bf28      	it	cs
 8003cba:	4613      	movcs	r3, r2
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cca:	68b9      	ldr	r1, [r7, #8]
 8003ccc:	6978      	ldr	r0, [r7, #20]
 8003cce:	f001 fdda 	bl	8005886 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8003cd2:	6a3a      	ldr	r2, [r7, #32]
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	4413      	add	r3, r2
 8003cd8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	4413      	add	r3, r2
 8003ce0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cee:	4413      	add	r3, r2
 8003cf0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d101      	bne.n	8003d00 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	69fa      	ldr	r2, [r7, #28]
 8003d08:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1b2      	bne.n	8003c76 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8003d10:	6a3b      	ldr	r3, [r7, #32]
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3728      	adds	r7, #40	@ 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b088      	sub	sp, #32
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d911      	bls.n	8003d62 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68b9      	ldr	r1, [r7, #8]
 8003d4c:	6938      	ldr	r0, [r7, #16]
 8003d4e:	f001 fd9a 	bl	8005886 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d52:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	441a      	add	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8003d60:	e01f      	b.n	8003da2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8003d70:	697a      	ldr	r2, [r7, #20]
 8003d72:	68b9      	ldr	r1, [r7, #8]
 8003d74:	6938      	ldr	r0, [r7, #16]
 8003d76:	f001 fd86 	bl	8005886 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	4619      	mov	r1, r3
 8003d92:	6938      	ldr	r0, [r7, #16]
 8003d94:	f001 fd77 	bl	8005886 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d98:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	60da      	str	r2, [r3, #12]
}
 8003da2:	bf00      	nop
 8003da4:	3720      	adds	r7, #32
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003daa:	b480      	push	{r7}
 8003dac:	b087      	sub	sp, #28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d808      	bhi.n	8003dd8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689a      	ldr	r2, [r3, #8]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad2      	subs	r2, r2, r3
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e004      	b.n	8003de2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	3b01      	subs	r3, #1
 8003de0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8003de2:	697b      	ldr	r3, [r7, #20]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08c      	sub	sp, #48	@ 0x30
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ef8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003dfe:	623b      	str	r3, [r7, #32]
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b53      	cmp	r3, #83	@ 0x53
 8003e08:	d001      	beq.n	8003e0e <SEGGER_RTT_ReadNoLock+0x1e>
 8003e0a:	f7ff fecf 	bl	8003bac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	4613      	mov	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	3360      	adds	r3, #96	@ 0x60
 8003e1a:	4a37      	ldr	r2, [pc, #220]	@ (8003ef8 <SEGGER_RTT_ReadNoLock+0x108>)
 8003e1c:	4413      	add	r3, r2
 8003e1e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003e30:	2300      	movs	r3, #0
 8003e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003e34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d92b      	bls.n	8003e94 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	bf28      	it	cs
 8003e4e:	4613      	movcs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e58:	4413      	add	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	6939      	ldr	r1, [r7, #16]
 8003e60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e62:	f001 fd10 	bl	8005886 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	4413      	add	r3, r2
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	4413      	add	r3, r2
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d101      	bne.n	8003e94 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e90:	2300      	movs	r3, #0
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	bf28      	it	cs
 8003ea4:	4613      	movcs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d019      	beq.n	8003ee2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb4:	4413      	add	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	6939      	ldr	r1, [r7, #16]
 8003ebc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ebe:	f001 fce2 	bl	8005886 <memcpy>
    NumBytesRead += NumBytesRem;
 8003ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	4413      	add	r3, r2
 8003ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003eda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	4413      	add	r3, r2
 8003ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003eec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003eee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3730      	adds	r7, #48	@ 0x30
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	200192a0 	.word	0x200192a0

08003efc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	4613      	mov	r3, r2
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4413      	add	r3, r2
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	4a1f      	ldr	r2, [pc, #124]	@ (8003f98 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003f1a:	4413      	add	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d029      	beq.n	8003f7a <SEGGER_RTT_WriteNoLock+0x7e>
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d82e      	bhi.n	8003f88 <SEGGER_RTT_WriteNoLock+0x8c>
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <SEGGER_RTT_WriteNoLock+0x38>
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d013      	beq.n	8003f5a <SEGGER_RTT_WriteNoLock+0x5e>
 8003f32:	e029      	b.n	8003f88 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f34:	6978      	ldr	r0, [r7, #20]
 8003f36:	f7ff ff38 	bl	8003daa <_GetAvailWriteSpace>
 8003f3a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d202      	bcs.n	8003f4a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003f48:	e021      	b.n	8003f8e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	69b9      	ldr	r1, [r7, #24]
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff fee1 	bl	8003d1a <_WriteNoCheck>
    break;
 8003f58:	e019      	b.n	8003f8e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff ff25 	bl	8003daa <_GetAvailWriteSpace>
 8003f60:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4293      	cmp	r3, r2
 8003f68:	bf28      	it	cs
 8003f6a:	4613      	movcs	r3, r2
 8003f6c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	69b9      	ldr	r1, [r7, #24]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff fed1 	bl	8003d1a <_WriteNoCheck>
    break;
 8003f78:	e009      	b.n	8003f8e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	69b9      	ldr	r1, [r7, #24]
 8003f7e:	6978      	ldr	r0, [r7, #20]
 8003f80:	f7ff fe6e 	bl	8003c60 <_WriteBlocking>
 8003f84:	61f8      	str	r0, [r7, #28]
    break;
 8003f86:	e002      	b.n	8003f8e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	61fb      	str	r3, [r7, #28]
    break;
 8003f8c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3720      	adds	r7, #32
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	200192a0 	.word	0x200192a0

08003f9c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8003fe4 <SEGGER_RTT_Write+0x48>)
 8003faa:	61fb      	str	r3, [r7, #28]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b53      	cmp	r3, #83	@ 0x53
 8003fb4:	d001      	beq.n	8003fba <SEGGER_RTT_Write+0x1e>
 8003fb6:	f7ff fdf9 	bl	8003bac <_DoInit>
  SEGGER_RTT_LOCK();
 8003fba:	f3ef 8311 	mrs	r3, BASEPRI
 8003fbe:	f04f 0120 	mov.w	r1, #32
 8003fc2:	f381 8811 	msr	BASEPRI, r1
 8003fc6:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff ff95 	bl	8003efc <SEGGER_RTT_WriteNoLock>
 8003fd2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003fda:	697b      	ldr	r3, [r7, #20]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	200192a0 	.word	0x200192a0

08003fe8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80040ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003ff8:	61bb      	str	r3, [r7, #24]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b53      	cmp	r3, #83	@ 0x53
 8004002:	d001      	beq.n	8004008 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004004:	f7ff fdd2 	bl	8003bac <_DoInit>
  SEGGER_RTT_LOCK();
 8004008:	f3ef 8311 	mrs	r3, BASEPRI
 800400c:	f04f 0120 	mov.w	r1, #32
 8004010:	f381 8811 	msr	BASEPRI, r1
 8004014:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004016:	4b35      	ldr	r3, [pc, #212]	@ (80040ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004018:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800401e:	6939      	ldr	r1, [r7, #16]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	440b      	add	r3, r1
 800402e:	3304      	adds	r3, #4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	3301      	adds	r3, #1
 800403a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	429a      	cmp	r2, r3
 8004044:	dbeb      	blt.n	800401e <SEGGER_RTT_AllocUpBuffer+0x36>
 8004046:	e000      	b.n	800404a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004048:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	429a      	cmp	r2, r3
 8004052:	da3f      	bge.n	80040d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004054:	6939      	ldr	r1, [r7, #16]
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	440b      	add	r3, r1
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004068:	6939      	ldr	r1, [r7, #16]
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	4613      	mov	r3, r2
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	440b      	add	r3, r1
 8004078:	3304      	adds	r3, #4
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800407e:	6939      	ldr	r1, [r7, #16]
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	440b      	add	r3, r1
 800408c:	3320      	adds	r3, #32
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004092:	6939      	ldr	r1, [r7, #16]
 8004094:	69fa      	ldr	r2, [r7, #28]
 8004096:	4613      	mov	r3, r2
 8004098:	005b      	lsls	r3, r3, #1
 800409a:	4413      	add	r3, r2
 800409c:	00db      	lsls	r3, r3, #3
 800409e:	440b      	add	r3, r1
 80040a0:	3328      	adds	r3, #40	@ 0x28
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80040a6:	6939      	ldr	r1, [r7, #16]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	440b      	add	r3, r1
 80040b4:	3324      	adds	r3, #36	@ 0x24
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	69fa      	ldr	r2, [r7, #28]
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	440b      	add	r3, r1
 80040c8:	332c      	adds	r3, #44	@ 0x2c
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80040ce:	f3bf 8f5f 	dmb	sy
 80040d2:	e002      	b.n	80040da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80040d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80040e0:	69fb      	ldr	r3, [r7, #28]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	200192a0 	.word	0x200192a0

080040f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	@ 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80040fe:	4b21      	ldr	r3, [pc, #132]	@ (8004184 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b53      	cmp	r3, #83	@ 0x53
 800410a:	d001      	beq.n	8004110 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800410c:	f7ff fd4e 	bl	8003bac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004110:	4b1c      	ldr	r3, [pc, #112]	@ (8004184 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004112:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2b02      	cmp	r3, #2
 8004118:	d82c      	bhi.n	8004174 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800411a:	f3ef 8311 	mrs	r3, BASEPRI
 800411e:	f04f 0120 	mov.w	r1, #32
 8004122:	f381 8811 	msr	BASEPRI, r1
 8004126:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	3360      	adds	r3, #96	@ 0x60
 8004134:	69fa      	ldr	r2, [r7, #28]
 8004136:	4413      	add	r3, r2
 8004138:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00e      	beq.n	800415e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	2200      	movs	r2, #0
 800415c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004162:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004164:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800416e:	2300      	movs	r3, #0
 8004170:	627b      	str	r3, [r7, #36]	@ 0x24
 8004172:	e002      	b.n	800417a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004178:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800417c:	4618      	mov	r0, r3
 800417e:	3728      	adds	r7, #40	@ 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	200192a0 	.word	0x200192a0

08004188 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004188:	b480      	push	{r7}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d105      	bne.n	80041a6 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	60fa      	str	r2, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e022      	b.n	80041ec <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1c5a      	adds	r2, r3, #1
 80041ae:	60fa      	str	r2, [r7, #12]
 80041b0:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b80      	cmp	r3, #128	@ 0x80
 80041b6:	d90a      	bls.n	80041ce <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80041b8:	2380      	movs	r3, #128	@ 0x80
 80041ba:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 80041bc:	e007      	b.n	80041ce <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	1c53      	adds	r3, r2, #1
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	60f9      	str	r1, [r7, #12]
 80041ca:	7812      	ldrb	r2, [r2, #0]
 80041cc:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	1e5a      	subs	r2, r3, #1
 80041d2:	607a      	str	r2, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <_EncodeStr+0x58>
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1ee      	bne.n	80041be <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80041ec:	68fb      	ldr	r3, [r7, #12]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	371c      	adds	r7, #28
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3307      	adds	r3, #7
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800421a:	4b34      	ldr	r3, [pc, #208]	@ (80042ec <_HandleIncomingPacket+0xd8>)
 800421c:	7e1b      	ldrb	r3, [r3, #24]
 800421e:	4618      	mov	r0, r3
 8004220:	1cfb      	adds	r3, r7, #3
 8004222:	2201      	movs	r2, #1
 8004224:	4619      	mov	r1, r3
 8004226:	f7ff fde3 	bl	8003df0 <SEGGER_RTT_ReadNoLock>
 800422a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d057      	beq.n	80042e2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	2b80      	cmp	r3, #128	@ 0x80
 8004236:	d031      	beq.n	800429c <_HandleIncomingPacket+0x88>
 8004238:	2b80      	cmp	r3, #128	@ 0x80
 800423a:	dc40      	bgt.n	80042be <_HandleIncomingPacket+0xaa>
 800423c:	2b07      	cmp	r3, #7
 800423e:	dc15      	bgt.n	800426c <_HandleIncomingPacket+0x58>
 8004240:	2b00      	cmp	r3, #0
 8004242:	dd3c      	ble.n	80042be <_HandleIncomingPacket+0xaa>
 8004244:	3b01      	subs	r3, #1
 8004246:	2b06      	cmp	r3, #6
 8004248:	d839      	bhi.n	80042be <_HandleIncomingPacket+0xaa>
 800424a:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <_HandleIncomingPacket+0x3c>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004273 	.word	0x08004273
 8004254:	08004279 	.word	0x08004279
 8004258:	0800427f 	.word	0x0800427f
 800425c:	08004285 	.word	0x08004285
 8004260:	0800428b 	.word	0x0800428b
 8004264:	08004291 	.word	0x08004291
 8004268:	08004297 	.word	0x08004297
 800426c:	2b7f      	cmp	r3, #127	@ 0x7f
 800426e:	d033      	beq.n	80042d8 <_HandleIncomingPacket+0xc4>
 8004270:	e025      	b.n	80042be <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004272:	f000 fb25 	bl	80048c0 <SEGGER_SYSVIEW_Start>
      break;
 8004276:	e034      	b.n	80042e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004278:	f000 fbdc 	bl	8004a34 <SEGGER_SYSVIEW_Stop>
      break;
 800427c:	e031      	b.n	80042e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800427e:	f000 fdb5 	bl	8004dec <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004282:	e02e      	b.n	80042e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004284:	f000 fd7a 	bl	8004d7c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004288:	e02b      	b.n	80042e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800428a:	f000 fbf9 	bl	8004a80 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800428e:	e028      	b.n	80042e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004290:	f000 ffe2 	bl	8005258 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004294:	e025      	b.n	80042e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004296:	f000 ffc1 	bl	800521c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800429a:	e022      	b.n	80042e2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800429c:	4b13      	ldr	r3, [pc, #76]	@ (80042ec <_HandleIncomingPacket+0xd8>)
 800429e:	7e1b      	ldrb	r3, [r3, #24]
 80042a0:	4618      	mov	r0, r3
 80042a2:	1cfb      	adds	r3, r7, #3
 80042a4:	2201      	movs	r2, #1
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7ff fda2 	bl	8003df0 <SEGGER_RTT_ReadNoLock>
 80042ac:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d013      	beq.n	80042dc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 ff26 	bl	8005108 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80042bc:	e00e      	b.n	80042dc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	b25b      	sxtb	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da0c      	bge.n	80042e0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042c6:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <_HandleIncomingPacket+0xd8>)
 80042c8:	7e1b      	ldrb	r3, [r3, #24]
 80042ca:	4618      	mov	r0, r3
 80042cc:	1cfb      	adds	r3, r7, #3
 80042ce:	2201      	movs	r2, #1
 80042d0:	4619      	mov	r1, r3
 80042d2:	f7ff fd8d 	bl	8003df0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80042d6:	e003      	b.n	80042e0 <_HandleIncomingPacket+0xcc>
      break;
 80042d8:	bf00      	nop
 80042da:	e002      	b.n	80042e2 <_HandleIncomingPacket+0xce>
      break;
 80042dc:	bf00      	nop
 80042de:	e000      	b.n	80042e2 <_HandleIncomingPacket+0xce>
      break;
 80042e0:	bf00      	nop
    }
  }
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	2001a760 	.word	0x2001a760

080042f0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08c      	sub	sp, #48	@ 0x30
 80042f4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80042f6:	2301      	movs	r3, #1
 80042f8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80042fa:	1d3b      	adds	r3, r7, #4
 80042fc:	3301      	adds	r3, #1
 80042fe:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004304:	4b31      	ldr	r3, [pc, #196]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800430a:	e00b      	b.n	8004324 <_TrySendOverflowPacket+0x34>
 800430c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430e:	b2da      	uxtb	r2, r3
 8004310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004316:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004320:	09db      	lsrs	r3, r3, #7
 8004322:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004326:	2b7f      	cmp	r3, #127	@ 0x7f
 8004328:	d8f0      	bhi.n	800430c <_TrySendOverflowPacket+0x1c>
 800432a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004330:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800433a:	4b25      	ldr	r3, [pc, #148]	@ (80043d0 <_TrySendOverflowPacket+0xe0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004340:	4b22      	ldr	r3, [pc, #136]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	627b      	str	r3, [r7, #36]	@ 0x24
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	e00b      	b.n	800436c <_TrySendOverflowPacket+0x7c>
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	1c59      	adds	r1, r3, #1
 800435c:	6279      	str	r1, [r7, #36]	@ 0x24
 800435e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	09db      	lsrs	r3, r3, #7
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004370:	d8f0      	bhi.n	8004354 <_TrySendOverflowPacket+0x64>
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	627a      	str	r2, [r7, #36]	@ 0x24
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004380:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004382:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 8004384:	785b      	ldrb	r3, [r3, #1]
 8004386:	4618      	mov	r0, r3
 8004388:	1d3b      	adds	r3, r7, #4
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	461a      	mov	r2, r3
 8004390:	1d3b      	adds	r3, r7, #4
 8004392:	4619      	mov	r1, r3
 8004394:	f7fb ff3c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004398:	4603      	mov	r3, r0
 800439a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d009      	beq.n	80043b6 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043a2:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80043a8:	4b08      	ldr	r3, [pc, #32]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	e004      	b.n	80043c0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80043b6:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	3301      	adds	r3, #1
 80043bc:	4a03      	ldr	r2, [pc, #12]	@ (80043cc <_TrySendOverflowPacket+0xdc>)
 80043be:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80043c0:	693b      	ldr	r3, [r7, #16]
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3730      	adds	r7, #48	@ 0x30
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	2001a760 	.word	0x2001a760
 80043d0:	e0001004 	.word	0xe0001004

080043d4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b08a      	sub	sp, #40	@ 0x28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80043e0:	4b98      	ldr	r3, [pc, #608]	@ (8004644 <_SendPacket+0x270>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d010      	beq.n	800440a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80043e8:	4b96      	ldr	r3, [pc, #600]	@ (8004644 <_SendPacket+0x270>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 812d 	beq.w	800464c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80043f2:	4b94      	ldr	r3, [pc, #592]	@ (8004644 <_SendPacket+0x270>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d109      	bne.n	800440e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80043fa:	f7ff ff79 	bl	80042f0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80043fe:	4b91      	ldr	r3, [pc, #580]	@ (8004644 <_SendPacket+0x270>)
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	f040 8124 	bne.w	8004650 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004408:	e001      	b.n	800440e <_SendPacket+0x3a>
    goto Send;
 800440a:	bf00      	nop
 800440c:	e000      	b.n	8004410 <_SendPacket+0x3c>
Send:
 800440e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b1f      	cmp	r3, #31
 8004414:	d809      	bhi.n	800442a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004416:	4b8b      	ldr	r3, [pc, #556]	@ (8004644 <_SendPacket+0x270>)
 8004418:	69da      	ldr	r2, [r3, #28]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	f040 8115 	bne.w	8004654 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b17      	cmp	r3, #23
 800442e:	d807      	bhi.n	8004440 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	3b01      	subs	r3, #1
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	b2da      	uxtb	r2, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e0c4      	b.n	80045ca <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b7f      	cmp	r3, #127	@ 0x7f
 800444c:	d912      	bls.n	8004474 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	09da      	lsrs	r2, r3, #7
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3b01      	subs	r3, #1
 8004456:	60fb      	str	r3, [r7, #12]
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	3a01      	subs	r2, #1
 8004466:	60fa      	str	r2, [r7, #12]
 8004468:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	701a      	strb	r2, [r3, #0]
 8004472:	e006      	b.n	8004482 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3b01      	subs	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b7e      	cmp	r3, #126	@ 0x7e
 8004486:	d807      	bhi.n	8004498 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3b01      	subs	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	e098      	b.n	80045ca <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800449e:	d212      	bcs.n	80044c6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	09da      	lsrs	r2, r3, #7
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	3b01      	subs	r3, #1
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	3a01      	subs	r2, #1
 80044b8:	60fa      	str	r2, [r7, #12]
 80044ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	701a      	strb	r2, [r3, #0]
 80044c4:	e081      	b.n	80045ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044cc:	d21d      	bcs.n	800450a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	0b9a      	lsrs	r2, r3, #14
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	09db      	lsrs	r3, r3, #7
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	3a01      	subs	r2, #1
 80044e8:	60fa      	str	r2, [r7, #12]
 80044ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	3a01      	subs	r2, #1
 80044fc:	60fa      	str	r2, [r7, #12]
 80044fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004502:	b2da      	uxtb	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e05f      	b.n	80045ca <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004510:	d228      	bcs.n	8004564 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0d5a      	lsrs	r2, r3, #21
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	3b01      	subs	r3, #1
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	0b9b      	lsrs	r3, r3, #14
 8004526:	b2db      	uxtb	r3, r3
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	3a01      	subs	r2, #1
 800452c:	60fa      	str	r2, [r7, #12]
 800452e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	09db      	lsrs	r3, r3, #7
 800453c:	b2db      	uxtb	r3, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	3a01      	subs	r2, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	3a01      	subs	r2, #1
 8004556:	60fa      	str	r2, [r7, #12]
 8004558:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e032      	b.n	80045ca <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	0f1a      	lsrs	r2, r3, #28
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3b01      	subs	r3, #1
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	0d5b      	lsrs	r3, r3, #21
 8004578:	b2db      	uxtb	r3, r3
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	3a01      	subs	r2, #1
 800457e:	60fa      	str	r2, [r7, #12]
 8004580:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004584:	b2da      	uxtb	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0b9b      	lsrs	r3, r3, #14
 800458e:	b2db      	uxtb	r3, r3
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	3a01      	subs	r2, #1
 8004594:	60fa      	str	r2, [r7, #12]
 8004596:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800459a:	b2da      	uxtb	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	09db      	lsrs	r3, r3, #7
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	3a01      	subs	r2, #1
 80045aa:	60fa      	str	r2, [r7, #12]
 80045ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	68fa      	ldr	r2, [r7, #12]
 80045bc:	3a01      	subs	r2, #1
 80045be:	60fa      	str	r2, [r7, #12]
 80045c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004648 <_SendPacket+0x274>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80045d0:	4b1c      	ldr	r3, [pc, #112]	@ (8004644 <_SendPacket+0x270>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	623b      	str	r3, [r7, #32]
 80045e2:	e00b      	b.n	80045fc <_SendPacket+0x228>
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	1c59      	adds	r1, r3, #1
 80045ec:	6279      	str	r1, [r7, #36]	@ 0x24
 80045ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
 80045f6:	6a3b      	ldr	r3, [r7, #32]
 80045f8:	09db      	lsrs	r3, r3, #7
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004600:	d8f0      	bhi.n	80045e4 <_SendPacket+0x210>
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	627a      	str	r2, [r7, #36]	@ 0x24
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004612:	4b0c      	ldr	r3, [pc, #48]	@ (8004644 <_SendPacket+0x270>)
 8004614:	785b      	ldrb	r3, [r3, #1]
 8004616:	4618      	mov	r0, r3
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	461a      	mov	r2, r3
 8004620:	68f9      	ldr	r1, [r7, #12]
 8004622:	f7fb fdf5 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004626:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800462e:	4a05      	ldr	r2, [pc, #20]	@ (8004644 <_SendPacket+0x270>)
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	60d3      	str	r3, [r2, #12]
 8004634:	e00f      	b.n	8004656 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004636:	4b03      	ldr	r3, [pc, #12]	@ (8004644 <_SendPacket+0x270>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4b01      	ldr	r3, [pc, #4]	@ (8004644 <_SendPacket+0x270>)
 8004640:	701a      	strb	r2, [r3, #0]
 8004642:	e008      	b.n	8004656 <_SendPacket+0x282>
 8004644:	2001a760 	.word	0x2001a760
 8004648:	e0001004 	.word	0xe0001004
    goto SendDone;
 800464c:	bf00      	nop
 800464e:	e002      	b.n	8004656 <_SendPacket+0x282>
      goto SendDone;
 8004650:	bf00      	nop
 8004652:	e000      	b.n	8004656 <_SendPacket+0x282>
      goto SendDone;
 8004654:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004656:	4b14      	ldr	r3, [pc, #80]	@ (80046a8 <_SendPacket+0x2d4>)
 8004658:	7e1b      	ldrb	r3, [r3, #24]
 800465a:	4619      	mov	r1, r3
 800465c:	4a13      	ldr	r2, [pc, #76]	@ (80046ac <_SendPacket+0x2d8>)
 800465e:	460b      	mov	r3, r1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	440b      	add	r3, r1
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	336c      	adds	r3, #108	@ 0x6c
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	4b0e      	ldr	r3, [pc, #56]	@ (80046a8 <_SendPacket+0x2d4>)
 800466e:	7e1b      	ldrb	r3, [r3, #24]
 8004670:	4618      	mov	r0, r3
 8004672:	490e      	ldr	r1, [pc, #56]	@ (80046ac <_SendPacket+0x2d8>)
 8004674:	4603      	mov	r3, r0
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4403      	add	r3, r0
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	440b      	add	r3, r1
 800467e:	3370      	adds	r3, #112	@ 0x70
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	429a      	cmp	r2, r3
 8004684:	d00b      	beq.n	800469e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004686:	4b08      	ldr	r3, [pc, #32]	@ (80046a8 <_SendPacket+0x2d4>)
 8004688:	789b      	ldrb	r3, [r3, #2]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d107      	bne.n	800469e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <_SendPacket+0x2d4>)
 8004690:	2201      	movs	r2, #1
 8004692:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004694:	f7ff fdbe 	bl	8004214 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004698:	4b03      	ldr	r3, [pc, #12]	@ (80046a8 <_SendPacket+0x2d4>)
 800469a:	2200      	movs	r2, #0
 800469c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800469e:	bf00      	nop
 80046a0:	3728      	adds	r7, #40	@ 0x28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	2001a760 	.word	0x2001a760
 80046ac:	200192a0 	.word	0x200192a0

080046b0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af02      	add	r7, sp, #8
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80046be:	2300      	movs	r3, #0
 80046c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80046c4:	4917      	ldr	r1, [pc, #92]	@ (8004724 <SEGGER_SYSVIEW_Init+0x74>)
 80046c6:	4818      	ldr	r0, [pc, #96]	@ (8004728 <SEGGER_SYSVIEW_Init+0x78>)
 80046c8:	f7ff fc8e 	bl	8003fe8 <SEGGER_RTT_AllocUpBuffer>
 80046cc:	4603      	mov	r3, r0
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	4b16      	ldr	r3, [pc, #88]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 80046d2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80046d4:	4b15      	ldr	r3, [pc, #84]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 80046d6:	785a      	ldrb	r2, [r3, #1]
 80046d8:	4b14      	ldr	r3, [pc, #80]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 80046da:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80046dc:	4b13      	ldr	r3, [pc, #76]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 80046de:	7e1b      	ldrb	r3, [r3, #24]
 80046e0:	4618      	mov	r0, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	2308      	movs	r3, #8
 80046e8:	4a11      	ldr	r2, [pc, #68]	@ (8004730 <SEGGER_SYSVIEW_Init+0x80>)
 80046ea:	490f      	ldr	r1, [pc, #60]	@ (8004728 <SEGGER_SYSVIEW_Init+0x78>)
 80046ec:	f7ff fd00 	bl	80040f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80046f0:	4b0e      	ldr	r3, [pc, #56]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80046f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004734 <SEGGER_SYSVIEW_Init+0x84>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a0c      	ldr	r2, [pc, #48]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 80046fc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80046fe:	4a0b      	ldr	r2, [pc, #44]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004704:	4a09      	ldr	r2, [pc, #36]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800470a:	4a08      	ldr	r2, [pc, #32]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004710:	4a06      	ldr	r2, [pc, #24]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004716:	4b05      	ldr	r3, [pc, #20]	@ (800472c <SEGGER_SYSVIEW_Init+0x7c>)
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800471c:	bf00      	nop
 800471e:	3710      	adds	r7, #16
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20019758 	.word	0x20019758
 8004728:	08005e48 	.word	0x08005e48
 800472c:	2001a760 	.word	0x2001a760
 8004730:	2001a758 	.word	0x2001a758
 8004734:	e0001004 	.word	0xe0001004

08004738 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004740:	4a04      	ldr	r2, [pc, #16]	@ (8004754 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6113      	str	r3, [r2, #16]
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2001a760 	.word	0x2001a760

08004758 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004760:	f3ef 8311 	mrs	r3, BASEPRI
 8004764:	f04f 0120 	mov.w	r1, #32
 8004768:	f381 8811 	msr	BASEPRI, r1
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4808      	ldr	r0, [pc, #32]	@ (8004790 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004770:	f7ff fd43 	bl	80041fa <_PreparePacket>
 8004774:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	68b8      	ldr	r0, [r7, #8]
 800477c:	f7ff fe2a 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f383 8811 	msr	BASEPRI, r3
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	2001a790 	.word	0x2001a790

08004794 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800479e:	f3ef 8311 	mrs	r3, BASEPRI
 80047a2:	f04f 0120 	mov.w	r1, #32
 80047a6:	f381 8811 	msr	BASEPRI, r1
 80047aa:	617b      	str	r3, [r7, #20]
 80047ac:	4816      	ldr	r0, [pc, #88]	@ (8004808 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80047ae:	f7ff fd24 	bl	80041fa <_PreparePacket>
 80047b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e00b      	b.n	80047da <SEGGER_SYSVIEW_RecordU32+0x46>
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	1c59      	adds	r1, r3, #1
 80047ca:	61f9      	str	r1, [r7, #28]
 80047cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	09db      	lsrs	r3, r3, #7
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	69bb      	ldr	r3, [r7, #24]
 80047dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80047de:	d8f0      	bhi.n	80047c2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	61fa      	str	r2, [r7, #28]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	68f9      	ldr	r1, [r7, #12]
 80047f4:	6938      	ldr	r0, [r7, #16]
 80047f6:	f7ff fded 	bl	80043d4 <_SendPacket>
  RECORD_END();
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f383 8811 	msr	BASEPRI, r3
}
 8004800:	bf00      	nop
 8004802:	3720      	adds	r7, #32
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	2001a790 	.word	0x2001a790

0800480c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	@ 0x30
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004818:	f3ef 8311 	mrs	r3, BASEPRI
 800481c:	f04f 0120 	mov.w	r1, #32
 8004820:	f381 8811 	msr	BASEPRI, r1
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	4825      	ldr	r0, [pc, #148]	@ (80048bc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004828:	f7ff fce7 	bl	80041fa <_PreparePacket>
 800482c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800483a:	e00b      	b.n	8004854 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800483c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800483e:	b2da      	uxtb	r2, r3
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004846:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004850:	09db      	lsrs	r3, r3, #7
 8004852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	2b7f      	cmp	r3, #127	@ 0x7f
 8004858:	d8f0      	bhi.n	800483c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800485a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004868:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	623b      	str	r3, [r7, #32]
 8004872:	e00b      	b.n	800488c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	b2da      	uxtb	r2, r3
 8004878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487a:	1c59      	adds	r1, r3, #1
 800487c:	6279      	str	r1, [r7, #36]	@ 0x24
 800487e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004882:	b2d2      	uxtb	r2, r2
 8004884:	701a      	strb	r2, [r3, #0]
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	09db      	lsrs	r3, r3, #7
 800488a:	623b      	str	r3, [r7, #32]
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004890:	d8f0      	bhi.n	8004874 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	627a      	str	r2, [r7, #36]	@ 0x24
 8004898:	6a3a      	ldr	r2, [r7, #32]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	6979      	ldr	r1, [r7, #20]
 80048a6:	69b8      	ldr	r0, [r7, #24]
 80048a8:	f7ff fd94 	bl	80043d4 <_SendPacket>
  RECORD_END();
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f383 8811 	msr	BASEPRI, r3
}
 80048b2:	bf00      	nop
 80048b4:	3730      	adds	r7, #48	@ 0x30
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	2001a790 	.word	0x2001a790

080048c0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08c      	sub	sp, #48	@ 0x30
 80048c4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80048c6:	4b58      	ldr	r3, [pc, #352]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x168>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80048cc:	f3ef 8311 	mrs	r3, BASEPRI
 80048d0:	f04f 0120 	mov.w	r1, #32
 80048d4:	f381 8811 	msr	BASEPRI, r1
 80048d8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80048da:	4b53      	ldr	r3, [pc, #332]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x168>)
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	220a      	movs	r2, #10
 80048e0:	4952      	ldr	r1, [pc, #328]	@ (8004a2c <SEGGER_SYSVIEW_Start+0x16c>)
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fb fc94 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80048ee:	200a      	movs	r0, #10
 80048f0:	f7ff ff32 	bl	8004758 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048f4:	f3ef 8311 	mrs	r3, BASEPRI
 80048f8:	f04f 0120 	mov.w	r1, #32
 80048fc:	f381 8811 	msr	BASEPRI, r1
 8004900:	60bb      	str	r3, [r7, #8]
 8004902:	484b      	ldr	r0, [pc, #300]	@ (8004a30 <SEGGER_SYSVIEW_Start+0x170>)
 8004904:	f7ff fc79 	bl	80041fa <_PreparePacket>
 8004908:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004912:	4b45      	ldr	r3, [pc, #276]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x168>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004918:	e00b      	b.n	8004932 <SEGGER_SYSVIEW_Start+0x72>
 800491a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800491c:	b2da      	uxtb	r2, r3
 800491e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004920:	1c59      	adds	r1, r3, #1
 8004922:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004924:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800492e:	09db      	lsrs	r3, r3, #7
 8004930:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004934:	2b7f      	cmp	r3, #127	@ 0x7f
 8004936:	d8f0      	bhi.n	800491a <SEGGER_SYSVIEW_Start+0x5a>
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800493e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004946:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	627b      	str	r3, [r7, #36]	@ 0x24
 800494c:	4b36      	ldr	r3, [pc, #216]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x168>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	623b      	str	r3, [r7, #32]
 8004952:	e00b      	b.n	800496c <SEGGER_SYSVIEW_Start+0xac>
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	b2da      	uxtb	r2, r3
 8004958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495a:	1c59      	adds	r1, r3, #1
 800495c:	6279      	str	r1, [r7, #36]	@ 0x24
 800495e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]
 8004966:	6a3b      	ldr	r3, [r7, #32]
 8004968:	09db      	lsrs	r3, r3, #7
 800496a:	623b      	str	r3, [r7, #32]
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004970:	d8f0      	bhi.n	8004954 <SEGGER_SYSVIEW_Start+0x94>
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	627a      	str	r2, [r7, #36]	@ 0x24
 8004978:	6a3a      	ldr	r2, [r7, #32]
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]
 800497e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004980:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	61fb      	str	r3, [r7, #28]
 8004986:	4b28      	ldr	r3, [pc, #160]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x168>)
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e00b      	b.n	80049a6 <SEGGER_SYSVIEW_Start+0xe6>
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	b2da      	uxtb	r2, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	1c59      	adds	r1, r3, #1
 8004996:	61f9      	str	r1, [r7, #28]
 8004998:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	09db      	lsrs	r3, r3, #7
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80049aa:	d8f0      	bhi.n	800498e <SEGGER_SYSVIEW_Start+0xce>
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	61fa      	str	r2, [r7, #28]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	b2d2      	uxtb	r2, r2
 80049b6:	701a      	strb	r2, [r3, #0]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	2300      	movs	r3, #0
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	e00b      	b.n	80049de <SEGGER_SYSVIEW_Start+0x11e>
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	6179      	str	r1, [r7, #20]
 80049d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	09db      	lsrs	r3, r3, #7
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80049e2:	d8f0      	bhi.n	80049c6 <SEGGER_SYSVIEW_Start+0x106>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	617a      	str	r2, [r7, #20]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80049f4:	2218      	movs	r2, #24
 80049f6:	6839      	ldr	r1, [r7, #0]
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff fceb 	bl	80043d4 <_SendPacket>
      RECORD_END();
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a04:	4b08      	ldr	r3, [pc, #32]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x168>)
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <SEGGER_SYSVIEW_Start+0x168>)
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a10:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a12:	f000 f9eb 	bl	8004dec <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004a16:	f000 f9b1 	bl	8004d7c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004a1a:	f000 fc1d 	bl	8005258 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004a1e:	bf00      	nop
 8004a20:	3730      	adds	r7, #48	@ 0x30
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	2001a760 	.word	0x2001a760
 8004a2c:	08005e88 	.word	0x08005e88
 8004a30:	2001a790 	.word	0x2001a790

08004a34 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3e:	f04f 0120 	mov.w	r1, #32
 8004a42:	f381 8811 	msr	BASEPRI, r1
 8004a46:	607b      	str	r3, [r7, #4]
 8004a48:	480b      	ldr	r0, [pc, #44]	@ (8004a78 <SEGGER_SYSVIEW_Stop+0x44>)
 8004a4a:	f7ff fbd6 	bl	80041fa <_PreparePacket>
 8004a4e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004a50:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <SEGGER_SYSVIEW_Stop+0x48>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004a58:	220b      	movs	r2, #11
 8004a5a:	6839      	ldr	r1, [r7, #0]
 8004a5c:	6838      	ldr	r0, [r7, #0]
 8004a5e:	f7ff fcb9 	bl	80043d4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <SEGGER_SYSVIEW_Stop+0x48>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f383 8811 	msr	BASEPRI, r3
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	2001a790 	.word	0x2001a790
 8004a7c:	2001a760 	.word	0x2001a760

08004a80 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08c      	sub	sp, #48	@ 0x30
 8004a84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a86:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8a:	f04f 0120 	mov.w	r1, #32
 8004a8e:	f381 8811 	msr	BASEPRI, r1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	4845      	ldr	r0, [pc, #276]	@ (8004bac <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004a96:	f7ff fbb0 	bl	80041fa <_PreparePacket>
 8004a9a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aa4:	4b42      	ldr	r3, [pc, #264]	@ (8004bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aaa:	e00b      	b.n	8004ac4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab2:	1c59      	adds	r1, r3, #1
 8004ab4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004ab6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	09db      	lsrs	r3, r3, #7
 8004ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ac8:	d8f0      	bhi.n	8004aac <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ad2:	b2d2      	uxtb	r2, r2
 8004ad4:	701a      	strb	r2, [r3, #0]
 8004ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ade:	4b34      	ldr	r3, [pc, #208]	@ (8004bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	623b      	str	r3, [r7, #32]
 8004ae4:	e00b      	b.n	8004afe <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aec:	1c59      	adds	r1, r3, #1
 8004aee:	6279      	str	r1, [r7, #36]	@ 0x24
 8004af0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004af4:	b2d2      	uxtb	r2, r2
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	09db      	lsrs	r3, r3, #7
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b02:	d8f0      	bhi.n	8004ae6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	4b25      	ldr	r3, [pc, #148]	@ (8004bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	61bb      	str	r3, [r7, #24]
 8004b1e:	e00b      	b.n	8004b38 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	1c59      	adds	r1, r3, #1
 8004b28:	61f9      	str	r1, [r7, #28]
 8004b2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	09db      	lsrs	r3, r3, #7
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b3c:	d8f0      	bhi.n	8004b20 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	61fa      	str	r2, [r7, #28]
 8004b44:	69ba      	ldr	r2, [r7, #24]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	617b      	str	r3, [r7, #20]
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e00b      	b.n	8004b70 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	b2da      	uxtb	r2, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	6179      	str	r1, [r7, #20]
 8004b62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	701a      	strb	r2, [r3, #0]
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	09db      	lsrs	r3, r3, #7
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b74:	d8f0      	bhi.n	8004b58 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	617a      	str	r2, [r7, #20]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	b2d2      	uxtb	r2, r2
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b86:	2218      	movs	r2, #24
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	68b8      	ldr	r0, [r7, #8]
 8004b8c:	f7ff fc22 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004b9e:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba2:	4798      	blx	r3
  }
}
 8004ba4:	bf00      	nop
 8004ba6:	3730      	adds	r7, #48	@ 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	2001a790 	.word	0x2001a790
 8004bb0:	2001a760 	.word	0x2001a760

08004bb4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b092      	sub	sp, #72	@ 0x48
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8004bc0:	f04f 0120 	mov.w	r1, #32
 8004bc4:	f381 8811 	msr	BASEPRI, r1
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	486a      	ldr	r0, [pc, #424]	@ (8004d74 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004bcc:	f7ff fb15 	bl	80041fa <_PreparePacket>
 8004bd0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	4b66      	ldr	r3, [pc, #408]	@ (8004d78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be6:	e00b      	b.n	8004c00 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bee:	1c59      	adds	r1, r3, #1
 8004bf0:	6479      	str	r1, [r7, #68]	@ 0x44
 8004bf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bfc:	09db      	lsrs	r3, r3, #7
 8004bfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c02:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c04:	d8f0      	bhi.n	8004be8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004c06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]
 8004c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c20:	e00b      	b.n	8004c3a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004c22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c24:	b2da      	uxtb	r2, r3
 8004c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c28:	1c59      	adds	r1, r3, #1
 8004c2a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004c2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]
 8004c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c36:	09db      	lsrs	r3, r3, #7
 8004c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c3e:	d8f0      	bhi.n	8004c22 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004c46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c48:	b2d2      	uxtb	r2, r2
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	4619      	mov	r1, r3
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7ff fa95 	bl	8004188 <_EncodeStr>
 8004c5e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004c60:	2209      	movs	r2, #9
 8004c62:	68f9      	ldr	r1, [r7, #12]
 8004c64:	6938      	ldr	r0, [r7, #16]
 8004c66:	f7ff fbb5 	bl	80043d4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	4b40      	ldr	r3, [pc, #256]	@ (8004d78 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c7e:	e00b      	b.n	8004c98 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	6379      	str	r1, [r7, #52]	@ 0x34
 8004c8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c94:	09db      	lsrs	r3, r3, #7
 8004c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c9c:	d8f0      	bhi.n	8004c80 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca0:	1c5a      	adds	r2, r3, #1
 8004ca2:	637a      	str	r2, [r7, #52]	@ 0x34
 8004ca4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cb8:	e00b      	b.n	8004cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cc0:	1c59      	adds	r1, r3, #1
 8004cc2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004cc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cce:	09db      	lsrs	r3, r3, #7
 8004cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cd6:	d8f0      	bhi.n	8004cba <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	701a      	strb	r2, [r3, #0]
 8004ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ce6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	623b      	str	r3, [r7, #32]
 8004cf2:	e00b      	b.n	8004d0c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	1c59      	adds	r1, r3, #1
 8004cfc:	6279      	str	r1, [r7, #36]	@ 0x24
 8004cfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	09db      	lsrs	r3, r3, #7
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d10:	d8f0      	bhi.n	8004cf4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d18:	6a3a      	ldr	r2, [r7, #32]
 8004d1a:	b2d2      	uxtb	r2, r2
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	e00b      	b.n	8004d46 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1c59      	adds	r1, r3, #1
 8004d36:	61f9      	str	r1, [r7, #28]
 8004d38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	09db      	lsrs	r3, r3, #7
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d4a:	d8f0      	bhi.n	8004d2e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	61fa      	str	r2, [r7, #28]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004d5c:	2215      	movs	r2, #21
 8004d5e:	68f9      	ldr	r1, [r7, #12]
 8004d60:	6938      	ldr	r0, [r7, #16]
 8004d62:	f7ff fb37 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f383 8811 	msr	BASEPRI, r3
}
 8004d6c:	bf00      	nop
 8004d6e:	3748      	adds	r7, #72	@ 0x48
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	2001a790 	.word	0x2001a790
 8004d78:	2001a760 	.word	0x2001a760

08004d7c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004d80:	4b07      	ldr	r3, [pc, #28]	@ (8004da0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d008      	beq.n	8004d9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004d92:	4b03      	ldr	r3, [pc, #12]	@ (8004da0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	4798      	blx	r3
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2001a760 	.word	0x2001a760

08004da4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dac:	f3ef 8311 	mrs	r3, BASEPRI
 8004db0:	f04f 0120 	mov.w	r1, #32
 8004db4:	f381 8811 	msr	BASEPRI, r1
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	480b      	ldr	r0, [pc, #44]	@ (8004de8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004dbc:	f7ff fa1d 	bl	80041fa <_PreparePacket>
 8004dc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004dc2:	2280      	movs	r2, #128	@ 0x80
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	6938      	ldr	r0, [r7, #16]
 8004dc8:	f7ff f9de 	bl	8004188 <_EncodeStr>
 8004dcc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004dce:	220e      	movs	r2, #14
 8004dd0:	68f9      	ldr	r1, [r7, #12]
 8004dd2:	6938      	ldr	r0, [r7, #16]
 8004dd4:	f7ff fafe 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f383 8811 	msr	BASEPRI, r3
}
 8004dde:	bf00      	nop
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2001a790 	.word	0x2001a790

08004dec <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004dec:	b590      	push	{r4, r7, lr}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004df2:	4b15      	ldr	r3, [pc, #84]	@ (8004e48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01a      	beq.n	8004e30 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004dfa:	4b13      	ldr	r3, [pc, #76]	@ (8004e48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d015      	beq.n	8004e30 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004e04:	4b10      	ldr	r3, [pc, #64]	@ (8004e48 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e06:	6a1b      	ldr	r3, [r3, #32]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4798      	blx	r3
 8004e0c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e10:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004e12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	000a      	movs	r2, r1
 8004e20:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e22:	4613      	mov	r3, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4621      	mov	r1, r4
 8004e28:	200d      	movs	r0, #13
 8004e2a:	f7ff fcef 	bl	800480c <SEGGER_SYSVIEW_RecordU32x2>
 8004e2e:	e006      	b.n	8004e3e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004e30:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4619      	mov	r1, r3
 8004e36:	200c      	movs	r0, #12
 8004e38:	f7ff fcac 	bl	8004794 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd90      	pop	{r4, r7, pc}
 8004e46:	bf00      	nop
 8004e48:	2001a760 	.word	0x2001a760
 8004e4c:	e0001004 	.word	0xe0001004

08004e50 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004e56:	f3ef 8311 	mrs	r3, BASEPRI
 8004e5a:	f04f 0120 	mov.w	r1, #32
 8004e5e:	f381 8811 	msr	BASEPRI, r1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	4819      	ldr	r0, [pc, #100]	@ (8004ecc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004e66:	f7ff f9c8 	bl	80041fa <_PreparePacket>
 8004e6a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004e70:	4b17      	ldr	r3, [pc, #92]	@ (8004ed0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e78:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	e00b      	b.n	8004e9c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	1c59      	adds	r1, r3, #1
 8004e8c:	6179      	str	r1, [r7, #20]
 8004e8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	09db      	lsrs	r3, r3, #7
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ea0:	d8f0      	bhi.n	8004e84 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	617a      	str	r2, [r7, #20]
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	68b8      	ldr	r0, [r7, #8]
 8004eb8:	f7ff fa8c 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f383 8811 	msr	BASEPRI, r3
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	2001a790 	.word	0x2001a790
 8004ed0:	e000ed04 	.word	0xe000ed04

08004ed4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004eda:	f3ef 8311 	mrs	r3, BASEPRI
 8004ede:	f04f 0120 	mov.w	r1, #32
 8004ee2:	f381 8811 	msr	BASEPRI, r1
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	4807      	ldr	r0, [pc, #28]	@ (8004f08 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004eea:	f7ff f986 	bl	80041fa <_PreparePacket>
 8004eee:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6838      	ldr	r0, [r7, #0]
 8004ef6:	f7ff fa6d 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f383 8811 	msr	BASEPRI, r3
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	2001a790 	.word	0x2001a790

08004f0c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f12:	f3ef 8311 	mrs	r3, BASEPRI
 8004f16:	f04f 0120 	mov.w	r1, #32
 8004f1a:	f381 8811 	msr	BASEPRI, r1
 8004f1e:	607b      	str	r3, [r7, #4]
 8004f20:	4807      	ldr	r0, [pc, #28]	@ (8004f40 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004f22:	f7ff f96a 	bl	80041fa <_PreparePacket>
 8004f26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004f28:	2212      	movs	r2, #18
 8004f2a:	6839      	ldr	r1, [r7, #0]
 8004f2c:	6838      	ldr	r0, [r7, #0]
 8004f2e:	f7ff fa51 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f383 8811 	msr	BASEPRI, r3
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	2001a790 	.word	0x2001a790

08004f44 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f4a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4e:	f04f 0120 	mov.w	r1, #32
 8004f52:	f381 8811 	msr	BASEPRI, r1
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	4807      	ldr	r0, [pc, #28]	@ (8004f78 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004f5a:	f7ff f94e 	bl	80041fa <_PreparePacket>
 8004f5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004f60:	2211      	movs	r2, #17
 8004f62:	6839      	ldr	r1, [r7, #0]
 8004f64:	6838      	ldr	r0, [r7, #0]
 8004f66:	f7ff fa35 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f383 8811 	msr	BASEPRI, r3
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2001a790 	.word	0x2001a790

08004f7c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f84:	f3ef 8311 	mrs	r3, BASEPRI
 8004f88:	f04f 0120 	mov.w	r1, #32
 8004f8c:	f381 8811 	msr	BASEPRI, r1
 8004f90:	617b      	str	r3, [r7, #20]
 8004f92:	4819      	ldr	r0, [pc, #100]	@ (8004ff8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004f94:	f7ff f931 	bl	80041fa <_PreparePacket>
 8004f98:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f9e:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	61bb      	str	r3, [r7, #24]
 8004fb0:	e00b      	b.n	8004fca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	1c59      	adds	r1, r3, #1
 8004fba:	61f9      	str	r1, [r7, #28]
 8004fbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	701a      	strb	r2, [r3, #0]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	09db      	lsrs	r3, r3, #7
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fce:	d8f0      	bhi.n	8004fb2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	61fa      	str	r2, [r7, #28]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	b2d2      	uxtb	r2, r2
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	6938      	ldr	r0, [r7, #16]
 8004fe6:	f7ff f9f5 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f383 8811 	msr	BASEPRI, r3
}
 8004ff0:	bf00      	nop
 8004ff2:	3720      	adds	r7, #32
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	2001a790 	.word	0x2001a790
 8004ffc:	2001a760 	.word	0x2001a760

08005000 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005008:	f3ef 8311 	mrs	r3, BASEPRI
 800500c:	f04f 0120 	mov.w	r1, #32
 8005010:	f381 8811 	msr	BASEPRI, r1
 8005014:	617b      	str	r3, [r7, #20]
 8005016:	4819      	ldr	r0, [pc, #100]	@ (800507c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005018:	f7ff f8ef 	bl	80041fa <_PreparePacket>
 800501c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005022:	4b17      	ldr	r3, [pc, #92]	@ (8005080 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	e00b      	b.n	800504e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	1c59      	adds	r1, r3, #1
 800503e:	61f9      	str	r1, [r7, #28]
 8005040:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	09db      	lsrs	r3, r3, #7
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b7f      	cmp	r3, #127	@ 0x7f
 8005052:	d8f0      	bhi.n	8005036 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	61fa      	str	r2, [r7, #28]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005064:	2204      	movs	r2, #4
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	6938      	ldr	r0, [r7, #16]
 800506a:	f7ff f9b3 	bl	80043d4 <_SendPacket>
  RECORD_END();
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f383 8811 	msr	BASEPRI, r3
}
 8005074:	bf00      	nop
 8005076:	3720      	adds	r7, #32
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	2001a790 	.word	0x2001a790
 8005080:	2001a760 	.word	0x2001a760

08005084 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800508c:	f3ef 8311 	mrs	r3, BASEPRI
 8005090:	f04f 0120 	mov.w	r1, #32
 8005094:	f381 8811 	msr	BASEPRI, r1
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	4819      	ldr	r0, [pc, #100]	@ (8005100 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800509c:	f7ff f8ad 	bl	80041fa <_PreparePacket>
 80050a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80050a6:	4b17      	ldr	r3, [pc, #92]	@ (8005104 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e00b      	b.n	80050d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	1c59      	adds	r1, r3, #1
 80050c2:	61f9      	str	r1, [r7, #28]
 80050c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	09db      	lsrs	r3, r3, #7
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80050d6:	d8f0      	bhi.n	80050ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	61fa      	str	r2, [r7, #28]
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80050e8:	2206      	movs	r2, #6
 80050ea:	68f9      	ldr	r1, [r7, #12]
 80050ec:	6938      	ldr	r0, [r7, #16]
 80050ee:	f7ff f971 	bl	80043d4 <_SendPacket>
  RECORD_END();
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f383 8811 	msr	BASEPRI, r3
}
 80050f8:	bf00      	nop
 80050fa:	3720      	adds	r7, #32
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	2001a790 	.word	0x2001a790
 8005104:	2001a760 	.word	0x2001a760

08005108 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005108:	b580      	push	{r7, lr}
 800510a:	b08c      	sub	sp, #48	@ 0x30
 800510c:	af00      	add	r7, sp, #0
 800510e:	4603      	mov	r3, r0
 8005110:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005112:	4b40      	ldr	r3, [pc, #256]	@ (8005214 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d077      	beq.n	800520a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800511a:	4b3e      	ldr	r3, [pc, #248]	@ (8005214 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005120:	2300      	movs	r3, #0
 8005122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005124:	e008      	b.n	8005138 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800512c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d007      	beq.n	8005142 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	3301      	adds	r3, #1
 8005136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800513c:	429a      	cmp	r2, r3
 800513e:	d3f2      	bcc.n	8005126 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005140:	e000      	b.n	8005144 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005142:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d055      	beq.n	80051f6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800514a:	f3ef 8311 	mrs	r3, BASEPRI
 800514e:	f04f 0120 	mov.w	r1, #32
 8005152:	f381 8811 	msr	BASEPRI, r1
 8005156:	617b      	str	r3, [r7, #20]
 8005158:	482f      	ldr	r0, [pc, #188]	@ (8005218 <SEGGER_SYSVIEW_SendModule+0x110>)
 800515a:	f7ff f84e 	bl	80041fa <_PreparePacket>
 800515e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	627b      	str	r3, [r7, #36]	@ 0x24
 8005168:	79fb      	ldrb	r3, [r7, #7]
 800516a:	623b      	str	r3, [r7, #32]
 800516c:	e00b      	b.n	8005186 <SEGGER_SYSVIEW_SendModule+0x7e>
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	b2da      	uxtb	r2, r3
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	1c59      	adds	r1, r3, #1
 8005176:	6279      	str	r1, [r7, #36]	@ 0x24
 8005178:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	09db      	lsrs	r3, r3, #7
 8005184:	623b      	str	r3, [r7, #32]
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	2b7f      	cmp	r3, #127	@ 0x7f
 800518a:	d8f0      	bhi.n	800516e <SEGGER_SYSVIEW_SendModule+0x66>
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	1c5a      	adds	r2, r3, #1
 8005190:	627a      	str	r2, [r7, #36]	@ 0x24
 8005192:	6a3a      	ldr	r2, [r7, #32]
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
 8005198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	61fb      	str	r3, [r7, #28]
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	61bb      	str	r3, [r7, #24]
 80051a6:	e00b      	b.n	80051c0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	1c59      	adds	r1, r3, #1
 80051b0:	61f9      	str	r1, [r7, #28]
 80051b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	09db      	lsrs	r3, r3, #7
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80051c4:	d8f0      	bhi.n	80051a8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	61fa      	str	r2, [r7, #28]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2280      	movs	r2, #128	@ 0x80
 80051dc:	4619      	mov	r1, r3
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	f7fe ffd2 	bl	8004188 <_EncodeStr>
 80051e4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80051e6:	2216      	movs	r2, #22
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	6938      	ldr	r0, [r7, #16]
 80051ec:	f7ff f8f2 	bl	80043d4 <_SendPacket>
      RECORD_END();
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80051f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d006      	beq.n	800520a <SEGGER_SYSVIEW_SendModule+0x102>
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d002      	beq.n	800520a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4798      	blx	r3
    }
  }
}
 800520a:	bf00      	nop
 800520c:	3730      	adds	r7, #48	@ 0x30
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	2001a788 	.word	0x2001a788
 8005218:	2001a790 	.word	0x2001a790

0800521c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005222:	4b0c      	ldr	r3, [pc, #48]	@ (8005254 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00f      	beq.n	800524a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800522a:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1f2      	bne.n	8005230 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2001a788 	.word	0x2001a788

08005258 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800525e:	f3ef 8311 	mrs	r3, BASEPRI
 8005262:	f04f 0120 	mov.w	r1, #32
 8005266:	f381 8811 	msr	BASEPRI, r1
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	4817      	ldr	r0, [pc, #92]	@ (80052cc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800526e:	f7fe ffc4 	bl	80041fa <_PreparePacket>
 8005272:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	4b14      	ldr	r3, [pc, #80]	@ (80052d0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	e00b      	b.n	800529c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	1c59      	adds	r1, r3, #1
 800528c:	6179      	str	r1, [r7, #20]
 800528e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	09db      	lsrs	r3, r3, #7
 800529a:	613b      	str	r3, [r7, #16]
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	2b7f      	cmp	r3, #127	@ 0x7f
 80052a0:	d8f0      	bhi.n	8005284 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	617a      	str	r2, [r7, #20]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80052b2:	221b      	movs	r2, #27
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	68b8      	ldr	r0, [r7, #8]
 80052b8:	f7ff f88c 	bl	80043d4 <_SendPacket>
  RECORD_END();
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f383 8811 	msr	BASEPRI, r3
}
 80052c2:	bf00      	nop
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	2001a790 	.word	0x2001a790
 80052d0:	2001a78c 	.word	0x2001a78c

080052d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	@ 0x28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052dc:	f3ef 8311 	mrs	r3, BASEPRI
 80052e0:	f04f 0120 	mov.w	r1, #32
 80052e4:	f381 8811 	msr	BASEPRI, r1
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	4827      	ldr	r0, [pc, #156]	@ (8005388 <SEGGER_SYSVIEW_Warn+0xb4>)
 80052ec:	f7fe ff85 	bl	80041fa <_PreparePacket>
 80052f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052f2:	2280      	movs	r2, #128	@ 0x80
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	6938      	ldr	r0, [r7, #16]
 80052f8:	f7fe ff46 	bl	8004188 <_EncodeStr>
 80052fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
 8005302:	2301      	movs	r3, #1
 8005304:	623b      	str	r3, [r7, #32]
 8005306:	e00b      	b.n	8005320 <SEGGER_SYSVIEW_Warn+0x4c>
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	b2da      	uxtb	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	1c59      	adds	r1, r3, #1
 8005310:	6279      	str	r1, [r7, #36]	@ 0x24
 8005312:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	09db      	lsrs	r3, r3, #7
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	6a3b      	ldr	r3, [r7, #32]
 8005322:	2b7f      	cmp	r3, #127	@ 0x7f
 8005324:	d8f0      	bhi.n	8005308 <SEGGER_SYSVIEW_Warn+0x34>
 8005326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	627a      	str	r2, [r7, #36]	@ 0x24
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e00b      	b.n	8005358 <SEGGER_SYSVIEW_Warn+0x84>
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	b2da      	uxtb	r2, r3
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	1c59      	adds	r1, r3, #1
 8005348:	61f9      	str	r1, [r7, #28]
 800534a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	09db      	lsrs	r3, r3, #7
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b7f      	cmp	r3, #127	@ 0x7f
 800535c:	d8f0      	bhi.n	8005340 <SEGGER_SYSVIEW_Warn+0x6c>
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	61fa      	str	r2, [r7, #28]
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	b2d2      	uxtb	r2, r2
 8005368:	701a      	strb	r2, [r3, #0]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800536e:	221a      	movs	r2, #26
 8005370:	68f9      	ldr	r1, [r7, #12]
 8005372:	6938      	ldr	r0, [r7, #16]
 8005374:	f7ff f82e 	bl	80043d4 <_SendPacket>
  RECORD_END();
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f383 8811 	msr	BASEPRI, r3
}
 800537e:	bf00      	nop
 8005380:	3728      	adds	r7, #40	@ 0x28
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	2001a790 	.word	0x2001a790

0800538c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
 8005398:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	2000      	movs	r0, #0
 80053a0:	f7fe fdfc 	bl	8003f9c <SEGGER_RTT_Write>
  return len;
 80053a4:	683b      	ldr	r3, [r7, #0]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
	...

080053b0 <std>:
 80053b0:	2300      	movs	r3, #0
 80053b2:	b510      	push	{r4, lr}
 80053b4:	4604      	mov	r4, r0
 80053b6:	e9c0 3300 	strd	r3, r3, [r0]
 80053ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053be:	6083      	str	r3, [r0, #8]
 80053c0:	8181      	strh	r1, [r0, #12]
 80053c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80053c4:	81c2      	strh	r2, [r0, #14]
 80053c6:	6183      	str	r3, [r0, #24]
 80053c8:	4619      	mov	r1, r3
 80053ca:	2208      	movs	r2, #8
 80053cc:	305c      	adds	r0, #92	@ 0x5c
 80053ce:	f000 f9f7 	bl	80057c0 <memset>
 80053d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005408 <std+0x58>)
 80053d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <std+0x5c>)
 80053d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <std+0x60>)
 80053dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80053de:	4b0d      	ldr	r3, [pc, #52]	@ (8005414 <std+0x64>)
 80053e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80053e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005418 <std+0x68>)
 80053e4:	6224      	str	r4, [r4, #32]
 80053e6:	429c      	cmp	r4, r3
 80053e8:	d006      	beq.n	80053f8 <std+0x48>
 80053ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053ee:	4294      	cmp	r4, r2
 80053f0:	d002      	beq.n	80053f8 <std+0x48>
 80053f2:	33d0      	adds	r3, #208	@ 0xd0
 80053f4:	429c      	cmp	r4, r3
 80053f6:	d105      	bne.n	8005404 <std+0x54>
 80053f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005400:	f000 ba3e 	b.w	8005880 <__retarget_lock_init_recursive>
 8005404:	bd10      	pop	{r4, pc}
 8005406:	bf00      	nop
 8005408:	080055f1 	.word	0x080055f1
 800540c:	08005613 	.word	0x08005613
 8005410:	0800564b 	.word	0x0800564b
 8005414:	0800566f 	.word	0x0800566f
 8005418:	2001a874 	.word	0x2001a874

0800541c <stdio_exit_handler>:
 800541c:	4a02      	ldr	r2, [pc, #8]	@ (8005428 <stdio_exit_handler+0xc>)
 800541e:	4903      	ldr	r1, [pc, #12]	@ (800542c <stdio_exit_handler+0x10>)
 8005420:	4803      	ldr	r0, [pc, #12]	@ (8005430 <stdio_exit_handler+0x14>)
 8005422:	f000 b869 	b.w	80054f8 <_fwalk_sglue>
 8005426:	bf00      	nop
 8005428:	20000010 	.word	0x20000010
 800542c:	08005b9d 	.word	0x08005b9d
 8005430:	20000020 	.word	0x20000020

08005434 <cleanup_stdio>:
 8005434:	6841      	ldr	r1, [r0, #4]
 8005436:	4b0c      	ldr	r3, [pc, #48]	@ (8005468 <cleanup_stdio+0x34>)
 8005438:	4299      	cmp	r1, r3
 800543a:	b510      	push	{r4, lr}
 800543c:	4604      	mov	r4, r0
 800543e:	d001      	beq.n	8005444 <cleanup_stdio+0x10>
 8005440:	f000 fbac 	bl	8005b9c <_fflush_r>
 8005444:	68a1      	ldr	r1, [r4, #8]
 8005446:	4b09      	ldr	r3, [pc, #36]	@ (800546c <cleanup_stdio+0x38>)
 8005448:	4299      	cmp	r1, r3
 800544a:	d002      	beq.n	8005452 <cleanup_stdio+0x1e>
 800544c:	4620      	mov	r0, r4
 800544e:	f000 fba5 	bl	8005b9c <_fflush_r>
 8005452:	68e1      	ldr	r1, [r4, #12]
 8005454:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <cleanup_stdio+0x3c>)
 8005456:	4299      	cmp	r1, r3
 8005458:	d004      	beq.n	8005464 <cleanup_stdio+0x30>
 800545a:	4620      	mov	r0, r4
 800545c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005460:	f000 bb9c 	b.w	8005b9c <_fflush_r>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	bf00      	nop
 8005468:	2001a874 	.word	0x2001a874
 800546c:	2001a8dc 	.word	0x2001a8dc
 8005470:	2001a944 	.word	0x2001a944

08005474 <global_stdio_init.part.0>:
 8005474:	b510      	push	{r4, lr}
 8005476:	4b0b      	ldr	r3, [pc, #44]	@ (80054a4 <global_stdio_init.part.0+0x30>)
 8005478:	4c0b      	ldr	r4, [pc, #44]	@ (80054a8 <global_stdio_init.part.0+0x34>)
 800547a:	4a0c      	ldr	r2, [pc, #48]	@ (80054ac <global_stdio_init.part.0+0x38>)
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	4620      	mov	r0, r4
 8005480:	2200      	movs	r2, #0
 8005482:	2104      	movs	r1, #4
 8005484:	f7ff ff94 	bl	80053b0 <std>
 8005488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800548c:	2201      	movs	r2, #1
 800548e:	2109      	movs	r1, #9
 8005490:	f7ff ff8e 	bl	80053b0 <std>
 8005494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005498:	2202      	movs	r2, #2
 800549a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800549e:	2112      	movs	r1, #18
 80054a0:	f7ff bf86 	b.w	80053b0 <std>
 80054a4:	2001a9ac 	.word	0x2001a9ac
 80054a8:	2001a874 	.word	0x2001a874
 80054ac:	0800541d 	.word	0x0800541d

080054b0 <__sfp_lock_acquire>:
 80054b0:	4801      	ldr	r0, [pc, #4]	@ (80054b8 <__sfp_lock_acquire+0x8>)
 80054b2:	f000 b9e6 	b.w	8005882 <__retarget_lock_acquire_recursive>
 80054b6:	bf00      	nop
 80054b8:	2001a9b5 	.word	0x2001a9b5

080054bc <__sfp_lock_release>:
 80054bc:	4801      	ldr	r0, [pc, #4]	@ (80054c4 <__sfp_lock_release+0x8>)
 80054be:	f000 b9e1 	b.w	8005884 <__retarget_lock_release_recursive>
 80054c2:	bf00      	nop
 80054c4:	2001a9b5 	.word	0x2001a9b5

080054c8 <__sinit>:
 80054c8:	b510      	push	{r4, lr}
 80054ca:	4604      	mov	r4, r0
 80054cc:	f7ff fff0 	bl	80054b0 <__sfp_lock_acquire>
 80054d0:	6a23      	ldr	r3, [r4, #32]
 80054d2:	b11b      	cbz	r3, 80054dc <__sinit+0x14>
 80054d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80054d8:	f7ff bff0 	b.w	80054bc <__sfp_lock_release>
 80054dc:	4b04      	ldr	r3, [pc, #16]	@ (80054f0 <__sinit+0x28>)
 80054de:	6223      	str	r3, [r4, #32]
 80054e0:	4b04      	ldr	r3, [pc, #16]	@ (80054f4 <__sinit+0x2c>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f5      	bne.n	80054d4 <__sinit+0xc>
 80054e8:	f7ff ffc4 	bl	8005474 <global_stdio_init.part.0>
 80054ec:	e7f2      	b.n	80054d4 <__sinit+0xc>
 80054ee:	bf00      	nop
 80054f0:	08005435 	.word	0x08005435
 80054f4:	2001a9ac 	.word	0x2001a9ac

080054f8 <_fwalk_sglue>:
 80054f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054fc:	4607      	mov	r7, r0
 80054fe:	4688      	mov	r8, r1
 8005500:	4614      	mov	r4, r2
 8005502:	2600      	movs	r6, #0
 8005504:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005508:	f1b9 0901 	subs.w	r9, r9, #1
 800550c:	d505      	bpl.n	800551a <_fwalk_sglue+0x22>
 800550e:	6824      	ldr	r4, [r4, #0]
 8005510:	2c00      	cmp	r4, #0
 8005512:	d1f7      	bne.n	8005504 <_fwalk_sglue+0xc>
 8005514:	4630      	mov	r0, r6
 8005516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800551a:	89ab      	ldrh	r3, [r5, #12]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d907      	bls.n	8005530 <_fwalk_sglue+0x38>
 8005520:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005524:	3301      	adds	r3, #1
 8005526:	d003      	beq.n	8005530 <_fwalk_sglue+0x38>
 8005528:	4629      	mov	r1, r5
 800552a:	4638      	mov	r0, r7
 800552c:	47c0      	blx	r8
 800552e:	4306      	orrs	r6, r0
 8005530:	3568      	adds	r5, #104	@ 0x68
 8005532:	e7e9      	b.n	8005508 <_fwalk_sglue+0x10>

08005534 <_puts_r>:
 8005534:	6a03      	ldr	r3, [r0, #32]
 8005536:	b570      	push	{r4, r5, r6, lr}
 8005538:	6884      	ldr	r4, [r0, #8]
 800553a:	4605      	mov	r5, r0
 800553c:	460e      	mov	r6, r1
 800553e:	b90b      	cbnz	r3, 8005544 <_puts_r+0x10>
 8005540:	f7ff ffc2 	bl	80054c8 <__sinit>
 8005544:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005546:	07db      	lsls	r3, r3, #31
 8005548:	d405      	bmi.n	8005556 <_puts_r+0x22>
 800554a:	89a3      	ldrh	r3, [r4, #12]
 800554c:	0598      	lsls	r0, r3, #22
 800554e:	d402      	bmi.n	8005556 <_puts_r+0x22>
 8005550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005552:	f000 f996 	bl	8005882 <__retarget_lock_acquire_recursive>
 8005556:	89a3      	ldrh	r3, [r4, #12]
 8005558:	0719      	lsls	r1, r3, #28
 800555a:	d502      	bpl.n	8005562 <_puts_r+0x2e>
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d135      	bne.n	80055ce <_puts_r+0x9a>
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f000 f8c5 	bl	80056f4 <__swsetup_r>
 800556a:	b380      	cbz	r0, 80055ce <_puts_r+0x9a>
 800556c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005570:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005572:	07da      	lsls	r2, r3, #31
 8005574:	d405      	bmi.n	8005582 <_puts_r+0x4e>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	059b      	lsls	r3, r3, #22
 800557a:	d402      	bmi.n	8005582 <_puts_r+0x4e>
 800557c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800557e:	f000 f981 	bl	8005884 <__retarget_lock_release_recursive>
 8005582:	4628      	mov	r0, r5
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	2b00      	cmp	r3, #0
 8005588:	da04      	bge.n	8005594 <_puts_r+0x60>
 800558a:	69a2      	ldr	r2, [r4, #24]
 800558c:	429a      	cmp	r2, r3
 800558e:	dc17      	bgt.n	80055c0 <_puts_r+0x8c>
 8005590:	290a      	cmp	r1, #10
 8005592:	d015      	beq.n	80055c0 <_puts_r+0x8c>
 8005594:	6823      	ldr	r3, [r4, #0]
 8005596:	1c5a      	adds	r2, r3, #1
 8005598:	6022      	str	r2, [r4, #0]
 800559a:	7019      	strb	r1, [r3, #0]
 800559c:	68a3      	ldr	r3, [r4, #8]
 800559e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80055a2:	3b01      	subs	r3, #1
 80055a4:	60a3      	str	r3, [r4, #8]
 80055a6:	2900      	cmp	r1, #0
 80055a8:	d1ed      	bne.n	8005586 <_puts_r+0x52>
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	da11      	bge.n	80055d2 <_puts_r+0x9e>
 80055ae:	4622      	mov	r2, r4
 80055b0:	210a      	movs	r1, #10
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 f85f 	bl	8005676 <__swbuf_r>
 80055b8:	3001      	adds	r0, #1
 80055ba:	d0d7      	beq.n	800556c <_puts_r+0x38>
 80055bc:	250a      	movs	r5, #10
 80055be:	e7d7      	b.n	8005570 <_puts_r+0x3c>
 80055c0:	4622      	mov	r2, r4
 80055c2:	4628      	mov	r0, r5
 80055c4:	f000 f857 	bl	8005676 <__swbuf_r>
 80055c8:	3001      	adds	r0, #1
 80055ca:	d1e7      	bne.n	800559c <_puts_r+0x68>
 80055cc:	e7ce      	b.n	800556c <_puts_r+0x38>
 80055ce:	3e01      	subs	r6, #1
 80055d0:	e7e4      	b.n	800559c <_puts_r+0x68>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	6022      	str	r2, [r4, #0]
 80055d8:	220a      	movs	r2, #10
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e7ee      	b.n	80055bc <_puts_r+0x88>
	...

080055e0 <puts>:
 80055e0:	4b02      	ldr	r3, [pc, #8]	@ (80055ec <puts+0xc>)
 80055e2:	4601      	mov	r1, r0
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	f7ff bfa5 	b.w	8005534 <_puts_r>
 80055ea:	bf00      	nop
 80055ec:	2000001c 	.word	0x2000001c

080055f0 <__sread>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	460c      	mov	r4, r1
 80055f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055f8:	f000 f90c 	bl	8005814 <_read_r>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	bfab      	itete	ge
 8005600:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005602:	89a3      	ldrhlt	r3, [r4, #12]
 8005604:	181b      	addge	r3, r3, r0
 8005606:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800560a:	bfac      	ite	ge
 800560c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800560e:	81a3      	strhlt	r3, [r4, #12]
 8005610:	bd10      	pop	{r4, pc}

08005612 <__swrite>:
 8005612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005616:	461f      	mov	r7, r3
 8005618:	898b      	ldrh	r3, [r1, #12]
 800561a:	05db      	lsls	r3, r3, #23
 800561c:	4605      	mov	r5, r0
 800561e:	460c      	mov	r4, r1
 8005620:	4616      	mov	r6, r2
 8005622:	d505      	bpl.n	8005630 <__swrite+0x1e>
 8005624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005628:	2302      	movs	r3, #2
 800562a:	2200      	movs	r2, #0
 800562c:	f000 f8e0 	bl	80057f0 <_lseek_r>
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005636:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800563a:	81a3      	strh	r3, [r4, #12]
 800563c:	4632      	mov	r2, r6
 800563e:	463b      	mov	r3, r7
 8005640:	4628      	mov	r0, r5
 8005642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005646:	f7ff bea1 	b.w	800538c <_write_r>

0800564a <__sseek>:
 800564a:	b510      	push	{r4, lr}
 800564c:	460c      	mov	r4, r1
 800564e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005652:	f000 f8cd 	bl	80057f0 <_lseek_r>
 8005656:	1c43      	adds	r3, r0, #1
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	bf15      	itete	ne
 800565c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800565e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005662:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005666:	81a3      	strheq	r3, [r4, #12]
 8005668:	bf18      	it	ne
 800566a:	81a3      	strhne	r3, [r4, #12]
 800566c:	bd10      	pop	{r4, pc}

0800566e <__sclose>:
 800566e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005672:	f000 b8ad 	b.w	80057d0 <_close_r>

08005676 <__swbuf_r>:
 8005676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005678:	460e      	mov	r6, r1
 800567a:	4614      	mov	r4, r2
 800567c:	4605      	mov	r5, r0
 800567e:	b118      	cbz	r0, 8005688 <__swbuf_r+0x12>
 8005680:	6a03      	ldr	r3, [r0, #32]
 8005682:	b90b      	cbnz	r3, 8005688 <__swbuf_r+0x12>
 8005684:	f7ff ff20 	bl	80054c8 <__sinit>
 8005688:	69a3      	ldr	r3, [r4, #24]
 800568a:	60a3      	str	r3, [r4, #8]
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	071a      	lsls	r2, r3, #28
 8005690:	d501      	bpl.n	8005696 <__swbuf_r+0x20>
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	b943      	cbnz	r3, 80056a8 <__swbuf_r+0x32>
 8005696:	4621      	mov	r1, r4
 8005698:	4628      	mov	r0, r5
 800569a:	f000 f82b 	bl	80056f4 <__swsetup_r>
 800569e:	b118      	cbz	r0, 80056a8 <__swbuf_r+0x32>
 80056a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80056a4:	4638      	mov	r0, r7
 80056a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056a8:	6823      	ldr	r3, [r4, #0]
 80056aa:	6922      	ldr	r2, [r4, #16]
 80056ac:	1a98      	subs	r0, r3, r2
 80056ae:	6963      	ldr	r3, [r4, #20]
 80056b0:	b2f6      	uxtb	r6, r6
 80056b2:	4283      	cmp	r3, r0
 80056b4:	4637      	mov	r7, r6
 80056b6:	dc05      	bgt.n	80056c4 <__swbuf_r+0x4e>
 80056b8:	4621      	mov	r1, r4
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 fa6e 	bl	8005b9c <_fflush_r>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d1ed      	bne.n	80056a0 <__swbuf_r+0x2a>
 80056c4:	68a3      	ldr	r3, [r4, #8]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	60a3      	str	r3, [r4, #8]
 80056ca:	6823      	ldr	r3, [r4, #0]
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	6022      	str	r2, [r4, #0]
 80056d0:	701e      	strb	r6, [r3, #0]
 80056d2:	6962      	ldr	r2, [r4, #20]
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d004      	beq.n	80056e4 <__swbuf_r+0x6e>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	07db      	lsls	r3, r3, #31
 80056de:	d5e1      	bpl.n	80056a4 <__swbuf_r+0x2e>
 80056e0:	2e0a      	cmp	r6, #10
 80056e2:	d1df      	bne.n	80056a4 <__swbuf_r+0x2e>
 80056e4:	4621      	mov	r1, r4
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 fa58 	bl	8005b9c <_fflush_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d0d9      	beq.n	80056a4 <__swbuf_r+0x2e>
 80056f0:	e7d6      	b.n	80056a0 <__swbuf_r+0x2a>
	...

080056f4 <__swsetup_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4b29      	ldr	r3, [pc, #164]	@ (800579c <__swsetup_r+0xa8>)
 80056f8:	4605      	mov	r5, r0
 80056fa:	6818      	ldr	r0, [r3, #0]
 80056fc:	460c      	mov	r4, r1
 80056fe:	b118      	cbz	r0, 8005708 <__swsetup_r+0x14>
 8005700:	6a03      	ldr	r3, [r0, #32]
 8005702:	b90b      	cbnz	r3, 8005708 <__swsetup_r+0x14>
 8005704:	f7ff fee0 	bl	80054c8 <__sinit>
 8005708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570c:	0719      	lsls	r1, r3, #28
 800570e:	d422      	bmi.n	8005756 <__swsetup_r+0x62>
 8005710:	06da      	lsls	r2, r3, #27
 8005712:	d407      	bmi.n	8005724 <__swsetup_r+0x30>
 8005714:	2209      	movs	r2, #9
 8005716:	602a      	str	r2, [r5, #0]
 8005718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005722:	e033      	b.n	800578c <__swsetup_r+0x98>
 8005724:	0758      	lsls	r0, r3, #29
 8005726:	d512      	bpl.n	800574e <__swsetup_r+0x5a>
 8005728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800572a:	b141      	cbz	r1, 800573e <__swsetup_r+0x4a>
 800572c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005730:	4299      	cmp	r1, r3
 8005732:	d002      	beq.n	800573a <__swsetup_r+0x46>
 8005734:	4628      	mov	r0, r5
 8005736:	f000 f8b5 	bl	80058a4 <_free_r>
 800573a:	2300      	movs	r3, #0
 800573c:	6363      	str	r3, [r4, #52]	@ 0x34
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005744:	81a3      	strh	r3, [r4, #12]
 8005746:	2300      	movs	r3, #0
 8005748:	6063      	str	r3, [r4, #4]
 800574a:	6923      	ldr	r3, [r4, #16]
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	f043 0308 	orr.w	r3, r3, #8
 8005754:	81a3      	strh	r3, [r4, #12]
 8005756:	6923      	ldr	r3, [r4, #16]
 8005758:	b94b      	cbnz	r3, 800576e <__swsetup_r+0x7a>
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005760:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005764:	d003      	beq.n	800576e <__swsetup_r+0x7a>
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f000 fa65 	bl	8005c38 <__smakebuf_r>
 800576e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005772:	f013 0201 	ands.w	r2, r3, #1
 8005776:	d00a      	beq.n	800578e <__swsetup_r+0x9a>
 8005778:	2200      	movs	r2, #0
 800577a:	60a2      	str	r2, [r4, #8]
 800577c:	6962      	ldr	r2, [r4, #20]
 800577e:	4252      	negs	r2, r2
 8005780:	61a2      	str	r2, [r4, #24]
 8005782:	6922      	ldr	r2, [r4, #16]
 8005784:	b942      	cbnz	r2, 8005798 <__swsetup_r+0xa4>
 8005786:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800578a:	d1c5      	bne.n	8005718 <__swsetup_r+0x24>
 800578c:	bd38      	pop	{r3, r4, r5, pc}
 800578e:	0799      	lsls	r1, r3, #30
 8005790:	bf58      	it	pl
 8005792:	6962      	ldrpl	r2, [r4, #20]
 8005794:	60a2      	str	r2, [r4, #8]
 8005796:	e7f4      	b.n	8005782 <__swsetup_r+0x8e>
 8005798:	2000      	movs	r0, #0
 800579a:	e7f7      	b.n	800578c <__swsetup_r+0x98>
 800579c:	2000001c 	.word	0x2000001c

080057a0 <memcmp>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	3901      	subs	r1, #1
 80057a4:	4402      	add	r2, r0
 80057a6:	4290      	cmp	r0, r2
 80057a8:	d101      	bne.n	80057ae <memcmp+0xe>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e005      	b.n	80057ba <memcmp+0x1a>
 80057ae:	7803      	ldrb	r3, [r0, #0]
 80057b0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80057b4:	42a3      	cmp	r3, r4
 80057b6:	d001      	beq.n	80057bc <memcmp+0x1c>
 80057b8:	1b18      	subs	r0, r3, r4
 80057ba:	bd10      	pop	{r4, pc}
 80057bc:	3001      	adds	r0, #1
 80057be:	e7f2      	b.n	80057a6 <memcmp+0x6>

080057c0 <memset>:
 80057c0:	4402      	add	r2, r0
 80057c2:	4603      	mov	r3, r0
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d100      	bne.n	80057ca <memset+0xa>
 80057c8:	4770      	bx	lr
 80057ca:	f803 1b01 	strb.w	r1, [r3], #1
 80057ce:	e7f9      	b.n	80057c4 <memset+0x4>

080057d0 <_close_r>:
 80057d0:	b538      	push	{r3, r4, r5, lr}
 80057d2:	4d06      	ldr	r5, [pc, #24]	@ (80057ec <_close_r+0x1c>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	4604      	mov	r4, r0
 80057d8:	4608      	mov	r0, r1
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fb f965 	bl	8000aaa <_close>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d102      	bne.n	80057ea <_close_r+0x1a>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	b103      	cbz	r3, 80057ea <_close_r+0x1a>
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	bd38      	pop	{r3, r4, r5, pc}
 80057ec:	2001a9b0 	.word	0x2001a9b0

080057f0 <_lseek_r>:
 80057f0:	b538      	push	{r3, r4, r5, lr}
 80057f2:	4d07      	ldr	r5, [pc, #28]	@ (8005810 <_lseek_r+0x20>)
 80057f4:	4604      	mov	r4, r0
 80057f6:	4608      	mov	r0, r1
 80057f8:	4611      	mov	r1, r2
 80057fa:	2200      	movs	r2, #0
 80057fc:	602a      	str	r2, [r5, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	f7fb f97a 	bl	8000af8 <_lseek>
 8005804:	1c43      	adds	r3, r0, #1
 8005806:	d102      	bne.n	800580e <_lseek_r+0x1e>
 8005808:	682b      	ldr	r3, [r5, #0]
 800580a:	b103      	cbz	r3, 800580e <_lseek_r+0x1e>
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	bd38      	pop	{r3, r4, r5, pc}
 8005810:	2001a9b0 	.word	0x2001a9b0

08005814 <_read_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4d07      	ldr	r5, [pc, #28]	@ (8005834 <_read_r+0x20>)
 8005818:	4604      	mov	r4, r0
 800581a:	4608      	mov	r0, r1
 800581c:	4611      	mov	r1, r2
 800581e:	2200      	movs	r2, #0
 8005820:	602a      	str	r2, [r5, #0]
 8005822:	461a      	mov	r2, r3
 8005824:	f7fb f924 	bl	8000a70 <_read>
 8005828:	1c43      	adds	r3, r0, #1
 800582a:	d102      	bne.n	8005832 <_read_r+0x1e>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	b103      	cbz	r3, 8005832 <_read_r+0x1e>
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	bd38      	pop	{r3, r4, r5, pc}
 8005834:	2001a9b0 	.word	0x2001a9b0

08005838 <__libc_init_array>:
 8005838:	b570      	push	{r4, r5, r6, lr}
 800583a:	4d0d      	ldr	r5, [pc, #52]	@ (8005870 <__libc_init_array+0x38>)
 800583c:	4c0d      	ldr	r4, [pc, #52]	@ (8005874 <__libc_init_array+0x3c>)
 800583e:	1b64      	subs	r4, r4, r5
 8005840:	10a4      	asrs	r4, r4, #2
 8005842:	2600      	movs	r6, #0
 8005844:	42a6      	cmp	r6, r4
 8005846:	d109      	bne.n	800585c <__libc_init_array+0x24>
 8005848:	4d0b      	ldr	r5, [pc, #44]	@ (8005878 <__libc_init_array+0x40>)
 800584a:	4c0c      	ldr	r4, [pc, #48]	@ (800587c <__libc_init_array+0x44>)
 800584c:	f000 fa70 	bl	8005d30 <_init>
 8005850:	1b64      	subs	r4, r4, r5
 8005852:	10a4      	asrs	r4, r4, #2
 8005854:	2600      	movs	r6, #0
 8005856:	42a6      	cmp	r6, r4
 8005858:	d105      	bne.n	8005866 <__libc_init_array+0x2e>
 800585a:	bd70      	pop	{r4, r5, r6, pc}
 800585c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005860:	4798      	blx	r3
 8005862:	3601      	adds	r6, #1
 8005864:	e7ee      	b.n	8005844 <__libc_init_array+0xc>
 8005866:	f855 3b04 	ldr.w	r3, [r5], #4
 800586a:	4798      	blx	r3
 800586c:	3601      	adds	r6, #1
 800586e:	e7f2      	b.n	8005856 <__libc_init_array+0x1e>
 8005870:	08005e9c 	.word	0x08005e9c
 8005874:	08005e9c 	.word	0x08005e9c
 8005878:	08005e9c 	.word	0x08005e9c
 800587c:	08005ea0 	.word	0x08005ea0

08005880 <__retarget_lock_init_recursive>:
 8005880:	4770      	bx	lr

08005882 <__retarget_lock_acquire_recursive>:
 8005882:	4770      	bx	lr

08005884 <__retarget_lock_release_recursive>:
 8005884:	4770      	bx	lr

08005886 <memcpy>:
 8005886:	440a      	add	r2, r1
 8005888:	4291      	cmp	r1, r2
 800588a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800588e:	d100      	bne.n	8005892 <memcpy+0xc>
 8005890:	4770      	bx	lr
 8005892:	b510      	push	{r4, lr}
 8005894:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589c:	4291      	cmp	r1, r2
 800589e:	d1f9      	bne.n	8005894 <memcpy+0xe>
 80058a0:	bd10      	pop	{r4, pc}
	...

080058a4 <_free_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4605      	mov	r5, r0
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d041      	beq.n	8005930 <_free_r+0x8c>
 80058ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b0:	1f0c      	subs	r4, r1, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bfb8      	it	lt
 80058b6:	18e4      	addlt	r4, r4, r3
 80058b8:	f000 f8e0 	bl	8005a7c <__malloc_lock>
 80058bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005934 <_free_r+0x90>)
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	b933      	cbnz	r3, 80058d0 <_free_r+0x2c>
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	6014      	str	r4, [r2, #0]
 80058c6:	4628      	mov	r0, r5
 80058c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058cc:	f000 b8dc 	b.w	8005a88 <__malloc_unlock>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d908      	bls.n	80058e6 <_free_r+0x42>
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	1821      	adds	r1, r4, r0
 80058d8:	428b      	cmp	r3, r1
 80058da:	bf01      	itttt	eq
 80058dc:	6819      	ldreq	r1, [r3, #0]
 80058de:	685b      	ldreq	r3, [r3, #4]
 80058e0:	1809      	addeq	r1, r1, r0
 80058e2:	6021      	streq	r1, [r4, #0]
 80058e4:	e7ed      	b.n	80058c2 <_free_r+0x1e>
 80058e6:	461a      	mov	r2, r3
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b10b      	cbz	r3, 80058f0 <_free_r+0x4c>
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	d9fa      	bls.n	80058e6 <_free_r+0x42>
 80058f0:	6811      	ldr	r1, [r2, #0]
 80058f2:	1850      	adds	r0, r2, r1
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d10b      	bne.n	8005910 <_free_r+0x6c>
 80058f8:	6820      	ldr	r0, [r4, #0]
 80058fa:	4401      	add	r1, r0
 80058fc:	1850      	adds	r0, r2, r1
 80058fe:	4283      	cmp	r3, r0
 8005900:	6011      	str	r1, [r2, #0]
 8005902:	d1e0      	bne.n	80058c6 <_free_r+0x22>
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	6053      	str	r3, [r2, #4]
 800590a:	4408      	add	r0, r1
 800590c:	6010      	str	r0, [r2, #0]
 800590e:	e7da      	b.n	80058c6 <_free_r+0x22>
 8005910:	d902      	bls.n	8005918 <_free_r+0x74>
 8005912:	230c      	movs	r3, #12
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	e7d6      	b.n	80058c6 <_free_r+0x22>
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	1821      	adds	r1, r4, r0
 800591c:	428b      	cmp	r3, r1
 800591e:	bf04      	itt	eq
 8005920:	6819      	ldreq	r1, [r3, #0]
 8005922:	685b      	ldreq	r3, [r3, #4]
 8005924:	6063      	str	r3, [r4, #4]
 8005926:	bf04      	itt	eq
 8005928:	1809      	addeq	r1, r1, r0
 800592a:	6021      	streq	r1, [r4, #0]
 800592c:	6054      	str	r4, [r2, #4]
 800592e:	e7ca      	b.n	80058c6 <_free_r+0x22>
 8005930:	bd38      	pop	{r3, r4, r5, pc}
 8005932:	bf00      	nop
 8005934:	2001a9bc 	.word	0x2001a9bc

08005938 <sbrk_aligned>:
 8005938:	b570      	push	{r4, r5, r6, lr}
 800593a:	4e0f      	ldr	r6, [pc, #60]	@ (8005978 <sbrk_aligned+0x40>)
 800593c:	460c      	mov	r4, r1
 800593e:	6831      	ldr	r1, [r6, #0]
 8005940:	4605      	mov	r5, r0
 8005942:	b911      	cbnz	r1, 800594a <sbrk_aligned+0x12>
 8005944:	f000 f9d6 	bl	8005cf4 <_sbrk_r>
 8005948:	6030      	str	r0, [r6, #0]
 800594a:	4621      	mov	r1, r4
 800594c:	4628      	mov	r0, r5
 800594e:	f000 f9d1 	bl	8005cf4 <_sbrk_r>
 8005952:	1c43      	adds	r3, r0, #1
 8005954:	d103      	bne.n	800595e <sbrk_aligned+0x26>
 8005956:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800595a:	4620      	mov	r0, r4
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	1cc4      	adds	r4, r0, #3
 8005960:	f024 0403 	bic.w	r4, r4, #3
 8005964:	42a0      	cmp	r0, r4
 8005966:	d0f8      	beq.n	800595a <sbrk_aligned+0x22>
 8005968:	1a21      	subs	r1, r4, r0
 800596a:	4628      	mov	r0, r5
 800596c:	f000 f9c2 	bl	8005cf4 <_sbrk_r>
 8005970:	3001      	adds	r0, #1
 8005972:	d1f2      	bne.n	800595a <sbrk_aligned+0x22>
 8005974:	e7ef      	b.n	8005956 <sbrk_aligned+0x1e>
 8005976:	bf00      	nop
 8005978:	2001a9b8 	.word	0x2001a9b8

0800597c <_malloc_r>:
 800597c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005980:	1ccd      	adds	r5, r1, #3
 8005982:	f025 0503 	bic.w	r5, r5, #3
 8005986:	3508      	adds	r5, #8
 8005988:	2d0c      	cmp	r5, #12
 800598a:	bf38      	it	cc
 800598c:	250c      	movcc	r5, #12
 800598e:	2d00      	cmp	r5, #0
 8005990:	4606      	mov	r6, r0
 8005992:	db01      	blt.n	8005998 <_malloc_r+0x1c>
 8005994:	42a9      	cmp	r1, r5
 8005996:	d904      	bls.n	80059a2 <_malloc_r+0x26>
 8005998:	230c      	movs	r3, #12
 800599a:	6033      	str	r3, [r6, #0]
 800599c:	2000      	movs	r0, #0
 800599e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005a78 <_malloc_r+0xfc>
 80059a6:	f000 f869 	bl	8005a7c <__malloc_lock>
 80059aa:	f8d8 3000 	ldr.w	r3, [r8]
 80059ae:	461c      	mov	r4, r3
 80059b0:	bb44      	cbnz	r4, 8005a04 <_malloc_r+0x88>
 80059b2:	4629      	mov	r1, r5
 80059b4:	4630      	mov	r0, r6
 80059b6:	f7ff ffbf 	bl	8005938 <sbrk_aligned>
 80059ba:	1c43      	adds	r3, r0, #1
 80059bc:	4604      	mov	r4, r0
 80059be:	d158      	bne.n	8005a72 <_malloc_r+0xf6>
 80059c0:	f8d8 4000 	ldr.w	r4, [r8]
 80059c4:	4627      	mov	r7, r4
 80059c6:	2f00      	cmp	r7, #0
 80059c8:	d143      	bne.n	8005a52 <_malloc_r+0xd6>
 80059ca:	2c00      	cmp	r4, #0
 80059cc:	d04b      	beq.n	8005a66 <_malloc_r+0xea>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	4639      	mov	r1, r7
 80059d2:	4630      	mov	r0, r6
 80059d4:	eb04 0903 	add.w	r9, r4, r3
 80059d8:	f000 f98c 	bl	8005cf4 <_sbrk_r>
 80059dc:	4581      	cmp	r9, r0
 80059de:	d142      	bne.n	8005a66 <_malloc_r+0xea>
 80059e0:	6821      	ldr	r1, [r4, #0]
 80059e2:	1a6d      	subs	r5, r5, r1
 80059e4:	4629      	mov	r1, r5
 80059e6:	4630      	mov	r0, r6
 80059e8:	f7ff ffa6 	bl	8005938 <sbrk_aligned>
 80059ec:	3001      	adds	r0, #1
 80059ee:	d03a      	beq.n	8005a66 <_malloc_r+0xea>
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	442b      	add	r3, r5
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	f8d8 3000 	ldr.w	r3, [r8]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	bb62      	cbnz	r2, 8005a58 <_malloc_r+0xdc>
 80059fe:	f8c8 7000 	str.w	r7, [r8]
 8005a02:	e00f      	b.n	8005a24 <_malloc_r+0xa8>
 8005a04:	6822      	ldr	r2, [r4, #0]
 8005a06:	1b52      	subs	r2, r2, r5
 8005a08:	d420      	bmi.n	8005a4c <_malloc_r+0xd0>
 8005a0a:	2a0b      	cmp	r2, #11
 8005a0c:	d917      	bls.n	8005a3e <_malloc_r+0xc2>
 8005a0e:	1961      	adds	r1, r4, r5
 8005a10:	42a3      	cmp	r3, r4
 8005a12:	6025      	str	r5, [r4, #0]
 8005a14:	bf18      	it	ne
 8005a16:	6059      	strne	r1, [r3, #4]
 8005a18:	6863      	ldr	r3, [r4, #4]
 8005a1a:	bf08      	it	eq
 8005a1c:	f8c8 1000 	streq.w	r1, [r8]
 8005a20:	5162      	str	r2, [r4, r5]
 8005a22:	604b      	str	r3, [r1, #4]
 8005a24:	4630      	mov	r0, r6
 8005a26:	f000 f82f 	bl	8005a88 <__malloc_unlock>
 8005a2a:	f104 000b 	add.w	r0, r4, #11
 8005a2e:	1d23      	adds	r3, r4, #4
 8005a30:	f020 0007 	bic.w	r0, r0, #7
 8005a34:	1ac2      	subs	r2, r0, r3
 8005a36:	bf1c      	itt	ne
 8005a38:	1a1b      	subne	r3, r3, r0
 8005a3a:	50a3      	strne	r3, [r4, r2]
 8005a3c:	e7af      	b.n	800599e <_malloc_r+0x22>
 8005a3e:	6862      	ldr	r2, [r4, #4]
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	bf0c      	ite	eq
 8005a44:	f8c8 2000 	streq.w	r2, [r8]
 8005a48:	605a      	strne	r2, [r3, #4]
 8005a4a:	e7eb      	b.n	8005a24 <_malloc_r+0xa8>
 8005a4c:	4623      	mov	r3, r4
 8005a4e:	6864      	ldr	r4, [r4, #4]
 8005a50:	e7ae      	b.n	80059b0 <_malloc_r+0x34>
 8005a52:	463c      	mov	r4, r7
 8005a54:	687f      	ldr	r7, [r7, #4]
 8005a56:	e7b6      	b.n	80059c6 <_malloc_r+0x4a>
 8005a58:	461a      	mov	r2, r3
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d1fb      	bne.n	8005a58 <_malloc_r+0xdc>
 8005a60:	2300      	movs	r3, #0
 8005a62:	6053      	str	r3, [r2, #4]
 8005a64:	e7de      	b.n	8005a24 <_malloc_r+0xa8>
 8005a66:	230c      	movs	r3, #12
 8005a68:	6033      	str	r3, [r6, #0]
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f000 f80c 	bl	8005a88 <__malloc_unlock>
 8005a70:	e794      	b.n	800599c <_malloc_r+0x20>
 8005a72:	6005      	str	r5, [r0, #0]
 8005a74:	e7d6      	b.n	8005a24 <_malloc_r+0xa8>
 8005a76:	bf00      	nop
 8005a78:	2001a9bc 	.word	0x2001a9bc

08005a7c <__malloc_lock>:
 8005a7c:	4801      	ldr	r0, [pc, #4]	@ (8005a84 <__malloc_lock+0x8>)
 8005a7e:	f7ff bf00 	b.w	8005882 <__retarget_lock_acquire_recursive>
 8005a82:	bf00      	nop
 8005a84:	2001a9b4 	.word	0x2001a9b4

08005a88 <__malloc_unlock>:
 8005a88:	4801      	ldr	r0, [pc, #4]	@ (8005a90 <__malloc_unlock+0x8>)
 8005a8a:	f7ff befb 	b.w	8005884 <__retarget_lock_release_recursive>
 8005a8e:	bf00      	nop
 8005a90:	2001a9b4 	.word	0x2001a9b4

08005a94 <__sflush_r>:
 8005a94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9c:	0716      	lsls	r6, r2, #28
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	460c      	mov	r4, r1
 8005aa2:	d454      	bmi.n	8005b4e <__sflush_r+0xba>
 8005aa4:	684b      	ldr	r3, [r1, #4]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	dc02      	bgt.n	8005ab0 <__sflush_r+0x1c>
 8005aaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	dd48      	ble.n	8005b42 <__sflush_r+0xae>
 8005ab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	d045      	beq.n	8005b42 <__sflush_r+0xae>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005abc:	682f      	ldr	r7, [r5, #0]
 8005abe:	6a21      	ldr	r1, [r4, #32]
 8005ac0:	602b      	str	r3, [r5, #0]
 8005ac2:	d030      	beq.n	8005b26 <__sflush_r+0x92>
 8005ac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ac6:	89a3      	ldrh	r3, [r4, #12]
 8005ac8:	0759      	lsls	r1, r3, #29
 8005aca:	d505      	bpl.n	8005ad8 <__sflush_r+0x44>
 8005acc:	6863      	ldr	r3, [r4, #4]
 8005ace:	1ad2      	subs	r2, r2, r3
 8005ad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ad2:	b10b      	cbz	r3, 8005ad8 <__sflush_r+0x44>
 8005ad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	2300      	movs	r3, #0
 8005ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005adc:	6a21      	ldr	r1, [r4, #32]
 8005ade:	4628      	mov	r0, r5
 8005ae0:	47b0      	blx	r6
 8005ae2:	1c43      	adds	r3, r0, #1
 8005ae4:	89a3      	ldrh	r3, [r4, #12]
 8005ae6:	d106      	bne.n	8005af6 <__sflush_r+0x62>
 8005ae8:	6829      	ldr	r1, [r5, #0]
 8005aea:	291d      	cmp	r1, #29
 8005aec:	d82b      	bhi.n	8005b46 <__sflush_r+0xb2>
 8005aee:	4a2a      	ldr	r2, [pc, #168]	@ (8005b98 <__sflush_r+0x104>)
 8005af0:	40ca      	lsrs	r2, r1
 8005af2:	07d6      	lsls	r6, r2, #31
 8005af4:	d527      	bpl.n	8005b46 <__sflush_r+0xb2>
 8005af6:	2200      	movs	r2, #0
 8005af8:	6062      	str	r2, [r4, #4]
 8005afa:	04d9      	lsls	r1, r3, #19
 8005afc:	6922      	ldr	r2, [r4, #16]
 8005afe:	6022      	str	r2, [r4, #0]
 8005b00:	d504      	bpl.n	8005b0c <__sflush_r+0x78>
 8005b02:	1c42      	adds	r2, r0, #1
 8005b04:	d101      	bne.n	8005b0a <__sflush_r+0x76>
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	b903      	cbnz	r3, 8005b0c <__sflush_r+0x78>
 8005b0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b0e:	602f      	str	r7, [r5, #0]
 8005b10:	b1b9      	cbz	r1, 8005b42 <__sflush_r+0xae>
 8005b12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b16:	4299      	cmp	r1, r3
 8005b18:	d002      	beq.n	8005b20 <__sflush_r+0x8c>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7ff fec2 	bl	80058a4 <_free_r>
 8005b20:	2300      	movs	r3, #0
 8005b22:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b24:	e00d      	b.n	8005b42 <__sflush_r+0xae>
 8005b26:	2301      	movs	r3, #1
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b0      	blx	r6
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	1c50      	adds	r0, r2, #1
 8005b30:	d1c9      	bne.n	8005ac6 <__sflush_r+0x32>
 8005b32:	682b      	ldr	r3, [r5, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d0c6      	beq.n	8005ac6 <__sflush_r+0x32>
 8005b38:	2b1d      	cmp	r3, #29
 8005b3a:	d001      	beq.n	8005b40 <__sflush_r+0xac>
 8005b3c:	2b16      	cmp	r3, #22
 8005b3e:	d11e      	bne.n	8005b7e <__sflush_r+0xea>
 8005b40:	602f      	str	r7, [r5, #0]
 8005b42:	2000      	movs	r0, #0
 8005b44:	e022      	b.n	8005b8c <__sflush_r+0xf8>
 8005b46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b4a:	b21b      	sxth	r3, r3
 8005b4c:	e01b      	b.n	8005b86 <__sflush_r+0xf2>
 8005b4e:	690f      	ldr	r7, [r1, #16]
 8005b50:	2f00      	cmp	r7, #0
 8005b52:	d0f6      	beq.n	8005b42 <__sflush_r+0xae>
 8005b54:	0793      	lsls	r3, r2, #30
 8005b56:	680e      	ldr	r6, [r1, #0]
 8005b58:	bf08      	it	eq
 8005b5a:	694b      	ldreq	r3, [r1, #20]
 8005b5c:	600f      	str	r7, [r1, #0]
 8005b5e:	bf18      	it	ne
 8005b60:	2300      	movne	r3, #0
 8005b62:	eba6 0807 	sub.w	r8, r6, r7
 8005b66:	608b      	str	r3, [r1, #8]
 8005b68:	f1b8 0f00 	cmp.w	r8, #0
 8005b6c:	dde9      	ble.n	8005b42 <__sflush_r+0xae>
 8005b6e:	6a21      	ldr	r1, [r4, #32]
 8005b70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b72:	4643      	mov	r3, r8
 8005b74:	463a      	mov	r2, r7
 8005b76:	4628      	mov	r0, r5
 8005b78:	47b0      	blx	r6
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	dc08      	bgt.n	8005b90 <__sflush_r+0xfc>
 8005b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b90:	4407      	add	r7, r0
 8005b92:	eba8 0800 	sub.w	r8, r8, r0
 8005b96:	e7e7      	b.n	8005b68 <__sflush_r+0xd4>
 8005b98:	20400001 	.word	0x20400001

08005b9c <_fflush_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	690b      	ldr	r3, [r1, #16]
 8005ba0:	4605      	mov	r5, r0
 8005ba2:	460c      	mov	r4, r1
 8005ba4:	b913      	cbnz	r3, 8005bac <_fflush_r+0x10>
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	4628      	mov	r0, r5
 8005baa:	bd38      	pop	{r3, r4, r5, pc}
 8005bac:	b118      	cbz	r0, 8005bb6 <_fflush_r+0x1a>
 8005bae:	6a03      	ldr	r3, [r0, #32]
 8005bb0:	b90b      	cbnz	r3, 8005bb6 <_fflush_r+0x1a>
 8005bb2:	f7ff fc89 	bl	80054c8 <__sinit>
 8005bb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d0f3      	beq.n	8005ba6 <_fflush_r+0xa>
 8005bbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bc0:	07d0      	lsls	r0, r2, #31
 8005bc2:	d404      	bmi.n	8005bce <_fflush_r+0x32>
 8005bc4:	0599      	lsls	r1, r3, #22
 8005bc6:	d402      	bmi.n	8005bce <_fflush_r+0x32>
 8005bc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bca:	f7ff fe5a 	bl	8005882 <__retarget_lock_acquire_recursive>
 8005bce:	4628      	mov	r0, r5
 8005bd0:	4621      	mov	r1, r4
 8005bd2:	f7ff ff5f 	bl	8005a94 <__sflush_r>
 8005bd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bd8:	07da      	lsls	r2, r3, #31
 8005bda:	4605      	mov	r5, r0
 8005bdc:	d4e4      	bmi.n	8005ba8 <_fflush_r+0xc>
 8005bde:	89a3      	ldrh	r3, [r4, #12]
 8005be0:	059b      	lsls	r3, r3, #22
 8005be2:	d4e1      	bmi.n	8005ba8 <_fflush_r+0xc>
 8005be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005be6:	f7ff fe4d 	bl	8005884 <__retarget_lock_release_recursive>
 8005bea:	e7dd      	b.n	8005ba8 <_fflush_r+0xc>

08005bec <__swhatbuf_r>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	460c      	mov	r4, r1
 8005bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf4:	2900      	cmp	r1, #0
 8005bf6:	b096      	sub	sp, #88	@ 0x58
 8005bf8:	4615      	mov	r5, r2
 8005bfa:	461e      	mov	r6, r3
 8005bfc:	da0d      	bge.n	8005c1a <__swhatbuf_r+0x2e>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	bf14      	ite	ne
 8005c0a:	2340      	movne	r3, #64	@ 0x40
 8005c0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c10:	2000      	movs	r0, #0
 8005c12:	6031      	str	r1, [r6, #0]
 8005c14:	602b      	str	r3, [r5, #0]
 8005c16:	b016      	add	sp, #88	@ 0x58
 8005c18:	bd70      	pop	{r4, r5, r6, pc}
 8005c1a:	466a      	mov	r2, sp
 8005c1c:	f000 f848 	bl	8005cb0 <_fstat_r>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	dbec      	blt.n	8005bfe <__swhatbuf_r+0x12>
 8005c24:	9901      	ldr	r1, [sp, #4]
 8005c26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c2e:	4259      	negs	r1, r3
 8005c30:	4159      	adcs	r1, r3
 8005c32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c36:	e7eb      	b.n	8005c10 <__swhatbuf_r+0x24>

08005c38 <__smakebuf_r>:
 8005c38:	898b      	ldrh	r3, [r1, #12]
 8005c3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c3c:	079d      	lsls	r5, r3, #30
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460c      	mov	r4, r1
 8005c42:	d507      	bpl.n	8005c54 <__smakebuf_r+0x1c>
 8005c44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	6123      	str	r3, [r4, #16]
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	6163      	str	r3, [r4, #20]
 8005c50:	b003      	add	sp, #12
 8005c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c54:	ab01      	add	r3, sp, #4
 8005c56:	466a      	mov	r2, sp
 8005c58:	f7ff ffc8 	bl	8005bec <__swhatbuf_r>
 8005c5c:	9f00      	ldr	r7, [sp, #0]
 8005c5e:	4605      	mov	r5, r0
 8005c60:	4639      	mov	r1, r7
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff fe8a 	bl	800597c <_malloc_r>
 8005c68:	b948      	cbnz	r0, 8005c7e <__smakebuf_r+0x46>
 8005c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c6e:	059a      	lsls	r2, r3, #22
 8005c70:	d4ee      	bmi.n	8005c50 <__smakebuf_r+0x18>
 8005c72:	f023 0303 	bic.w	r3, r3, #3
 8005c76:	f043 0302 	orr.w	r3, r3, #2
 8005c7a:	81a3      	strh	r3, [r4, #12]
 8005c7c:	e7e2      	b.n	8005c44 <__smakebuf_r+0xc>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	6020      	str	r0, [r4, #0]
 8005c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	9b01      	ldr	r3, [sp, #4]
 8005c8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c8e:	b15b      	cbz	r3, 8005ca8 <__smakebuf_r+0x70>
 8005c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c94:	4630      	mov	r0, r6
 8005c96:	f000 f81d 	bl	8005cd4 <_isatty_r>
 8005c9a:	b128      	cbz	r0, 8005ca8 <__smakebuf_r+0x70>
 8005c9c:	89a3      	ldrh	r3, [r4, #12]
 8005c9e:	f023 0303 	bic.w	r3, r3, #3
 8005ca2:	f043 0301 	orr.w	r3, r3, #1
 8005ca6:	81a3      	strh	r3, [r4, #12]
 8005ca8:	89a3      	ldrh	r3, [r4, #12]
 8005caa:	431d      	orrs	r5, r3
 8005cac:	81a5      	strh	r5, [r4, #12]
 8005cae:	e7cf      	b.n	8005c50 <__smakebuf_r+0x18>

08005cb0 <_fstat_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d07      	ldr	r5, [pc, #28]	@ (8005cd0 <_fstat_r+0x20>)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	602b      	str	r3, [r5, #0]
 8005cbe:	f7fa ff00 	bl	8000ac2 <_fstat>
 8005cc2:	1c43      	adds	r3, r0, #1
 8005cc4:	d102      	bne.n	8005ccc <_fstat_r+0x1c>
 8005cc6:	682b      	ldr	r3, [r5, #0]
 8005cc8:	b103      	cbz	r3, 8005ccc <_fstat_r+0x1c>
 8005cca:	6023      	str	r3, [r4, #0]
 8005ccc:	bd38      	pop	{r3, r4, r5, pc}
 8005cce:	bf00      	nop
 8005cd0:	2001a9b0 	.word	0x2001a9b0

08005cd4 <_isatty_r>:
 8005cd4:	b538      	push	{r3, r4, r5, lr}
 8005cd6:	4d06      	ldr	r5, [pc, #24]	@ (8005cf0 <_isatty_r+0x1c>)
 8005cd8:	2300      	movs	r3, #0
 8005cda:	4604      	mov	r4, r0
 8005cdc:	4608      	mov	r0, r1
 8005cde:	602b      	str	r3, [r5, #0]
 8005ce0:	f7fa feff 	bl	8000ae2 <_isatty>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_isatty_r+0x1a>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_isatty_r+0x1a>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	2001a9b0 	.word	0x2001a9b0

08005cf4 <_sbrk_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d06      	ldr	r5, [pc, #24]	@ (8005d10 <_sbrk_r+0x1c>)
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	4608      	mov	r0, r1
 8005cfe:	602b      	str	r3, [r5, #0]
 8005d00:	f000 f808 	bl	8005d14 <_sbrk>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_sbrk_r+0x1a>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_sbrk_r+0x1a>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	2001a9b0 	.word	0x2001a9b0

08005d14 <_sbrk>:
 8005d14:	4a04      	ldr	r2, [pc, #16]	@ (8005d28 <_sbrk+0x14>)
 8005d16:	6811      	ldr	r1, [r2, #0]
 8005d18:	4603      	mov	r3, r0
 8005d1a:	b909      	cbnz	r1, 8005d20 <_sbrk+0xc>
 8005d1c:	4903      	ldr	r1, [pc, #12]	@ (8005d2c <_sbrk+0x18>)
 8005d1e:	6011      	str	r1, [r2, #0]
 8005d20:	6810      	ldr	r0, [r2, #0]
 8005d22:	4403      	add	r3, r0
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	4770      	bx	lr
 8005d28:	2001a9c0 	.word	0x2001a9c0
 8005d2c:	2001a9c8 	.word	0x2001a9c8

08005d30 <_init>:
 8005d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d32:	bf00      	nop
 8005d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d36:	bc08      	pop	{r3}
 8005d38:	469e      	mov	lr, r3
 8005d3a:	4770      	bx	lr

08005d3c <_fini>:
 8005d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d3e:	bf00      	nop
 8005d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d42:	bc08      	pop	{r3}
 8005d44:	469e      	mov	lr, r3
 8005d46:	4770      	bx	lr
