
004_Queue_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007214  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007534  08007534  00009014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007534  08007534  00008534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800753c  0800753c  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800753c  0800753c  0000853c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007540  08007540  00008540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007544  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e98  20000014  08007558  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012eac  08007558  00009eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015916  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332c  00000000  00000000  0001e95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  00021c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f43  00000000  00000000  00023010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024807  00000000  00000000  00023f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a27  00000000  00000000  0004875a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5d8b  00000000  00000000  0005f181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051d8  00000000  00000000  00144f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014a128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073cc 	.word	0x080073cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	080073cc 	.word	0x080073cc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	@ 0x30
 8000540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000542:	f000 fd47 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000546:	f000 f901 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054a:	f000 f9c1 	bl	80008d0 <MX_GPIO_Init>
  MX_RTC_Init();
 800054e:	f000 f96f 	bl	8000830 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f993 	bl	800087c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 8000556:	4b69      	ldr	r3, [pc, #420]	@ (80006fc <main+0x1c0>)
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2302      	movs	r3, #2
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2300      	movs	r3, #0
 8000560:	22fa      	movs	r2, #250	@ 0xfa
 8000562:	4967      	ldr	r1, [pc, #412]	@ (8000700 <main+0x1c4>)
 8000564:	4867      	ldr	r0, [pc, #412]	@ (8000704 <main+0x1c8>)
 8000566:	f004 fbd7 	bl	8004d18 <xTaskCreate>
 800056a:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status == pdPASS);
 800056c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056e:	2b01      	cmp	r3, #1
 8000570:	d00b      	beq.n	800058a <main+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000576:	f383 8811 	msr	BASEPRI, r3
 800057a:	f3bf 8f6f 	isb	sy
 800057e:	f3bf 8f4f 	dsb	sy
 8000582:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	e7fd      	b.n	8000586 <main+0x4a>

  status = xTaskCreate(cmd_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 800058a:	4b5f      	ldr	r3, [pc, #380]	@ (8000708 <main+0x1cc>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22fa      	movs	r2, #250	@ 0xfa
 8000596:	495d      	ldr	r1, [pc, #372]	@ (800070c <main+0x1d0>)
 8000598:	485d      	ldr	r0, [pc, #372]	@ (8000710 <main+0x1d4>)
 800059a:	f004 fbbd 	bl	8004d18 <xTaskCreate>
 800059e:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status == pdPASS);
 80005a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00b      	beq.n	80005be <main+0x82>
    __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	61fb      	str	r3, [r7, #28]
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x7e>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80005be:	4b55      	ldr	r3, [pc, #340]	@ (8000714 <main+0x1d8>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22fa      	movs	r2, #250	@ 0xfa
 80005ca:	4953      	ldr	r1, [pc, #332]	@ (8000718 <main+0x1dc>)
 80005cc:	4853      	ldr	r0, [pc, #332]	@ (800071c <main+0x1e0>)
 80005ce:	f004 fba3 	bl	8004d18 <xTaskCreate>
 80005d2:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status == pdPASS);
 80005d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00b      	beq.n	80005f2 <main+0xb6>
    __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	61bb      	str	r3, [r7, #24]
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0xb2>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80005f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000720 <main+0x1e4>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	22fa      	movs	r2, #250	@ 0xfa
 80005fe:	4949      	ldr	r1, [pc, #292]	@ (8000724 <main+0x1e8>)
 8000600:	4849      	ldr	r0, [pc, #292]	@ (8000728 <main+0x1ec>)
 8000602:	f004 fb89 	bl	8004d18 <xTaskCreate>
 8000606:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status == pdPASS);
 8000608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800060a:	2b01      	cmp	r3, #1
 800060c:	d00b      	beq.n	8000626 <main+0xea>
    __asm volatile
 800060e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000612:	f383 8811 	msr	BASEPRI, r3
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	617b      	str	r3, [r7, #20]
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0xe6>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8000626:	4b41      	ldr	r3, [pc, #260]	@ (800072c <main+0x1f0>)
 8000628:	9301      	str	r3, [sp, #4]
 800062a:	2302      	movs	r3, #2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	22fa      	movs	r2, #250	@ 0xfa
 8000632:	493f      	ldr	r1, [pc, #252]	@ (8000730 <main+0x1f4>)
 8000634:	483f      	ldr	r0, [pc, #252]	@ (8000734 <main+0x1f8>)
 8000636:	f004 fb6f 	bl	8004d18 <xTaskCreate>
 800063a:	6278      	str	r0, [r7, #36]	@ 0x24

  configASSERT(status == pdPASS);
 800063c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800063e:	2b01      	cmp	r3, #1
 8000640:	d00b      	beq.n	800065a <main+0x11e>
    __asm volatile
 8000642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000646:	f383 8811 	msr	BASEPRI, r3
 800064a:	f3bf 8f6f 	isb	sy
 800064e:	f3bf 8f4f 	dsb	sy
 8000652:	613b      	str	r3, [r7, #16]
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	e7fd      	b.n	8000656 <main+0x11a>

  q_data = xQueueCreate(10, sizeof(char));
 800065a:	2200      	movs	r2, #0
 800065c:	2101      	movs	r1, #1
 800065e:	200a      	movs	r0, #10
 8000660:	f003 fd9e 	bl	80041a0 <xQueueGenericCreate>
 8000664:	4603      	mov	r3, r0
 8000666:	4a34      	ldr	r2, [pc, #208]	@ (8000738 <main+0x1fc>)
 8000668:	6013      	str	r3, [r2, #0]

  configASSERT(q_data != NULL);
 800066a:	4b33      	ldr	r3, [pc, #204]	@ (8000738 <main+0x1fc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d10b      	bne.n	800068a <main+0x14e>
    __asm volatile
 8000672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000676:	f383 8811 	msr	BASEPRI, r3
 800067a:	f3bf 8f6f 	isb	sy
 800067e:	f3bf 8f4f 	dsb	sy
 8000682:	60fb      	str	r3, [r7, #12]
}
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	e7fd      	b.n	8000686 <main+0x14a>

  q_print = xQueueCreate(10, sizeof(size_t));
 800068a:	2200      	movs	r2, #0
 800068c:	2104      	movs	r1, #4
 800068e:	200a      	movs	r0, #10
 8000690:	f003 fd86 	bl	80041a0 <xQueueGenericCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a29      	ldr	r2, [pc, #164]	@ (800073c <main+0x200>)
 8000698:	6013      	str	r3, [r2, #0]

  configASSERT(q_print != NULL);
 800069a:	4b28      	ldr	r3, [pc, #160]	@ (800073c <main+0x200>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d10b      	bne.n	80006ba <main+0x17e>
    __asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	60bb      	str	r3, [r7, #8]
}
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <main+0x17a>

  q_cmd = xQueueCreate(10, sizeof(char));
 80006ba:	2200      	movs	r2, #0
 80006bc:	2101      	movs	r1, #1
 80006be:	200a      	movs	r0, #10
 80006c0:	f003 fd6e 	bl	80041a0 <xQueueGenericCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <main+0x204>)
 80006c8:	6013      	str	r3, [r2, #0]
  configASSERT(q_cmd != NULL);
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <main+0x204>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d10b      	bne.n	80006ea <main+0x1ae>
    __asm volatile
 80006d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d6:	f383 8811 	msr	BASEPRI, r3
 80006da:	f3bf 8f6f 	isb	sy
 80006de:	f3bf 8f4f 	dsb	sy
 80006e2:	607b      	str	r3, [r7, #4]
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	e7fd      	b.n	80006e6 <main+0x1aa>


  HAL_UART_Receive_IT(&huart2, &user_data, 1);
 80006ea:	2201      	movs	r2, #1
 80006ec:	4915      	ldr	r1, [pc, #84]	@ (8000744 <main+0x208>)
 80006ee:	4816      	ldr	r0, [pc, #88]	@ (8000748 <main+0x20c>)
 80006f0:	f002 fd10 	bl	8003114 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80006f4:	f004 fca6 	bl	8005044 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	bf00      	nop
 80006fa:	e7fd      	b.n	80006f8 <main+0x1bc>
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	080073e4 	.word	0x080073e4
 8000704:	08000d59 	.word	0x08000d59
 8000708:	20000098 	.word	0x20000098
 800070c:	080073f0 	.word	0x080073f0
 8000710:	08000e65 	.word	0x08000e65
 8000714:	200000a0 	.word	0x200000a0
 8000718:	080073fc 	.word	0x080073fc
 800071c:	08000e59 	.word	0x08000e59
 8000720:	200000a4 	.word	0x200000a4
 8000724:	08007408 	.word	0x08007408
 8000728:	08000e41 	.word	0x08000e41
 800072c:	200000a8 	.word	0x200000a8
 8000730:	08007414 	.word	0x08007414
 8000734:	08000e4d 	.word	0x08000e4d
 8000738:	200000ac 	.word	0x200000ac
 800073c:	200000b0 	.word	0x200000b0
 8000740:	200000b4 	.word	0x200000b4
 8000744:	200000b8 	.word	0x200000b8
 8000748:	20000050 	.word	0x20000050

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b094      	sub	sp, #80	@ 0x50
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2234      	movs	r2, #52	@ 0x34
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f006 fdfc 	bl	8007358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <SystemClock_Config+0xdc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a2b      	ldr	r2, [pc, #172]	@ (8000828 <SystemClock_Config+0xdc>)
 800077a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <SystemClock_Config+0xdc>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800078c:	2300      	movs	r3, #0
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <SystemClock_Config+0xe0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000798:	4a24      	ldr	r2, [pc, #144]	@ (800082c <SystemClock_Config+0xe0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b22      	ldr	r3, [pc, #136]	@ (800082c <SystemClock_Config+0xe0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007ac:	230a      	movs	r3, #10
 80007ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80007b0:	2300      	movs	r3, #0
 80007b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b4:	2301      	movs	r3, #1
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	2310      	movs	r3, #16
 80007ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007bc:	2301      	movs	r3, #1
 80007be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c0:	2302      	movs	r3, #2
 80007c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c4:	2300      	movs	r3, #0
 80007c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007c8:	2310      	movs	r3, #16
 80007ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007d2:	2304      	movs	r3, #4
 80007d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007d6:	2302      	movs	r3, #2
 80007d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007da:	2302      	movs	r3, #2
 80007dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 fe00 	bl	80023e8 <HAL_RCC_OscConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80007ee:	f000 f94d 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f2:	230f      	movs	r3, #15
 80007f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	2302      	movs	r3, #2
 80007f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000808:	f107 0308 	add.w	r3, r7, #8
 800080c:	2102      	movs	r1, #2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 ff44 	bl	800169c <HAL_RCC_ClockConfig>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800081a:	f000 f937 	bl	8000a8c <Error_Handler>
  }
}
 800081e:	bf00      	nop
 8000820:	3750      	adds	r7, #80	@ 0x50
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	40007000 	.word	0x40007000

08000830 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_RTC_Init+0x44>)
 8000836:	4a10      	ldr	r2, [pc, #64]	@ (8000878 <MX_RTC_Init+0x48>)
 8000838:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_RTC_Init+0x44>)
 800083c:	2240      	movs	r2, #64	@ 0x40
 800083e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_RTC_Init+0x44>)
 8000842:	227f      	movs	r2, #127	@ 0x7f
 8000844:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_RTC_Init+0x44>)
 8000848:	22ff      	movs	r2, #255	@ 0xff
 800084a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_RTC_Init+0x44>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_RTC_Init+0x44>)
 8000854:	2200      	movs	r2, #0
 8000856:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_RTC_Init+0x44>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_RTC_Init+0x44>)
 8000860:	f002 f860 	bl	8002924 <HAL_RTC_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800086a:	f000 f90f 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000030 	.word	0x20000030
 8000878:	40002800 	.word	0x40002800

0800087c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000880:	4b11      	ldr	r3, [pc, #68]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <MX_USART2_UART_Init+0x50>)
 8000884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b0c      	ldr	r3, [pc, #48]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b06      	ldr	r3, [pc, #24]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_USART2_UART_Init+0x4c>)
 80008b4:	f002 fbde 	bl	8003074 <HAL_UART_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008be:	f000 f8e5 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000050 	.word	0x20000050
 80008cc:	40004400 	.word	0x40004400

080008d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08a      	sub	sp, #40	@ 0x28
 80008d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	4b37      	ldr	r3, [pc, #220]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	4a36      	ldr	r2, [pc, #216]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008f6:	4b34      	ldr	r3, [pc, #208]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
 8000906:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a2f      	ldr	r2, [pc, #188]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 800090c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a28      	ldr	r2, [pc, #160]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 8000928:	f043 0301 	orr.w	r3, r3, #1
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0301 	and.w	r3, r3, #1
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a21      	ldr	r2, [pc, #132]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_GPIO_Init+0xf8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|LD2_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	21e0      	movs	r1, #224	@ 0xe0
 800095a:	481c      	ldr	r0, [pc, #112]	@ (80009cc <MX_GPIO_Init+0xfc>)
 800095c:	f000 fe84 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2110      	movs	r1, #16
 8000964:	481a      	ldr	r0, [pc, #104]	@ (80009d0 <MX_GPIO_Init+0x100>)
 8000966:	f000 fe7f 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000970:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	4813      	ldr	r0, [pc, #76]	@ (80009d0 <MX_GPIO_Init+0x100>)
 8000982:	f000 fcdd 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD2_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin|LD3_Pin;
 8000986:	23e0      	movs	r3, #224	@ 0xe0
 8000988:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	4619      	mov	r1, r3
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <MX_GPIO_Init+0xfc>)
 800099e:	f000 fccf 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80009a2:	2310      	movs	r3, #16
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_GPIO_Init+0x100>)
 80009ba:	f000 fcc1 	bl	8001340 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	@ 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020800 	.word	0x40020800

080009d4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af02      	add	r7, sp, #8
 80009da:	6078      	str	r0, [r7, #4]
	uint8_t dummy;

	if(! xQueueIsQueueFullFromISR(q_data))
 80009dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a58 <HAL_UART_RxCpltCallback+0x84>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 f8b2 	bl	8004b4a <xQueueIsQueueFullFromISR>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d107      	bne.n	80009fc <HAL_UART_RxCpltCallback+0x28>
	{
		/* Enqueue data byte */
		xQueueSendFromISR(q_data, (void*) &user_data, NULL);
 80009ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <HAL_UART_RxCpltCallback+0x84>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	2300      	movs	r3, #0
 80009f2:	2200      	movs	r2, #0
 80009f4:	4919      	ldr	r1, [pc, #100]	@ (8000a5c <HAL_UART_RxCpltCallback+0x88>)
 80009f6:	f003 fd47 	bl	8004488 <xQueueGenericSendFromISR>
 80009fa:	e013      	b.n	8000a24 <HAL_UART_RxCpltCallback+0x50>
	} else {
		if (user_data == '\n'){
 80009fc:	4b17      	ldr	r3, [pc, #92]	@ (8000a5c <HAL_UART_RxCpltCallback+0x88>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	2b0a      	cmp	r3, #10
 8000a04:	d10e      	bne.n	8000a24 <HAL_UART_RxCpltCallback+0x50>
			/* Make sure that last byte of data is '\n' */
			xQueueReceiveFromISR(q_data, (void *) &dummy, NULL);
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <HAL_UART_RxCpltCallback+0x84>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f107 010f 	add.w	r1, r7, #15
 8000a0e:	2200      	movs	r2, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f003 fed1 	bl	80047b8 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void *) &user_data, NULL);
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <HAL_UART_RxCpltCallback+0x84>)
 8000a18:	6818      	ldr	r0, [r3, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	490f      	ldr	r1, [pc, #60]	@ (8000a5c <HAL_UART_RxCpltCallback+0x88>)
 8000a20:	f003 fd32 	bl	8004488 <xQueueGenericSendFromISR>
		}
	}

	/* Send notification to command handling task if user_data = '\n' */
	if (user_data == '\n'){
 8000a24:	4b0d      	ldr	r3, [pc, #52]	@ (8000a5c <HAL_UART_RxCpltCallback+0x88>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b0a      	cmp	r3, #10
 8000a2c:	d10a      	bne.n	8000a44 <HAL_UART_RxCpltCallback+0x70>
		/* Send notificaiton to command handling task */
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <HAL_UART_RxCpltCallback+0x8c>)
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	2300      	movs	r3, #0
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	2300      	movs	r3, #0
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f005 faf0 	bl	8006024 <xTaskGenericNotifyFromISR>

	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &user_data, 1);
 8000a44:	2201      	movs	r2, #1
 8000a46:	4905      	ldr	r1, [pc, #20]	@ (8000a5c <HAL_UART_RxCpltCallback+0x88>)
 8000a48:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <HAL_UART_RxCpltCallback+0x90>)
 8000a4a:	f002 fb63 	bl	8003114 <HAL_UART_Receive_IT>

}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000ac 	.word	0x200000ac
 8000a5c:	200000b8 	.word	0x200000b8
 8000a60:	20000098 	.word	0x20000098
 8000a64:	20000050 	.word	0x20000050

08000a68 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d101      	bne.n	8000a7e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000a7a:	f000 facd 	bl	8001018 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40001000 	.word	0x40001000

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <Error_Handler+0x8>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09a      	sub	sp, #104	@ 0x68
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	225c      	movs	r2, #92	@ 0x5c
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f006 fc2d 	bl	8007358 <memset>
  if(hrtc->Instance==RTC)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <HAL_RTC_MspInit+0x4c>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d111      	bne.n	8000b2c <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 030c 	add.w	r3, r7, #12
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 ff0c 	bl	8001934 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000b22:	f7ff ffb3 	bl	8000a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b26:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <HAL_RTC_MspInit+0x50>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000b2c:	bf00      	nop
 8000b2e:	3768      	adds	r7, #104	@ 0x68
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40002800 	.word	0x40002800
 8000b38:	42470e3c 	.word	0x42470e3c

08000b3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	@ 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1d      	ldr	r2, [pc, #116]	@ (8000bd0 <HAL_UART_MspInit+0x94>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d133      	bne.n	8000bc6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a1b      	ldr	r2, [pc, #108]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60fb      	str	r3, [r7, #12]
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_UART_MspInit+0x98>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b96:	230c      	movs	r3, #12
 8000b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4809      	ldr	r0, [pc, #36]	@ (8000bd8 <HAL_UART_MspInit+0x9c>)
 8000bb2:	f000 fbc5 	bl	8001340 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2106      	movs	r1, #6
 8000bba:	2026      	movs	r0, #38	@ 0x26
 8000bbc:	f000 fb04 	bl	80011c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc0:	2026      	movs	r0, #38	@ 0x26
 8000bc2:	f000 fb1d 	bl	8001200 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3728      	adds	r7, #40	@ 0x28
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40004400 	.word	0x40004400
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40020000 	.word	0x40020000

08000bdc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <HAL_InitTick+0xe4>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf4:	4a32      	ldr	r2, [pc, #200]	@ (8000cc0 <HAL_InitTick+0xe4>)
 8000bf6:	f043 0310 	orr.w	r3, r3, #16
 8000bfa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <HAL_InitTick+0xe4>)
 8000bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c00:	f003 0310 	and.w	r3, r3, #16
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c08:	f107 0210 	add.w	r2, r7, #16
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	4611      	mov	r1, r2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fe5c 	bl	80018d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d103      	bne.n	8000c2a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c22:	f000 fe2d 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8000c26:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c28:	e004      	b.n	8000c34 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c2a:	f000 fe29 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <HAL_InitTick+0xe8>)
 8000c38:	fba2 2303 	umull	r2, r3, r2, r3
 8000c3c:	0c9b      	lsrs	r3, r3, #18
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c42:	4b21      	ldr	r3, [pc, #132]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c44:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <HAL_InitTick+0xf0>)
 8000c46:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c48:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c4e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c50:	4a1d      	ldr	r2, [pc, #116]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c54:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c68:	4817      	ldr	r0, [pc, #92]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c6a:	f001 ff61 	bl	8002b30 <HAL_TIM_Base_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c74:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d11b      	bne.n	8000cb4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c7c:	4812      	ldr	r0, [pc, #72]	@ (8000cc8 <HAL_InitTick+0xec>)
 8000c7e:	f001 ffb1 	bl	8002be4 <HAL_TIM_Base_Start_IT>
 8000c82:	4603      	mov	r3, r0
 8000c84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d111      	bne.n	8000cb4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c90:	2036      	movs	r0, #54	@ 0x36
 8000c92:	f000 fab5 	bl	8001200 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d808      	bhi.n	8000cae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	2036      	movs	r0, #54	@ 0x36
 8000ca2:	f000 fa91 	bl	80011c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd0 <HAL_InitTick+0xf4>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	e002      	b.n	8000cb4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3738      	adds	r7, #56	@ 0x38
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	431bde83 	.word	0x431bde83
 8000cc8:	200000bc 	.word	0x200000bc
 8000ccc:	40001000 	.word	0x40001000
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <NMI_Handler+0x4>

08000cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <HardFault_Handler+0x4>

08000ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce8:	bf00      	nop
 8000cea:	e7fd      	b.n	8000ce8 <MemManage_Handler+0x4>

08000cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf0:	bf00      	nop
 8000cf2:	e7fd      	b.n	8000cf0 <BusFault_Handler+0x4>

08000cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <UsageFault_Handler+0x4>

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <USART2_IRQHandler+0x10>)
 8000d12:	f002 fa25 	bl	8003160 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000050 	.word	0x20000050

08000d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <TIM6_DAC_IRQHandler+0x10>)
 8000d26:	f001 ffcd 	bl	8002cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000bc 	.word	0x200000bc

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <menu_task>:
void process_command(command_t *cmd);
extern QueueHandle_t q_cmd;


void menu_task(void *param)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b088      	sub	sp, #32
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;

	const char* msg_menu =  "========================================\n"
 8000d60:	4b31      	ldr	r3, [pc, #196]	@ (8000e28 <menu_task+0xd0>)
 8000d62:	60bb      	str	r3, [r7, #8]
							"		Exit 					--->	2\n"
							"		Enter your choice here 	:		";


	while(1){
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8000d64:	4b31      	ldr	r3, [pc, #196]	@ (8000e2c <menu_task+0xd4>)
 8000d66:	6818      	ldr	r0, [r3, #0]
 8000d68:	f107 0108 	add.w	r1, r7, #8
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d72:	f003 fa87 	bl	8004284 <xQueueGenericSend>
		// wait for menu commands
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d7e:	9200      	str	r2, [sp, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2000      	movs	r0, #0
 8000d86:	f004 ff93 	bl	8005cb0 <xTaskGenericNotifyWait>
		cmd = (command_t *) cmd_addr;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	617b      	str	r3, [r7, #20]

		if(cmd -> len == 1){
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d133      	bne.n	8000dfe <menu_task+0xa6>
			option = cmd-> payload[0] - 48;
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	3b30      	subs	r3, #48	@ 0x30
 8000d9c:	613b      	str	r3, [r7, #16]

			switch(option)
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d035      	beq.n	8000e10 <menu_task+0xb8>
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	dc20      	bgt.n	8000dec <menu_task+0x94>
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d003      	beq.n	8000db8 <menu_task+0x60>
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d00d      	beq.n	8000dd2 <menu_task+0x7a>
 8000db6:	e019      	b.n	8000dec <menu_task+0x94>
			{
				case 0 :
					curr_state = sLedEffect;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <menu_task+0xd8>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8000dbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <menu_task+0xdc>)
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	f005 f802 	bl	8005dd4 <xTaskGenericNotify>
					break;
 8000dd0:	e01f      	b.n	8000e12 <menu_task+0xba>

				case 1 :
					curr_state = sRtcMenu;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <menu_task+0xd8>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <menu_task+0xe0>)
 8000dda:	6818      	ldr	r0, [r3, #0]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	2200      	movs	r2, #0
 8000de4:	2100      	movs	r1, #0
 8000de6:	f004 fff5 	bl	8005dd4 <xTaskGenericNotify>
					break;
 8000dea:	e012      	b.n	8000e12 <menu_task+0xba>

				case 2 : /*implement exit*/
					break;
				default:
					xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000dec:	4b0f      	ldr	r3, [pc, #60]	@ (8000e2c <menu_task+0xd4>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	2300      	movs	r3, #0
 8000df2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000df6:	4911      	ldr	r1, [pc, #68]	@ (8000e3c <menu_task+0xe4>)
 8000df8:	f003 fa44 	bl	8004284 <xQueueGenericSend>
					continue;
 8000dfc:	e012      	b.n	8000e24 <menu_task+0xcc>
			}


		} else{
			// invalid
			xQueueSend(q_print, &msg_inv, portMAX_DELAY);
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000e2c <menu_task+0xd4>)
 8000e00:	6818      	ldr	r0, [r3, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <menu_task+0xe4>)
 8000e0a:	f003 fa3b 	bl	8004284 <xQueueGenericSend>
 8000e0e:	e000      	b.n	8000e12 <menu_task+0xba>
					break;
 8000e10:	bf00      	nop
		}

		// wait to run again when some other task notifies
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f004 ff46 	bl	8005cb0 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_menu, portMAX_DELAY);
 8000e24:	e79e      	b.n	8000d64 <menu_task+0xc>
 8000e26:	bf00      	nop
 8000e28:	08007438 	.word	0x08007438
 8000e2c:	200000b0 	.word	0x200000b0
 8000e30:	200000b9 	.word	0x200000b9
 8000e34:	200000a4 	.word	0x200000a4
 8000e38:	200000a8 	.word	0x200000a8
 8000e3c:	20000004 	.word	0x20000004

08000e40 <led_task>:

	}
}

void led_task(void *param)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
	while(1){
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <led_task+0x8>

08000e4c <rtc_task>:

	}
}

void rtc_task(void *param)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	while(1){
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <rtc_task+0x8>

08000e58 <print_task>:

	}
}

void print_task(void *param)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
	while(1){
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <print_task+0x8>

08000e64 <cmd_task>:

	}
}

void cmd_task(void *param)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af02      	add	r7, sp, #8
 8000e6a:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;

	while(1){
		/* Implement notify wait */
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	2300      	movs	r3, #0
 8000e74:	2200      	movs	r2, #0
 8000e76:	2100      	movs	r1, #0
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f004 ff19 	bl	8005cb0 <xTaskGenericNotifyWait>
 8000e7e:	61f8      	str	r0, [r7, #28]
		if(ret == pdTRUE){
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d1f2      	bne.n	8000e6c <cmd_task+0x8>
			/* process the user data (commnad) stored in input data queue */
			process_command(&cmd);
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f802 	bl	8000e94 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e90:	e7ec      	b.n	8000e6c <cmd_task+0x8>
	...

08000e94 <process_command>:
		}
	}
}

void process_command(command_t *cmd)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 f835 	bl	8000f0c <extract_command>

	switch(curr_state)
 8000ea2:	4b16      	ldr	r3, [pc, #88]	@ (8000efc <process_command+0x68>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b05      	cmp	r3, #5
 8000ea8:	dc24      	bgt.n	8000ef4 <process_command+0x60>
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	da18      	bge.n	8000ee0 <process_command+0x4c>
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <process_command+0x24>
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d00a      	beq.n	8000ecc <process_command+0x38>
			xTaskNotify(handle_rtc_task, (uint32_t) cmd, eSetValueWithOverwrite);
		break;

	}

}
 8000eb6:	e01d      	b.n	8000ef4 <process_command+0x60>
			xTaskNotify(handle_menu_task, (uint32_t) cmd, eSetValueWithOverwrite);
 8000eb8:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <process_command+0x6c>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f004 ff85 	bl	8005dd4 <xTaskGenericNotify>
		break;
 8000eca:	e013      	b.n	8000ef4 <process_command+0x60>
			xTaskNotify(handle_led_task, (uint32_t) cmd, eSetValueWithOverwrite);
 8000ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <process_command+0x70>)
 8000ece:	6818      	ldr	r0, [r3, #0]
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	9300      	str	r3, [sp, #0]
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f004 ff7b 	bl	8005dd4 <xTaskGenericNotify>
		break;
 8000ede:	e009      	b.n	8000ef4 <process_command+0x60>
			xTaskNotify(handle_rtc_task, (uint32_t) cmd, eSetValueWithOverwrite);
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <process_command+0x74>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	687a      	ldr	r2, [r7, #4]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	2303      	movs	r3, #3
 8000eec:	2100      	movs	r1, #0
 8000eee:	f004 ff71 	bl	8005dd4 <xTaskGenericNotify>
		break;
 8000ef2:	bf00      	nop
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000b9 	.word	0x200000b9
 8000f00:	2000009c 	.word	0x2000009c
 8000f04:	200000a4 	.word	0x200000a4
 8000f08:	200000a8 	.word	0x200000a8

08000f0c <extract_command>:

int extract_command(command_t *cmd)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(q_cmd);
 8000f14:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <extract_command+0x70>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 fce7 	bl	80048ec <uxQueueMessagesWaiting>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <extract_command+0x22>
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f2c:	e022      	b.n	8000f74 <extract_command+0x68>
	uint8_t i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]

	do
	{
		status = xQueueReceive(q_cmd, &item, 0);
 8000f32:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <extract_command+0x70>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f107 010f 	add.w	r1, r7, #15
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fb59 	bl	80045f4 <xQueueReceive>
 8000f42:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd -> payload[i++] = item;
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d106      	bne.n	8000f58 <extract_command+0x4c>
 8000f4a:	7dfb      	ldrb	r3, [r7, #23]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	75fa      	strb	r2, [r7, #23]
 8000f50:	461a      	mov	r2, r3
 8000f52:	7bf9      	ldrb	r1, [r7, #15]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	5499      	strb	r1, [r3, r2]
	} while(item != '\n');
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b0a      	cmp	r3, #10
 8000f5c:	d1e9      	bne.n	8000f32 <extract_command+0x26>

	cmd -> payload[i-1] = '\0';
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	2100      	movs	r1, #0
 8000f66:	54d1      	strb	r1, [r2, r3]
	cmd -> len = i-1; /* save length of the command excluding null char */
 8000f68:	7dfb      	ldrb	r3, [r7, #23]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60da      	str	r2, [r3, #12]

	return 0;
 8000f72:	2300      	movs	r3, #0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	200000b4 	.word	0x200000b4

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f84:	f7ff fed6 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fae:	f006 f9db 	bl	8007368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fac3 	bl	800053c <main>
  bx  lr    
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000fc4:	08007544 	.word	0x08007544
  ldr r2, =_sbss
 8000fc8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000fcc:	20012eac 	.word	0x20012eac

08000fd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001014 <HAL_Init+0x40>)
 8000fde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <HAL_Init+0x40>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff0:	4b08      	ldr	r3, [pc, #32]	@ (8001014 <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a07      	ldr	r2, [pc, #28]	@ (8001014 <HAL_Init+0x40>)
 8000ff6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f000 f8d8 	bl	80011b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001002:	200f      	movs	r0, #15
 8001004:	f7ff fdea 	bl	8000bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001008:	f7ff fd46 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x20>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4b06      	ldr	r3, [pc, #24]	@ (800103c <HAL_IncTick+0x24>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4413      	add	r3, r2
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_IncTick+0x24>)
 800102a:	6013      	str	r3, [r2, #0]
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	2000000c 	.word	0x2000000c
 800103c:	20000104 	.word	0x20000104

08001040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  return uwTick;
 8001044:	4b03      	ldr	r3, [pc, #12]	@ (8001054 <HAL_GetTick+0x14>)
 8001046:	681b      	ldr	r3, [r3, #0]
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	20000104 	.word	0x20000104

08001058 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106e:	68ba      	ldr	r2, [r7, #8]
 8001070:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001074:	4013      	ands	r3, r2
 8001076:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001080:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001084:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	@ (800109c <__NVIC_SetPriorityGrouping+0x44>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <__NVIC_GetPriorityGrouping+0x18>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	f003 0307 	and.w	r3, r3, #7
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	db0b      	blt.n	80010e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	f003 021f 	and.w	r2, r3, #31
 80010d4:	4907      	ldr	r1, [pc, #28]	@ (80010f4 <__NVIC_EnableIRQ+0x38>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	095b      	lsrs	r3, r3, #5
 80010dc:	2001      	movs	r0, #1
 80010de:	fa00 f202 	lsl.w	r2, r0, r2
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000e100 	.word	0xe000e100

080010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	6039      	str	r1, [r7, #0]
 8001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001108:	2b00      	cmp	r3, #0
 800110a:	db0a      	blt.n	8001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	b2da      	uxtb	r2, r3
 8001110:	490c      	ldr	r1, [pc, #48]	@ (8001144 <__NVIC_SetPriority+0x4c>)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	0112      	lsls	r2, r2, #4
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	440b      	add	r3, r1
 800111c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001120:	e00a      	b.n	8001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4908      	ldr	r1, [pc, #32]	@ (8001148 <__NVIC_SetPriority+0x50>)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f003 030f 	and.w	r3, r3, #15
 800112e:	3b04      	subs	r3, #4
 8001130:	0112      	lsls	r2, r2, #4
 8001132:	b2d2      	uxtb	r2, r2
 8001134:	440b      	add	r3, r1
 8001136:	761a      	strb	r2, [r3, #24]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000e100 	.word	0xe000e100
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800114c:	b480      	push	{r7}
 800114e:	b089      	sub	sp, #36	@ 0x24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	f1c3 0307 	rsb	r3, r3, #7
 8001166:	2b04      	cmp	r3, #4
 8001168:	bf28      	it	cs
 800116a:	2304      	movcs	r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	3304      	adds	r3, #4
 8001172:	2b06      	cmp	r3, #6
 8001174:	d902      	bls.n	800117c <NVIC_EncodePriority+0x30>
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3b03      	subs	r3, #3
 800117a:	e000      	b.n	800117e <NVIC_EncodePriority+0x32>
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001180:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	401a      	ands	r2, r3
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001194:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa01 f303 	lsl.w	r3, r1, r3
 800119e:	43d9      	mvns	r1, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	4313      	orrs	r3, r2
         );
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3724      	adds	r7, #36	@ 0x24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff ff4c 	bl	8001058 <__NVIC_SetPriorityGrouping>
}
 80011c0:	bf00      	nop
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	4603      	mov	r3, r0
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
 80011d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011da:	f7ff ff61 	bl	80010a0 <__NVIC_GetPriorityGrouping>
 80011de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	6978      	ldr	r0, [r7, #20]
 80011e6:	f7ff ffb1 	bl	800114c <NVIC_EncodePriority>
 80011ea:	4602      	mov	r2, r0
 80011ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff80 	bl	80010f8 <__NVIC_SetPriority>
}
 80011f8:	bf00      	nop
 80011fa:	3718      	adds	r7, #24
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff54 	bl	80010bc <__NVIC_EnableIRQ>
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001228:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800122a:	f7ff ff09 	bl	8001040 <HAL_GetTick>
 800122e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d008      	beq.n	800124e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2280      	movs	r2, #128	@ 0x80
 8001240:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e052      	b.n	80012f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0216 	bic.w	r2, r2, #22
 800125c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800126c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d103      	bne.n	800127e <HAL_DMA_Abort+0x62>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0208 	bic.w	r2, r2, #8
 800128c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800129e:	e013      	b.n	80012c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012a0:	f7ff fece 	bl	8001040 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d90c      	bls.n	80012c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2220      	movs	r2, #32
 80012b2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2203      	movs	r2, #3
 80012b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e015      	b.n	80012f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1e4      	bne.n	80012a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012da:	223f      	movs	r2, #63	@ 0x3f
 80012dc:	409a      	lsls	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b02      	cmp	r3, #2
 800130e:	d004      	beq.n	800131a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2280      	movs	r2, #128	@ 0x80
 8001314:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e00c      	b.n	8001334 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2205      	movs	r2, #5
 800131e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b480      	push	{r7}
 8001342:	b089      	sub	sp, #36	@ 0x24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	e165      	b.n	8001628 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4013      	ands	r3, r2
 800136e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	429a      	cmp	r2, r3
 8001376:	f040 8154 	bne.w	8001622 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f003 0303 	and.w	r3, r3, #3
 8001382:	2b01      	cmp	r3, #1
 8001384:	d005      	beq.n	8001392 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800138e:	2b02      	cmp	r3, #2
 8001390:	d130      	bne.n	80013f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013c8:	2201      	movs	r2, #1
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	091b      	lsrs	r3, r3, #4
 80013de:	f003 0201 	and.w	r2, r3, #1
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0303 	and.w	r3, r3, #3
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d017      	beq.n	8001430 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	fa02 f303 	lsl.w	r3, r2, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d123      	bne.n	8001484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3208      	adds	r2, #8
 8001444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	f003 0307 	and.w	r3, r3, #7
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	691a      	ldr	r2, [r3, #16]
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	08da      	lsrs	r2, r3, #3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3208      	adds	r2, #8
 800147e:	69b9      	ldr	r1, [r7, #24]
 8001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	2203      	movs	r2, #3
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	43db      	mvns	r3, r3
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	4013      	ands	r3, r2
 800149a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 0203 	and.w	r2, r3, #3
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80ae 	beq.w	8001622 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80014d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001640 <HAL_GPIO_Init+0x300>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014e2:	4a58      	ldr	r2, [pc, #352]	@ (8001644 <HAL_GPIO_Init+0x304>)
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3302      	adds	r3, #2
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	220f      	movs	r2, #15
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4a4f      	ldr	r2, [pc, #316]	@ (8001648 <HAL_GPIO_Init+0x308>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d025      	beq.n	800155a <HAL_GPIO_Init+0x21a>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a4e      	ldr	r2, [pc, #312]	@ (800164c <HAL_GPIO_Init+0x30c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d01f      	beq.n	8001556 <HAL_GPIO_Init+0x216>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a4d      	ldr	r2, [pc, #308]	@ (8001650 <HAL_GPIO_Init+0x310>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d019      	beq.n	8001552 <HAL_GPIO_Init+0x212>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a4c      	ldr	r2, [pc, #304]	@ (8001654 <HAL_GPIO_Init+0x314>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d013      	beq.n	800154e <HAL_GPIO_Init+0x20e>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4b      	ldr	r2, [pc, #300]	@ (8001658 <HAL_GPIO_Init+0x318>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d00d      	beq.n	800154a <HAL_GPIO_Init+0x20a>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4a      	ldr	r2, [pc, #296]	@ (800165c <HAL_GPIO_Init+0x31c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d007      	beq.n	8001546 <HAL_GPIO_Init+0x206>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a49      	ldr	r2, [pc, #292]	@ (8001660 <HAL_GPIO_Init+0x320>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d101      	bne.n	8001542 <HAL_GPIO_Init+0x202>
 800153e:	2306      	movs	r3, #6
 8001540:	e00c      	b.n	800155c <HAL_GPIO_Init+0x21c>
 8001542:	2307      	movs	r3, #7
 8001544:	e00a      	b.n	800155c <HAL_GPIO_Init+0x21c>
 8001546:	2305      	movs	r3, #5
 8001548:	e008      	b.n	800155c <HAL_GPIO_Init+0x21c>
 800154a:	2304      	movs	r3, #4
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x21c>
 800154e:	2303      	movs	r3, #3
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x21c>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x21c>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x21c>
 800155a:	2300      	movs	r3, #0
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800156c:	4935      	ldr	r1, [pc, #212]	@ (8001644 <HAL_GPIO_Init+0x304>)
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800157a:	4b3a      	ldr	r3, [pc, #232]	@ (8001664 <HAL_GPIO_Init+0x324>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	43db      	mvns	r3, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4013      	ands	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4313      	orrs	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800159e:	4a31      	ldr	r2, [pc, #196]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015c8:	4a26      	ldr	r2, [pc, #152]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015ce:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d003      	beq.n	80015f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_GPIO_Init+0x324>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	43db      	mvns	r3, r3
 8001602:	69ba      	ldr	r2, [r7, #24]
 8001604:	4013      	ands	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	4313      	orrs	r3, r2
 800161a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_GPIO_Init+0x324>)
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3301      	adds	r3, #1
 8001626:	61fb      	str	r3, [r7, #28]
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	2b0f      	cmp	r3, #15
 800162c:	f67f ae96 	bls.w	800135c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40013800 	.word	0x40013800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020400 	.word	0x40020400
 8001650:	40020800 	.word	0x40020800
 8001654:	40020c00 	.word	0x40020c00
 8001658:	40021000 	.word	0x40021000
 800165c:	40021400 	.word	0x40021400
 8001660:	40021800 	.word	0x40021800
 8001664:	40013c00 	.word	0x40013c00

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e0cc      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016b0:	4b68      	ldr	r3, [pc, #416]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d90c      	bls.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016be:	4b65      	ldr	r3, [pc, #404]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	b2d2      	uxtb	r2, r2
 80016c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c6:	4b63      	ldr	r3, [pc, #396]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0b8      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d020      	beq.n	8001726 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0304 	and.w	r3, r3, #4
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016f0:	4b59      	ldr	r3, [pc, #356]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4a58      	ldr	r2, [pc, #352]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0308 	and.w	r3, r3, #8
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001708:	4b53      	ldr	r3, [pc, #332]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	4a52      	ldr	r2, [pc, #328]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800170e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001712:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001714:	4b50      	ldr	r3, [pc, #320]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	494d      	ldr	r1, [pc, #308]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	4313      	orrs	r3, r2
 8001724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d044      	beq.n	80017bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d119      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e07f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b02      	cmp	r3, #2
 8001750:	d003      	beq.n	800175a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	2b03      	cmp	r3, #3
 8001758:	d107      	bne.n	800176a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175a:	4b3f      	ldr	r3, [pc, #252]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e06f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176a:	4b3b      	ldr	r3, [pc, #236]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e067      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800177a:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f023 0203 	bic.w	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	4934      	ldr	r1, [pc, #208]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	4313      	orrs	r3, r2
 800178a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800178c:	f7ff fc58 	bl	8001040 <HAL_GetTick>
 8001790:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	e00a      	b.n	80017aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001794:	f7ff fc54 	bl	8001040 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e04f      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 020c 	and.w	r2, r3, #12
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d1eb      	bne.n	8001794 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017bc:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d20c      	bcs.n	80017e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d2:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <HAL_RCC_ClockConfig+0x1b8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 030f 	and.w	r3, r3, #15
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e032      	b.n	800184a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0304 	and.w	r3, r3, #4
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	4916      	ldr	r1, [pc, #88]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180e:	4b12      	ldr	r3, [pc, #72]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	490e      	ldr	r1, [pc, #56]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	4313      	orrs	r3, r2
 8001820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001822:	f000 fbb1 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001826:	4602      	mov	r2, r0
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	091b      	lsrs	r3, r3, #4
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	490a      	ldr	r1, [pc, #40]	@ (800185c <HAL_RCC_ClockConfig+0x1c0>)
 8001834:	5ccb      	ldrb	r3, [r1, r3]
 8001836:	fa22 f303 	lsr.w	r3, r2, r3
 800183a:	4a09      	ldr	r2, [pc, #36]	@ (8001860 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800183e:	4b09      	ldr	r3, [pc, #36]	@ (8001864 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff f9ca 	bl	8000bdc <HAL_InitTick>

  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00
 8001858:	40023800 	.word	0x40023800
 800185c:	08007518 	.word	0x08007518
 8001860:	20000000 	.word	0x20000000
 8001864:	20000008 	.word	0x20000008

08001868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <HAL_RCC_GetHCLKFreq+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000000 	.word	0x20000000

08001880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001884:	f7ff fff0 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 8001888:	4602      	mov	r2, r0
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	0a9b      	lsrs	r3, r3, #10
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	4903      	ldr	r1, [pc, #12]	@ (80018a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001896:	5ccb      	ldrb	r3, [r1, r3]
 8001898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40023800 	.word	0x40023800
 80018a4:	08007528 	.word	0x08007528

080018a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80018ac:	f7ff ffdc 	bl	8001868 <HAL_RCC_GetHCLKFreq>
 80018b0:	4602      	mov	r2, r0
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	0b5b      	lsrs	r3, r3, #13
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	4903      	ldr	r1, [pc, #12]	@ (80018cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80018be:	5ccb      	ldrb	r3, [r1, r3]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40023800 	.word	0x40023800
 80018cc:	08007528 	.word	0x08007528

080018d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	220f      	movs	r2, #15
 80018de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018f8:	4b0c      	ldr	r3, [pc, #48]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_RCC_GetClockConfig+0x5c>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	08db      	lsrs	r3, r3, #3
 800190a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <HAL_RCC_GetClockConfig+0x60>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 020f 	and.w	r2, r3, #15
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	601a      	str	r2, [r3, #0]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08c      	sub	sp, #48	@ 0x30
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d010      	beq.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800196c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800196e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001972:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800197a:	496c      	ldr	r1, [pc, #432]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800197c:	4313      	orrs	r3, r2
 800197e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800198a:	2301      	movs	r3, #1
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d010      	beq.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800199a:	4b64      	ldr	r3, [pc, #400]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800199c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019a0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a8:	4960      	ldr	r1, [pc, #384]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80019b8:	2301      	movs	r3, #1
 80019ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d017      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019c8:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4955      	ldr	r1, [pc, #340]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019e6:	d101      	bne.n	80019ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80019f4:	2301      	movs	r3, #1
 80019f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d017      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a04:	4b49      	ldr	r3, [pc, #292]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a12:	4946      	ldr	r1, [pc, #280]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a22:	d101      	bne.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a30:	2301      	movs	r3, #1
 8001a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0320 	and.w	r3, r3, #32
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f000 808a 	beq.w	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	4a38      	ldr	r2, [pc, #224]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a52:	4b36      	ldr	r3, [pc, #216]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a5a:	60bb      	str	r3, [r7, #8]
 8001a5c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a33      	ldr	r2, [pc, #204]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a6a:	f7ff fae9 	bl	8001040 <HAL_GetTick>
 8001a6e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f7ff fae5 	bl	8001040 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e278      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001a84:	4b2a      	ldr	r3, [pc, #168]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a90:	4b26      	ldr	r3, [pc, #152]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a98:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02f      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aa8:	6a3a      	ldr	r2, [r7, #32]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d028      	beq.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001aae:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ab6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001abe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ac4:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001aca:	4b18      	ldr	r3, [pc, #96]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d114      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fab3 	bl	8001040 <HAL_GetTick>
 8001ada:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	e00a      	b.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ade:	f7ff faaf 	bl	8001040 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e240      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af8:	f003 0302 	and.w	r3, r3, #2
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0ee      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b08:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001b0c:	d114      	bne.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001b0e:	4b07      	ldr	r3, [pc, #28]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b22:	4902      	ldr	r1, [pc, #8]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
 8001b28:	e00c      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40007000 	.word	0x40007000
 8001b34:	42470e40 	.word	0x42470e40
 8001b38:	4b4a      	ldr	r3, [pc, #296]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a49      	ldr	r2, [pc, #292]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b3e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001b42:	6093      	str	r3, [r2, #8]
 8001b44:	4b47      	ldr	r3, [pc, #284]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b50:	4944      	ldr	r1, [pc, #272]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d004      	beq.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001b68:	4b3f      	ldr	r3, [pc, #252]	@ (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b6a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00a      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b78:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b86:	4937      	ldr	r1, [pc, #220]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00a      	beq.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ba0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba8:	492e      	ldr	r1, [pc, #184]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d011      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001bbc:	4b29      	ldr	r3, [pc, #164]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bc2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bca:	4926      	ldr	r1, [pc, #152]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001bda:	d101      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00a      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bf2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	491a      	ldr	r1, [pc, #104]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d011      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c14:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c1c:	4911      	ldr	r1, [pc, #68]	@ (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d005      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c40:	f040 80ff 	bne.w	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c44:	4b09      	ldr	r3, [pc, #36]	@ (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c4a:	f7ff f9f9 	bl	8001040 <HAL_GetTick>
 8001c4e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c50:	e00e      	b.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001c52:	f7ff f9f5 	bl	8001040 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d907      	bls.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e188      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c64:	40023800 	.word	0x40023800
 8001c68:	424711e0 	.word	0x424711e0
 8001c6c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c70:	4b7e      	ldr	r3, [pc, #504]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ea      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d028      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d124      	bne.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ca4:	4b71      	ldr	r3, [pc, #452]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001caa:	0c1b      	lsrs	r3, r3, #16
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001cb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001cbc:	0e1b      	lsrs	r3, r3, #24
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	019b      	lsls	r3, r3, #6
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	071b      	lsls	r3, r3, #28
 8001ce6:	4961      	ldr	r1, [pc, #388]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d035      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d18:	d130      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d1a:	4b54      	ldr	r3, [pc, #336]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	3301      	adds	r3, #1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d32:	0f1b      	lsrs	r3, r3, #28
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	019b      	lsls	r3, r3, #6
 8001d44:	431a      	orrs	r2, r3
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	061b      	lsls	r3, r3, #24
 8001d56:	431a      	orrs	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	071b      	lsls	r3, r3, #28
 8001d5c:	4943      	ldr	r1, [pc, #268]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d64:	4b41      	ldr	r3, [pc, #260]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d6a:	f023 021f 	bic.w	r2, r3, #31
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	493d      	ldr	r1, [pc, #244]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d029      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d90:	d124      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d92:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d98:	0c1b      	lsrs	r3, r3, #16
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001da4:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001daa:	0f1b      	lsrs	r3, r3, #28
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	019b      	lsls	r3, r3, #6
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
 8001dc8:	431a      	orrs	r2, r3
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	071b      	lsls	r3, r3, #28
 8001dd4:	4925      	ldr	r1, [pc, #148]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d016      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	019b      	lsls	r3, r3, #6
 8001df2:	431a      	orrs	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	085b      	lsrs	r3, r3, #1
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	041b      	lsls	r3, r3, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	061b      	lsls	r3, r3, #24
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	071b      	lsls	r3, r3, #28
 8001e0e:	4917      	ldr	r1, [pc, #92]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e1c:	f7ff f910 	bl	8001040 <HAL_GetTick>
 8001e20:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e24:	f7ff f90c 	bl	8001040 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e09f      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e36:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8001e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	f040 8095 	bne.w	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e50:	f7ff f8f6 	bl	8001040 <HAL_GetTick>
 8001e54:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e56:	e00f      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001e58:	f7ff f8f2 	bl	8001040 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d908      	bls.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e085      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	42470068 	.word	0x42470068
 8001e74:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e78:	4b41      	ldr	r3, [pc, #260]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e84:	d0e8      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d009      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d02b      	beq.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d127      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001eae:	4b34      	ldr	r3, [pc, #208]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb4:	0c1b      	lsrs	r3, r3, #16
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	019b      	lsls	r3, r3, #6
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	085b      	lsrs	r3, r3, #1
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	041b      	lsls	r3, r3, #16
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	061b      	lsls	r3, r3, #24
 8001edc:	4928      	ldr	r1, [pc, #160]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ee4:	4b26      	ldr	r3, [pc, #152]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eea:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	4922      	ldr	r1, [pc, #136]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01d      	beq.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f12:	d118      	bne.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f1a:	0e1b      	lsrs	r3, r3, #24
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	019b      	lsls	r3, r3, #6
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	4910      	ldr	r1, [pc, #64]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f46:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7ff f878 	bl	8001040 <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001f54:	f7ff f874 	bl	8001040 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e007      	b.n	8001f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f72:	d1ef      	bne.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3730      	adds	r7, #48	@ 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	42470070 	.word	0x42470070

08001f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f8c:	b0ae      	sub	sp, #184	@ 0xb8
 8001f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fae:	4bcb      	ldr	r3, [pc, #812]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	2b0c      	cmp	r3, #12
 8001fb8:	f200 8206 	bhi.w	80023c8 <HAL_RCC_GetSysClockFreq+0x440>
 8001fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001ff9 	.word	0x08001ff9
 8001fc8:	080023c9 	.word	0x080023c9
 8001fcc:	080023c9 	.word	0x080023c9
 8001fd0:	080023c9 	.word	0x080023c9
 8001fd4:	08002001 	.word	0x08002001
 8001fd8:	080023c9 	.word	0x080023c9
 8001fdc:	080023c9 	.word	0x080023c9
 8001fe0:	080023c9 	.word	0x080023c9
 8001fe4:	08002009 	.word	0x08002009
 8001fe8:	080023c9 	.word	0x080023c9
 8001fec:	080023c9 	.word	0x080023c9
 8001ff0:	080023c9 	.word	0x080023c9
 8001ff4:	080021f9 	.word	0x080021f9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4bb9      	ldr	r3, [pc, #740]	@ (80022e0 <HAL_RCC_GetSysClockFreq+0x358>)
 8001ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ffe:	e1e7      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002000:	4bb8      	ldr	r3, [pc, #736]	@ (80022e4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002002:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002006:	e1e3      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002008:	4bb4      	ldr	r3, [pc, #720]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002014:	4bb1      	ldr	r3, [pc, #708]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d071      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002020:	4bae      	ldr	r3, [pc, #696]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	2200      	movs	r2, #0
 8002028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800202c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002034:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002038:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002042:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002046:	4622      	mov	r2, r4
 8002048:	462b      	mov	r3, r5
 800204a:	f04f 0000 	mov.w	r0, #0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	0159      	lsls	r1, r3, #5
 8002054:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002058:	0150      	lsls	r0, r2, #5
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4621      	mov	r1, r4
 8002060:	1a51      	subs	r1, r2, r1
 8002062:	6439      	str	r1, [r7, #64]	@ 0x40
 8002064:	4629      	mov	r1, r5
 8002066:	eb63 0301 	sbc.w	r3, r3, r1
 800206a:	647b      	str	r3, [r7, #68]	@ 0x44
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002078:	4649      	mov	r1, r9
 800207a:	018b      	lsls	r3, r1, #6
 800207c:	4641      	mov	r1, r8
 800207e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002082:	4641      	mov	r1, r8
 8002084:	018a      	lsls	r2, r1, #6
 8002086:	4641      	mov	r1, r8
 8002088:	1a51      	subs	r1, r2, r1
 800208a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800208c:	4649      	mov	r1, r9
 800208e:	eb63 0301 	sbc.w	r3, r3, r1
 8002092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80020a0:	4649      	mov	r1, r9
 80020a2:	00cb      	lsls	r3, r1, #3
 80020a4:	4641      	mov	r1, r8
 80020a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020aa:	4641      	mov	r1, r8
 80020ac:	00ca      	lsls	r2, r1, #3
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	4622      	mov	r2, r4
 80020b6:	189b      	adds	r3, r3, r2
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ba:	462b      	mov	r3, r5
 80020bc:	460a      	mov	r2, r1
 80020be:	eb42 0303 	adc.w	r3, r2, r3
 80020c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020d0:	4629      	mov	r1, r5
 80020d2:	024b      	lsls	r3, r1, #9
 80020d4:	4621      	mov	r1, r4
 80020d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020da:	4621      	mov	r1, r4
 80020dc:	024a      	lsls	r2, r1, #9
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020e6:	2200      	movs	r2, #0
 80020e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020f0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80020f4:	f7fe f88c 	bl	8000210 <__aeabi_uldivmod>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4613      	mov	r3, r2
 80020fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002102:	e067      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002104:	4b75      	ldr	r3, [pc, #468]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	2200      	movs	r2, #0
 800210c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002110:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002114:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800211c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800211e:	2300      	movs	r3, #0
 8002120:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002122:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002126:	4622      	mov	r2, r4
 8002128:	462b      	mov	r3, r5
 800212a:	f04f 0000 	mov.w	r0, #0
 800212e:	f04f 0100 	mov.w	r1, #0
 8002132:	0159      	lsls	r1, r3, #5
 8002134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002138:	0150      	lsls	r0, r2, #5
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4621      	mov	r1, r4
 8002140:	1a51      	subs	r1, r2, r1
 8002142:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002144:	4629      	mov	r1, r5
 8002146:	eb63 0301 	sbc.w	r3, r3, r1
 800214a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	f04f 0300 	mov.w	r3, #0
 8002154:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002158:	4649      	mov	r1, r9
 800215a:	018b      	lsls	r3, r1, #6
 800215c:	4641      	mov	r1, r8
 800215e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002162:	4641      	mov	r1, r8
 8002164:	018a      	lsls	r2, r1, #6
 8002166:	4641      	mov	r1, r8
 8002168:	ebb2 0a01 	subs.w	sl, r2, r1
 800216c:	4649      	mov	r1, r9
 800216e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800217e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002182:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002186:	4692      	mov	sl, r2
 8002188:	469b      	mov	fp, r3
 800218a:	4623      	mov	r3, r4
 800218c:	eb1a 0303 	adds.w	r3, sl, r3
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	462b      	mov	r3, r5
 8002194:	eb4b 0303 	adc.w	r3, fp, r3
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	f04f 0300 	mov.w	r3, #0
 80021a2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021a6:	4629      	mov	r1, r5
 80021a8:	028b      	lsls	r3, r1, #10
 80021aa:	4621      	mov	r1, r4
 80021ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b0:	4621      	mov	r1, r4
 80021b2:	028a      	lsls	r2, r1, #10
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021bc:	2200      	movs	r2, #0
 80021be:	673b      	str	r3, [r7, #112]	@ 0x70
 80021c0:	677a      	str	r2, [r7, #116]	@ 0x74
 80021c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80021c6:	f7fe f823 	bl	8000210 <__aeabi_uldivmod>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4613      	mov	r3, r2
 80021d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021d4:	4b41      	ldr	r3, [pc, #260]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	0c1b      	lsrs	r3, r3, #16
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	3301      	adds	r3, #1
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80021e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80021f6:	e0eb      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f8:	4b38      	ldr	r3, [pc, #224]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002200:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002204:	4b35      	ldr	r3, [pc, #212]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d06b      	beq.n	80022e8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002210:	4b32      	ldr	r3, [pc, #200]	@ (80022dc <HAL_RCC_GetSysClockFreq+0x354>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	099b      	lsrs	r3, r3, #6
 8002216:	2200      	movs	r2, #0
 8002218:	66bb      	str	r3, [r7, #104]	@ 0x68
 800221a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800221c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800221e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002222:	663b      	str	r3, [r7, #96]	@ 0x60
 8002224:	2300      	movs	r3, #0
 8002226:	667b      	str	r3, [r7, #100]	@ 0x64
 8002228:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800222c:	4622      	mov	r2, r4
 800222e:	462b      	mov	r3, r5
 8002230:	f04f 0000 	mov.w	r0, #0
 8002234:	f04f 0100 	mov.w	r1, #0
 8002238:	0159      	lsls	r1, r3, #5
 800223a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223e:	0150      	lsls	r0, r2, #5
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4621      	mov	r1, r4
 8002246:	1a51      	subs	r1, r2, r1
 8002248:	61b9      	str	r1, [r7, #24]
 800224a:	4629      	mov	r1, r5
 800224c:	eb63 0301 	sbc.w	r3, r3, r1
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800225e:	4659      	mov	r1, fp
 8002260:	018b      	lsls	r3, r1, #6
 8002262:	4651      	mov	r1, sl
 8002264:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002268:	4651      	mov	r1, sl
 800226a:	018a      	lsls	r2, r1, #6
 800226c:	4651      	mov	r1, sl
 800226e:	ebb2 0801 	subs.w	r8, r2, r1
 8002272:	4659      	mov	r1, fp
 8002274:	eb63 0901 	sbc.w	r9, r3, r1
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002284:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002288:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800228c:	4690      	mov	r8, r2
 800228e:	4699      	mov	r9, r3
 8002290:	4623      	mov	r3, r4
 8002292:	eb18 0303 	adds.w	r3, r8, r3
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	462b      	mov	r3, r5
 800229a:	eb49 0303 	adc.w	r3, r9, r3
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022ac:	4629      	mov	r1, r5
 80022ae:	024b      	lsls	r3, r1, #9
 80022b0:	4621      	mov	r1, r4
 80022b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022b6:	4621      	mov	r1, r4
 80022b8:	024a      	lsls	r2, r1, #9
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022c2:	2200      	movs	r2, #0
 80022c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022c6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022c8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022cc:	f7fd ffa0 	bl	8000210 <__aeabi_uldivmod>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4613      	mov	r3, r2
 80022d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022da:	e065      	b.n	80023a8 <HAL_RCC_GetSysClockFreq+0x420>
 80022dc:	40023800 	.word	0x40023800
 80022e0:	00f42400 	.word	0x00f42400
 80022e4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e8:	4b3d      	ldr	r3, [pc, #244]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	2200      	movs	r2, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	4611      	mov	r1, r2
 80022f4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80022fa:	2300      	movs	r3, #0
 80022fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80022fe:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002302:	4642      	mov	r2, r8
 8002304:	464b      	mov	r3, r9
 8002306:	f04f 0000 	mov.w	r0, #0
 800230a:	f04f 0100 	mov.w	r1, #0
 800230e:	0159      	lsls	r1, r3, #5
 8002310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002314:	0150      	lsls	r0, r2, #5
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4641      	mov	r1, r8
 800231c:	1a51      	subs	r1, r2, r1
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	4649      	mov	r1, r9
 8002322:	eb63 0301 	sbc.w	r3, r3, r1
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002334:	4659      	mov	r1, fp
 8002336:	018b      	lsls	r3, r1, #6
 8002338:	4651      	mov	r1, sl
 800233a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800233e:	4651      	mov	r1, sl
 8002340:	018a      	lsls	r2, r1, #6
 8002342:	4651      	mov	r1, sl
 8002344:	1a54      	subs	r4, r2, r1
 8002346:	4659      	mov	r1, fp
 8002348:	eb63 0501 	sbc.w	r5, r3, r1
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	00eb      	lsls	r3, r5, #3
 8002356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800235a:	00e2      	lsls	r2, r4, #3
 800235c:	4614      	mov	r4, r2
 800235e:	461d      	mov	r5, r3
 8002360:	4643      	mov	r3, r8
 8002362:	18e3      	adds	r3, r4, r3
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	464b      	mov	r3, r9
 8002368:	eb45 0303 	adc.w	r3, r5, r3
 800236c:	607b      	str	r3, [r7, #4]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 4500 	ldrd	r4, r5, [r7]
 800237a:	4629      	mov	r1, r5
 800237c:	028b      	lsls	r3, r1, #10
 800237e:	4621      	mov	r1, r4
 8002380:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002384:	4621      	mov	r1, r4
 8002386:	028a      	lsls	r2, r1, #10
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002390:	2200      	movs	r2, #0
 8002392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002394:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002396:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800239a:	f7fd ff39 	bl	8000210 <__aeabi_uldivmod>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4613      	mov	r3, r2
 80023a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023a8:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x458>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	0f1b      	lsrs	r3, r3, #28
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80023b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023c6:	e003      	b.n	80023d0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b06      	ldr	r3, [pc, #24]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80023ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	37b8      	adds	r7, #184	@ 0xb8
 80023d8:	46bd      	mov	sp, r7
 80023da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	00f42400 	.word	0x00f42400

080023e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e28d      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 8083 	beq.w	800250e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002408:	4b94      	ldr	r3, [pc, #592]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 030c 	and.w	r3, r3, #12
 8002410:	2b04      	cmp	r3, #4
 8002412:	d019      	beq.n	8002448 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002414:	4b91      	ldr	r3, [pc, #580]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 030c 	and.w	r3, r3, #12
        || \
 800241c:	2b08      	cmp	r3, #8
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002420:	4b8e      	ldr	r3, [pc, #568]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002428:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800242c:	d00c      	beq.n	8002448 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b8b      	ldr	r3, [pc, #556]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d112      	bne.n	8002460 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243a:	4b88      	ldr	r3, [pc, #544]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002442:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002446:	d10b      	bne.n	8002460 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	4b84      	ldr	r3, [pc, #528]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d05b      	beq.n	800250c <HAL_RCC_OscConfig+0x124>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d157      	bne.n	800250c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e25a      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002468:	d106      	bne.n	8002478 <HAL_RCC_OscConfig+0x90>
 800246a:	4b7c      	ldr	r3, [pc, #496]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a7b      	ldr	r2, [pc, #492]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002474:	6013      	str	r3, [r2, #0]
 8002476:	e01d      	b.n	80024b4 <HAL_RCC_OscConfig+0xcc>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002480:	d10c      	bne.n	800249c <HAL_RCC_OscConfig+0xb4>
 8002482:	4b76      	ldr	r3, [pc, #472]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a75      	ldr	r2, [pc, #468]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002488:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	4b73      	ldr	r3, [pc, #460]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a72      	ldr	r2, [pc, #456]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002498:	6013      	str	r3, [r2, #0]
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_OscConfig+0xcc>
 800249c:	4b6f      	ldr	r3, [pc, #444]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6e      	ldr	r2, [pc, #440]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80024a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b6c      	ldr	r3, [pc, #432]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a6b      	ldr	r2, [pc, #428]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80024ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d013      	beq.n	80024e4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024bc:	f7fe fdc0 	bl	8001040 <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c4:	f7fe fdbc 	bl	8001040 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e21f      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	4b61      	ldr	r3, [pc, #388]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0xdc>
 80024e2:	e014      	b.n	800250e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fdac 	bl	8001040 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024ec:	f7fe fda8 	bl	8001040 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	@ 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e20b      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	4b57      	ldr	r3, [pc, #348]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1f0      	bne.n	80024ec <HAL_RCC_OscConfig+0x104>
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06f      	beq.n	80025fa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800251a:	4b50      	ldr	r3, [pc, #320]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
 8002522:	2b00      	cmp	r3, #0
 8002524:	d017      	beq.n	8002556 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002526:	4b4d      	ldr	r3, [pc, #308]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 030c 	and.w	r3, r3, #12
        || \
 800252e:	2b08      	cmp	r3, #8
 8002530:	d105      	bne.n	800253e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002532:	4b4a      	ldr	r3, [pc, #296]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00b      	beq.n	8002556 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253e:	4b47      	ldr	r3, [pc, #284]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002546:	2b0c      	cmp	r3, #12
 8002548:	d11c      	bne.n	8002584 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254a:	4b44      	ldr	r3, [pc, #272]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d116      	bne.n	8002584 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002556:	4b41      	ldr	r3, [pc, #260]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <HAL_RCC_OscConfig+0x186>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d001      	beq.n	800256e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e1d3      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256e:	4b3b      	ldr	r3, [pc, #236]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4937      	ldr	r1, [pc, #220]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002582:	e03a      	b.n	80025fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d020      	beq.n	80025ce <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258c:	4b34      	ldr	r3, [pc, #208]	@ (8002660 <HAL_RCC_OscConfig+0x278>)
 800258e:	2201      	movs	r2, #1
 8002590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002592:	f7fe fd55 	bl	8001040 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe fd51 	bl	8001040 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1b4      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ac:	4b2b      	ldr	r3, [pc, #172]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b8:	4b28      	ldr	r3, [pc, #160]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4925      	ldr	r1, [pc, #148]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	600b      	str	r3, [r1, #0]
 80025cc:	e015      	b.n	80025fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_OscConfig+0x278>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fd34 	bl	8001040 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025dc:	f7fe fd30 	bl	8001040 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e193      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ee:	4b1b      	ldr	r3, [pc, #108]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d036      	beq.n	8002674 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d016      	beq.n	800263c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260e:	4b15      	ldr	r3, [pc, #84]	@ (8002664 <HAL_RCC_OscConfig+0x27c>)
 8002610:	2201      	movs	r2, #1
 8002612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002614:	f7fe fd14 	bl	8001040 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261c:	f7fe fd10 	bl	8001040 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e173      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262e:	4b0b      	ldr	r3, [pc, #44]	@ (800265c <HAL_RCC_OscConfig+0x274>)
 8002630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x234>
 800263a:	e01b      	b.n	8002674 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_OscConfig+0x27c>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fcfd 	bl	8001040 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	e00e      	b.n	8002668 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264a:	f7fe fcf9 	bl	8001040 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d907      	bls.n	8002668 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e15c      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
 800265c:	40023800 	.word	0x40023800
 8002660:	42470000 	.word	0x42470000
 8002664:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	4b8a      	ldr	r3, [pc, #552]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1ea      	bne.n	800264a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8097 	beq.w	80027b0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002686:	4b83      	ldr	r3, [pc, #524]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10f      	bne.n	80026b2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	4b7f      	ldr	r3, [pc, #508]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	4a7e      	ldr	r2, [pc, #504]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	60bb      	str	r3, [r7, #8]
 80026ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b79      	ldr	r3, [pc, #484]	@ (8002898 <HAL_RCC_OscConfig+0x4b0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026be:	4b76      	ldr	r3, [pc, #472]	@ (8002898 <HAL_RCC_OscConfig+0x4b0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a75      	ldr	r2, [pc, #468]	@ (8002898 <HAL_RCC_OscConfig+0x4b0>)
 80026c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fcb9 	bl	8001040 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d2:	f7fe fcb5 	bl	8001040 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e118      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002898 <HAL_RCC_OscConfig+0x4b0>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d106      	bne.n	8002706 <HAL_RCC_OscConfig+0x31e>
 80026f8:	4b66      	ldr	r3, [pc, #408]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fc:	4a65      	ldr	r2, [pc, #404]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	f043 0301 	orr.w	r3, r3, #1
 8002702:	6713      	str	r3, [r2, #112]	@ 0x70
 8002704:	e01c      	b.n	8002740 <HAL_RCC_OscConfig+0x358>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b05      	cmp	r3, #5
 800270c:	d10c      	bne.n	8002728 <HAL_RCC_OscConfig+0x340>
 800270e:	4b61      	ldr	r3, [pc, #388]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a60      	ldr	r2, [pc, #384]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70
 800271a:	4b5e      	ldr	r3, [pc, #376]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800271e:	4a5d      	ldr	r2, [pc, #372]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6713      	str	r3, [r2, #112]	@ 0x70
 8002726:	e00b      	b.n	8002740 <HAL_RCC_OscConfig+0x358>
 8002728:	4b5a      	ldr	r3, [pc, #360]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4a59      	ldr	r2, [pc, #356]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800272e:	f023 0301 	bic.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	@ 0x70
 8002734:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002738:	4a56      	ldr	r2, [pc, #344]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800273a:	f023 0304 	bic.w	r3, r3, #4
 800273e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7fe fc7a 	bl	8001040 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fc76 	bl	8001040 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0d7      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002766:	4b4b      	ldr	r3, [pc, #300]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0ee      	beq.n	8002750 <HAL_RCC_OscConfig+0x368>
 8002772:	e014      	b.n	800279e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fc64 	bl	8001040 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277a:	e00a      	b.n	8002792 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fc60 	bl	8001040 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e0c1      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002792:	4b40      	ldr	r3, [pc, #256]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1ee      	bne.n	800277c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800279e:	7dfb      	ldrb	r3, [r7, #23]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b3b      	ldr	r3, [pc, #236]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	4a3a      	ldr	r2, [pc, #232]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80ad 	beq.w	8002914 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027ba:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d060      	beq.n	8002888 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d145      	bne.n	800285a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b33      	ldr	r3, [pc, #204]	@ (800289c <HAL_RCC_OscConfig+0x4b4>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fc34 	bl	8001040 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe fc30 	bl	8001040 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e093      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b29      	ldr	r3, [pc, #164]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69da      	ldr	r2, [r3, #28]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002810:	085b      	lsrs	r3, r3, #1
 8002812:	3b01      	subs	r3, #1
 8002814:	041b      	lsls	r3, r3, #16
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	061b      	lsls	r3, r3, #24
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	071b      	lsls	r3, r3, #28
 8002826:	491b      	ldr	r1, [pc, #108]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800282c:	4b1b      	ldr	r3, [pc, #108]	@ (800289c <HAL_RCC_OscConfig+0x4b4>)
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002832:	f7fe fc05 	bl	8001040 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283a:	f7fe fc01 	bl	8001040 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e064      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800284c:	4b11      	ldr	r3, [pc, #68]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x452>
 8002858:	e05c      	b.n	8002914 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285a:	4b10      	ldr	r3, [pc, #64]	@ (800289c <HAL_RCC_OscConfig+0x4b4>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002860:	f7fe fbee 	bl	8001040 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002868:	f7fe fbea 	bl	8001040 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04d      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287a:	4b06      	ldr	r3, [pc, #24]	@ (8002894 <HAL_RCC_OscConfig+0x4ac>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCC_OscConfig+0x480>
 8002886:	e045      	b.n	8002914 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e040      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000
 800289c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002920 <HAL_RCC_OscConfig+0x538>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d030      	beq.n	8002910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d129      	bne.n	8002910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d122      	bne.n	8002910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d8:	4293      	cmp	r3, r2
 80028da:	d119      	bne.n	8002910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e6:	085b      	lsrs	r3, r3, #1
 80028e8:	3b01      	subs	r3, #1
 80028ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d10f      	bne.n	8002910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800

08002924 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e073      	b.n	8002a22 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	7f5b      	ldrb	r3, [r3, #29]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7fe f8cc 	bl	8000ae8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f003 0310 	and.w	r3, r3, #16
 8002960:	2b10      	cmp	r3, #16
 8002962:	d055      	beq.n	8002a10 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22ca      	movs	r2, #202	@ 0xca
 800296a:	625a      	str	r2, [r3, #36]	@ 0x24
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2253      	movs	r2, #83	@ 0x53
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f87f 	bl	8002a78 <RTC_EnterInitMode>
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800297e:	7bfb      	ldrb	r3, [r7, #15]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d12c      	bne.n	80029de <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002996:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68d2      	ldr	r2, [r2, #12]
 80029be:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6919      	ldr	r1, [r3, #16]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	041a      	lsls	r2, r3, #16
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f886 	bl	8002ae6 <RTC_ExitInitMode>
 80029da:	4603      	mov	r3, r0
 80029dc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d110      	bne.n	8002a06 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80029f2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	22ff      	movs	r2, #255	@ 0xff
 8002a0c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a0e:	e001      	b.n	8002a14 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d102      	bne.n	8002a20 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <HAL_RTC_WaitForSynchro+0x48>)
 8002a3e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a40:	f7fe fafe 	bl	8001040 <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a46:	e009      	b.n	8002a5c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002a48:	f7fe fafa 	bl	8001040 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a56:	d901      	bls.n	8002a5c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e007      	b.n	8002a6c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0ee      	beq.n	8002a48 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	00017f5f 	.word	0x00017f5f

08002a78 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d122      	bne.n	8002adc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68da      	ldr	r2, [r3, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002aa4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002aa6:	f7fe facb 	bl	8001040 <HAL_GetTick>
 8002aaa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002aac:	e00c      	b.n	8002ac8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aae:	f7fe fac7 	bl	8001040 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002abc:	d904      	bls.n	8002ac8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d102      	bne.n	8002adc <RTC_EnterInitMode+0x64>
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d1e8      	bne.n	8002aae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68da      	ldr	r2, [r3, #12]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b00:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 0320 	and.w	r3, r3, #32
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10a      	bne.n	8002b26 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f7ff ff8b 	bl	8002a2c <HAL_RTC_WaitForSynchro>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2204      	movs	r2, #4
 8002b20:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e041      	b.n	8002bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f839 	bl	8002bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	f000 f9c0 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
	...

08002be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d001      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e04e      	b.n	8002c9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a23      	ldr	r2, [pc, #140]	@ (8002ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d022      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x80>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c26:	d01d      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x80>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cac <HAL_TIM_Base_Start_IT+0xc8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d018      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x80>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x80>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00e      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x80>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d009      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x80>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a19      	ldr	r2, [pc, #100]	@ (8002cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d004      	beq.n	8002c64 <HAL_TIM_Base_Start_IT+0x80>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a18      	ldr	r2, [pc, #96]	@ (8002cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d111      	bne.n	8002c88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d010      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f042 0201 	orr.w	r2, r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c86:	e007      	b.n	8002c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3714      	adds	r7, #20
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40010000 	.word	0x40010000
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800
 8002cb4:	40000c00 	.word	0x40000c00
 8002cb8:	40010400 	.word	0x40010400
 8002cbc:	40014000 	.word	0x40014000
 8002cc0:	40001800 	.word	0x40001800

08002cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d020      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d01b      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0202 	mvn.w	r2, #2
 8002cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f8d2 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002d14:	e005      	b.n	8002d22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f8c4 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f8d5 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f003 0304 	and.w	r3, r3, #4
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d020      	beq.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01b      	beq.n	8002d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 0204 	mvn.w	r2, #4
 8002d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8ac 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002d60:	e005      	b.n	8002d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f89e 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f8af 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d020      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f003 0308 	and.w	r3, r3, #8
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d01b      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0208 	mvn.w	r2, #8
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2204      	movs	r2, #4
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f886 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f878 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f889 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f003 0310 	and.w	r3, r3, #16
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d020      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0210 	mvn.w	r2, #16
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2208      	movs	r2, #8
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f860 	bl	8002eb8 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f852 	bl	8002ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f863 	bl	8002ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0201 	mvn.w	r2, #1
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7fd fe1c 	bl	8000a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00c      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f906 	bl	8003060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f834 	bl	8002ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0220 	mvn.w	r2, #32
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f8d8 	bl	800304c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a46      	ldr	r2, [pc, #280]	@ (8003020 <TIM_Base_SetConfig+0x12c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d013      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f12:	d00f      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a43      	ldr	r2, [pc, #268]	@ (8003024 <TIM_Base_SetConfig+0x130>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a42      	ldr	r2, [pc, #264]	@ (8003028 <TIM_Base_SetConfig+0x134>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d007      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a41      	ldr	r2, [pc, #260]	@ (800302c <TIM_Base_SetConfig+0x138>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a40      	ldr	r2, [pc, #256]	@ (8003030 <TIM_Base_SetConfig+0x13c>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a35      	ldr	r2, [pc, #212]	@ (8003020 <TIM_Base_SetConfig+0x12c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02b      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f54:	d027      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a32      	ldr	r2, [pc, #200]	@ (8003024 <TIM_Base_SetConfig+0x130>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d023      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a31      	ldr	r2, [pc, #196]	@ (8003028 <TIM_Base_SetConfig+0x134>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d01f      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a30      	ldr	r2, [pc, #192]	@ (800302c <TIM_Base_SetConfig+0x138>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01b      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2f      	ldr	r2, [pc, #188]	@ (8003030 <TIM_Base_SetConfig+0x13c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d017      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a2e      	ldr	r2, [pc, #184]	@ (8003034 <TIM_Base_SetConfig+0x140>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a2d      	ldr	r2, [pc, #180]	@ (8003038 <TIM_Base_SetConfig+0x144>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00f      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a2c      	ldr	r2, [pc, #176]	@ (800303c <TIM_Base_SetConfig+0x148>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d00b      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2b      	ldr	r2, [pc, #172]	@ (8003040 <TIM_Base_SetConfig+0x14c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d007      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a2a      	ldr	r2, [pc, #168]	@ (8003044 <TIM_Base_SetConfig+0x150>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	@ (8003048 <TIM_Base_SetConfig+0x154>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d108      	bne.n	8002fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a10      	ldr	r2, [pc, #64]	@ (8003020 <TIM_Base_SetConfig+0x12c>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0xf8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a12      	ldr	r2, [pc, #72]	@ (8003030 <TIM_Base_SetConfig+0x13c>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	f023 0201 	bic.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	611a      	str	r2, [r3, #16]
  }
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40010000 	.word	0x40010000
 8003024:	40000400 	.word	0x40000400
 8003028:	40000800 	.word	0x40000800
 800302c:	40000c00 	.word	0x40000c00
 8003030:	40010400 	.word	0x40010400
 8003034:	40014000 	.word	0x40014000
 8003038:	40014400 	.word	0x40014400
 800303c:	40014800 	.word	0x40014800
 8003040:	40001800 	.word	0x40001800
 8003044:	40001c00 	.word	0x40001c00
 8003048:	40002000 	.word	0x40002000

0800304c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e042      	b.n	800310c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd fd4e 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	@ 0x24
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fcdb 	bl	8003a74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691a      	ldr	r2, [r3, #16]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3708      	adds	r7, #8
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	d112      	bne.n	8003154 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <HAL_UART_Receive_IT+0x26>
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e00b      	b.n	8003156 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	461a      	mov	r2, r3
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f000 faba 	bl	80036c4 <UART_Start_Receive_IT>
 8003150:	4603      	mov	r3, r0
 8003152:	e000      	b.n	8003156 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003154:	2302      	movs	r3, #2
  }
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b0ba      	sub	sp, #232	@ 0xe8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003186:	2300      	movs	r3, #0
 8003188:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800319e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10f      	bne.n	80031c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031aa:	f003 0320 	and.w	r3, r3, #32
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
 80031b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031b6:	f003 0320 	and.w	r3, r3, #32
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fb99 	bl	80038f6 <UART_Receive_IT>
      return;
 80031c4:	e25b      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 80de 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
 80031d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80d1 	beq.w	800338c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
 80031f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d005      	beq.n	800320e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800320e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00b      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
 800321a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322a:	f043 0202 	orr.w	r2, r3, #2
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00b      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
 800323e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	f043 0204 	orr.w	r2, r3, #4
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d011      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
 8003262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800326e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f043 0208 	orr.w	r2, r3, #8
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 81f2 	beq.w	8003674 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
 800329c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a0:	f003 0320 	and.w	r3, r3, #32
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fb24 	bl	80038f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b8:	2b40      	cmp	r3, #64	@ 0x40
 80032ba:	bf0c      	ite	eq
 80032bc:	2301      	moveq	r3, #1
 80032be:	2300      	movne	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d103      	bne.n	80032da <HAL_UART_IRQHandler+0x17a>
 80032d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d04f      	beq.n	800337a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa2c 	bl	8003738 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ea:	2b40      	cmp	r3, #64	@ 0x40
 80032ec:	d141      	bne.n	8003372 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3314      	adds	r3, #20
 80032f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003304:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003308:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800330c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	3314      	adds	r3, #20
 8003316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800331a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800331e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1d9      	bne.n	80032ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d013      	beq.n	800336a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003346:	4a7e      	ldr	r2, [pc, #504]	@ (8003540 <HAL_UART_IRQHandler+0x3e0>)
 8003348:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd ffd4 	bl	80012fc <HAL_DMA_Abort_IT>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	e00e      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f994 	bl	8003698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	e00a      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f990 	bl	8003698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003378:	e006      	b.n	8003388 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f98c 	bl	8003698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003386:	e175      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003388:	bf00      	nop
    return;
 800338a:	e173      	b.n	8003674 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 814f 	bne.w	8003634 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339a:	f003 0310 	and.w	r3, r3, #16
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 8148 	beq.w	8003634 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8141 	beq.w	8003634 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033d2:	2b40      	cmp	r3, #64	@ 0x40
 80033d4:	f040 80b6 	bne.w	8003544 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8145 	beq.w	8003678 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033f6:	429a      	cmp	r2, r3
 80033f8:	f080 813e 	bcs.w	8003678 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003402:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800340e:	f000 8088 	beq.w	8003522 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	330c      	adds	r3, #12
 8003418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003428:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800342c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800343e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003446:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800344a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800344e:	e841 2300 	strex	r3, r2, [r1]
 8003452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1d9      	bne.n	8003412 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800346e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3314      	adds	r3, #20
 800347e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003482:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003486:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003488:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800348a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003494:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e1      	bne.n	800345e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3314      	adds	r3, #20
 80034a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034a4:	e853 3f00 	ldrex	r3, [r3]
 80034a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3314      	adds	r3, #20
 80034ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80034cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e3      	bne.n	800349a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80034f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80034f2:	f023 0310 	bic.w	r3, r3, #16
 80034f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	330c      	adds	r3, #12
 8003500:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003504:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003506:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800350a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e3      	bne.n	80034e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd fe7d 	bl	800121c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003530:	b29b      	uxth	r3, r3
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	b29b      	uxth	r3, r3
 8003536:	4619      	mov	r1, r3
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f8b7 	bl	80036ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800353e:	e09b      	b.n	8003678 <HAL_UART_IRQHandler+0x518>
 8003540:	080037ff 	.word	0x080037ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800354c:	b29b      	uxth	r3, r3
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 808e 	beq.w	800367c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 8089 	beq.w	800367c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	330c      	adds	r3, #12
 8003570:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003574:	e853 3f00 	ldrex	r3, [r3]
 8003578:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800357a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003580:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	330c      	adds	r3, #12
 800358a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800358e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003590:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003594:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800359c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e3      	bne.n	800356a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	623b      	str	r3, [r7, #32]
   return(result);
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3314      	adds	r3, #20
 80035c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80035c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80035cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	330c      	adds	r3, #12
 80035ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f023 0310 	bic.w	r3, r3, #16
 80035fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	330c      	adds	r3, #12
 8003608:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003610:	69b9      	ldr	r1, [r7, #24]
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	e841 2300 	strex	r3, r2, [r1]
 8003618:	617b      	str	r3, [r7, #20]
   return(result);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e3      	bne.n	80035e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003626:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 f83d 	bl	80036ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003632:	e023      	b.n	800367c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_UART_IRQHandler+0x4f4>
 8003640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003644:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f8ea 	bl	8003826 <UART_Transmit_IT>
    return;
 8003652:	e014      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00e      	beq.n	800367e <HAL_UART_IRQHandler+0x51e>
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d008      	beq.n	800367e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f000 f92a 	bl	80038c6 <UART_EndTransmit_IT>
    return;
 8003672:	e004      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
    return;
 8003674:	bf00      	nop
 8003676:	e002      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
      return;
 8003678:	bf00      	nop
 800367a:	e000      	b.n	800367e <HAL_UART_IRQHandler+0x51e>
      return;
 800367c:	bf00      	nop
  }
}
 800367e:	37e8      	adds	r7, #232	@ 0xe8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	4613      	mov	r3, r2
 80036d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	88fa      	ldrh	r2, [r7, #6]
 80036e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2222      	movs	r2, #34	@ 0x22
 80036ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d007      	beq.n	800370a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003708:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f042 0201 	orr.w	r2, r2, #1
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0220 	orr.w	r2, r2, #32
 8003728:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b095      	sub	sp, #84	@ 0x54
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	e853 3f00 	ldrex	r3, [r3]
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003760:	643a      	str	r2, [r7, #64]	@ 0x40
 8003762:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003764:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003768:	e841 2300 	strex	r3, r2, [r1]
 800376c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800376e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e5      	bne.n	8003740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	61fb      	str	r3, [r7, #28]
   return(result);
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	3314      	adds	r3, #20
 8003792:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003794:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003796:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800379a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d119      	bne.n	80037e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	60bb      	str	r3, [r7, #8]
   return(result);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 0310 	bic.w	r3, r3, #16
 80037c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	330c      	adds	r3, #12
 80037ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037d0:	61ba      	str	r2, [r7, #24]
 80037d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	613b      	str	r3, [r7, #16]
   return(result);
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80037f2:	bf00      	nop
 80037f4:	3754      	adds	r7, #84	@ 0x54
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff ff3d 	bl	8003698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003826:	b480      	push	{r7}
 8003828:	b085      	sub	sp, #20
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b21      	cmp	r3, #33	@ 0x21
 8003838:	d13e      	bne.n	80038b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003842:	d114      	bne.n	800386e <UART_Transmit_IT+0x48>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	881b      	ldrh	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003860:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	1c9a      	adds	r2, r3, #2
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	621a      	str	r2, [r3, #32]
 800386c:	e008      	b.n	8003880 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	1c59      	adds	r1, r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6211      	str	r1, [r2, #32]
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29b      	uxth	r3, r3
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4619      	mov	r1, r3
 800388e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10f      	bne.n	80038b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff fecc 	bl	8003684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b08c      	sub	sp, #48	@ 0x30
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b22      	cmp	r3, #34	@ 0x22
 8003908:	f040 80ae 	bne.w	8003a68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003914:	d117      	bne.n	8003946 <UART_Receive_IT+0x50>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003926:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	b29b      	uxth	r3, r3
 8003930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003934:	b29a      	uxth	r2, r3
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393e:	1c9a      	adds	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	@ 0x28
 8003944:	e026      	b.n	8003994 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800394c:	2300      	movs	r3, #0
 800394e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003958:	d007      	beq.n	800396a <UART_Receive_IT+0x74>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d10a      	bne.n	8003978 <UART_Receive_IT+0x82>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	b2da      	uxtb	r2, r3
 8003972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	e008      	b.n	800398a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003984:	b2da      	uxtb	r2, r3
 8003986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003988:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29b      	uxth	r3, r3
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	4619      	mov	r1, r3
 80039a2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d15d      	bne.n	8003a64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0220 	bic.w	r2, r2, #32
 80039b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80039c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f022 0201 	bic.w	r2, r2, #1
 80039d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d135      	bne.n	8003a5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	330c      	adds	r3, #12
 80039fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	e853 3f00 	ldrex	r3, [r3]
 8003a02:	613b      	str	r3, [r7, #16]
   return(result);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f023 0310 	bic.w	r3, r3, #16
 8003a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	330c      	adds	r3, #12
 8003a12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a14:	623a      	str	r2, [r7, #32]
 8003a16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a18:	69f9      	ldr	r1, [r7, #28]
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	e841 2300 	strex	r3, r2, [r1]
 8003a20:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d1e5      	bne.n	80039f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d10a      	bne.n	8003a4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fe2a 	bl	80036ac <HAL_UARTEx_RxEventCallback>
 8003a58:	e002      	b.n	8003a60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fc ffba 	bl	80009d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a60:	2300      	movs	r3, #0
 8003a62:	e002      	b.n	8003a6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3730      	adds	r7, #48	@ 0x30
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
	...

08003a74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a78:	b0c0      	sub	sp, #256	@ 0x100
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	68d9      	ldr	r1, [r3, #12]
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	ea40 0301 	orr.w	r3, r0, r1
 8003a9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003acc:	f021 010c 	bic.w	r1, r1, #12
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003ada:	430b      	orrs	r3, r1
 8003adc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	6999      	ldr	r1, [r3, #24]
 8003af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	ea40 0301 	orr.w	r3, r0, r1
 8003afa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4b8f      	ldr	r3, [pc, #572]	@ (8003d40 <UART_SetConfig+0x2cc>)
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d005      	beq.n	8003b14 <UART_SetConfig+0xa0>
 8003b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d44 <UART_SetConfig+0x2d0>)
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d104      	bne.n	8003b1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b14:	f7fd fec8 	bl	80018a8 <HAL_RCC_GetPCLK2Freq>
 8003b18:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b1c:	e003      	b.n	8003b26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b1e:	f7fd feaf 	bl	8001880 <HAL_RCC_GetPCLK1Freq>
 8003b22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b30:	f040 810c 	bne.w	8003d4c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b46:	4622      	mov	r2, r4
 8003b48:	462b      	mov	r3, r5
 8003b4a:	1891      	adds	r1, r2, r2
 8003b4c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b4e:	415b      	adcs	r3, r3
 8003b50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b56:	4621      	mov	r1, r4
 8003b58:	eb12 0801 	adds.w	r8, r2, r1
 8003b5c:	4629      	mov	r1, r5
 8003b5e:	eb43 0901 	adc.w	r9, r3, r1
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b76:	4690      	mov	r8, r2
 8003b78:	4699      	mov	r9, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	eb18 0303 	adds.w	r3, r8, r3
 8003b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b84:	462b      	mov	r3, r5
 8003b86:	eb49 0303 	adc.w	r3, r9, r3
 8003b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b9a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	18db      	adds	r3, r3, r3
 8003ba6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ba8:	4613      	mov	r3, r2
 8003baa:	eb42 0303 	adc.w	r3, r2, r3
 8003bae:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003bb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003bb8:	f7fc fb2a 	bl	8000210 <__aeabi_uldivmod>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4b61      	ldr	r3, [pc, #388]	@ (8003d48 <UART_SetConfig+0x2d4>)
 8003bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	011c      	lsls	r4, r3, #4
 8003bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bd4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003bd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003bdc:	4642      	mov	r2, r8
 8003bde:	464b      	mov	r3, r9
 8003be0:	1891      	adds	r1, r2, r2
 8003be2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003be4:	415b      	adcs	r3, r3
 8003be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bec:	4641      	mov	r1, r8
 8003bee:	eb12 0a01 	adds.w	sl, r2, r1
 8003bf2:	4649      	mov	r1, r9
 8003bf4:	eb43 0b01 	adc.w	fp, r3, r1
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	f04f 0300 	mov.w	r3, #0
 8003c00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c0c:	4692      	mov	sl, r2
 8003c0e:	469b      	mov	fp, r3
 8003c10:	4643      	mov	r3, r8
 8003c12:	eb1a 0303 	adds.w	r3, sl, r3
 8003c16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c20:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c30:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	18db      	adds	r3, r3, r3
 8003c3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c3e:	4613      	mov	r3, r2
 8003c40:	eb42 0303 	adc.w	r3, r2, r3
 8003c44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c4e:	f7fc fadf 	bl	8000210 <__aeabi_uldivmod>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4611      	mov	r1, r2
 8003c58:	4b3b      	ldr	r3, [pc, #236]	@ (8003d48 <UART_SetConfig+0x2d4>)
 8003c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	2264      	movs	r2, #100	@ 0x64
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	1acb      	subs	r3, r1, r3
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c6e:	4b36      	ldr	r3, [pc, #216]	@ (8003d48 <UART_SetConfig+0x2d4>)
 8003c70:	fba3 2302 	umull	r2, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c7c:	441c      	add	r4, r3
 8003c7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c88:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c90:	4642      	mov	r2, r8
 8003c92:	464b      	mov	r3, r9
 8003c94:	1891      	adds	r1, r2, r2
 8003c96:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c98:	415b      	adcs	r3, r3
 8003c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ca0:	4641      	mov	r1, r8
 8003ca2:	1851      	adds	r1, r2, r1
 8003ca4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	414b      	adcs	r3, r1
 8003caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003cb8:	4659      	mov	r1, fp
 8003cba:	00cb      	lsls	r3, r1, #3
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	00ca      	lsls	r2, r1, #3
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4603      	mov	r3, r0
 8003ccc:	4642      	mov	r2, r8
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	460a      	mov	r2, r1
 8003cd8:	eb42 0303 	adc.w	r3, r2, r3
 8003cdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cf0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	18db      	adds	r3, r3, r3
 8003cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	eb42 0303 	adc.w	r3, r2, r3
 8003d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d06:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d0a:	f7fc fa81 	bl	8000210 <__aeabi_uldivmod>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <UART_SetConfig+0x2d4>)
 8003d14:	fba3 1302 	umull	r1, r3, r3, r2
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	2164      	movs	r1, #100	@ 0x64
 8003d1c:	fb01 f303 	mul.w	r3, r1, r3
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	3332      	adds	r3, #50	@ 0x32
 8003d26:	4a08      	ldr	r2, [pc, #32]	@ (8003d48 <UART_SetConfig+0x2d4>)
 8003d28:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	f003 0207 	and.w	r2, r3, #7
 8003d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4422      	add	r2, r4
 8003d3a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d3c:	e106      	b.n	8003f4c <UART_SetConfig+0x4d8>
 8003d3e:	bf00      	nop
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40011400 	.word	0x40011400
 8003d48:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d50:	2200      	movs	r2, #0
 8003d52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d56:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d5a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d5e:	4642      	mov	r2, r8
 8003d60:	464b      	mov	r3, r9
 8003d62:	1891      	adds	r1, r2, r2
 8003d64:	6239      	str	r1, [r7, #32]
 8003d66:	415b      	adcs	r3, r3
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d6a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d6e:	4641      	mov	r1, r8
 8003d70:	1854      	adds	r4, r2, r1
 8003d72:	4649      	mov	r1, r9
 8003d74:	eb43 0501 	adc.w	r5, r3, r1
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	00eb      	lsls	r3, r5, #3
 8003d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d86:	00e2      	lsls	r2, r4, #3
 8003d88:	4614      	mov	r4, r2
 8003d8a:	461d      	mov	r5, r3
 8003d8c:	4643      	mov	r3, r8
 8003d8e:	18e3      	adds	r3, r4, r3
 8003d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d94:	464b      	mov	r3, r9
 8003d96:	eb45 0303 	adc.w	r3, r5, r3
 8003d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003daa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	f04f 0300 	mov.w	r3, #0
 8003db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dba:	4629      	mov	r1, r5
 8003dbc:	008b      	lsls	r3, r1, #2
 8003dbe:	4621      	mov	r1, r4
 8003dc0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	008a      	lsls	r2, r1, #2
 8003dc8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003dcc:	f7fc fa20 	bl	8000210 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b60      	ldr	r3, [pc, #384]	@ (8003f58 <UART_SetConfig+0x4e4>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011c      	lsls	r4, r3, #4
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003de8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003dec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	61b9      	str	r1, [r7, #24]
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e00:	4641      	mov	r1, r8
 8003e02:	1851      	adds	r1, r2, r1
 8003e04:	6139      	str	r1, [r7, #16]
 8003e06:	4649      	mov	r1, r9
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	617b      	str	r3, [r7, #20]
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e18:	4659      	mov	r1, fp
 8003e1a:	00cb      	lsls	r3, r1, #3
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e22:	4651      	mov	r1, sl
 8003e24:	00ca      	lsls	r2, r1, #3
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	189b      	adds	r3, r3, r2
 8003e30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e34:	464b      	mov	r3, r9
 8003e36:	460a      	mov	r2, r1
 8003e38:	eb42 0303 	adc.w	r3, r2, r3
 8003e3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e4a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e58:	4649      	mov	r1, r9
 8003e5a:	008b      	lsls	r3, r1, #2
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e62:	4641      	mov	r1, r8
 8003e64:	008a      	lsls	r2, r1, #2
 8003e66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e6a:	f7fc f9d1 	bl	8000210 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4611      	mov	r1, r2
 8003e74:	4b38      	ldr	r3, [pc, #224]	@ (8003f58 <UART_SetConfig+0x4e4>)
 8003e76:	fba3 2301 	umull	r2, r3, r3, r1
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	2264      	movs	r2, #100	@ 0x64
 8003e7e:	fb02 f303 	mul.w	r3, r2, r3
 8003e82:	1acb      	subs	r3, r1, r3
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	3332      	adds	r3, #50	@ 0x32
 8003e88:	4a33      	ldr	r2, [pc, #204]	@ (8003f58 <UART_SetConfig+0x4e4>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	095b      	lsrs	r3, r3, #5
 8003e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e94:	441c      	add	r4, r3
 8003e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e9e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ea0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ea4:	4642      	mov	r2, r8
 8003ea6:	464b      	mov	r3, r9
 8003ea8:	1891      	adds	r1, r2, r2
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	415b      	adcs	r3, r3
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003eb4:	4641      	mov	r1, r8
 8003eb6:	1851      	adds	r1, r2, r1
 8003eb8:	6039      	str	r1, [r7, #0]
 8003eba:	4649      	mov	r1, r9
 8003ebc:	414b      	adcs	r3, r1
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ecc:	4659      	mov	r1, fp
 8003ece:	00cb      	lsls	r3, r1, #3
 8003ed0:	4651      	mov	r1, sl
 8003ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ed6:	4651      	mov	r1, sl
 8003ed8:	00ca      	lsls	r2, r1, #3
 8003eda:	4610      	mov	r0, r2
 8003edc:	4619      	mov	r1, r3
 8003ede:	4603      	mov	r3, r0
 8003ee0:	4642      	mov	r2, r8
 8003ee2:	189b      	adds	r3, r3, r2
 8003ee4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ee6:	464b      	mov	r3, r9
 8003ee8:	460a      	mov	r2, r1
 8003eea:	eb42 0303 	adc.w	r3, r2, r3
 8003eee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003efa:	667a      	str	r2, [r7, #100]	@ 0x64
 8003efc:	f04f 0200 	mov.w	r2, #0
 8003f00:	f04f 0300 	mov.w	r3, #0
 8003f04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f08:	4649      	mov	r1, r9
 8003f0a:	008b      	lsls	r3, r1, #2
 8003f0c:	4641      	mov	r1, r8
 8003f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f12:	4641      	mov	r1, r8
 8003f14:	008a      	lsls	r2, r1, #2
 8003f16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f1a:	f7fc f979 	bl	8000210 <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <UART_SetConfig+0x4e4>)
 8003f24:	fba3 1302 	umull	r1, r3, r3, r2
 8003f28:	095b      	lsrs	r3, r3, #5
 8003f2a:	2164      	movs	r1, #100	@ 0x64
 8003f2c:	fb01 f303 	mul.w	r3, r1, r3
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	011b      	lsls	r3, r3, #4
 8003f34:	3332      	adds	r3, #50	@ 0x32
 8003f36:	4a08      	ldr	r2, [pc, #32]	@ (8003f58 <UART_SetConfig+0x4e4>)
 8003f38:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3c:	095b      	lsrs	r3, r3, #5
 8003f3e:	f003 020f 	and.w	r2, r3, #15
 8003f42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4422      	add	r2, r4
 8003f4a:	609a      	str	r2, [r3, #8]
}
 8003f4c:	bf00      	nop
 8003f4e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f52:	46bd      	mov	sp, r7
 8003f54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f58:	51eb851f 	.word	0x51eb851f

08003f5c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f103 0208 	add.w	r2, r3, #8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f74:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f103 0208 	add.w	r2, r3, #8
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f103 0208 	add.w	r2, r3, #8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr

08003fb6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b085      	sub	sp, #20
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fcc:	d103      	bne.n	8003fd6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e00c      	b.n	8003ff0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3308      	adds	r3, #8
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e002      	b.n	8003fe4 <vListInsert+0x2e>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d2f6      	bcs.n	8003fde <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6892      	ldr	r2, [r2, #8]
 800403e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6852      	ldr	r2, [r2, #4]
 8004048:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d103      	bne.n	800405c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689a      	ldr	r2, [r3, #8]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	1e5a      	subs	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3714      	adds	r7, #20
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004086:	2301      	movs	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10b      	bne.n	80040ac <xQueueGenericReset+0x30>
    __asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	60fb      	str	r3, [r7, #12]
}
 80040a6:	bf00      	nop
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d05d      	beq.n	800416e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d059      	beq.n	800416e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c2:	2100      	movs	r1, #0
 80040c4:	fba3 2302 	umull	r2, r3, r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d000      	beq.n	80040ce <xQueueGenericReset+0x52>
 80040cc:	2101      	movs	r1, #1
 80040ce:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d14c      	bne.n	800416e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80040d4:	f002 fd9e 	bl	8006c14 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040e0:	6939      	ldr	r1, [r7, #16]
 80040e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	441a      	add	r2, r3
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2200      	movs	r2, #0
 80040f2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	3b01      	subs	r3, #1
 8004106:	6939      	ldr	r1, [r7, #16]
 8004108:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	441a      	add	r2, r3
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	22ff      	movs	r2, #255	@ 0xff
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	22ff      	movs	r2, #255	@ 0xff
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d114      	bne.n	8004154 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01a      	beq.n	8004168 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3310      	adds	r3, #16
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fade 	bl	80056f8 <xTaskRemoveFromEventList>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d012      	beq.n	8004168 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004142:	4b16      	ldr	r3, [pc, #88]	@ (800419c <xQueueGenericReset+0x120>)
 8004144:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004148:	601a      	str	r2, [r3, #0]
 800414a:	f3bf 8f4f 	dsb	sy
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	e009      	b.n	8004168 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	3310      	adds	r3, #16
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff feff 	bl	8003f5c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	3324      	adds	r3, #36	@ 0x24
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff fefa 	bl	8003f5c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004168:	f002 fd86 	bl	8006c78 <vPortExitCritical>
 800416c:	e001      	b.n	8004172 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <xQueueGenericReset+0x114>
    __asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60bb      	str	r3, [r7, #8]
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	e7fd      	b.n	800418c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8004190:	697b      	ldr	r3, [r7, #20]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	@ 0x28
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d02e      	beq.n	8004216 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80041b8:	2100      	movs	r1, #0
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	fba3 2302 	umull	r2, r3, r3, r2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d000      	beq.n	80041c8 <xQueueGenericCreate+0x28>
 80041c6:	2101      	movs	r1, #1
 80041c8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d123      	bne.n	8004216 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80041d6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80041da:	d81c      	bhi.n	8004216 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	fb02 f303 	mul.w	r3, r2, r3
 80041e4:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3350      	adds	r3, #80	@ 0x50
 80041ea:	4618      	mov	r0, r3
 80041ec:	f002 fe38 	bl	8006e60 <pvPortMalloc>
 80041f0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01d      	beq.n	8004234 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	3350      	adds	r3, #80	@ 0x50
 8004200:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004202:	79fa      	ldrb	r2, [r7, #7]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	68b9      	ldr	r1, [r7, #8]
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f000 f815 	bl	800423e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8004214:	e00e      	b.n	8004234 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10b      	bne.n	8004234 <xQueueGenericCreate+0x94>
    __asm volatile
 800421c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004220:	f383 8811 	msr	BASEPRI, r3
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	f3bf 8f4f 	dsb	sy
 800422c:	613b      	str	r3, [r7, #16]
}
 800422e:	bf00      	nop
 8004230:	bf00      	nop
 8004232:	e7fd      	b.n	8004230 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8004234:	69fb      	ldr	r3, [r7, #28]
    }
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	e002      	b.n	8004260 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800426c:	2101      	movs	r1, #1
 800426e:	69b8      	ldr	r0, [r7, #24]
 8004270:	f7ff ff04 	bl	800407c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	78fa      	ldrb	r2, [r7, #3]
 8004278:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800427c:	bf00      	nop
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08e      	sub	sp, #56	@ 0x38
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]
 8004290:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004292:	2300      	movs	r3, #0
 8004294:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10b      	bne.n	80042b8 <xQueueGenericSend+0x34>
    __asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d103      	bne.n	80042c6 <xQueueGenericSend+0x42>
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <xQueueGenericSend+0x46>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xQueueGenericSend+0x48>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <xQueueGenericSend+0x64>
    __asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d103      	bne.n	80042f6 <xQueueGenericSend+0x72>
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <xQueueGenericSend+0x76>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <xQueueGenericSend+0x78>
 80042fa:	2300      	movs	r3, #0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <xQueueGenericSend+0x94>
    __asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	623b      	str	r3, [r7, #32]
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004318:	f001 fc04 	bl	8005b24 <xTaskGetSchedulerState>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <xQueueGenericSend+0xa4>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <xQueueGenericSend+0xa8>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <xQueueGenericSend+0xaa>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10b      	bne.n	800434a <xQueueGenericSend+0xc6>
    __asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61fb      	str	r3, [r7, #28]
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop
 8004348:	e7fd      	b.n	8004346 <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800434a:	f002 fc63 	bl	8006c14 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800434e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004350:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	429a      	cmp	r2, r3
 8004358:	d302      	bcc.n	8004360 <xQueueGenericSend+0xdc>
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d129      	bne.n	80043b4 <xQueueGenericSend+0x130>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004366:	f000 fae0 	bl	800492a <prvCopyDataToQueue>
 800436a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800436c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800436e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d010      	beq.n	8004396 <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004376:	3324      	adds	r3, #36	@ 0x24
 8004378:	4618      	mov	r0, r3
 800437a:	f001 f9bd 	bl	80056f8 <xTaskRemoveFromEventList>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d013      	beq.n	80043ac <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004384:	4b3f      	ldr	r3, [pc, #252]	@ (8004484 <xQueueGenericSend+0x200>)
 8004386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	e00a      	b.n	80043ac <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800439c:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <xQueueGenericSend+0x200>)
 800439e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80043ac:	f002 fc64 	bl	8006c78 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e063      	b.n	800447c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80043ba:	f002 fc5d 	bl	8006c78 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	e05c      	b.n	800447c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80043c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d106      	bne.n	80043d6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80043c8:	f107 0314 	add.w	r3, r7, #20
 80043cc:	4618      	mov	r0, r3
 80043ce:	f001 fa6d 	bl	80058ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80043d6:	f002 fc4f 	bl	8006c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80043da:	f000 fe77 	bl	80050cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80043de:	f002 fc19 	bl	8006c14 <vPortEnterCritical>
 80043e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043e8:	b25b      	sxtb	r3, r3
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043ee:	d103      	bne.n	80043f8 <xQueueGenericSend+0x174>
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043fe:	b25b      	sxtb	r3, r3
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004404:	d103      	bne.n	800440e <xQueueGenericSend+0x18a>
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800440e:	f002 fc33 	bl	8006c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004412:	1d3a      	adds	r2, r7, #4
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	4611      	mov	r1, r2
 800441a:	4618      	mov	r0, r3
 800441c:	f001 fa5c 	bl	80058d8 <xTaskCheckForTimeOut>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d124      	bne.n	8004470 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004426:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004428:	f000 fb77 	bl	8004b1a <prvIsQueueFull>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	3310      	adds	r3, #16
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4611      	mov	r1, r2
 800443a:	4618      	mov	r0, r3
 800443c:	f001 f8f0 	bl	8005620 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004442:	f000 fb02 	bl	8004a4a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004446:	f000 fe4f 	bl	80050e8 <xTaskResumeAll>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	f47f af7c 	bne.w	800434a <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8004452:	4b0c      	ldr	r3, [pc, #48]	@ (8004484 <xQueueGenericSend+0x200>)
 8004454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	e772      	b.n	800434a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004464:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004466:	f000 faf0 	bl	8004a4a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800446a:	f000 fe3d 	bl	80050e8 <xTaskResumeAll>
 800446e:	e76c      	b.n	800434a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004470:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004472:	f000 faea 	bl	8004a4a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004476:	f000 fe37 	bl	80050e8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 800447a:	2300      	movs	r3, #0
        }
    }
}
 800447c:	4618      	mov	r0, r3
 800447e:	3738      	adds	r7, #56	@ 0x38
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	e000ed04 	.word	0xe000ed04

08004488 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b092      	sub	sp, #72	@ 0x48
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
 8004494:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 800449a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d10b      	bne.n	80044b8 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 80044a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 80044b2:	bf00      	nop
 80044b4:	bf00      	nop
 80044b6:	e7fd      	b.n	80044b4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d103      	bne.n	80044c6 <xQueueGenericSendFromISR+0x3e>
 80044be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <xQueueGenericSendFromISR+0x42>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e000      	b.n	80044cc <xQueueGenericSendFromISR+0x44>
 80044ca:	2300      	movs	r3, #0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d10b      	bne.n	80044e8 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 80044d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d4:	f383 8811 	msr	BASEPRI, r3
 80044d8:	f3bf 8f6f 	isb	sy
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044e2:	bf00      	nop
 80044e4:	bf00      	nop
 80044e6:	e7fd      	b.n	80044e4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSendFromISR+0x6e>
 80044ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d101      	bne.n	80044fa <xQueueGenericSendFromISR+0x72>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <xQueueGenericSendFromISR+0x74>
 80044fa:	2300      	movs	r3, #0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10b      	bne.n	8004518 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004518:	f002 fc60 	bl	8006ddc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800451c:	f3ef 8211 	mrs	r2, BASEPRI
 8004520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	623a      	str	r2, [r7, #32]
 8004532:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8004534:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004536:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800453c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004540:	429a      	cmp	r2, r3
 8004542:	d302      	bcc.n	800454a <xQueueGenericSendFromISR+0xc2>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d147      	bne.n	80045da <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800454a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800454c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004550:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004558:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	68b9      	ldr	r1, [r7, #8]
 800455e:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8004560:	f000 f9e3 	bl	800492a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004564:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800456c:	d112      	bne.n	8004594 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800456e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004578:	3324      	adds	r3, #36	@ 0x24
 800457a:	4618      	mov	r0, r3
 800457c:	f001 f8bc 	bl	80056f8 <xTaskRemoveFromEventList>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d026      	beq.n	80045d4 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d023      	beq.n	80045d4 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]
 8004592:	e01f      	b.n	80045d4 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004594:	f000 fec0 	bl	8005318 <uxTaskGetNumberOfTasks>
 8004598:	6338      	str	r0, [r7, #48]	@ 0x30
 800459a:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 800459e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d917      	bls.n	80045d4 <xQueueGenericSendFromISR+0x14c>
 80045a4:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80045a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80045aa:	d10b      	bne.n	80045c4 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	61bb      	str	r3, [r7, #24]
}
 80045be:	bf00      	nop
 80045c0:	bf00      	nop
 80045c2:	e7fd      	b.n	80045c0 <xQueueGenericSendFromISR+0x138>
 80045c4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80045c8:	3301      	adds	r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	b25a      	sxtb	r2, r3
 80045ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80045d4:	2301      	movs	r3, #1
 80045d6:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80045d8:	e001      	b.n	80045de <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80045da:	2300      	movs	r3, #0
 80045dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80045de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80045e8:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 80045ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3748      	adds	r7, #72	@ 0x48
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08c      	sub	sp, #48	@ 0x30
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	60b9      	str	r1, [r7, #8]
 80045fe:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004600:	2300      	movs	r3, #0
 8004602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10b      	bne.n	8004626 <xQueueReceive+0x32>
    __asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	623b      	str	r3, [r7, #32]
}
 8004620:	bf00      	nop
 8004622:	bf00      	nop
 8004624:	e7fd      	b.n	8004622 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d103      	bne.n	8004634 <xQueueReceive+0x40>
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <xQueueReceive+0x44>
 8004634:	2301      	movs	r3, #1
 8004636:	e000      	b.n	800463a <xQueueReceive+0x46>
 8004638:	2300      	movs	r3, #0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <xQueueReceive+0x62>
    __asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	61fb      	str	r3, [r7, #28]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004656:	f001 fa65 	bl	8005b24 <xTaskGetSchedulerState>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <xQueueReceive+0x72>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <xQueueReceive+0x76>
 8004666:	2301      	movs	r3, #1
 8004668:	e000      	b.n	800466c <xQueueReceive+0x78>
 800466a:	2300      	movs	r3, #0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d10b      	bne.n	8004688 <xQueueReceive+0x94>
    __asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	61bb      	str	r3, [r7, #24]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004688:	f002 fac4 	bl	8006c14 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004690:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d01f      	beq.n	80046d8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800469c:	f000 f9af 	bl	80049fe <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	1e5a      	subs	r2, r3, #1
 80046a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00f      	beq.n	80046d0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b2:	3310      	adds	r3, #16
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f81f 	bl	80056f8 <xTaskRemoveFromEventList>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d007      	beq.n	80046d0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80046c0:	4b3c      	ldr	r3, [pc, #240]	@ (80047b4 <xQueueReceive+0x1c0>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80046d0:	f002 fad2 	bl	8006c78 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e069      	b.n	80047ac <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80046de:	f002 facb 	bl	8006c78 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80046e2:	2300      	movs	r3, #0
 80046e4:	e062      	b.n	80047ac <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d106      	bne.n	80046fa <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80046ec:	f107 0310 	add.w	r3, r7, #16
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 f8db 	bl	80058ac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80046f6:	2301      	movs	r3, #1
 80046f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80046fa:	f002 fabd 	bl	8006c78 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80046fe:	f000 fce5 	bl	80050cc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004702:	f002 fa87 	bl	8006c14 <vPortEnterCritical>
 8004706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004708:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800470c:	b25b      	sxtb	r3, r3
 800470e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004712:	d103      	bne.n	800471c <xQueueReceive+0x128>
 8004714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004722:	b25b      	sxtb	r3, r3
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004728:	d103      	bne.n	8004732 <xQueueReceive+0x13e>
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004732:	f002 faa1 	bl	8006c78 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004736:	1d3a      	adds	r2, r7, #4
 8004738:	f107 0310 	add.w	r3, r7, #16
 800473c:	4611      	mov	r1, r2
 800473e:	4618      	mov	r0, r3
 8004740:	f001 f8ca 	bl	80058d8 <xTaskCheckForTimeOut>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d123      	bne.n	8004792 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800474a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800474c:	f000 f9cf 	bl	8004aee <prvIsQueueEmpty>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d017      	beq.n	8004786 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004758:	3324      	adds	r3, #36	@ 0x24
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f000 ff5e 	bl	8005620 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004764:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004766:	f000 f970 	bl	8004a4a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800476a:	f000 fcbd 	bl	80050e8 <xTaskResumeAll>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d189      	bne.n	8004688 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8004774:	4b0f      	ldr	r3, [pc, #60]	@ (80047b4 <xQueueReceive+0x1c0>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	e780      	b.n	8004688 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004786:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004788:	f000 f95f 	bl	8004a4a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800478c:	f000 fcac 	bl	80050e8 <xTaskResumeAll>
 8004790:	e77a      	b.n	8004688 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004794:	f000 f959 	bl	8004a4a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004798:	f000 fca6 	bl	80050e8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800479c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800479e:	f000 f9a6 	bl	8004aee <prvIsQueueEmpty>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f43f af6f 	beq.w	8004688 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80047aa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3730      	adds	r7, #48	@ 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	e000ed04 	.word	0xe000ed04

080047b8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b090      	sub	sp, #64	@ 0x40
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 80047c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d10b      	bne.n	80047e6 <xQueueReceiveFromISR+0x2e>
    __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047e0:	bf00      	nop
 80047e2:	bf00      	nop
 80047e4:	e7fd      	b.n	80047e2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d103      	bne.n	80047f4 <xQueueReceiveFromISR+0x3c>
 80047ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <xQueueReceiveFromISR+0x40>
 80047f4:	2301      	movs	r3, #1
 80047f6:	e000      	b.n	80047fa <xQueueReceiveFromISR+0x42>
 80047f8:	2300      	movs	r3, #0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10b      	bne.n	8004816 <xQueueReceiveFromISR+0x5e>
    __asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	623b      	str	r3, [r7, #32]
}
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	e7fd      	b.n	8004812 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004816:	f002 fae1 	bl	8006ddc <vPortValidateInterruptPriority>
    __asm volatile
 800481a:	f3ef 8211 	mrs	r2, BASEPRI
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	61fa      	str	r2, [r7, #28]
 8004830:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8004832:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004834:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800483c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483e:	2b00      	cmp	r3, #0
 8004840:	d047      	beq.n	80048d2 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004848:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004850:	f000 f8d5 	bl	80049fe <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	1e5a      	subs	r2, r3, #1
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800485c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004864:	d112      	bne.n	800488c <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d02e      	beq.n	80048cc <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800486e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004870:	3310      	adds	r3, #16
 8004872:	4618      	mov	r0, r3
 8004874:	f000 ff40 	bl	80056f8 <xTaskRemoveFromEventList>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d026      	beq.n	80048cc <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d023      	beq.n	80048cc <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	e01f      	b.n	80048cc <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 800488c:	f000 fd44 	bl	8005318 <uxTaskGetNumberOfTasks>
 8004890:	62b8      	str	r0, [r7, #40]	@ 0x28
 8004892:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004898:	429a      	cmp	r2, r3
 800489a:	d917      	bls.n	80048cc <xQueueReceiveFromISR+0x114>
 800489c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80048a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048a2:	d10b      	bne.n	80048bc <xQueueReceiveFromISR+0x104>
    __asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	617b      	str	r3, [r7, #20]
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <xQueueReceiveFromISR+0x100>
 80048bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048c0:	3301      	adds	r3, #1
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	b25a      	sxtb	r2, r3
 80048c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80048cc:	2301      	movs	r3, #1
 80048ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048d0:	e001      	b.n	80048d6 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d8:	613b      	str	r3, [r7, #16]
    __asm volatile
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	f383 8811 	msr	BASEPRI, r3
}
 80048e0:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );

    return xReturn;
 80048e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3740      	adds	r7, #64	@ 0x40
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10b      	bne.n	8004912 <uxQueueMessagesWaiting+0x26>
    __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60bb      	str	r3, [r7, #8]
}
 800490c:	bf00      	nop
 800490e:	bf00      	nop
 8004910:	e7fd      	b.n	800490e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004912:	f002 f97f 	bl	8006c14 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 800491c:	f002 f9ac 	bl	8006c78 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8004920:	68fb      	ldr	r3, [r7, #12]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d10d      	bne.n	8004964 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d14d      	bne.n	80049ec <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4618      	mov	r0, r3
 8004956:	f001 f903 	bl	8005b60 <xTaskPriorityDisinherit>
 800495a:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	e043      	b.n	80049ec <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d119      	bne.n	800499e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6858      	ldr	r0, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004972:	461a      	mov	r2, r3
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	f002 fd1b 	bl	80073b0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	441a      	add	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d32b      	bcc.n	80049ec <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	e026      	b.n	80049ec <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68d8      	ldr	r0, [r3, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	461a      	mov	r2, r3
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	f002 fd01 	bl	80073b0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b6:	425b      	negs	r3, r3
 80049b8:	441a      	add	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d207      	bcs.n	80049da <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	689a      	ldr	r2, [r3, #8]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	425b      	negs	r3, r3
 80049d4:	441a      	add	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d105      	bne.n	80049ec <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d002      	beq.n	80049ec <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d018      	beq.n	8004a42 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a18:	441a      	add	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d303      	bcc.n	8004a32 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68d9      	ldr	r1, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	6838      	ldr	r0, [r7, #0]
 8004a3e:	f002 fcb7 	bl	80073b0 <memcpy>
    }
}
 8004a42:	bf00      	nop
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004a52:	f002 f8df 	bl	8006c14 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a5c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a5e:	e011      	b.n	8004a84 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d012      	beq.n	8004a8e <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3324      	adds	r3, #36	@ 0x24
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fe43 	bl	80056f8 <xTaskRemoveFromEventList>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8004a78:	f000 ff96 	bl	80059a8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dce9      	bgt.n	8004a60 <prvUnlockQueue+0x16>
 8004a8c:	e000      	b.n	8004a90 <prvUnlockQueue+0x46>
                    break;
 8004a8e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	22ff      	movs	r2, #255	@ 0xff
 8004a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004a98:	f002 f8ee 	bl	8006c78 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004a9c:	f002 f8ba 	bl	8006c14 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aa6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aa8:	e011      	b.n	8004ace <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d012      	beq.n	8004ad8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3310      	adds	r3, #16
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fe1e 	bl	80056f8 <xTaskRemoveFromEventList>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004ac2:	f000 ff71 	bl	80059a8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004ac6:	7bbb      	ldrb	r3, [r7, #14]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	dce9      	bgt.n	8004aaa <prvUnlockQueue+0x60>
 8004ad6:	e000      	b.n	8004ada <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004ad8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	22ff      	movs	r2, #255	@ 0xff
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004ae2:	f002 f8c9 	bl	8006c78 <vPortExitCritical>
}
 8004ae6:	bf00      	nop
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}

08004aee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004aee:	b580      	push	{r7, lr}
 8004af0:	b084      	sub	sp, #16
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004af6:	f002 f88d 	bl	8006c14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d102      	bne.n	8004b08 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	e001      	b.n	8004b0c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b0c:	f002 f8b4 	bl	8006c78 <vPortExitCritical>

    return xReturn;
 8004b10:	68fb      	ldr	r3, [r7, #12]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004b22:	f002 f877 	bl	8006c14 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d102      	bne.n	8004b38 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004b32:	2301      	movs	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e001      	b.n	8004b3c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004b3c:	f002 f89c 	bl	8006c78 <vPortExitCritical>

    return xReturn;
 8004b40:	68fb      	ldr	r3, [r7, #12]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b087      	sub	sp, #28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10b      	bne.n	8004b74 <xQueueIsQueueFullFromISR+0x2a>
    __asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	60fb      	str	r3, [r7, #12]
}
 8004b6e:	bf00      	nop
 8004b70:	bf00      	nop
 8004b72:	e7fd      	b.n	8004b70 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d102      	bne.n	8004b86 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e001      	b.n	8004b8a <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );

    return xReturn;
 8004b8a:	697b      	ldr	r3, [r7, #20]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <vQueueAddToRegistry+0x2c>
    __asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	60fb      	str	r3, [r7, #12]
}
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
 8004bc2:	e7fd      	b.n	8004bc0 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d024      	beq.n	8004c14 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bca:	2300      	movs	r3, #0
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e01e      	b.n	8004c0e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8004bd0:	4a18      	ldr	r2, [pc, #96]	@ (8004c34 <vQueueAddToRegistry+0x9c>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d105      	bne.n	8004bec <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4a13      	ldr	r2, [pc, #76]	@ (8004c34 <vQueueAddToRegistry+0x9c>)
 8004be6:	4413      	add	r3, r2
 8004be8:	613b      	str	r3, [r7, #16]
                    break;
 8004bea:	e013      	b.n	8004c14 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <vQueueAddToRegistry+0x70>
 8004bf2:	4a10      	ldr	r2, [pc, #64]	@ (8004c34 <vQueueAddToRegistry+0x9c>)
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d104      	bne.n	8004c08 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4a0c      	ldr	r2, [pc, #48]	@ (8004c34 <vQueueAddToRegistry+0x9c>)
 8004c04:	4413      	add	r3, r2
 8004c06:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b07      	cmp	r3, #7
 8004c12:	d9dd      	bls.n	8004bd0 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d005      	beq.n	8004c26 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	20000108 	.word	0x20000108

08004c38 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004c48:	f001 ffe4 	bl	8006c14 <vPortEnterCritical>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c52:	b25b      	sxtb	r3, r3
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c58:	d103      	bne.n	8004c62 <vQueueWaitForMessageRestricted+0x2a>
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c68:	b25b      	sxtb	r3, r3
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c6e:	d103      	bne.n	8004c78 <vQueueWaitForMessageRestricted+0x40>
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c78:	f001 fffe 	bl	8006c78 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	3324      	adds	r3, #36	@ 0x24
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fced 	bl	800566c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004c92:	6978      	ldr	r0, [r7, #20]
 8004c94:	f7ff fed9 	bl	8004a4a <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b08a      	sub	sp, #40	@ 0x28
 8004ca4:	af04      	add	r7, sp, #16
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f002 f8d4 	bl	8006e60 <pvPortMalloc>
 8004cb8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d013      	beq.n	8004ce8 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8004cc0:	2058      	movs	r0, #88	@ 0x58
 8004cc2:	f002 f8cd 	bl	8006e60 <pvPortMalloc>
 8004cc6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8004cce:	2258      	movs	r2, #88	@ 0x58
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	6978      	ldr	r0, [r7, #20]
 8004cd4:	f002 fb40 	bl	8007358 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cde:	e005      	b.n	8004cec <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004ce0:	6938      	ldr	r0, [r7, #16]
 8004ce2:	f002 f9ef 	bl	80070c4 <vPortFree>
 8004ce6:	e001      	b.n	8004cec <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00d      	beq.n	8004d0e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	9302      	str	r3, [sp, #8]
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfc:	9301      	str	r3, [sp, #4]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 f828 	bl	8004d5e <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8004d0e:	697b      	ldr	r3, [r7, #20]
    }
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
 8004d24:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	68b9      	ldr	r1, [r7, #8]
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7ff ffb3 	bl	8004ca0 <prvCreateTask>
 8004d3a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d005      	beq.n	8004d4e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8004d42:	6938      	ldr	r0, [r7, #16]
 8004d44:	f000 f89c 	bl	8004e80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e002      	b.n	8004d54 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d52:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8004d54:	697b      	ldr	r3, [r7, #20]
    }
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b088      	sub	sp, #32
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	607a      	str	r2, [r7, #4]
 8004d6a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	461a      	mov	r2, r3
 8004d76:	21a5      	movs	r1, #165	@ 0xa5
 8004d78:	f002 faee 	bl	8007358 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8004d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d86:	3b01      	subs	r3, #1
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	f023 0307 	bic.w	r3, r3, #7
 8004d94:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	617b      	str	r3, [r7, #20]
}
 8004db2:	bf00      	nop
 8004db4:	bf00      	nop
 8004db6:	e7fd      	b.n	8004db4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d01e      	beq.n	8004dfc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e012      	b.n	8004dea <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	7819      	ldrb	r1, [r3, #0]
 8004dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3334      	adds	r3, #52	@ 0x34
 8004dd4:	460a      	mov	r2, r1
 8004dd6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	4413      	add	r3, r2
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d006      	beq.n	8004df2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	3301      	adds	r3, #1
 8004de8:	61fb      	str	r3, [r7, #28]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	2b09      	cmp	r3, #9
 8004dee:	d9e9      	bls.n	8004dc4 <prvInitialiseNewTask+0x66>
 8004df0:	e000      	b.n	8004df4 <prvInitialiseNewTask+0x96>
            {
                break;
 8004df2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	2b04      	cmp	r3, #4
 8004e00:	d90b      	bls.n	8004e1a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	613b      	str	r3, [r7, #16]
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop
 8004e18:	e7fd      	b.n	8004e16 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d901      	bls.n	8004e24 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e20:	2304      	movs	r3, #4
 8004e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e28:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e2e:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e32:	3304      	adds	r3, #4
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff f8b1 	bl	8003f9c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	3318      	adds	r3, #24
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff f8ac 	bl	8003f9c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e48:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	f1c3 0205 	rsb	r2, r3, #5
 8004e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e52:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e58:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	68f9      	ldr	r1, [r7, #12]
 8004e5e:	69b8      	ldr	r0, [r7, #24]
 8004e60:	f001 fd56 	bl	8006910 <pxPortInitialiseStack>
 8004e64:	4602      	mov	r2, r0
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8004e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e74:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e76:	bf00      	nop
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8004e88:	f001 fec4 	bl	8006c14 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8004e8c:	4b41      	ldr	r3, [pc, #260]	@ (8004f94 <prvAddNewTaskToReadyList+0x114>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a40      	ldr	r2, [pc, #256]	@ (8004f94 <prvAddNewTaskToReadyList+0x114>)
 8004e94:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8004e96:	4b40      	ldr	r3, [pc, #256]	@ (8004f98 <prvAddNewTaskToReadyList+0x118>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8004e9e:	4a3e      	ldr	r2, [pc, #248]	@ (8004f98 <prvAddNewTaskToReadyList+0x118>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ea4:	4b3b      	ldr	r3, [pc, #236]	@ (8004f94 <prvAddNewTaskToReadyList+0x114>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d110      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8004eac:	f000 fda0 	bl	80059f0 <prvInitialiseTaskLists>
 8004eb0:	e00d      	b.n	8004ece <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8004eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8004f9c <prvAddNewTaskToReadyList+0x11c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004eba:	4b37      	ldr	r3, [pc, #220]	@ (8004f98 <prvAddNewTaskToReadyList+0x118>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d802      	bhi.n	8004ece <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8004ec8:	4a33      	ldr	r2, [pc, #204]	@ (8004f98 <prvAddNewTaskToReadyList+0x118>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8004ece:	4b34      	ldr	r3, [pc, #208]	@ (8004fa0 <prvAddNewTaskToReadyList+0x120>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	4a32      	ldr	r2, [pc, #200]	@ (8004fa0 <prvAddNewTaskToReadyList+0x120>)
 8004ed6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ed8:	4b31      	ldr	r3, [pc, #196]	@ (8004fa0 <prvAddNewTaskToReadyList+0x120>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	409a      	lsls	r2, r3
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa4 <prvAddNewTaskToReadyList+0x124>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	4a2d      	ldr	r2, [pc, #180]	@ (8004fa4 <prvAddNewTaskToReadyList+0x124>)
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef6:	492c      	ldr	r1, [pc, #176]	@ (8004fa8 <prvAddNewTaskToReadyList+0x128>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	3304      	adds	r3, #4
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	609a      	str	r2, [r3, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	3204      	adds	r2, #4
 8004f1e:	605a      	str	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	1d1a      	adds	r2, r3, #4
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	609a      	str	r2, [r3, #8]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <prvAddNewTaskToReadyList+0x128>)
 8004f36:	441a      	add	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	615a      	str	r2, [r3, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f40:	4919      	ldr	r1, [pc, #100]	@ (8004fa8 <prvAddNewTaskToReadyList+0x128>)
 8004f42:	4613      	mov	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	4413      	add	r3, r2
 8004f48:	009b      	lsls	r3, r3, #2
 8004f4a:	440b      	add	r3, r1
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f52:	1c59      	adds	r1, r3, #1
 8004f54:	4814      	ldr	r0, [pc, #80]	@ (8004fa8 <prvAddNewTaskToReadyList+0x128>)
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4403      	add	r3, r0
 8004f60:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8004f62:	f001 fe89 	bl	8006c78 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004f66:	4b0d      	ldr	r3, [pc, #52]	@ (8004f9c <prvAddNewTaskToReadyList+0x11c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00e      	beq.n	8004f8c <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f98 <prvAddNewTaskToReadyList+0x118>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d207      	bcs.n	8004f8c <prvAddNewTaskToReadyList+0x10c>
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004fac <prvAddNewTaskToReadyList+0x12c>)
 8004f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f82:	601a      	str	r2, [r3, #0]
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	20000220 	.word	0x20000220
 8004f98:	20000148 	.word	0x20000148
 8004f9c:	2000022c 	.word	0x2000022c
 8004fa0:	2000023c 	.word	0x2000023c
 8004fa4:	20000228 	.word	0x20000228
 8004fa8:	2000014c 	.word	0x2000014c
 8004fac:	e000ed04 	.word	0xe000ed04

08004fb0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	@ 0x28
 8004fb4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	e011      	b.n	8004fe8 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8005038 <prvCreateIdleTasks+0x88>)
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	4413      	add	r3, r2
 8004fca:	7819      	ldrb	r1, [r3, #0]
 8004fcc:	1d3a      	adds	r2, r7, #4
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8004fd6:	1d3a      	adds	r2, r7, #4
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	4413      	add	r3, r2
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d006      	beq.n	8004ff0 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	ddea      	ble.n	8004fc4 <prvCreateIdleTasks+0x14>
 8004fee:	e000      	b.n	8004ff2 <prvCreateIdleTasks+0x42>
        {
            break;
 8004ff0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e015      	b.n	8005024 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004ff8:	4b10      	ldr	r3, [pc, #64]	@ (800503c <prvCreateIdleTasks+0x8c>)
 8004ffa:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4a0f      	ldr	r2, [pc, #60]	@ (8005040 <prvCreateIdleTasks+0x90>)
 8005002:	4413      	add	r3, r2
 8005004:	1d39      	adds	r1, r7, #4
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	2300      	movs	r3, #0
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2300      	movs	r3, #0
 800500e:	2282      	movs	r2, #130	@ 0x82
 8005010:	6938      	ldr	r0, [r7, #16]
 8005012:	f7ff fe81 	bl	8004d18 <xTaskCreate>
 8005016:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d006      	beq.n	800502c <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	3301      	adds	r3, #1
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	dde6      	ble.n	8004ff8 <prvCreateIdleTasks+0x48>
 800502a:	e000      	b.n	800502e <prvCreateIdleTasks+0x7e>
        {
            break;
 800502c:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800502e:	69fb      	ldr	r3, [r7, #28]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3720      	adds	r7, #32
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	08007500 	.word	0x08007500
 800503c:	080059c1 	.word	0x080059c1
 8005040:	20000244 	.word	0x20000244

08005044 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800504a:	f7ff ffb1 	bl	8004fb0 <prvCreateIdleTasks>
 800504e:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d102      	bne.n	800505c <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8005056:	f001 f9c9 	bl	80063ec <xTimerCreateTimerTask>
 800505a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d116      	bne.n	8005090 <vTaskStartScheduler+0x4c>
    __asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60bb      	str	r3, [r7, #8]
}
 8005074:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <vTaskStartScheduler+0x78>)
 8005078:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800507c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800507e:	4b10      	ldr	r3, [pc, #64]	@ (80050c0 <vTaskStartScheduler+0x7c>)
 8005080:	2201      	movs	r2, #1
 8005082:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005084:	4b0f      	ldr	r3, [pc, #60]	@ (80050c4 <vTaskStartScheduler+0x80>)
 8005086:	2200      	movs	r2, #0
 8005088:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 800508a:	f001 fcd3 	bl	8006a34 <xPortStartScheduler>
 800508e:	e00f      	b.n	80050b0 <vTaskStartScheduler+0x6c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005096:	d10b      	bne.n	80050b0 <vTaskStartScheduler+0x6c>
    __asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	607b      	str	r3, [r7, #4]
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	e7fd      	b.n	80050ac <vTaskStartScheduler+0x68>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <vTaskStartScheduler+0x84>)
 80050b2:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80050b4:	bf00      	nop
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000240 	.word	0x20000240
 80050c0:	2000022c 	.word	0x2000022c
 80050c4:	20000224 	.word	0x20000224
 80050c8:	08007530 	.word	0x08007530

080050cc <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050cc:	b480      	push	{r7}
 80050ce:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80050d0:	4b04      	ldr	r3, [pc, #16]	@ (80050e4 <vTaskSuspendAll+0x18>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3301      	adds	r3, #1
 80050d6:	4a03      	ldr	r2, [pc, #12]	@ (80050e4 <vTaskSuspendAll+0x18>)
 80050d8:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80050da:	bf00      	nop
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	20000248 	.word	0x20000248

080050e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80050f6:	f001 fd8d 	bl	8006c14 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80050fa:	2300      	movs	r3, #0
 80050fc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80050fe:	4b75      	ldr	r3, [pc, #468]	@ (80052d4 <xTaskResumeAll+0x1ec>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <xTaskResumeAll+0x36>
    __asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	603b      	str	r3, [r7, #0]
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	e7fd      	b.n	800511a <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800511e:	4b6d      	ldr	r3, [pc, #436]	@ (80052d4 <xTaskResumeAll+0x1ec>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	4a6b      	ldr	r2, [pc, #428]	@ (80052d4 <xTaskResumeAll+0x1ec>)
 8005126:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005128:	4b6a      	ldr	r3, [pc, #424]	@ (80052d4 <xTaskResumeAll+0x1ec>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f040 80ca 	bne.w	80052c6 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005132:	4b69      	ldr	r3, [pc, #420]	@ (80052d8 <xTaskResumeAll+0x1f0>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80c5 	beq.w	80052c6 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800513c:	e08e      	b.n	800525c <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800513e:	4b67      	ldr	r3, [pc, #412]	@ (80052dc <xTaskResumeAll+0x1f4>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	6a12      	ldr	r2, [r2, #32]
 8005154:	609a      	str	r2, [r3, #8]
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	69fa      	ldr	r2, [r7, #28]
 800515c:	69d2      	ldr	r2, [r2, #28]
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	3318      	adds	r3, #24
 8005168:	429a      	cmp	r2, r3
 800516a:	d103      	bne.n	8005174 <xTaskResumeAll+0x8c>
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2200      	movs	r2, #0
 8005178:	629a      	str	r2, [r3, #40]	@ 0x28
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	1e5a      	subs	r2, r3, #1
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	60bb      	str	r3, [r7, #8]
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	68d2      	ldr	r2, [r2, #12]
 8005192:	609a      	str	r2, [r3, #8]
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	69fa      	ldr	r2, [r7, #28]
 800519a:	6892      	ldr	r2, [r2, #8]
 800519c:	605a      	str	r2, [r3, #4]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	3304      	adds	r3, #4
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d103      	bne.n	80051b2 <xTaskResumeAll+0xca>
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2200      	movs	r2, #0
 80051b6:	615a      	str	r2, [r3, #20]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	1e5a      	subs	r2, r3, #1
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	2201      	movs	r2, #1
 80051c8:	409a      	lsls	r2, r3
 80051ca:	4b45      	ldr	r3, [pc, #276]	@ (80052e0 <xTaskResumeAll+0x1f8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	4a43      	ldr	r2, [pc, #268]	@ (80052e0 <xTaskResumeAll+0x1f8>)
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d8:	4942      	ldr	r1, [pc, #264]	@ (80052e4 <xTaskResumeAll+0x1fc>)
 80051da:	4613      	mov	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	440b      	add	r3, r1
 80051e4:	3304      	adds	r3, #4
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	607b      	str	r3, [r7, #4]
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	609a      	str	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	3204      	adds	r2, #4
 8005200:	605a      	str	r2, [r3, #4]
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	1d1a      	adds	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	609a      	str	r2, [r3, #8]
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	4a33      	ldr	r2, [pc, #204]	@ (80052e4 <xTaskResumeAll+0x1fc>)
 8005218:	441a      	add	r2, r3
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	615a      	str	r2, [r3, #20]
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005222:	4930      	ldr	r1, [pc, #192]	@ (80052e4 <xTaskResumeAll+0x1fc>)
 8005224:	4613      	mov	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69fa      	ldr	r2, [r7, #28]
 8005232:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005234:	1c59      	adds	r1, r3, #1
 8005236:	482b      	ldr	r0, [pc, #172]	@ (80052e4 <xTaskResumeAll+0x1fc>)
 8005238:	4613      	mov	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	4413      	add	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4403      	add	r3, r0
 8005242:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005248:	4b27      	ldr	r3, [pc, #156]	@ (80052e8 <xTaskResumeAll+0x200>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524e:	429a      	cmp	r2, r3
 8005250:	d904      	bls.n	800525c <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005252:	4a26      	ldr	r2, [pc, #152]	@ (80052ec <xTaskResumeAll+0x204>)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2101      	movs	r1, #1
 8005258:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800525c:	4b1f      	ldr	r3, [pc, #124]	@ (80052dc <xTaskResumeAll+0x1f4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	f47f af6c 	bne.w	800513e <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800526c:	f000 fc3e 	bl	8005aec <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005270:	4b1f      	ldr	r3, [pc, #124]	@ (80052f0 <xTaskResumeAll+0x208>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d012      	beq.n	80052a2 <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800527c:	f000 f858 	bl	8005330 <xTaskIncrementTick>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8005286:	4a19      	ldr	r2, [pc, #100]	@ (80052ec <xTaskResumeAll+0x204>)
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	2101      	movs	r1, #1
 800528c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3b01      	subs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1ef      	bne.n	800527c <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 800529c:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <xTaskResumeAll+0x208>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80052a2:	4a12      	ldr	r2, [pc, #72]	@ (80052ec <xTaskResumeAll+0x204>)
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00b      	beq.n	80052c6 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80052b2:	4b0d      	ldr	r3, [pc, #52]	@ (80052e8 <xTaskResumeAll+0x200>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <xTaskResumeAll+0x20c>)
 80052b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80052c6:	f001 fcd7 	bl	8006c78 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80052ca:	69bb      	ldr	r3, [r7, #24]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3720      	adds	r7, #32
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000248 	.word	0x20000248
 80052d8:	20000220 	.word	0x20000220
 80052dc:	200001e0 	.word	0x200001e0
 80052e0:	20000228 	.word	0x20000228
 80052e4:	2000014c 	.word	0x2000014c
 80052e8:	20000148 	.word	0x20000148
 80052ec:	20000234 	.word	0x20000234
 80052f0:	20000230 	.word	0x20000230
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80052fe:	4b05      	ldr	r3, [pc, #20]	@ (8005314 <xTaskGetTickCount+0x1c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8005304:	687b      	ldr	r3, [r7, #4]
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000224 	.word	0x20000224

08005318 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 800531c:	4b03      	ldr	r3, [pc, #12]	@ (800532c <uxTaskGetNumberOfTasks+0x14>)
 800531e:	681b      	ldr	r3, [r3, #0]
}
 8005320:	4618      	mov	r0, r3
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	20000220 	.word	0x20000220

08005330 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b08a      	sub	sp, #40	@ 0x28
 8005334:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800533a:	4b7f      	ldr	r3, [pc, #508]	@ (8005538 <xTaskIncrementTick+0x208>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	f040 80ef 	bne.w	8005522 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005344:	4b7d      	ldr	r3, [pc, #500]	@ (800553c <xTaskIncrementTick+0x20c>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800534c:	4a7b      	ldr	r2, [pc, #492]	@ (800553c <xTaskIncrementTick+0x20c>)
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d121      	bne.n	800539c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8005358:	4b79      	ldr	r3, [pc, #484]	@ (8005540 <xTaskIncrementTick+0x210>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00b      	beq.n	800537a <xTaskIncrementTick+0x4a>
    __asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	607b      	str	r3, [r7, #4]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <xTaskIncrementTick+0x46>
 800537a:	4b71      	ldr	r3, [pc, #452]	@ (8005540 <xTaskIncrementTick+0x210>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	61fb      	str	r3, [r7, #28]
 8005380:	4b70      	ldr	r3, [pc, #448]	@ (8005544 <xTaskIncrementTick+0x214>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a6e      	ldr	r2, [pc, #440]	@ (8005540 <xTaskIncrementTick+0x210>)
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	4a6e      	ldr	r2, [pc, #440]	@ (8005544 <xTaskIncrementTick+0x214>)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	6013      	str	r3, [r2, #0]
 800538e:	4b6e      	ldr	r3, [pc, #440]	@ (8005548 <xTaskIncrementTick+0x218>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3301      	adds	r3, #1
 8005394:	4a6c      	ldr	r2, [pc, #432]	@ (8005548 <xTaskIncrementTick+0x218>)
 8005396:	6013      	str	r3, [r2, #0]
 8005398:	f000 fba8 	bl	8005aec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800539c:	4b6b      	ldr	r3, [pc, #428]	@ (800554c <xTaskIncrementTick+0x21c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a3a      	ldr	r2, [r7, #32]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	f0c0 80a8 	bcc.w	80054f8 <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053a8:	4b65      	ldr	r3, [pc, #404]	@ (8005540 <xTaskIncrementTick+0x210>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80053b2:	4b66      	ldr	r3, [pc, #408]	@ (800554c <xTaskIncrementTick+0x21c>)
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053b8:	601a      	str	r2, [r3, #0]
                    break;
 80053ba:	e09d      	b.n	80054f8 <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053bc:	4b60      	ldr	r3, [pc, #384]	@ (8005540 <xTaskIncrementTick+0x210>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80053cc:	6a3a      	ldr	r2, [r7, #32]
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d203      	bcs.n	80053dc <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80053d4:	4a5d      	ldr	r2, [pc, #372]	@ (800554c <xTaskIncrementTick+0x21c>)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	6013      	str	r3, [r2, #0]
                        break;
 80053da:	e08d      	b.n	80054f8 <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	613b      	str	r3, [r7, #16]
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	6892      	ldr	r2, [r2, #8]
 80053f4:	605a      	str	r2, [r3, #4]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	685a      	ldr	r2, [r3, #4]
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	3304      	adds	r3, #4
 80053fe:	429a      	cmp	r2, r3
 8005400:	d103      	bne.n	800540a <xTaskIncrementTick+0xda>
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2200      	movs	r2, #0
 800540e:	615a      	str	r2, [r3, #20]
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1e5a      	subs	r2, r3, #1
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01e      	beq.n	8005460 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	69db      	ldr	r3, [r3, #28]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	6a12      	ldr	r2, [r2, #32]
 8005430:	609a      	str	r2, [r3, #8]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	69d2      	ldr	r2, [r2, #28]
 800543a:	605a      	str	r2, [r3, #4]
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	3318      	adds	r3, #24
 8005444:	429a      	cmp	r2, r3
 8005446:	d103      	bne.n	8005450 <xTaskIncrementTick+0x120>
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	6a1a      	ldr	r2, [r3, #32]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	605a      	str	r2, [r3, #4]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2200      	movs	r2, #0
 8005454:	629a      	str	r2, [r3, #40]	@ 0x28
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	1e5a      	subs	r2, r3, #1
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005464:	2201      	movs	r2, #1
 8005466:	409a      	lsls	r2, r3
 8005468:	4b39      	ldr	r3, [pc, #228]	@ (8005550 <xTaskIncrementTick+0x220>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4313      	orrs	r3, r2
 800546e:	4a38      	ldr	r2, [pc, #224]	@ (8005550 <xTaskIncrementTick+0x220>)
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005476:	4937      	ldr	r1, [pc, #220]	@ (8005554 <xTaskIncrementTick+0x224>)
 8005478:	4613      	mov	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4413      	add	r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	3304      	adds	r3, #4
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60bb      	str	r3, [r7, #8]
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	60da      	str	r2, [r3, #12]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	3204      	adds	r2, #4
 800549e:	605a      	str	r2, [r3, #4]
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1d1a      	adds	r2, r3, #4
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ac:	4613      	mov	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4a27      	ldr	r2, [pc, #156]	@ (8005554 <xTaskIncrementTick+0x224>)
 80054b6:	441a      	add	r2, r3
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	615a      	str	r2, [r3, #20]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c0:	4924      	ldr	r1, [pc, #144]	@ (8005554 <xTaskIncrementTick+0x224>)
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	440b      	add	r3, r1
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80054d2:	1c59      	adds	r1, r3, #1
 80054d4:	481f      	ldr	r0, [pc, #124]	@ (8005554 <xTaskIncrementTick+0x224>)
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	4403      	add	r3, r0
 80054e0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005558 <xTaskIncrementTick+0x228>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f67f af5b 	bls.w	80053a8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80054f2:	2301      	movs	r3, #1
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054f6:	e757      	b.n	80053a8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80054f8:	4b17      	ldr	r3, [pc, #92]	@ (8005558 <xTaskIncrementTick+0x228>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054fe:	4915      	ldr	r1, [pc, #84]	@ (8005554 <xTaskIncrementTick+0x224>)
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	440b      	add	r3, r1
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d901      	bls.n	8005514 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8005514:	4b11      	ldr	r3, [pc, #68]	@ (800555c <xTaskIncrementTick+0x22c>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 800551c:	2301      	movs	r3, #1
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005520:	e004      	b.n	800552c <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8005522:	4b0f      	ldr	r3, [pc, #60]	@ (8005560 <xTaskIncrementTick+0x230>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3301      	adds	r3, #1
 8005528:	4a0d      	ldr	r2, [pc, #52]	@ (8005560 <xTaskIncrementTick+0x230>)
 800552a:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800552e:	4618      	mov	r0, r3
 8005530:	3728      	adds	r7, #40	@ 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000248 	.word	0x20000248
 800553c:	20000224 	.word	0x20000224
 8005540:	200001d8 	.word	0x200001d8
 8005544:	200001dc 	.word	0x200001dc
 8005548:	20000238 	.word	0x20000238
 800554c:	20000240 	.word	0x20000240
 8005550:	20000228 	.word	0x20000228
 8005554:	2000014c 	.word	0x2000014c
 8005558:	20000148 	.word	0x20000148
 800555c:	20000234 	.word	0x20000234
 8005560:	20000230 	.word	0x20000230

08005564 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005564:	b480      	push	{r7}
 8005566:	b087      	sub	sp, #28
 8005568:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800556a:	4b28      	ldr	r3, [pc, #160]	@ (800560c <vTaskSwitchContext+0xa8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005572:	4b27      	ldr	r3, [pc, #156]	@ (8005610 <vTaskSwitchContext+0xac>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005578:	e041      	b.n	80055fe <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 800557a:	4b25      	ldr	r3, [pc, #148]	@ (8005610 <vTaskSwitchContext+0xac>)
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005580:	4b24      	ldr	r3, [pc, #144]	@ (8005614 <vTaskSwitchContext+0xb0>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	fab3 f383 	clz	r3, r3
 800558c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800558e:	7afb      	ldrb	r3, [r7, #11]
 8005590:	f1c3 031f 	rsb	r3, r3, #31
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	4920      	ldr	r1, [pc, #128]	@ (8005618 <vTaskSwitchContext+0xb4>)
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <vTaskSwitchContext+0x5e>
    __asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	607b      	str	r3, [r7, #4]
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <vTaskSwitchContext+0x5a>
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4613      	mov	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4a12      	ldr	r2, [pc, #72]	@ (8005618 <vTaskSwitchContext+0xb4>)
 80055ce:	4413      	add	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	605a      	str	r2, [r3, #4]
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	685a      	ldr	r2, [r3, #4]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	3308      	adds	r3, #8
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d103      	bne.n	80055f0 <vTaskSwitchContext+0x8c>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	605a      	str	r2, [r3, #4]
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4a09      	ldr	r2, [pc, #36]	@ (800561c <vTaskSwitchContext+0xb8>)
 80055f8:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80055fa:	4b08      	ldr	r3, [pc, #32]	@ (800561c <vTaskSwitchContext+0xb8>)
 80055fc:	681b      	ldr	r3, [r3, #0]
    }
 80055fe:	bf00      	nop
 8005600:	371c      	adds	r7, #28
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000248 	.word	0x20000248
 8005610:	20000234 	.word	0x20000234
 8005614:	20000228 	.word	0x20000228
 8005618:	2000014c 	.word	0x2000014c
 800561c:	20000148 	.word	0x20000148

08005620 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10b      	bne.n	8005648 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8005630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	60fb      	str	r3, [r7, #12]
}
 8005642:	bf00      	nop
 8005644:	bf00      	nop
 8005646:	e7fd      	b.n	8005644 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005648:	4b07      	ldr	r3, [pc, #28]	@ (8005668 <vTaskPlaceOnEventList+0x48>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3318      	adds	r3, #24
 800564e:	4619      	mov	r1, r3
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f7fe fcb0 	bl	8003fb6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005656:	2101      	movs	r1, #1
 8005658:	6838      	ldr	r0, [r7, #0]
 800565a:	f000 fe45 	bl	80062e8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 800565e:	bf00      	nop
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20000148 	.word	0x20000148

0800566c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d10b      	bne.n	8005696 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 800567e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005682:	f383 8811 	msr	BASEPRI, r3
 8005686:	f3bf 8f6f 	isb	sy
 800568a:	f3bf 8f4f 	dsb	sy
 800568e:	613b      	str	r3, [r7, #16]
}
 8005690:	bf00      	nop
 8005692:	bf00      	nop
 8005694:	e7fd      	b.n	8005692 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	617b      	str	r3, [r7, #20]
 800569c:	4b15      	ldr	r3, [pc, #84]	@ (80056f4 <vTaskPlaceOnEventListRestricted+0x88>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	61da      	str	r2, [r3, #28]
 80056a4:	4b13      	ldr	r3, [pc, #76]	@ (80056f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	6892      	ldr	r2, [r2, #8]
 80056ac:	621a      	str	r2, [r3, #32]
 80056ae:	4b11      	ldr	r3, [pc, #68]	@ (80056f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	3218      	adds	r2, #24
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	4b0e      	ldr	r3, [pc, #56]	@ (80056f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f103 0218 	add.w	r2, r3, #24
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	609a      	str	r2, [r3, #8]
 80056c6:	4b0b      	ldr	r3, [pc, #44]	@ (80056f4 <vTaskPlaceOnEventListRestricted+0x88>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80056de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056e2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	68b8      	ldr	r0, [r7, #8]
 80056e8:	f000 fdfe 	bl	80062e8 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
    }
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000148 	.word	0x20000148

080056f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056f8:	b480      	push	{r7}
 80056fa:	b08b      	sub	sp, #44	@ 0x2c
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	60fb      	str	r3, [r7, #12]
}
 8005720:	bf00      	nop
 8005722:	bf00      	nop
 8005724:	e7fd      	b.n	8005722 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005726:	6a3b      	ldr	r3, [r7, #32]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	61fb      	str	r3, [r7, #28]
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	6a3a      	ldr	r2, [r7, #32]
 8005732:	6a12      	ldr	r2, [r2, #32]
 8005734:	609a      	str	r2, [r3, #8]
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	6a3a      	ldr	r2, [r7, #32]
 800573c:	69d2      	ldr	r2, [r2, #28]
 800573e:	605a      	str	r2, [r3, #4]
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	3318      	adds	r3, #24
 8005748:	429a      	cmp	r2, r3
 800574a:	d103      	bne.n	8005754 <xTaskRemoveFromEventList+0x5c>
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	6a1a      	ldr	r2, [r3, #32]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	6a3b      	ldr	r3, [r7, #32]
 8005756:	2200      	movs	r2, #0
 8005758:	629a      	str	r2, [r3, #40]	@ 0x28
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005764:	4b4b      	ldr	r3, [pc, #300]	@ (8005894 <xTaskRemoveFromEventList+0x19c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d160      	bne.n	800582e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	695b      	ldr	r3, [r3, #20]
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	68d2      	ldr	r2, [r2, #12]
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	6a3a      	ldr	r2, [r7, #32]
 8005782:	6892      	ldr	r2, [r2, #8]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	3304      	adds	r3, #4
 800578e:	429a      	cmp	r2, r3
 8005790:	d103      	bne.n	800579a <xTaskRemoveFromEventList+0xa2>
 8005792:	6a3b      	ldr	r3, [r7, #32]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	605a      	str	r2, [r3, #4]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	2200      	movs	r2, #0
 800579e:	615a      	str	r2, [r3, #20]
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ae:	2201      	movs	r2, #1
 80057b0:	409a      	lsls	r2, r3
 80057b2:	4b39      	ldr	r3, [pc, #228]	@ (8005898 <xTaskRemoveFromEventList+0x1a0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	4a37      	ldr	r2, [pc, #220]	@ (8005898 <xTaskRemoveFromEventList+0x1a0>)
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c0:	4936      	ldr	r1, [pc, #216]	@ (800589c <xTaskRemoveFromEventList+0x1a4>)
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	440b      	add	r3, r1
 80057cc:	3304      	adds	r3, #4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	613b      	str	r3, [r7, #16]
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	609a      	str	r2, [r3, #8]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	60da      	str	r2, [r3, #12]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	3204      	adds	r2, #4
 80057e8:	605a      	str	r2, [r3, #4]
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	1d1a      	adds	r2, r3, #4
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	609a      	str	r2, [r3, #8]
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4a27      	ldr	r2, [pc, #156]	@ (800589c <xTaskRemoveFromEventList+0x1a4>)
 8005800:	441a      	add	r2, r3
 8005802:	6a3b      	ldr	r3, [r7, #32]
 8005804:	615a      	str	r2, [r3, #20]
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800580a:	4924      	ldr	r1, [pc, #144]	@ (800589c <xTaskRemoveFromEventList+0x1a4>)
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6a3a      	ldr	r2, [r7, #32]
 800581a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800581c:	1c59      	adds	r1, r3, #1
 800581e:	481f      	ldr	r0, [pc, #124]	@ (800589c <xTaskRemoveFromEventList+0x1a4>)
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4403      	add	r3, r0
 800582a:	6019      	str	r1, [r3, #0]
 800582c:	e01b      	b.n	8005866 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800582e:	4b1c      	ldr	r3, [pc, #112]	@ (80058a0 <xTaskRemoveFromEventList+0x1a8>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	61bb      	str	r3, [r7, #24]
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	61da      	str	r2, [r3, #28]
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	621a      	str	r2, [r3, #32]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	3218      	adds	r2, #24
 800584a:	605a      	str	r2, [r3, #4]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f103 0218 	add.w	r2, r3, #24
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	609a      	str	r2, [r3, #8]
 8005856:	6a3b      	ldr	r3, [r7, #32]
 8005858:	4a11      	ldr	r2, [pc, #68]	@ (80058a0 <xTaskRemoveFromEventList+0x1a8>)
 800585a:	629a      	str	r2, [r3, #40]	@ 0x28
 800585c:	4b10      	ldr	r3, [pc, #64]	@ (80058a0 <xTaskRemoveFromEventList+0x1a8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3301      	adds	r3, #1
 8005862:	4a0f      	ldr	r2, [pc, #60]	@ (80058a0 <xTaskRemoveFromEventList+0x1a8>)
 8005864:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586a:	4b0e      	ldr	r3, [pc, #56]	@ (80058a4 <xTaskRemoveFromEventList+0x1ac>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	429a      	cmp	r2, r3
 8005872:	d905      	bls.n	8005880 <xTaskRemoveFromEventList+0x188>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005878:	4b0b      	ldr	r3, [pc, #44]	@ (80058a8 <xTaskRemoveFromEventList+0x1b0>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e001      	b.n	8005884 <xTaskRemoveFromEventList+0x18c>
        }
        else
        {
            xReturn = pdFALSE;
 8005880:	2300      	movs	r3, #0
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8005884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005886:	4618      	mov	r0, r3
 8005888:	372c      	adds	r7, #44	@ 0x2c
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000248 	.word	0x20000248
 8005898:	20000228 	.word	0x20000228
 800589c:	2000014c 	.word	0x2000014c
 80058a0:	200001e0 	.word	0x200001e0
 80058a4:	20000148 	.word	0x20000148
 80058a8:	20000234 	.word	0x20000234

080058ac <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80058b4:	4b06      	ldr	r3, [pc, #24]	@ (80058d0 <vTaskInternalSetTimeOutState+0x24>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <vTaskInternalSetTimeOutState+0x28>)
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	20000238 	.word	0x20000238
 80058d4:	20000224 	.word	0x20000224

080058d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	613b      	str	r3, [r7, #16]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10b      	bne.n	800591e <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	60fb      	str	r3, [r7, #12]
}
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800591e:	f001 f979 	bl	8006c14 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005922:	4b1f      	ldr	r3, [pc, #124]	@ (80059a0 <xTaskCheckForTimeOut+0xc8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	69ba      	ldr	r2, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800593a:	d102      	bne.n	8005942 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800593c:	2300      	movs	r3, #0
 800593e:	61fb      	str	r3, [r7, #28]
 8005940:	e026      	b.n	8005990 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4b17      	ldr	r3, [pc, #92]	@ (80059a4 <xTaskCheckForTimeOut+0xcc>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	429a      	cmp	r2, r3
 800594c:	d00a      	beq.n	8005964 <xTaskCheckForTimeOut+0x8c>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d305      	bcc.n	8005964 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005958:	2301      	movs	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	e015      	b.n	8005990 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	429a      	cmp	r2, r3
 800596c:	d20b      	bcs.n	8005986 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f7ff ff96 	bl	80058ac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005980:	2300      	movs	r3, #0
 8005982:	61fb      	str	r3, [r7, #28]
 8005984:	e004      	b.n	8005990 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800598c:	2301      	movs	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005990:	f001 f972 	bl	8006c78 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005994:	69fb      	ldr	r3, [r7, #28]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3720      	adds	r7, #32
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000224 	.word	0x20000224
 80059a4:	20000238 	.word	0x20000238

080059a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80059ac:	4b03      	ldr	r3, [pc, #12]	@ (80059bc <vTaskMissedYield+0x14>)
 80059ae:	2201      	movs	r2, #1
 80059b0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	20000234 	.word	0x20000234

080059c0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80059c8:	f000 f852 	bl	8005a70 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80059cc:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <prvIdleTask+0x28>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d9f9      	bls.n	80059c8 <prvIdleTask+0x8>
            {
                taskYIELD();
 80059d4:	4b05      	ldr	r3, [pc, #20]	@ (80059ec <prvIdleTask+0x2c>)
 80059d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80059e4:	e7f0      	b.n	80059c8 <prvIdleTask+0x8>
 80059e6:	bf00      	nop
 80059e8:	2000014c 	.word	0x2000014c
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	e00c      	b.n	8005a16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4a12      	ldr	r2, [pc, #72]	@ (8005a50 <prvInitialiseTaskLists+0x60>)
 8005a08:	4413      	add	r3, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe faa6 	bl	8003f5c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3301      	adds	r3, #1
 8005a14:	607b      	str	r3, [r7, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2b04      	cmp	r3, #4
 8005a1a:	d9ef      	bls.n	80059fc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005a1c:	480d      	ldr	r0, [pc, #52]	@ (8005a54 <prvInitialiseTaskLists+0x64>)
 8005a1e:	f7fe fa9d 	bl	8003f5c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005a22:	480d      	ldr	r0, [pc, #52]	@ (8005a58 <prvInitialiseTaskLists+0x68>)
 8005a24:	f7fe fa9a 	bl	8003f5c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005a28:	480c      	ldr	r0, [pc, #48]	@ (8005a5c <prvInitialiseTaskLists+0x6c>)
 8005a2a:	f7fe fa97 	bl	8003f5c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005a2e:	480c      	ldr	r0, [pc, #48]	@ (8005a60 <prvInitialiseTaskLists+0x70>)
 8005a30:	f7fe fa94 	bl	8003f5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005a34:	480b      	ldr	r0, [pc, #44]	@ (8005a64 <prvInitialiseTaskLists+0x74>)
 8005a36:	f7fe fa91 	bl	8003f5c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a68 <prvInitialiseTaskLists+0x78>)
 8005a3c:	4a05      	ldr	r2, [pc, #20]	@ (8005a54 <prvInitialiseTaskLists+0x64>)
 8005a3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a40:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <prvInitialiseTaskLists+0x7c>)
 8005a42:	4a05      	ldr	r2, [pc, #20]	@ (8005a58 <prvInitialiseTaskLists+0x68>)
 8005a44:	601a      	str	r2, [r3, #0]
}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	2000014c 	.word	0x2000014c
 8005a54:	200001b0 	.word	0x200001b0
 8005a58:	200001c4 	.word	0x200001c4
 8005a5c:	200001e0 	.word	0x200001e0
 8005a60:	200001f4 	.word	0x200001f4
 8005a64:	2000020c 	.word	0x2000020c
 8005a68:	200001d8 	.word	0x200001d8
 8005a6c:	200001dc 	.word	0x200001dc

08005a70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a76:	e019      	b.n	8005aac <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8005a78:	f001 f8cc 	bl	8006c14 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a7c:	4b10      	ldr	r3, [pc, #64]	@ (8005ac0 <prvCheckTasksWaitingTermination+0x50>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	3304      	adds	r3, #4
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fe facd 	bl	8004028 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <prvCheckTasksWaitingTermination+0x54>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	4a0b      	ldr	r2, [pc, #44]	@ (8005ac4 <prvCheckTasksWaitingTermination+0x54>)
 8005a96:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8005a98:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <prvCheckTasksWaitingTermination+0x58>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ac8 <prvCheckTasksWaitingTermination+0x58>)
 8005aa0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8005aa2:	f001 f8e9 	bl	8006c78 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f810 	bl	8005acc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005aac:	4b06      	ldr	r3, [pc, #24]	@ (8005ac8 <prvCheckTasksWaitingTermination+0x58>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e1      	bne.n	8005a78 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005ab4:	bf00      	nop
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	200001f4 	.word	0x200001f4
 8005ac4:	20000220 	.word	0x20000220
 8005ac8:	20000208 	.word	0x20000208

08005acc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f001 faf3 	bl	80070c4 <vPortFree>
            vPortFree( pxTCB );
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f001 faf0 	bl	80070c4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005ae4:	bf00      	nop
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005af0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <prvResetNextTaskUnblockTime+0x30>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d104      	bne.n	8005b04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005afa:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <prvResetNextTaskUnblockTime+0x34>)
 8005afc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005b02:	e005      	b.n	8005b10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b04:	4b05      	ldr	r3, [pc, #20]	@ (8005b1c <prvResetNextTaskUnblockTime+0x30>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a04      	ldr	r2, [pc, #16]	@ (8005b20 <prvResetNextTaskUnblockTime+0x34>)
 8005b0e:	6013      	str	r3, [r2, #0]
}
 8005b10:	bf00      	nop
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	200001d8 	.word	0x200001d8
 8005b20:	20000240 	.word	0x20000240

08005b24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <xTaskGetSchedulerState+0x34>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d102      	bne.n	8005b38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005b32:	2301      	movs	r3, #1
 8005b34:	607b      	str	r3, [r7, #4]
 8005b36:	e008      	b.n	8005b4a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005b38:	4b08      	ldr	r3, [pc, #32]	@ (8005b5c <xTaskGetSchedulerState+0x38>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8005b40:	2302      	movs	r3, #2
 8005b42:	607b      	str	r3, [r7, #4]
 8005b44:	e001      	b.n	8005b4a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8005b46:	2300      	movs	r3, #0
 8005b48:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 8005b4a:	687b      	ldr	r3, [r7, #4]
    }
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr
 8005b58:	2000022c 	.word	0x2000022c
 8005b5c:	20000248 	.word	0x20000248

08005b60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b088      	sub	sp, #32
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 8090 	beq.w	8005c98 <xTaskPriorityDisinherit+0x138>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005b78:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca4 <xTaskPriorityDisinherit+0x144>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	69ba      	ldr	r2, [r7, #24]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d00b      	beq.n	8005b9a <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	613b      	str	r3, [r7, #16]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8005ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba6:	f383 8811 	msr	BASEPRI, r3
 8005baa:	f3bf 8f6f 	isb	sy
 8005bae:	f3bf 8f4f 	dsb	sy
 8005bb2:	60fb      	str	r3, [r7, #12]
}
 8005bb4:	bf00      	nop
 8005bb6:	bf00      	nop
 8005bb8:	e7fd      	b.n	8005bb6 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bbe:	1e5a      	subs	r2, r3, #1
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d063      	beq.n	8005c98 <xTaskPriorityDisinherit+0x138>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d15f      	bne.n	8005c98 <xTaskPriorityDisinherit+0x138>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fa23 	bl	8004028 <uxListRemove>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d10a      	bne.n	8005bfe <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bec:	2201      	movs	r2, #1
 8005bee:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf2:	43da      	mvns	r2, r3
 8005bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca8 <xTaskPriorityDisinherit+0x148>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	4a2b      	ldr	r2, [pc, #172]	@ (8005ca8 <xTaskPriorityDisinherit+0x148>)
 8005bfc:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c0a:	f1c3 0205 	rsb	r2, r3, #5
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	2201      	movs	r2, #1
 8005c18:	409a      	lsls	r2, r3
 8005c1a:	4b23      	ldr	r3, [pc, #140]	@ (8005ca8 <xTaskPriorityDisinherit+0x148>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	4a21      	ldr	r2, [pc, #132]	@ (8005ca8 <xTaskPriorityDisinherit+0x148>)
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c28:	4920      	ldr	r1, [pc, #128]	@ (8005cac <xTaskPriorityDisinherit+0x14c>)
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	3304      	adds	r3, #4
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	617b      	str	r3, [r7, #20]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	609a      	str	r2, [r3, #8]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	60da      	str	r2, [r3, #12]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	3204      	adds	r2, #4
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	1d1a      	adds	r2, r3, #4
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c5e:	4613      	mov	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4a11      	ldr	r2, [pc, #68]	@ (8005cac <xTaskPriorityDisinherit+0x14c>)
 8005c68:	441a      	add	r2, r3
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	615a      	str	r2, [r3, #20]
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c72:	490e      	ldr	r1, [pc, #56]	@ (8005cac <xTaskPriorityDisinherit+0x14c>)
 8005c74:	4613      	mov	r3, r2
 8005c76:	009b      	lsls	r3, r3, #2
 8005c78:	4413      	add	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	440b      	add	r3, r1
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005c84:	1c59      	adds	r1, r3, #1
 8005c86:	4809      	ldr	r0, [pc, #36]	@ (8005cac <xTaskPriorityDisinherit+0x14c>)
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4403      	add	r3, r0
 8005c92:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005c94:	2301      	movs	r3, #1
 8005c96:	61fb      	str	r3, [r7, #28]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005c98:	69fb      	ldr	r3, [r7, #28]
    }
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000148 	.word	0x20000148
 8005ca8:	20000228 	.word	0x20000228
 8005cac:	2000014c 	.word	0x2000014c

08005cb0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00b      	beq.n	8005ce0 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8005cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	613b      	str	r3, [r7, #16]
}
 8005cda:	bf00      	nop
 8005cdc:	bf00      	nop
 8005cde:	e7fd      	b.n	8005cdc <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005ce0:	f7ff f9f4 	bl	80050cc <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8005ce4:	f000 ff96 	bl	8006c14 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005ce8:	4b38      	ldr	r3, [pc, #224]	@ (8005dcc <xTaskGenericNotifyWait+0x11c>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	3354      	adds	r3, #84	@ 0x54
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d018      	beq.n	8005d2c <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005cfa:	4b34      	ldr	r3, [pc, #208]	@ (8005dcc <xTaskGenericNotifyWait+0x11c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	3214      	adds	r2, #20
 8005d02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	43d2      	mvns	r2, r2
 8005d0a:	4011      	ands	r1, r2
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	3214      	adds	r2, #20
 8005d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005d14:	4b2d      	ldr	r3, [pc, #180]	@ (8005dcc <xTaskGenericNotifyWait+0x11c>)
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	3354      	adds	r3, #84	@ 0x54
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005d2c:	f000 ffa4 	bl	8006c78 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d103      	bne.n	8005d3e <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d36:	2101      	movs	r1, #1
 8005d38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d3a:	f000 fad5 	bl	80062e8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005d3e:	f7ff f9d3 	bl	80050e8 <xTaskResumeAll>
 8005d42:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d10a      	bne.n	8005d60 <xTaskGenericNotifyWait+0xb0>
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d107      	bne.n	8005d60 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8005d50:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd0 <xTaskGenericNotifyWait+0x120>)
 8005d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005d60:	f000 ff58 	bl	8006c14 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d007      	beq.n	8005d7a <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005d6a:	4b18      	ldr	r3, [pc, #96]	@ (8005dcc <xTaskGenericNotifyWait+0x11c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	3214      	adds	r2, #20
 8005d72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005d7a:	4b14      	ldr	r3, [pc, #80]	@ (8005dcc <xTaskGenericNotifyWait+0x11c>)
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	3354      	adds	r3, #84	@ 0x54
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d002      	beq.n	8005d92 <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	61fb      	str	r3, [r7, #28]
 8005d90:	e00e      	b.n	8005db0 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005d92:	4b0e      	ldr	r3, [pc, #56]	@ (8005dcc <xTaskGenericNotifyWait+0x11c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	3214      	adds	r2, #20
 8005d9a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	43d2      	mvns	r2, r2
 8005da2:	4011      	ands	r1, r2
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	3214      	adds	r2, #20
 8005da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005db0:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <xTaskGenericNotifyWait+0x11c>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	3354      	adds	r3, #84	@ 0x54
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005dbe:	f000 ff5b 	bl	8006c78 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005dc2:	69fb      	ldr	r3, [r7, #28]
    }
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	20000148 	.word	0x20000148
 8005dd0:	e000ed04 	.word	0xe000ed04

08005dd4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08e      	sub	sp, #56	@ 0x38
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
 8005de0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005de2:	2301      	movs	r3, #1
 8005de4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00b      	beq.n	8005e04 <xTaskGenericNotify+0x30>
    __asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	623b      	str	r3, [r7, #32]
}
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	e7fd      	b.n	8005e00 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10b      	bne.n	8005e22 <xTaskGenericNotify+0x4e>
    __asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	61fb      	str	r3, [r7, #28]
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	e7fd      	b.n	8005e1e <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8005e26:	f000 fef5 	bl	8006c14 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005e2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d006      	beq.n	8005e3e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	3214      	adds	r2, #20
 8005e36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e3c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4413      	add	r3, r2
 8005e44:	3354      	adds	r3, #84	@ 0x54
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005e4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	4413      	add	r3, r2
 8005e52:	3354      	adds	r3, #84	@ 0x54
 8005e54:	2202      	movs	r2, #2
 8005e56:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005e58:	78fb      	ldrb	r3, [r7, #3]
 8005e5a:	2b04      	cmp	r3, #4
 8005e5c:	d83b      	bhi.n	8005ed6 <xTaskGenericNotify+0x102>
 8005e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <xTaskGenericNotify+0x90>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005ef7 	.word	0x08005ef7
 8005e68:	08005e79 	.word	0x08005e79
 8005e6c:	08005e95 	.word	0x08005e95
 8005e70:	08005ead 	.word	0x08005ead
 8005e74:	08005ebb 	.word	0x08005ebb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	3214      	adds	r2, #20
 8005e7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	ea42 0103 	orr.w	r1, r2, r3
 8005e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	3214      	adds	r2, #20
 8005e8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005e92:	e033      	b.n	8005efc <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	3214      	adds	r2, #20
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	68ba      	ldr	r2, [r7, #8]
 8005ea4:	3214      	adds	r2, #20
 8005ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005eaa:	e027      	b.n	8005efc <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	3214      	adds	r2, #20
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005eb8:	e020      	b.n	8005efc <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005eba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d006      	beq.n	8005ed0 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	3214      	adds	r2, #20
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005ece:	e015      	b.n	8005efc <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8005ed4:	e012      	b.n	8005efc <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8006010 <xTaskGenericNotify+0x23c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00d      	beq.n	8005efa <xTaskGenericNotify+0x126>
    __asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	61bb      	str	r3, [r7, #24]
}
 8005ef0:	bf00      	nop
 8005ef2:	bf00      	nop
 8005ef4:	e7fd      	b.n	8005ef2 <xTaskGenericNotify+0x11e>
                    break;
 8005ef6:	bf00      	nop
 8005ef8:	e000      	b.n	8005efc <xTaskGenericNotify+0x128>

                    break;
 8005efa:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005efc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d17e      	bne.n	8006002 <xTaskGenericNotify+0x22e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f10:	68d2      	ldr	r2, [r2, #12]
 8005f12:	609a      	str	r2, [r3, #8]
 8005f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f1a:	6892      	ldr	r2, [r2, #8]
 8005f1c:	605a      	str	r2, [r3, #4]
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f24:	3304      	adds	r3, #4
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d103      	bne.n	8005f32 <xTaskGenericNotify+0x15e>
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f30:	605a      	str	r2, [r3, #4]
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	2200      	movs	r2, #0
 8005f36:	615a      	str	r2, [r3, #20]
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	1e5a      	subs	r2, r3, #1
 8005f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f40:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f46:	2201      	movs	r2, #1
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	4b32      	ldr	r3, [pc, #200]	@ (8006014 <xTaskGenericNotify+0x240>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	4a30      	ldr	r2, [pc, #192]	@ (8006014 <xTaskGenericNotify+0x240>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f58:	492f      	ldr	r1, [pc, #188]	@ (8006018 <xTaskGenericNotify+0x244>)
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	440b      	add	r3, r1
 8005f64:	3304      	adds	r3, #4
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f6e:	609a      	str	r2, [r3, #8]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f7e:	3204      	adds	r2, #4
 8005f80:	605a      	str	r2, [r3, #4]
 8005f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f84:	1d1a      	adds	r2, r3, #4
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4a20      	ldr	r2, [pc, #128]	@ (8006018 <xTaskGenericNotify+0x244>)
 8005f98:	441a      	add	r2, r3
 8005f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9c:	615a      	str	r2, [r3, #20]
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa2:	491d      	ldr	r1, [pc, #116]	@ (8006018 <xTaskGenericNotify+0x244>)
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fb4:	1c59      	adds	r1, r3, #1
 8005fb6:	4818      	ldr	r0, [pc, #96]	@ (8006018 <xTaskGenericNotify+0x244>)
 8005fb8:	4613      	mov	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	4403      	add	r3, r0
 8005fc2:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <xTaskGenericNotify+0x210>
    __asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	617b      	str	r3, [r7, #20]
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	e7fd      	b.n	8005fe0 <xTaskGenericNotify+0x20c>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8005fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <xTaskGenericNotify+0x248>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d207      	bcs.n	8006002 <xTaskGenericNotify+0x22e>
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <xTaskGenericNotify+0x24c>)
 8005ff4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006002:	f000 fe39 	bl	8006c78 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8006006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8006008:	4618      	mov	r0, r3
 800600a:	3738      	adds	r7, #56	@ 0x38
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000224 	.word	0x20000224
 8006014:	20000228 	.word	0x20000228
 8006018:	2000014c 	.word	0x2000014c
 800601c:	20000148 	.word	0x20000148
 8006020:	e000ed04 	.word	0xe000ed04

08006024 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006024:	b580      	push	{r7, lr}
 8006026:	b092      	sub	sp, #72	@ 0x48
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
 8006030:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006032:	2301      	movs	r3, #1
 8006034:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <xTaskGenericNotifyFromISR+0x30>
    __asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800604e:	bf00      	nop
 8006050:	bf00      	nop
 8006052:	e7fd      	b.n	8006050 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <xTaskGenericNotifyFromISR+0x4e>
    __asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800606c:	bf00      	nop
 800606e:	bf00      	nop
 8006070:	e7fd      	b.n	800606e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006072:	f000 feb3 	bl	8006ddc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm volatile
 800607a:	f3ef 8211 	mrs	r2, BASEPRI
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	623a      	str	r2, [r7, #32]
 8006090:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 8006092:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8006096:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006098:	2b00      	cmp	r3, #0
 800609a:	d006      	beq.n	80060aa <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800609c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	3214      	adds	r2, #20
 80060a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060a8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80060aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	4413      	add	r3, r2
 80060b0:	3354      	adds	r3, #84	@ 0x54
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80060b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	4413      	add	r3, r2
 80060be:	3354      	adds	r3, #84	@ 0x54
 80060c0:	2202      	movs	r2, #2
 80060c2:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d83b      	bhi.n	8006142 <xTaskGenericNotifyFromISR+0x11e>
 80060ca:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <xTaskGenericNotifyFromISR+0xac>)
 80060cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d0:	08006163 	.word	0x08006163
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	08006101 	.word	0x08006101
 80060dc:	08006119 	.word	0x08006119
 80060e0:	08006127 	.word	0x08006127
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80060e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060e6:	68ba      	ldr	r2, [r7, #8]
 80060e8:	3214      	adds	r2, #20
 80060ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	ea42 0103 	orr.w	r1, r2, r3
 80060f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	3214      	adds	r2, #20
 80060fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060fe:	e033      	b.n	8006168 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006102:	68ba      	ldr	r2, [r7, #8]
 8006104:	3214      	adds	r2, #20
 8006106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610a:	1c59      	adds	r1, r3, #1
 800610c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	3214      	adds	r2, #20
 8006112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006116:	e027      	b.n	8006168 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	3214      	adds	r2, #20
 800611e:	6879      	ldr	r1, [r7, #4]
 8006120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006124:	e020      	b.n	8006168 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006126:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800612a:	2b02      	cmp	r3, #2
 800612c:	d006      	beq.n	800613c <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800612e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006130:	68ba      	ldr	r2, [r7, #8]
 8006132:	3214      	adds	r2, #20
 8006134:	6879      	ldr	r1, [r7, #4]
 8006136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800613a:	e015      	b.n	8006168 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 800613c:	2300      	movs	r3, #0
 800613e:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8006140:	e012      	b.n	8006168 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006142:	4b62      	ldr	r3, [pc, #392]	@ (80062cc <xTaskGenericNotifyFromISR+0x2a8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00d      	beq.n	8006166 <xTaskGenericNotifyFromISR+0x142>
    __asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	61bb      	str	r3, [r7, #24]
}
 800615c:	bf00      	nop
 800615e:	bf00      	nop
 8006160:	e7fd      	b.n	800615e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006162:	bf00      	nop
 8006164:	e000      	b.n	8006168 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006166:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006168:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800616c:	2b01      	cmp	r3, #1
 800616e:	f040 80a1 	bne.w	80062b4 <xTaskGenericNotifyFromISR+0x290>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006172:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00b      	beq.n	8006192 <xTaskGenericNotifyFromISR+0x16e>
    __asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	617b      	str	r3, [r7, #20]
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006192:	4b4f      	ldr	r3, [pc, #316]	@ (80062d0 <xTaskGenericNotifyFromISR+0x2ac>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d160      	bne.n	800625c <xTaskGenericNotifyFromISR+0x238>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800619a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	633b      	str	r3, [r7, #48]	@ 0x30
 80061a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061a6:	68d2      	ldr	r2, [r2, #12]
 80061a8:	609a      	str	r2, [r3, #8]
 80061aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061b0:	6892      	ldr	r2, [r2, #8]
 80061b2:	605a      	str	r2, [r3, #4]
 80061b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ba:	3304      	adds	r3, #4
 80061bc:	429a      	cmp	r2, r3
 80061be:	d103      	bne.n	80061c8 <xTaskGenericNotifyFromISR+0x1a4>
 80061c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ca:	2200      	movs	r2, #0
 80061cc:	615a      	str	r2, [r3, #20]
 80061ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	1e5a      	subs	r2, r3, #1
 80061d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80061d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	2201      	movs	r2, #1
 80061de:	409a      	lsls	r2, r3
 80061e0:	4b3c      	ldr	r3, [pc, #240]	@ (80062d4 <xTaskGenericNotifyFromISR+0x2b0>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	4a3b      	ldr	r2, [pc, #236]	@ (80062d4 <xTaskGenericNotifyFromISR+0x2b0>)
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ee:	493a      	ldr	r1, [pc, #232]	@ (80062d8 <xTaskGenericNotifyFromISR+0x2b4>)
 80061f0:	4613      	mov	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	440b      	add	r3, r1
 80061fa:	3304      	adds	r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006204:	609a      	str	r2, [r3, #8]
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800620c:	60da      	str	r2, [r3, #12]
 800620e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006214:	3204      	adds	r2, #4
 8006216:	605a      	str	r2, [r3, #4]
 8006218:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800621a:	1d1a      	adds	r2, r3, #4
 800621c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4a2a      	ldr	r2, [pc, #168]	@ (80062d8 <xTaskGenericNotifyFromISR+0x2b4>)
 800622e:	441a      	add	r2, r3
 8006230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006232:	615a      	str	r2, [r3, #20]
 8006234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006238:	4927      	ldr	r1, [pc, #156]	@ (80062d8 <xTaskGenericNotifyFromISR+0x2b4>)
 800623a:	4613      	mov	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	440b      	add	r3, r1
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006248:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	4822      	ldr	r0, [pc, #136]	@ (80062d8 <xTaskGenericNotifyFromISR+0x2b4>)
 800624e:	4613      	mov	r3, r2
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	4413      	add	r3, r2
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4403      	add	r3, r0
 8006258:	6019      	str	r1, [r3, #0]
 800625a:	e01b      	b.n	8006294 <xTaskGenericNotifyFromISR+0x270>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800625c:	4b1f      	ldr	r3, [pc, #124]	@ (80062dc <xTaskGenericNotifyFromISR+0x2b8>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	637b      	str	r3, [r7, #52]	@ 0x34
 8006262:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006266:	61da      	str	r2, [r3, #28]
 8006268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800626e:	621a      	str	r2, [r3, #32]
 8006270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006276:	3218      	adds	r2, #24
 8006278:	605a      	str	r2, [r3, #4]
 800627a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800627c:	f103 0218 	add.w	r2, r3, #24
 8006280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006282:	609a      	str	r2, [r3, #8]
 8006284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006286:	4a15      	ldr	r2, [pc, #84]	@ (80062dc <xTaskGenericNotifyFromISR+0x2b8>)
 8006288:	629a      	str	r2, [r3, #40]	@ 0x28
 800628a:	4b14      	ldr	r3, [pc, #80]	@ (80062dc <xTaskGenericNotifyFromISR+0x2b8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3301      	adds	r3, #1
 8006290:	4a12      	ldr	r2, [pc, #72]	@ (80062dc <xTaskGenericNotifyFromISR+0x2b8>)
 8006292:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006294:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006298:	4b11      	ldr	r3, [pc, #68]	@ (80062e0 <xTaskGenericNotifyFromISR+0x2bc>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800629e:	429a      	cmp	r2, r3
 80062a0:	d908      	bls.n	80062b4 <xTaskGenericNotifyFromISR+0x290>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80062a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d002      	beq.n	80062ae <xTaskGenericNotifyFromISR+0x28a>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80062a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062aa:	2201      	movs	r2, #1
 80062ac:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80062ae:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <xTaskGenericNotifyFromISR+0x2c0>)
 80062b0:	2201      	movs	r2, #1
 80062b2:	601a      	str	r2, [r3, #0]
 80062b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b6:	613b      	str	r3, [r7, #16]
    __asm volatile
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	f383 8811 	msr	BASEPRI, r3
}
 80062be:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80062c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 80062c2:	4618      	mov	r0, r3
 80062c4:	3748      	adds	r7, #72	@ 0x48
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	20000224 	.word	0x20000224
 80062d0:	20000248 	.word	0x20000248
 80062d4:	20000228 	.word	0x20000228
 80062d8:	2000014c 	.word	0x2000014c
 80062dc:	200001e0 	.word	0x200001e0
 80062e0:	20000148 	.word	0x20000148
 80062e4:	20000234 	.word	0x20000234

080062e8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80062f2:	4b37      	ldr	r3, [pc, #220]	@ (80063d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80062f8:	4b36      	ldr	r3, [pc, #216]	@ (80063d4 <prvAddCurrentTaskToDelayedList+0xec>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80062fe:	4b36      	ldr	r3, [pc, #216]	@ (80063d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006304:	4b35      	ldr	r3, [pc, #212]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3304      	adds	r3, #4
 800630a:	4618      	mov	r0, r3
 800630c:	f7fd fe8c 	bl	8004028 <uxListRemove>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006316:	4b31      	ldr	r3, [pc, #196]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800631c:	2201      	movs	r2, #1
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43da      	mvns	r2, r3
 8006324:	4b2e      	ldr	r3, [pc, #184]	@ (80063e0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4013      	ands	r3, r2
 800632a:	4a2d      	ldr	r2, [pc, #180]	@ (80063e0 <prvAddCurrentTaskToDelayedList+0xf8>)
 800632c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006334:	d124      	bne.n	8006380 <prvAddCurrentTaskToDelayedList+0x98>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d021      	beq.n	8006380 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800633c:	4b29      	ldr	r3, [pc, #164]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	613b      	str	r3, [r7, #16]
 8006342:	4b26      	ldr	r3, [pc, #152]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	609a      	str	r2, [r3, #8]
 800634a:	4b24      	ldr	r3, [pc, #144]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	6892      	ldr	r2, [r2, #8]
 8006352:	60da      	str	r2, [r3, #12]
 8006354:	4b21      	ldr	r3, [pc, #132]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	3204      	adds	r2, #4
 800635e:	605a      	str	r2, [r3, #4]
 8006360:	4b1e      	ldr	r3, [pc, #120]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	1d1a      	adds	r2, r3, #4
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	609a      	str	r2, [r3, #8]
 800636a:	4b1c      	ldr	r3, [pc, #112]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a1d      	ldr	r2, [pc, #116]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006370:	615a      	str	r2, [r3, #20]
 8006372:	4b1c      	ldr	r3, [pc, #112]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3301      	adds	r3, #1
 8006378:	4a1a      	ldr	r2, [pc, #104]	@ (80063e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800637e:	e022      	b.n	80063c6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006380:	69fa      	ldr	r2, [r7, #28]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4413      	add	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006388:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	429a      	cmp	r2, r3
 8006396:	d207      	bcs.n	80063a8 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006398:	4b10      	ldr	r3, [pc, #64]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	6978      	ldr	r0, [r7, #20]
 80063a2:	f7fd fe08 	bl	8003fb6 <vListInsert>
}
 80063a6:	e00e      	b.n	80063c6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <prvAddCurrentTaskToDelayedList+0xf4>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3304      	adds	r3, #4
 80063ae:	4619      	mov	r1, r3
 80063b0:	69b8      	ldr	r0, [r7, #24]
 80063b2:	f7fd fe00 	bl	8003fb6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80063b6:	4b0c      	ldr	r3, [pc, #48]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0x100>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d202      	bcs.n	80063c6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80063c0:	4a09      	ldr	r2, [pc, #36]	@ (80063e8 <prvAddCurrentTaskToDelayedList+0x100>)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6013      	str	r3, [r2, #0]
}
 80063c6:	bf00      	nop
 80063c8:	3720      	adds	r7, #32
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000224 	.word	0x20000224
 80063d4:	200001d8 	.word	0x200001d8
 80063d8:	200001dc 	.word	0x200001dc
 80063dc:	20000148 	.word	0x20000148
 80063e0:	20000228 	.word	0x20000228
 80063e4:	2000020c 	.word	0x2000020c
 80063e8:	20000240 	.word	0x20000240

080063ec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80063f6:	f000 fa55 	bl	80068a4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80063fa:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <xTimerCreateTimerTask+0x58>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00b      	beq.n	800641a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006402:	4b11      	ldr	r3, [pc, #68]	@ (8006448 <xTimerCreateTimerTask+0x5c>)
 8006404:	9301      	str	r3, [sp, #4]
 8006406:	2302      	movs	r3, #2
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	2300      	movs	r3, #0
 800640c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006410:	490e      	ldr	r1, [pc, #56]	@ (800644c <xTimerCreateTimerTask+0x60>)
 8006412:	480f      	ldr	r0, [pc, #60]	@ (8006450 <xTimerCreateTimerTask+0x64>)
 8006414:	f7fe fc80 	bl	8004d18 <xTaskCreate>
 8006418:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	603b      	str	r3, [r7, #0]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );

        return xReturn;
 8006438:	687b      	ldr	r3, [r7, #4]
    }
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	2000027c 	.word	0x2000027c
 8006448:	20000280 	.word	0x20000280
 800644c:	08007508 	.word	0x08007508
 8006450:	080064f9 	.word	0x080064f9

08006454 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006460:	e008      	b.n	8006474 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	699b      	ldr	r3, [r3, #24]
 8006466:	68ba      	ldr	r2, [r7, #8]
 8006468:	4413      	add	r3, r2
 800646a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	18d1      	adds	r1, r2, r3
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 f8df 	bl	8006644 <prvInsertTimerInActiveList>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1ea      	bne.n	8006462 <prvReloadTimer+0xe>
        }
    }
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
	...

08006498 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80064a2:	4b14      	ldr	r3, [pc, #80]	@ (80064f4 <prvProcessExpiredTimer+0x5c>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3304      	adds	r3, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7fd fdb9 	bl	8004028 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064bc:	f003 0304 	and.w	r3, r3, #4
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80064c4:	683a      	ldr	r2, [r7, #0]
 80064c6:	6879      	ldr	r1, [r7, #4]
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f7ff ffc3 	bl	8006454 <prvReloadTimer>
 80064ce:	e008      	b.n	80064e2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	4798      	blx	r3
    }
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000274 	.word	0x20000274

080064f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006500:	f107 0308 	add.w	r3, r7, #8
 8006504:	4618      	mov	r0, r3
 8006506:	f000 f859 	bl	80065bc <prvGetNextExpireTime>
 800650a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f805 	bl	8006520 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006516:	f000 f8d7 	bl	80066c8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800651a:	bf00      	nop
 800651c:	e7f0      	b.n	8006500 <prvTimerTask+0x8>
	...

08006520 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800652a:	f7fe fdcf 	bl	80050cc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f866 	bl	8006604 <prvSampleTimeNow>
 8006538:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d130      	bne.n	80065a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10a      	bne.n	800655c <prvProcessTimerOrBlockTask+0x3c>
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	429a      	cmp	r2, r3
 800654c:	d806      	bhi.n	800655c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800654e:	f7fe fdcb 	bl	80050e8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff9f 	bl	8006498 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800655a:	e024      	b.n	80065a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d008      	beq.n	8006574 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006562:	4b13      	ldr	r3, [pc, #76]	@ (80065b0 <prvProcessTimerOrBlockTask+0x90>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <prvProcessTimerOrBlockTask+0x50>
 800656c:	2301      	movs	r3, #1
 800656e:	e000      	b.n	8006572 <prvProcessTimerOrBlockTask+0x52>
 8006570:	2300      	movs	r3, #0
 8006572:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006574:	4b0f      	ldr	r3, [pc, #60]	@ (80065b4 <prvProcessTimerOrBlockTask+0x94>)
 8006576:	6818      	ldr	r0, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	4619      	mov	r1, r3
 8006582:	f7fe fb59 	bl	8004c38 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006586:	f7fe fdaf 	bl	80050e8 <xTaskResumeAll>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8006590:	4b09      	ldr	r3, [pc, #36]	@ (80065b8 <prvProcessTimerOrBlockTask+0x98>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
    }
 80065a0:	e001      	b.n	80065a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80065a2:	f7fe fda1 	bl	80050e8 <xTaskResumeAll>
    }
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000278 	.word	0x20000278
 80065b4:	2000027c 	.word	0x2000027c
 80065b8:	e000ed04 	.word	0xe000ed04

080065bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006600 <prvGetNextExpireTime+0x44>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d101      	bne.n	80065d2 <prvGetNextExpireTime+0x16>
 80065ce:	2201      	movs	r2, #1
 80065d0:	e000      	b.n	80065d4 <prvGetNextExpireTime+0x18>
 80065d2:	2200      	movs	r2, #0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d105      	bne.n	80065ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065e0:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <prvGetNextExpireTime+0x44>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	e001      	b.n	80065f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80065f0:	68fb      	ldr	r3, [r7, #12]
    }
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	20000274 	.word	0x20000274

08006604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 800660c:	f7fe fe74 	bl	80052f8 <xTaskGetTickCount>
 8006610:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8006612:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <prvSampleTimeNow+0x3c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	429a      	cmp	r2, r3
 800661a:	d205      	bcs.n	8006628 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800661c:	f000 f91c 	bl	8006858 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e002      	b.n	800662e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800662e:	4a04      	ldr	r2, [pc, #16]	@ (8006640 <prvSampleTimeNow+0x3c>)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006634:	68fb      	ldr	r3, [r7, #12]
    }
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000284 	.word	0x20000284

08006644 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	60b9      	str	r1, [r7, #8]
 800664e:	607a      	str	r2, [r7, #4]
 8006650:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006652:	2300      	movs	r3, #0
 8006654:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d812      	bhi.n	8006690 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	429a      	cmp	r2, r3
 8006676:	d302      	bcc.n	800667e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	617b      	str	r3, [r7, #20]
 800667c:	e01b      	b.n	80066b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800667e:	4b10      	ldr	r3, [pc, #64]	@ (80066c0 <prvInsertTimerInActiveList+0x7c>)
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3304      	adds	r3, #4
 8006686:	4619      	mov	r1, r3
 8006688:	4610      	mov	r0, r2
 800668a:	f7fd fc94 	bl	8003fb6 <vListInsert>
 800668e:	e012      	b.n	80066b6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d206      	bcs.n	80066a6 <prvInsertTimerInActiveList+0x62>
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d302      	bcc.n	80066a6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	617b      	str	r3, [r7, #20]
 80066a4:	e007      	b.n	80066b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066a6:	4b07      	ldr	r3, [pc, #28]	@ (80066c4 <prvInsertTimerInActiveList+0x80>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	3304      	adds	r3, #4
 80066ae:	4619      	mov	r1, r3
 80066b0:	4610      	mov	r0, r2
 80066b2:	f7fd fc80 	bl	8003fb6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80066b6:	697b      	ldr	r3, [r7, #20]
    }
 80066b8:	4618      	mov	r0, r3
 80066ba:	3718      	adds	r7, #24
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	20000278 	.word	0x20000278
 80066c4:	20000274 	.word	0x20000274

080066c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 80066ce:	f107 0308 	add.w	r3, r7, #8
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	605a      	str	r2, [r3, #4]
 80066d8:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80066da:	e0a9      	b.n	8006830 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f2c0 80a6 	blt.w	8006830 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3304      	adds	r3, #4
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd fc97 	bl	8004028 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff ff81 	bl	8006604 <prvSampleTimeNow>
 8006702:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	3b01      	subs	r3, #1
 8006708:	2b08      	cmp	r3, #8
 800670a:	f200 808e 	bhi.w	800682a <prvProcessReceivedCommands+0x162>
 800670e:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <prvProcessReceivedCommands+0x4c>)
 8006710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006714:	08006739 	.word	0x08006739
 8006718:	08006739 	.word	0x08006739
 800671c:	080067a1 	.word	0x080067a1
 8006720:	080067b5 	.word	0x080067b5
 8006724:	08006801 	.word	0x08006801
 8006728:	08006739 	.word	0x08006739
 800672c:	08006739 	.word	0x08006739
 8006730:	080067a1 	.word	0x080067a1
 8006734:	080067b5 	.word	0x080067b5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800673e:	f043 0301 	orr.w	r3, r3, #1
 8006742:	b2da      	uxtb	r2, r3
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	18d1      	adds	r1, r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	69f8      	ldr	r0, [r7, #28]
 8006758:	f7ff ff74 	bl	8006644 <prvInsertTimerInActiveList>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d065      	beq.n	800682e <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	4413      	add	r3, r2
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	4619      	mov	r1, r3
 800677c:	69f8      	ldr	r0, [r7, #28]
 800677e:	f7ff fe69 	bl	8006454 <prvReloadTimer>
 8006782:	e008      	b.n	8006796 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800678a:	f023 0301 	bic.w	r3, r3, #1
 800678e:	b2da      	uxtb	r2, r3
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	69f8      	ldr	r0, [r7, #28]
 800679c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800679e:	e046      	b.n	800682e <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067a6:	f023 0301 	bic.w	r3, r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80067b2:	e03d      	b.n	8006830 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067ba:	f043 0301 	orr.w	r3, r3, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <prvProcessReceivedCommands+0x124>
    __asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	617b      	str	r3, [r7, #20]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	699a      	ldr	r2, [r3, #24]
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	18d1      	adds	r1, r2, r3
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	69f8      	ldr	r0, [r7, #28]
 80067fa:	f7ff ff23 	bl	8006644 <prvInsertTimerInActiveList>
                        break;
 80067fe:	e017      	b.n	8006830 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 800680e:	69f8      	ldr	r0, [r7, #28]
 8006810:	f000 fc58 	bl	80070c4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006814:	e00c      	b.n	8006830 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006828:	e002      	b.n	8006830 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 800682a:	bf00      	nop
 800682c:	e000      	b.n	8006830 <prvProcessReceivedCommands+0x168>
                        break;
 800682e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8006830:	4b08      	ldr	r3, [pc, #32]	@ (8006854 <prvProcessReceivedCommands+0x18c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f107 0108 	add.w	r1, r7, #8
 8006838:	2200      	movs	r2, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f7fd feda 	bl	80045f4 <xQueueReceive>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	f47f af4a 	bne.w	80066dc <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	3720      	adds	r7, #32
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	2000027c 	.word	0x2000027c

08006858 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800685e:	e009      	b.n	8006874 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006860:	4b0e      	ldr	r3, [pc, #56]	@ (800689c <prvSwitchTimerLists+0x44>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800686a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800686e:	6838      	ldr	r0, [r7, #0]
 8006870:	f7ff fe12 	bl	8006498 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006874:	4b09      	ldr	r3, [pc, #36]	@ (800689c <prvSwitchTimerLists+0x44>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f0      	bne.n	8006860 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800687e:	4b07      	ldr	r3, [pc, #28]	@ (800689c <prvSwitchTimerLists+0x44>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8006884:	4b06      	ldr	r3, [pc, #24]	@ (80068a0 <prvSwitchTimerLists+0x48>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a04      	ldr	r2, [pc, #16]	@ (800689c <prvSwitchTimerLists+0x44>)
 800688a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800688c:	4a04      	ldr	r2, [pc, #16]	@ (80068a0 <prvSwitchTimerLists+0x48>)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6013      	str	r3, [r2, #0]
    }
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	20000274 	.word	0x20000274
 80068a0:	20000278 	.word	0x20000278

080068a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80068a4:	b580      	push	{r7, lr}
 80068a6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80068a8:	f000 f9b4 	bl	8006c14 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80068ac:	4b12      	ldr	r3, [pc, #72]	@ (80068f8 <prvCheckForValidListAndQueue+0x54>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11d      	bne.n	80068f0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80068b4:	4811      	ldr	r0, [pc, #68]	@ (80068fc <prvCheckForValidListAndQueue+0x58>)
 80068b6:	f7fd fb51 	bl	8003f5c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80068ba:	4811      	ldr	r0, [pc, #68]	@ (8006900 <prvCheckForValidListAndQueue+0x5c>)
 80068bc:	f7fd fb4e 	bl	8003f5c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80068c0:	4b10      	ldr	r3, [pc, #64]	@ (8006904 <prvCheckForValidListAndQueue+0x60>)
 80068c2:	4a0e      	ldr	r2, [pc, #56]	@ (80068fc <prvCheckForValidListAndQueue+0x58>)
 80068c4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80068c6:	4b10      	ldr	r3, [pc, #64]	@ (8006908 <prvCheckForValidListAndQueue+0x64>)
 80068c8:	4a0d      	ldr	r2, [pc, #52]	@ (8006900 <prvCheckForValidListAndQueue+0x5c>)
 80068ca:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80068cc:	2200      	movs	r2, #0
 80068ce:	210c      	movs	r1, #12
 80068d0:	200a      	movs	r0, #10
 80068d2:	f7fd fc65 	bl	80041a0 <xQueueGenericCreate>
 80068d6:	4603      	mov	r3, r0
 80068d8:	4a07      	ldr	r2, [pc, #28]	@ (80068f8 <prvCheckForValidListAndQueue+0x54>)
 80068da:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80068dc:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <prvCheckForValidListAndQueue+0x54>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d005      	beq.n	80068f0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80068e4:	4b04      	ldr	r3, [pc, #16]	@ (80068f8 <prvCheckForValidListAndQueue+0x54>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4908      	ldr	r1, [pc, #32]	@ (800690c <prvCheckForValidListAndQueue+0x68>)
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7fe f954 	bl	8004b98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80068f0:	f000 f9c2 	bl	8006c78 <vPortExitCritical>
    }
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	2000027c 	.word	0x2000027c
 80068fc:	2000024c 	.word	0x2000024c
 8006900:	20000260 	.word	0x20000260
 8006904:	20000274 	.word	0x20000274
 8006908:	20000278 	.word	0x20000278
 800690c:	08007510 	.word	0x08007510

08006910 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3b04      	subs	r3, #4
 8006920:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3b04      	subs	r3, #4
 800692e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f023 0201 	bic.w	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b04      	subs	r3, #4
 800693e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006940:	4a0c      	ldr	r2, [pc, #48]	@ (8006974 <pxPortInitialiseStack+0x64>)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	3b14      	subs	r3, #20
 800694a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	3b04      	subs	r3, #4
 8006956:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f06f 0202 	mvn.w	r2, #2
 800695e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3b20      	subs	r3, #32
 8006964:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006966:	68fb      	ldr	r3, [r7, #12]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	08006979 	.word	0x08006979

08006978 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800697e:	2300      	movs	r3, #0
 8006980:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006982:	4b13      	ldr	r3, [pc, #76]	@ (80069d0 <prvTaskExitError+0x58>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800698a:	d00b      	beq.n	80069a4 <prvTaskExitError+0x2c>
    __asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	60fb      	str	r3, [r7, #12]
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <prvTaskExitError+0x28>
    __asm volatile
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	60bb      	str	r3, [r7, #8]
}
 80069b6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80069b8:	bf00      	nop
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0fc      	beq.n	80069ba <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80069c0:	bf00      	nop
 80069c2:	bf00      	nop
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	20000010 	.word	0x20000010
	...

080069e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80069e0:	4b07      	ldr	r3, [pc, #28]	@ (8006a00 <pxCurrentTCBConst2>)
 80069e2:	6819      	ldr	r1, [r3, #0]
 80069e4:	6808      	ldr	r0, [r1, #0]
 80069e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ea:	f380 8809 	msr	PSP, r0
 80069ee:	f3bf 8f6f 	isb	sy
 80069f2:	f04f 0000 	mov.w	r0, #0
 80069f6:	f380 8811 	msr	BASEPRI, r0
 80069fa:	4770      	bx	lr
 80069fc:	f3af 8000 	nop.w

08006a00 <pxCurrentTCBConst2>:
 8006a00:	20000148 	.word	0x20000148
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8006a04:	bf00      	nop
 8006a06:	bf00      	nop

08006a08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006a08:	4808      	ldr	r0, [pc, #32]	@ (8006a2c <prvPortStartFirstTask+0x24>)
 8006a0a:	6800      	ldr	r0, [r0, #0]
 8006a0c:	6800      	ldr	r0, [r0, #0]
 8006a0e:	f380 8808 	msr	MSP, r0
 8006a12:	f04f 0000 	mov.w	r0, #0
 8006a16:	f380 8814 	msr	CONTROL, r0
 8006a1a:	b662      	cpsie	i
 8006a1c:	b661      	cpsie	f
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	df00      	svc	0
 8006a28:	bf00      	nop
 8006a2a:	0000      	.short	0x0000
 8006a2c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop

08006a34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	@ 0x30
 8006a38:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006a3a:	4b69      	ldr	r3, [pc, #420]	@ (8006be0 <xPortStartScheduler+0x1ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a69      	ldr	r2, [pc, #420]	@ (8006be4 <xPortStartScheduler+0x1b0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d10b      	bne.n	8006a5c <xPortStartScheduler+0x28>
    __asm volatile
 8006a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	623b      	str	r3, [r7, #32]
}
 8006a56:	bf00      	nop
 8006a58:	bf00      	nop
 8006a5a:	e7fd      	b.n	8006a58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a5c:	4b60      	ldr	r3, [pc, #384]	@ (8006be0 <xPortStartScheduler+0x1ac>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a61      	ldr	r2, [pc, #388]	@ (8006be8 <xPortStartScheduler+0x1b4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10b      	bne.n	8006a7e <xPortStartScheduler+0x4a>
    __asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8006a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8006bec <xPortStartScheduler+0x1b8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	332c      	adds	r3, #44	@ 0x2c
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a59      	ldr	r2, [pc, #356]	@ (8006bf0 <xPortStartScheduler+0x1bc>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00b      	beq.n	8006aa8 <xPortStartScheduler+0x74>
    __asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	61fb      	str	r3, [r7, #28]
}
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	e7fd      	b.n	8006aa4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	3338      	adds	r3, #56	@ 0x38
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a51      	ldr	r2, [pc, #324]	@ (8006bf4 <xPortStartScheduler+0x1c0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00b      	beq.n	8006acc <xPortStartScheduler+0x98>
    __asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	61bb      	str	r3, [r7, #24]
}
 8006ac6:	bf00      	nop
 8006ac8:	bf00      	nop
 8006aca:	e7fd      	b.n	8006ac8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8006acc:	2300      	movs	r3, #0
 8006ace:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ad0:	4b49      	ldr	r3, [pc, #292]	@ (8006bf8 <xPortStartScheduler+0x1c4>)
 8006ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ade:	22ff      	movs	r2, #255	@ 0xff
 8006ae0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	4b41      	ldr	r3, [pc, #260]	@ (8006bfc <xPortStartScheduler+0x1c8>)
 8006af6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006af8:	4b40      	ldr	r3, [pc, #256]	@ (8006bfc <xPortStartScheduler+0x1c8>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <xPortStartScheduler+0xe4>
    __asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	617b      	str	r3, [r7, #20]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8006b18:	79fb      	ldrb	r3, [r7, #7]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d013      	beq.n	8006b4e <xPortStartScheduler+0x11a>
    __asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	613b      	str	r3, [r7, #16]
}
 8006b38:	bf00      	nop
 8006b3a:	bf00      	nop
 8006b3c:	e7fd      	b.n	8006b3a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3301      	adds	r3, #1
 8006b42:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	005b      	lsls	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b56:	2b80      	cmp	r3, #128	@ 0x80
 8006b58:	d0f1      	beq.n	8006b3e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d103      	bne.n	8006b68 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8006b60:	4b27      	ldr	r3, [pc, #156]	@ (8006c00 <xPortStartScheduler+0x1cc>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e004      	b.n	8006b72 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f1c3 0307 	rsb	r3, r3, #7
 8006b6e:	4a24      	ldr	r2, [pc, #144]	@ (8006c00 <xPortStartScheduler+0x1cc>)
 8006b70:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b72:	4b23      	ldr	r3, [pc, #140]	@ (8006c00 <xPortStartScheduler+0x1cc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	021b      	lsls	r3, r3, #8
 8006b78:	4a21      	ldr	r2, [pc, #132]	@ (8006c00 <xPortStartScheduler+0x1cc>)
 8006b7a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b7c:	4b20      	ldr	r3, [pc, #128]	@ (8006c00 <xPortStartScheduler+0x1cc>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b84:	4a1e      	ldr	r2, [pc, #120]	@ (8006c00 <xPortStartScheduler+0x1cc>)
 8006b86:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b8e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006b90:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <xPortStartScheduler+0x1d0>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1b      	ldr	r2, [pc, #108]	@ (8006c04 <xPortStartScheduler+0x1d0>)
 8006b96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006b9c:	4b19      	ldr	r3, [pc, #100]	@ (8006c04 <xPortStartScheduler+0x1d0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a18      	ldr	r2, [pc, #96]	@ (8006c04 <xPortStartScheduler+0x1d0>)
 8006ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8006ba8:	4b17      	ldr	r3, [pc, #92]	@ (8006c08 <xPortStartScheduler+0x1d4>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006bae:	f000 f8e5 	bl	8006d7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006bb2:	4b16      	ldr	r3, [pc, #88]	@ (8006c0c <xPortStartScheduler+0x1d8>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006bb8:	f000 f904 	bl	8006dc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bbc:	4b14      	ldr	r3, [pc, #80]	@ (8006c10 <xPortStartScheduler+0x1dc>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a13      	ldr	r2, [pc, #76]	@ (8006c10 <xPortStartScheduler+0x1dc>)
 8006bc2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bc6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006bc8:	f7ff ff1e 	bl	8006a08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006bcc:	f7fe fcca 	bl	8005564 <vTaskSwitchContext>
    prvTaskExitError();
 8006bd0:	f7ff fed2 	bl	8006978 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3730      	adds	r7, #48	@ 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	e000ed00 	.word	0xe000ed00
 8006be4:	410fc271 	.word	0x410fc271
 8006be8:	410fc270 	.word	0x410fc270
 8006bec:	e000ed08 	.word	0xe000ed08
 8006bf0:	080069e1 	.word	0x080069e1
 8006bf4:	08006cd1 	.word	0x08006cd1
 8006bf8:	e000e400 	.word	0xe000e400
 8006bfc:	20000288 	.word	0x20000288
 8006c00:	2000028c 	.word	0x2000028c
 8006c04:	e000ed20 	.word	0xe000ed20
 8006c08:	e000ed1c 	.word	0xe000ed1c
 8006c0c:	20000010 	.word	0x20000010
 8006c10:	e000ef34 	.word	0xe000ef34

08006c14 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
    __asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	607b      	str	r3, [r7, #4]
}
 8006c2c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006c2e:	4b10      	ldr	r3, [pc, #64]	@ (8006c70 <vPortEnterCritical+0x5c>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	4a0e      	ldr	r2, [pc, #56]	@ (8006c70 <vPortEnterCritical+0x5c>)
 8006c36:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006c38:	4b0d      	ldr	r3, [pc, #52]	@ (8006c70 <vPortEnterCritical+0x5c>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d110      	bne.n	8006c62 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c40:	4b0c      	ldr	r3, [pc, #48]	@ (8006c74 <vPortEnterCritical+0x60>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00b      	beq.n	8006c62 <vPortEnterCritical+0x4e>
    __asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	603b      	str	r3, [r7, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <vPortEnterCritical+0x4a>
    }
}
 8006c62:	bf00      	nop
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	20000010 	.word	0x20000010
 8006c74:	e000ed04 	.word	0xe000ed04

08006c78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006c7e:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <vPortExitCritical+0x50>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10b      	bne.n	8006c9e <vPortExitCritical+0x26>
    __asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	607b      	str	r3, [r7, #4]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc8 <vPortExitCritical+0x50>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	4a08      	ldr	r2, [pc, #32]	@ (8006cc8 <vPortExitCritical+0x50>)
 8006ca6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ca8:	4b07      	ldr	r3, [pc, #28]	@ (8006cc8 <vPortExitCritical+0x50>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d105      	bne.n	8006cbc <vPortExitCritical+0x44>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	f383 8811 	msr	BASEPRI, r3
}
 8006cba:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	20000010 	.word	0x20000010
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006cd0:	f3ef 8009 	mrs	r0, PSP
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4b15      	ldr	r3, [pc, #84]	@ (8006d30 <pxCurrentTCBConst>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f01e 0f10 	tst.w	lr, #16
 8006ce0:	bf08      	it	eq
 8006ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	6010      	str	r0, [r2, #0]
 8006cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006cf4:	f380 8811 	msr	BASEPRI, r0
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f7fe fc30 	bl	8005564 <vTaskSwitchContext>
 8006d04:	f04f 0000 	mov.w	r0, #0
 8006d08:	f380 8811 	msr	BASEPRI, r0
 8006d0c:	bc09      	pop	{r0, r3}
 8006d0e:	6819      	ldr	r1, [r3, #0]
 8006d10:	6808      	ldr	r0, [r1, #0]
 8006d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d16:	f01e 0f10 	tst.w	lr, #16
 8006d1a:	bf08      	it	eq
 8006d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d20:	f380 8809 	msr	PSP, r0
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w

08006d30 <pxCurrentTCBConst>:
 8006d30:	20000148 	.word	0x20000148
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
    __asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
}
 8006d50:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006d52:	f7fe faed 	bl	8005330 <xTaskIncrementTick>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d5c:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <SysTick_Handler+0x40>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
}
 8006d6e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d80:	4b0b      	ldr	r3, [pc, #44]	@ (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <vPortSetupTimerInterrupt+0x38>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006db8 <vPortSetupTimerInterrupt+0x3c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0a      	ldr	r2, [pc, #40]	@ (8006dbc <vPortSetupTimerInterrupt+0x40>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	4a09      	ldr	r2, [pc, #36]	@ (8006dc0 <vPortSetupTimerInterrupt+0x44>)
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d9e:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000e010 	.word	0xe000e010
 8006db4:	e000e018 	.word	0xe000e018
 8006db8:	20000000 	.word	0x20000000
 8006dbc:	10624dd3 	.word	0x10624dd3
 8006dc0:	e000e014 	.word	0xe000e014

08006dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006dd4 <vPortEnableVFP+0x10>
 8006dc8:	6801      	ldr	r1, [r0, #0]
 8006dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006dce:	6001      	str	r1, [r0, #0]
 8006dd0:	4770      	bx	lr
 8006dd2:	0000      	.short	0x0000
 8006dd4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop

08006ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006de2:	f3ef 8305 	mrs	r3, IPSR
 8006de6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d915      	bls.n	8006e1a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dee:	4a18      	ldr	r2, [pc, #96]	@ (8006e50 <vPortValidateInterruptPriority+0x74>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006df8:	4b16      	ldr	r3, [pc, #88]	@ (8006e54 <vPortValidateInterruptPriority+0x78>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	7afa      	ldrb	r2, [r7, #11]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d20b      	bcs.n	8006e1a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	607b      	str	r3, [r7, #4]
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	e7fd      	b.n	8006e16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e58 <vPortValidateInterruptPriority+0x7c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e22:	4b0e      	ldr	r3, [pc, #56]	@ (8006e5c <vPortValidateInterruptPriority+0x80>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d90b      	bls.n	8006e42 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	603b      	str	r3, [r7, #0]
}
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	e7fd      	b.n	8006e3e <vPortValidateInterruptPriority+0x62>
    }
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e3f0 	.word	0xe000e3f0
 8006e54:	20000288 	.word	0x20000288
 8006e58:	e000ed0c 	.word	0xe000ed0c
 8006e5c:	2000028c 	.word	0x2000028c

08006e60 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08e      	sub	sp, #56	@ 0x38
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d022      	beq.n	8006eb8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006e72:	2308      	movs	r3, #8
 8006e74:	43db      	mvns	r3, r3
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d81b      	bhi.n	8006eb4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8006e7c:	2208      	movs	r2, #8
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f003 0307 	and.w	r3, r3, #7
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d014      	beq.n	8006eb8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f003 0307 	and.w	r3, r3, #7
 8006e94:	f1c3 0308 	rsb	r3, r3, #8
 8006e98:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8006e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d804      	bhi.n	8006eae <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	4413      	add	r3, r2
 8006eaa:	607b      	str	r3, [r7, #4]
 8006eac:	e004      	b.n	8006eb8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	607b      	str	r3, [r7, #4]
 8006eb2:	e001      	b.n	8006eb8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8006eb8:	f7fe f908 	bl	80050cc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006ebc:	4b7a      	ldr	r3, [pc, #488]	@ (80070a8 <pvPortMalloc+0x248>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8006ec4:	f000 f974 	bl	80071b0 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f2c0 80d3 	blt.w	8007076 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80cf 	beq.w	8007076 <pvPortMalloc+0x216>
 8006ed8:	4b74      	ldr	r3, [pc, #464]	@ (80070ac <pvPortMalloc+0x24c>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	f200 80c9 	bhi.w	8007076 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006ee4:	4b72      	ldr	r3, [pc, #456]	@ (80070b0 <pvPortMalloc+0x250>)
 8006ee6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8006ee8:	4b71      	ldr	r3, [pc, #452]	@ (80070b0 <pvPortMalloc+0x250>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8006eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef0:	4a70      	ldr	r2, [pc, #448]	@ (80070b4 <pvPortMalloc+0x254>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d305      	bcc.n	8006f02 <pvPortMalloc+0xa2>
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef8:	4a6f      	ldr	r2, [pc, #444]	@ (80070b8 <pvPortMalloc+0x258>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d801      	bhi.n	8006f02 <pvPortMalloc+0xa2>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <pvPortMalloc+0xa4>
 8006f02:	2300      	movs	r3, #0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d129      	bne.n	8006f5c <pvPortMalloc+0xfc>
    __asm volatile
 8006f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0c:	f383 8811 	msr	BASEPRI, r3
 8006f10:	f3bf 8f6f 	isb	sy
 8006f14:	f3bf 8f4f 	dsb	sy
 8006f18:	623b      	str	r3, [r7, #32]
}
 8006f1a:	bf00      	nop
 8006f1c:	bf00      	nop
 8006f1e:	e7fd      	b.n	8006f1c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8006f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f22:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8006f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f2c:	4a61      	ldr	r2, [pc, #388]	@ (80070b4 <pvPortMalloc+0x254>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d305      	bcc.n	8006f3e <pvPortMalloc+0xde>
 8006f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f34:	4a60      	ldr	r2, [pc, #384]	@ (80070b8 <pvPortMalloc+0x258>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d801      	bhi.n	8006f3e <pvPortMalloc+0xde>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <pvPortMalloc+0xe0>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <pvPortMalloc+0xfc>
    __asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	61fb      	str	r3, [r7, #28]
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	e7fd      	b.n	8006f58 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d903      	bls.n	8006f6e <pvPortMalloc+0x10e>
 8006f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1d8      	bne.n	8006f20 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80070a8 <pvPortMalloc+0x248>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d07e      	beq.n	8007076 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	4413      	add	r3, r2
 8006f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	4a4b      	ldr	r2, [pc, #300]	@ (80070b4 <pvPortMalloc+0x254>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d305      	bcc.n	8006f96 <pvPortMalloc+0x136>
 8006f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80070b8 <pvPortMalloc+0x258>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d801      	bhi.n	8006f96 <pvPortMalloc+0x136>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e000      	b.n	8006f98 <pvPortMalloc+0x138>
 8006f96:	2300      	movs	r3, #0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <pvPortMalloc+0x154>
    __asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	61bb      	str	r3, [r7, #24]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8006fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d90b      	bls.n	8006fde <pvPortMalloc+0x17e>
    __asm volatile
 8006fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fca:	f383 8811 	msr	BASEPRI, r3
 8006fce:	f3bf 8f6f 	isb	sy
 8006fd2:	f3bf 8f4f 	dsb	sy
 8006fd6:	617b      	str	r3, [r7, #20]
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	e7fd      	b.n	8006fda <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fe0:	685a      	ldr	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	1ad2      	subs	r2, r2, r3
 8006fe6:	2308      	movs	r3, #8
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d924      	bls.n	8007038 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006fee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <pvPortMalloc+0x1b8>
    __asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	1ad2      	subs	r2, r2, r3
 8007020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007022:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800702a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007030:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8007032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007034:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007036:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007038:	4b1c      	ldr	r3, [pc, #112]	@ (80070ac <pvPortMalloc+0x24c>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703e:	685b      	ldr	r3, [r3, #4]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	4a1a      	ldr	r2, [pc, #104]	@ (80070ac <pvPortMalloc+0x24c>)
 8007044:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007046:	4b19      	ldr	r3, [pc, #100]	@ (80070ac <pvPortMalloc+0x24c>)
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b1c      	ldr	r3, [pc, #112]	@ (80070bc <pvPortMalloc+0x25c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d203      	bcs.n	800705a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007052:	4b16      	ldr	r3, [pc, #88]	@ (80070ac <pvPortMalloc+0x24c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a19      	ldr	r2, [pc, #100]	@ (80070bc <pvPortMalloc+0x25c>)
 8007058:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800705a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007062:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007064:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007068:	2200      	movs	r2, #0
 800706a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800706c:	4b14      	ldr	r3, [pc, #80]	@ (80070c0 <pvPortMalloc+0x260>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	3301      	adds	r3, #1
 8007072:	4a13      	ldr	r2, [pc, #76]	@ (80070c0 <pvPortMalloc+0x260>)
 8007074:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007076:	f7fe f837 	bl	80050e8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800707a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800707c:	f003 0307 	and.w	r3, r3, #7
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00b      	beq.n	800709c <pvPortMalloc+0x23c>
    __asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60fb      	str	r3, [r7, #12]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <pvPortMalloc+0x238>
    return pvReturn;
 800709c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3738      	adds	r7, #56	@ 0x38
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	20012e98 	.word	0x20012e98
 80070ac:	20012e9c 	.word	0x20012e9c
 80070b0:	20012e90 	.word	0x20012e90
 80070b4:	20000290 	.word	0x20000290
 80070b8:	20012e8f 	.word	0x20012e8f
 80070bc:	20012ea0 	.word	0x20012ea0
 80070c0:	20012ea4 	.word	0x20012ea4

080070c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b088      	sub	sp, #32
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d060      	beq.n	8007198 <vPortFree+0xd4>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80070d6:	2308      	movs	r3, #8
 80070d8:	425b      	negs	r3, r3
 80070da:	69fa      	ldr	r2, [r7, #28]
 80070dc:	4413      	add	r3, r2
 80070de:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	4a2e      	ldr	r2, [pc, #184]	@ (80071a0 <vPortFree+0xdc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d305      	bcc.n	80070f8 <vPortFree+0x34>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	4a2d      	ldr	r2, [pc, #180]	@ (80071a4 <vPortFree+0xe0>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d801      	bhi.n	80070f8 <vPortFree+0x34>
 80070f4:	2301      	movs	r3, #1
 80070f6:	e000      	b.n	80070fa <vPortFree+0x36>
 80070f8:	2300      	movs	r3, #0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10b      	bne.n	8007116 <vPortFree+0x52>
    __asm volatile
 80070fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007102:	f383 8811 	msr	BASEPRI, r3
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	f3bf 8f4f 	dsb	sy
 800710e:	617b      	str	r3, [r7, #20]
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	e7fd      	b.n	8007112 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	db0b      	blt.n	8007136 <vPortFree+0x72>
    __asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	613b      	str	r3, [r7, #16]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007136:	69bb      	ldr	r3, [r7, #24]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00b      	beq.n	8007156 <vPortFree+0x92>
    __asm volatile
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	60fb      	str	r3, [r7, #12]
}
 8007150:	bf00      	nop
 8007152:	bf00      	nop
 8007154:	e7fd      	b.n	8007152 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	da1c      	bge.n	8007198 <vPortFree+0xd4>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d118      	bne.n	8007198 <vPortFree+0xd4>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8007172:	f7fd ffab 	bl	80050cc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	4b0b      	ldr	r3, [pc, #44]	@ (80071a8 <vPortFree+0xe4>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4413      	add	r3, r2
 8007180:	4a09      	ldr	r2, [pc, #36]	@ (80071a8 <vPortFree+0xe4>)
 8007182:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007184:	69b8      	ldr	r0, [r7, #24]
 8007186:	f000 f86d 	bl	8007264 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800718a:	4b08      	ldr	r3, [pc, #32]	@ (80071ac <vPortFree+0xe8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3301      	adds	r3, #1
 8007190:	4a06      	ldr	r2, [pc, #24]	@ (80071ac <vPortFree+0xe8>)
 8007192:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007194:	f7fd ffa8 	bl	80050e8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007198:	bf00      	nop
 800719a:	3720      	adds	r7, #32
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000290 	.word	0x20000290
 80071a4:	20012e8f 	.word	0x20012e8f
 80071a8:	20012e9c 	.word	0x20012e9c
 80071ac:	20012ea8 	.word	0x20012ea8

080071b0 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071b6:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80071ba:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80071bc:	4b24      	ldr	r3, [pc, #144]	@ (8007250 <prvHeapInit+0xa0>)
 80071be:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00c      	beq.n	80071e4 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3307      	adds	r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 0307 	bic.w	r3, r3, #7
 80071d6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	4a1c      	ldr	r2, [pc, #112]	@ (8007250 <prvHeapInit+0xa0>)
 80071e0:	4413      	add	r3, r2
 80071e2:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4a1b      	ldr	r2, [pc, #108]	@ (8007254 <prvHeapInit+0xa4>)
 80071e8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80071ea:	4b1a      	ldr	r3, [pc, #104]	@ (8007254 <prvHeapInit+0xa4>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4413      	add	r3, r2
 80071f6:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80071f8:	2208      	movs	r2, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	1a9b      	subs	r3, r3, r2
 80071fe:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f023 0307 	bic.w	r3, r3, #7
 8007206:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a13      	ldr	r2, [pc, #76]	@ (8007258 <prvHeapInit+0xa8>)
 800720c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800720e:	4b12      	ldr	r3, [pc, #72]	@ (8007258 <prvHeapInit+0xa8>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2200      	movs	r2, #0
 8007214:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8007216:	4b10      	ldr	r3, [pc, #64]	@ (8007258 <prvHeapInit+0xa8>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	1ad2      	subs	r2, r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800722c:	4b0a      	ldr	r3, [pc, #40]	@ (8007258 <prvHeapInit+0xa8>)
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a08      	ldr	r2, [pc, #32]	@ (800725c <prvHeapInit+0xac>)
 800723a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	4a07      	ldr	r2, [pc, #28]	@ (8007260 <prvHeapInit+0xb0>)
 8007242:	6013      	str	r3, [r2, #0]
}
 8007244:	bf00      	nop
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	20000290 	.word	0x20000290
 8007254:	20012e90 	.word	0x20012e90
 8007258:	20012e98 	.word	0x20012e98
 800725c:	20012ea0 	.word	0x20012ea0
 8007260:	20012e9c 	.word	0x20012e9c

08007264 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007264:	b480      	push	{r7}
 8007266:	b087      	sub	sp, #28
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800726c:	4b36      	ldr	r3, [pc, #216]	@ (8007348 <prvInsertBlockIntoFreeList+0xe4>)
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e002      	b.n	8007278 <prvInsertBlockIntoFreeList+0x14>
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	617b      	str	r3, [r7, #20]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	429a      	cmp	r2, r3
 8007280:	d8f7      	bhi.n	8007272 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	4a30      	ldr	r2, [pc, #192]	@ (8007348 <prvInsertBlockIntoFreeList+0xe4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d018      	beq.n	80072bc <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	4a2f      	ldr	r2, [pc, #188]	@ (800734c <prvInsertBlockIntoFreeList+0xe8>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d305      	bcc.n	800729e <prvInsertBlockIntoFreeList+0x3a>
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	4a2e      	ldr	r2, [pc, #184]	@ (8007350 <prvInsertBlockIntoFreeList+0xec>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d801      	bhi.n	800729e <prvInsertBlockIntoFreeList+0x3a>
 800729a:	2301      	movs	r3, #1
 800729c:	e000      	b.n	80072a0 <prvInsertBlockIntoFreeList+0x3c>
 800729e:	2300      	movs	r3, #0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10b      	bne.n	80072bc <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 80072a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60fb      	str	r3, [r7, #12]
}
 80072b6:	bf00      	nop
 80072b8:	bf00      	nop
 80072ba:	e7fd      	b.n	80072b8 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d108      	bne.n	80072e0 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	685a      	ldr	r2, [r3, #4]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	441a      	add	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	441a      	add	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d118      	bne.n	8007326 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	4b16      	ldr	r3, [pc, #88]	@ (8007354 <prvInsertBlockIntoFreeList+0xf0>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d00d      	beq.n	800731c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	441a      	add	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	601a      	str	r2, [r3, #0]
 800731a:	e008      	b.n	800732e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800731c:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <prvInsertBlockIntoFreeList+0xf0>)
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	e003      	b.n	800732e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d002      	beq.n	800733c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800733c:	bf00      	nop
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr
 8007348:	20012e90 	.word	0x20012e90
 800734c:	20000290 	.word	0x20000290
 8007350:	20012e8f 	.word	0x20012e8f
 8007354:	20012e98 	.word	0x20012e98

08007358 <memset>:
 8007358:	4402      	add	r2, r0
 800735a:	4603      	mov	r3, r0
 800735c:	4293      	cmp	r3, r2
 800735e:	d100      	bne.n	8007362 <memset+0xa>
 8007360:	4770      	bx	lr
 8007362:	f803 1b01 	strb.w	r1, [r3], #1
 8007366:	e7f9      	b.n	800735c <memset+0x4>

08007368 <__libc_init_array>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4d0d      	ldr	r5, [pc, #52]	@ (80073a0 <__libc_init_array+0x38>)
 800736c:	4c0d      	ldr	r4, [pc, #52]	@ (80073a4 <__libc_init_array+0x3c>)
 800736e:	1b64      	subs	r4, r4, r5
 8007370:	10a4      	asrs	r4, r4, #2
 8007372:	2600      	movs	r6, #0
 8007374:	42a6      	cmp	r6, r4
 8007376:	d109      	bne.n	800738c <__libc_init_array+0x24>
 8007378:	4d0b      	ldr	r5, [pc, #44]	@ (80073a8 <__libc_init_array+0x40>)
 800737a:	4c0c      	ldr	r4, [pc, #48]	@ (80073ac <__libc_init_array+0x44>)
 800737c:	f000 f826 	bl	80073cc <_init>
 8007380:	1b64      	subs	r4, r4, r5
 8007382:	10a4      	asrs	r4, r4, #2
 8007384:	2600      	movs	r6, #0
 8007386:	42a6      	cmp	r6, r4
 8007388:	d105      	bne.n	8007396 <__libc_init_array+0x2e>
 800738a:	bd70      	pop	{r4, r5, r6, pc}
 800738c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007390:	4798      	blx	r3
 8007392:	3601      	adds	r6, #1
 8007394:	e7ee      	b.n	8007374 <__libc_init_array+0xc>
 8007396:	f855 3b04 	ldr.w	r3, [r5], #4
 800739a:	4798      	blx	r3
 800739c:	3601      	adds	r6, #1
 800739e:	e7f2      	b.n	8007386 <__libc_init_array+0x1e>
 80073a0:	0800753c 	.word	0x0800753c
 80073a4:	0800753c 	.word	0x0800753c
 80073a8:	0800753c 	.word	0x0800753c
 80073ac:	08007540 	.word	0x08007540

080073b0 <memcpy>:
 80073b0:	440a      	add	r2, r1
 80073b2:	4291      	cmp	r1, r2
 80073b4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80073b8:	d100      	bne.n	80073bc <memcpy+0xc>
 80073ba:	4770      	bx	lr
 80073bc:	b510      	push	{r4, lr}
 80073be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073c6:	4291      	cmp	r1, r2
 80073c8:	d1f9      	bne.n	80073be <memcpy+0xe>
 80073ca:	bd10      	pop	{r4, pc}

080073cc <_init>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	bf00      	nop
 80073d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073d2:	bc08      	pop	{r3}
 80073d4:	469e      	mov	lr, r3
 80073d6:	4770      	bx	lr

080073d8 <_fini>:
 80073d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073da:	bf00      	nop
 80073dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073de:	bc08      	pop	{r3}
 80073e0:	469e      	mov	lr, r3
 80073e2:	4770      	bx	lr
