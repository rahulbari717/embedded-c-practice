/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#define PERIPH_BASE       0x40000000UL
#define AHB1PERIPH_BASE   (PERIPH_BASE + 0x00020000UL)
#define RCC_BASE          (AHB1PERIPH_BASE + 0x3800UL)
#define GPIOA_BASE        (AHB1PERIPH_BASE + 0x0000UL)

#define RCC_AHB1ENR       (*(volatile uint32_t *)(RCC_BASE + 0x30))
#define GPIOA_MODER       (*(volatile uint32_t *)(GPIOA_BASE + 0x00))
#define GPIOA_ODR         (*(volatile uint32_t *)(GPIOA_BASE + 0x14))

#define LED_PIN           5
#define DELAY_TIME 		  10000000

void delay(volatile uint32_t time)
{
    while (time--);
}

int main(void)
{
    static uint8_t count = 0;

    // Enable GPIOA clock
    RCC_AHB1ENR |= (1 << 0);  // Bit 0 = GPIOAEN

    // Configure PA5 as output
    GPIOA_MODER &= ~(3 << (LED_PIN * 2)); // Clear MODER bits
    GPIOA_MODER |=  (1 << (LED_PIN * 2)); // Set as output

    while (1)
    {
        // Turn LED ON
        GPIOA_ODR |= (1 << LED_PIN);
        printf("LED ON  | Count ==> %d\n", count++);
        delay(1000000);

        // Turn LED OFF
        GPIOA_ODR &= ~(1 << LED_PIN);
        printf("LED OFF | Count ==> %d\n", count++);
        delay();
    }
}
