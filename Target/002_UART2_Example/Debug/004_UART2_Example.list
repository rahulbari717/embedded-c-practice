
004_UART2_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015ec  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080017b0  080017b0  000027b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017b8  080017b8  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080017b8  080017b8  000027b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080017c0  080017c0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017c0  080017c0  000027c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080017c4  080017c4  000027c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080017c8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080017d4  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080017d4  00003074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000070b8  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011ea  00000000  00000000  0000a0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  0000b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000475  00000000  00000000  0000b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002080c  00000000  00000000  0000bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006730  00000000  00000000  0002c539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c750c  00000000  00000000  00032c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa175  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000016f4  00000000  00000000  000fa1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000fb8ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001798 	.word	0x08001798

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001798 	.word	0x08001798

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <SysTick_Handler>:
 *
 *  Created on: Mar 11, 2025
 *      Author: Rahul B.
 */

void SysTick_Handler(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000534:	f000 f964 	bl	8000800 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000538:	f000 fa93 	bl	8000a62 <HAL_SYSTICK_IRQHandler>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <SystemClockConfig>:

UART_HandleTypeDef huart2;

char * user_data = "The application is running\r\n";

void SystemClockConfig(void){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr

0800054e <Error_handler>:

void Error_handler(void){
 800054e:	b480      	push	{r7}
 8000550:	af00      	add	r7, sp, #0
	while(1);
 8000552:	bf00      	nop
 8000554:	e7fd      	b.n	8000552 <Error_handler+0x4>
	...

08000558 <UART2_Init>:
}


void UART2_Init(){
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800055c:	4b0f      	ldr	r3, [pc, #60]	@ (800059c <UART2_Init+0x44>)
 800055e:	4a10      	ldr	r2, [pc, #64]	@ (80005a0 <UART2_Init+0x48>)
 8000560:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <UART2_Init+0x44>)
 8000564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000568:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800056a:	4b0c      	ldr	r3, [pc, #48]	@ (800059c <UART2_Init+0x44>)
 800056c:	2200      	movs	r2, #0
 800056e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000570:	4b0a      	ldr	r3, [pc, #40]	@ (800059c <UART2_Init+0x44>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000576:	4b09      	ldr	r3, [pc, #36]	@ (800059c <UART2_Init+0x44>)
 8000578:	2200      	movs	r2, #0
 800057a:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800057c:	4b07      	ldr	r3, [pc, #28]	@ (800059c <UART2_Init+0x44>)
 800057e:	2200      	movs	r2, #0
 8000580:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000582:	4b06      	ldr	r3, [pc, #24]	@ (800059c <UART2_Init+0x44>)
 8000584:	220c      	movs	r2, #12
 8000586:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000588:	4804      	ldr	r0, [pc, #16]	@ (800059c <UART2_Init+0x44>)
 800058a:	f000 fc3f 	bl	8000e0c <HAL_UART_Init>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <UART2_Init+0x40>
		// there is problem
		Error_handler();
 8000594:	f7ff ffdb 	bl	800054e <Error_handler>

	}
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000028 	.word	0x20000028
 80005a0:	40004400 	.word	0x40004400

080005a4 <main>:

int main(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b09c      	sub	sp, #112	@ 0x70
 80005a8:	af00      	add	r7, sp, #0

	HAL_Init();
 80005aa:	f000 f8d7 	bl	800075c <HAL_Init>
	SystemClockConfig();
 80005ae:	f7ff ffc7 	bl	8000540 <SystemClockConfig>
	UART2_Init();
 80005b2:	f7ff ffd1 	bl	8000558 <UART2_Init>
//		Error_handler();
//	}

	uint8_t rxvd_data;
	uint8_t data_buffer[100];
	uint32_t count = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
	while (1) {
		HAL_UART_Receive(&huart2, &rxvd_data, 1, HAL_MAX_DELAY);
 80005ba:	f107 016b 	add.w	r1, r7, #107	@ 0x6b
 80005be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005c2:	2201      	movs	r2, #1
 80005c4:	4811      	ldr	r0, [pc, #68]	@ (800060c <main+0x68>)
 80005c6:	f000 fcfc 	bl	8000fc2 <HAL_UART_Receive>
		if(rxvd_data == '\r'){
 80005ca:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80005ce:	2b0d      	cmp	r3, #13
 80005d0:	d009      	beq.n	80005e6 <main+0x42>
			break;
		} else {
			data_buffer[count++] = rxvd_data;
 80005d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005d4:	1c5a      	adds	r2, r3, #1
 80005d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80005d8:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80005dc:	3370      	adds	r3, #112	@ 0x70
 80005de:	443b      	add	r3, r7
 80005e0:	f803 2c6c 	strb.w	r2, [r3, #-108]
		HAL_UART_Receive(&huart2, &rxvd_data, 1, HAL_MAX_DELAY);
 80005e4:	e7e9      	b.n	80005ba <main+0x16>
			break;
 80005e6:	bf00      	nop
		}
	}
	data_buffer[count++] = '\r';
 80005e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80005ee:	3370      	adds	r3, #112	@ 0x70
 80005f0:	443b      	add	r3, r7
 80005f2:	220d      	movs	r2, #13
 80005f4:	f803 2c6c 	strb.w	r2, [r3, #-108]
	HAL_UART_Transmit(&huart2, data_buffer, count, HAL_MAX_DELAY);
 80005f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80005fa:	b29a      	uxth	r2, r3
 80005fc:	1d39      	adds	r1, r7, #4
 80005fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000602:	4802      	ldr	r0, [pc, #8]	@ (800060c <main+0x68>)
 8000604:	f000 fc52 	bl	8000eac <HAL_UART_Transmit>

	while(1);
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <main+0x64>
 800060c:	20000028 	.word	0x20000028

08000610 <HAL_MspInit>:

#include "stm32f4xx_hal.h"


void HAL_MspInit(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	//  NOTE : The HAL_MspInit could be implemented in the user file

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000614:	2003      	movs	r0, #3
 8000616:	f000 f9e3 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>
	// 2. Enable the required system exception of arm cortex mx processor
	SCB ->SHCSR |= 0x7 << 16; // usg fault, memory fault, and bus fault, system exception.
 800061a:	4b0d      	ldr	r3, [pc, #52]	@ (8000650 <HAL_MspInit+0x40>)
 800061c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800061e:	4a0c      	ldr	r2, [pc, #48]	@ (8000650 <HAL_MspInit+0x40>)
 8000620:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000624:	6253      	str	r3, [r2, #36]	@ 0x24
	// 3. configure the priority fro the system exception.
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	f06f 000b 	mvn.w	r0, #11
 800062e:	f000 f9e2 	bl	80009f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	f06f 000a 	mvn.w	r0, #10
 800063a:	f000 f9dc 	bl	80009f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800063e:	2200      	movs	r2, #0
 8000640:	2100      	movs	r1, #0
 8000642:	f06f 0009 	mvn.w	r0, #9
 8000646:	f000 f9d6 	bl	80009f6 <HAL_NVIC_SetPriority>

}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	e000ed00 	.word	0xe000ed00

08000654 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	@ 0x28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	// here we are going to do low level inits of uart2
	GPIO_InitTypeDef gpio_uart;
	// 1. enable the clock for USART2
	__HAL_RCC_USART2_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <HAL_UART_MspInit+0x88>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	4a1d      	ldr	r2, [pc, #116]	@ (80006dc <HAL_UART_MspInit+0x88>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066a:	6413      	str	r3, [r2, #64]	@ 0x40
 800066c:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <HAL_UART_MspInit+0x88>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000674:	613b      	str	r3, [r7, #16]
 8000676:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <HAL_UART_MspInit+0x88>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000680:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <HAL_UART_MspInit+0x88>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6313      	str	r3, [r2, #48]	@ 0x30
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <HAL_UART_MspInit+0x88>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068c:	f003 0301 	and.w	r3, r3, #1
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	68fb      	ldr	r3, [r7, #12]
	// 2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;
 8000694:	2304      	movs	r3, #4
 8000696:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 800069c:	2301      	movs	r3, #1
 800069e:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;				// UART2_TX
 80006a4:	2307      	movs	r3, #7
 80006a6:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <HAL_UART_MspInit+0x8c>)
 80006b0:	f000 f9e4 	bl	8000a7c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;							// UART2_RX
 80006b4:	2308      	movs	r3, #8
 80006b6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4808      	ldr	r0, [pc, #32]	@ (80006e0 <HAL_UART_MspInit+0x8c>)
 80006c0:	f000 f9dc 	bl	8000a7c <HAL_GPIO_Init>
	// 3. Enable the IRQ and set up the priority (NVIC)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006c4:	2026      	movs	r0, #38	@ 0x26
 80006c6:	f000 f9b2 	bl	8000a2e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	210f      	movs	r1, #15
 80006ce:	2026      	movs	r0, #38	@ 0x26
 80006d0:	f000 f991 	bl	80009f6 <HAL_NVIC_SetPriority>
}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40020000 	.word	0x40020000

080006e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006e8:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <SystemInit+0x20>)
 80006ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ee:	4a05      	ldr	r2, [pc, #20]	@ (8000704 <SystemInit+0x20>)
 80006f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000708:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000740 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800070c:	f7ff ffea 	bl	80006e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000712:	490d      	ldr	r1, [pc, #52]	@ (8000748 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000714:	4a0d      	ldr	r2, [pc, #52]	@ (800074c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000716:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000718:	e002      	b.n	8000720 <LoopCopyDataInit>

0800071a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800071a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800071c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071e:	3304      	adds	r3, #4

08000720 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000720:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000722:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000724:	d3f9      	bcc.n	800071a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000726:	4a0a      	ldr	r2, [pc, #40]	@ (8000750 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000728:	4c0a      	ldr	r4, [pc, #40]	@ (8000754 <LoopFillZerobss+0x22>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800072c:	e001      	b.n	8000732 <LoopFillZerobss>

0800072e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000730:	3204      	adds	r2, #4

08000732 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000732:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000734:	d3fb      	bcc.n	800072e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000736:	f001 f80b 	bl	8001750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800073a:	f7ff ff33 	bl	80005a4 <main>
  bx  lr    
 800073e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000748:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800074c:	080017c8 	.word	0x080017c8
  ldr r2, =_sbss
 8000750:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000754:	20000074 	.word	0x20000074

08000758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000758:	e7fe      	b.n	8000758 <ADC_IRQHandler>
	...

0800075c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000760:	4b0e      	ldr	r3, [pc, #56]	@ (800079c <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0d      	ldr	r2, [pc, #52]	@ (800079c <HAL_Init+0x40>)
 8000766:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800076a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a0a      	ldr	r2, [pc, #40]	@ (800079c <HAL_Init+0x40>)
 8000772:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000778:	4b08      	ldr	r3, [pc, #32]	@ (800079c <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a07      	ldr	r2, [pc, #28]	@ (800079c <HAL_Init+0x40>)
 800077e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000784:	2003      	movs	r0, #3
 8000786:	f000 f92b 	bl	80009e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078a:	2000      	movs	r0, #0
 800078c:	f000 f808 	bl	80007a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000790:	f7ff ff3e 	bl	8000610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000794:	2300      	movs	r3, #0
}
 8000796:	4618      	mov	r0, r3
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023c00 	.word	0x40023c00

080007a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <HAL_InitTick+0x54>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_InitTick+0x58>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	4619      	mov	r1, r3
 80007b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 f943 	bl	8000a4a <HAL_SYSTICK_Config>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ca:	2301      	movs	r3, #1
 80007cc:	e00e      	b.n	80007ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b0f      	cmp	r3, #15
 80007d2:	d80a      	bhi.n	80007ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007dc:	f000 f90b 	bl	80009f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e0:	4a06      	ldr	r2, [pc, #24]	@ (80007fc <HAL_InitTick+0x5c>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	e000      	b.n	80007ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	20000000 	.word	0x20000000
 80007f8:	20000008 	.word	0x20000008
 80007fc:	20000004 	.word	0x20000004

08000800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <HAL_IncTick+0x20>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_IncTick+0x24>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4413      	add	r3, r2
 8000810:	4a04      	ldr	r2, [pc, #16]	@ (8000824 <HAL_IncTick+0x24>)
 8000812:	6013      	str	r3, [r2, #0]
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000008 	.word	0x20000008
 8000824:	20000070 	.word	0x20000070

08000828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b03      	ldr	r3, [pc, #12]	@ (800083c <HAL_GetTick+0x14>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	20000070 	.word	0x20000070

08000840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0307 	and.w	r3, r3, #7
 800084e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000850:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800085c:	4013      	ands	r3, r2
 800085e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800086c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000872:	4a04      	ldr	r2, [pc, #16]	@ (8000884 <__NVIC_SetPriorityGrouping+0x44>)
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	60d3      	str	r3, [r2, #12]
}
 8000878:	bf00      	nop
 800087a:	3714      	adds	r7, #20
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800088c:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <__NVIC_GetPriorityGrouping+0x18>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	0a1b      	lsrs	r3, r3, #8
 8000892:	f003 0307 	and.w	r3, r3, #7
}
 8000896:	4618      	mov	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0b      	blt.n	80008ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 021f 	and.w	r2, r3, #31
 80008bc:	4907      	ldr	r1, [pc, #28]	@ (80008dc <__NVIC_EnableIRQ+0x38>)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	095b      	lsrs	r3, r3, #5
 80008c4:	2001      	movs	r0, #1
 80008c6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	@ (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	@ (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	@ 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	@ 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009ac:	d301      	bcc.n	80009b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ae:	2301      	movs	r3, #1
 80009b0:	e00f      	b.n	80009d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <SysTick_Config+0x40>)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ba:	210f      	movs	r1, #15
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009c0:	f7ff ff8e 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <SysTick_Config+0x40>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009ca:	4b04      	ldr	r3, [pc, #16]	@ (80009dc <SysTick_Config+0x40>)
 80009cc:	2207      	movs	r2, #7
 80009ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	e000e010 	.word	0xe000e010

080009e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f7ff ff29 	bl	8000840 <__NVIC_SetPriorityGrouping>
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b086      	sub	sp, #24
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	4603      	mov	r3, r0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a08:	f7ff ff3e 	bl	8000888 <__NVIC_GetPriorityGrouping>
 8000a0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	68b9      	ldr	r1, [r7, #8]
 8000a12:	6978      	ldr	r0, [r7, #20]
 8000a14:	f7ff ff8e 	bl	8000934 <NVIC_EncodePriority>
 8000a18:	4602      	mov	r2, r0
 8000a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff ff5d 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a26:	bf00      	nop
 8000a28:	3718      	adds	r7, #24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}

08000a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2e:	b580      	push	{r7, lr}
 8000a30:	b082      	sub	sp, #8
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff31 	bl	80008a4 <__NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffa2 	bl	800099c <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}

08000a62 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a66:	f000 f802 	bl	8000a6e <HAL_SYSTICK_Callback>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a72:	bf00      	nop
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b089      	sub	sp, #36	@ 0x24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
 8000a96:	e165      	b.n	8000d64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000a98:	2201      	movs	r2, #1
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	f040 8154 	bne.w	8000d5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	f003 0303 	and.w	r3, r3, #3
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d005      	beq.n	8000ace <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d130      	bne.n	8000b30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	69ba      	ldr	r2, [r7, #24]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	68da      	ldr	r2, [r3, #12]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	69ba      	ldr	r2, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b04:	2201      	movs	r2, #1
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	69ba      	ldr	r2, [r7, #24]
 8000b10:	4013      	ands	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	091b      	lsrs	r3, r3, #4
 8000b1a:	f003 0201 	and.w	r2, r3, #1
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0303 	and.w	r3, r3, #3
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d017      	beq.n	8000b6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	2203      	movs	r2, #3
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	43db      	mvns	r3, r3
 8000b4e:	69ba      	ldr	r2, [r7, #24]
 8000b50:	4013      	ands	r3, r2
 8000b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	689a      	ldr	r2, [r3, #8]
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	69ba      	ldr	r2, [r7, #24]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	69ba      	ldr	r2, [r7, #24]
 8000b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f003 0303 	and.w	r3, r3, #3
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d123      	bne.n	8000bc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	08da      	lsrs	r2, r3, #3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3208      	adds	r2, #8
 8000b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	220f      	movs	r2, #15
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	69ba      	ldr	r2, [r7, #24]
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	08da      	lsrs	r2, r3, #3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	3208      	adds	r2, #8
 8000bba:	69b9      	ldr	r1, [r7, #24]
 8000bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	69ba      	ldr	r2, [r7, #24]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0203 	and.w	r2, r3, #3
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	69ba      	ldr	r2, [r7, #24]
 8000bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f000 80ae 	beq.w	8000d5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b5d      	ldr	r3, [pc, #372]	@ (8000d7c <HAL_GPIO_Init+0x300>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000d7c <HAL_GPIO_Init+0x300>)
 8000c0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c12:	4b5a      	ldr	r3, [pc, #360]	@ (8000d7c <HAL_GPIO_Init+0x300>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c1e:	4a58      	ldr	r2, [pc, #352]	@ (8000d80 <HAL_GPIO_Init+0x304>)
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	3302      	adds	r3, #2
 8000c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	f003 0303 	and.w	r3, r3, #3
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	220f      	movs	r2, #15
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a4f      	ldr	r2, [pc, #316]	@ (8000d84 <HAL_GPIO_Init+0x308>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d025      	beq.n	8000c96 <HAL_GPIO_Init+0x21a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000d88 <HAL_GPIO_Init+0x30c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d01f      	beq.n	8000c92 <HAL_GPIO_Init+0x216>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4a4d      	ldr	r2, [pc, #308]	@ (8000d8c <HAL_GPIO_Init+0x310>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d019      	beq.n	8000c8e <HAL_GPIO_Init+0x212>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000d90 <HAL_GPIO_Init+0x314>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d013      	beq.n	8000c8a <HAL_GPIO_Init+0x20e>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a4b      	ldr	r2, [pc, #300]	@ (8000d94 <HAL_GPIO_Init+0x318>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d00d      	beq.n	8000c86 <HAL_GPIO_Init+0x20a>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000d98 <HAL_GPIO_Init+0x31c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d007      	beq.n	8000c82 <HAL_GPIO_Init+0x206>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a49      	ldr	r2, [pc, #292]	@ (8000d9c <HAL_GPIO_Init+0x320>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d101      	bne.n	8000c7e <HAL_GPIO_Init+0x202>
 8000c7a:	2306      	movs	r3, #6
 8000c7c:	e00c      	b.n	8000c98 <HAL_GPIO_Init+0x21c>
 8000c7e:	2307      	movs	r3, #7
 8000c80:	e00a      	b.n	8000c98 <HAL_GPIO_Init+0x21c>
 8000c82:	2305      	movs	r3, #5
 8000c84:	e008      	b.n	8000c98 <HAL_GPIO_Init+0x21c>
 8000c86:	2304      	movs	r3, #4
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x21c>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e004      	b.n	8000c98 <HAL_GPIO_Init+0x21c>
 8000c8e:	2302      	movs	r3, #2
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_Init+0x21c>
 8000c92:	2301      	movs	r3, #1
 8000c94:	e000      	b.n	8000c98 <HAL_GPIO_Init+0x21c>
 8000c96:	2300      	movs	r3, #0
 8000c98:	69fa      	ldr	r2, [r7, #28]
 8000c9a:	f002 0203 	and.w	r2, r2, #3
 8000c9e:	0092      	lsls	r2, r2, #2
 8000ca0:	4093      	lsls	r3, r2
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ca8:	4935      	ldr	r1, [pc, #212]	@ (8000d80 <HAL_GPIO_Init+0x304>)
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	089b      	lsrs	r3, r3, #2
 8000cae:	3302      	adds	r3, #2
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000cda:	4a31      	ldr	r2, [pc, #196]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ce0:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	4013      	ands	r3, r2
 8000cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d04:	4a26      	ldr	r2, [pc, #152]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	4013      	ands	r3, r2
 8000d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d003      	beq.n	8000d2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	43db      	mvns	r3, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4013      	ands	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000d58:	4a11      	ldr	r2, [pc, #68]	@ (8000da0 <HAL_GPIO_Init+0x324>)
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3301      	adds	r3, #1
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	2b0f      	cmp	r3, #15
 8000d68:	f67f ae96 	bls.w	8000a98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3724      	adds	r7, #36	@ 0x24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40013800 	.word	0x40013800
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40021400 	.word	0x40021400
 8000d9c:	40021800 	.word	0x40021800
 8000da0:	40013c00 	.word	0x40013c00

08000da4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000da8:	4b03      	ldr	r3, [pc, #12]	@ (8000db8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000000 	.word	0x20000000

08000dbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000dc0:	f7ff fff0 	bl	8000da4 <HAL_RCC_GetHCLKFreq>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <HAL_RCC_GetPCLK1Freq+0x20>)
 8000dc8:	689b      	ldr	r3, [r3, #8]
 8000dca:	0a9b      	lsrs	r3, r3, #10
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	4903      	ldr	r1, [pc, #12]	@ (8000de0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dd2:	5ccb      	ldrb	r3, [r1, r3]
 8000dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	080017b0 	.word	0x080017b0

08000de4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000de8:	f7ff ffdc 	bl	8000da4 <HAL_RCC_GetHCLKFreq>
 8000dec:	4602      	mov	r2, r0
 8000dee:	4b05      	ldr	r3, [pc, #20]	@ (8000e04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	0b5b      	lsrs	r3, r3, #13
 8000df4:	f003 0307 	and.w	r3, r3, #7
 8000df8:	4903      	ldr	r1, [pc, #12]	@ (8000e08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000dfa:	5ccb      	ldrb	r3, [r1, r3]
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	080017b0 	.word	0x080017b0

08000e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e042      	b.n	8000ea4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d106      	bne.n	8000e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff fc0e 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2224      	movs	r2, #36	@ 0x24
 8000e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f000 fa09 	bl	8001268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	695a      	ldr	r2, [r3, #20]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68da      	ldr	r2, [r3, #12]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2220      	movs	r2, #32
 8000e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2220      	movs	r2, #32
 8000e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	@ 0x28
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b20      	cmp	r3, #32
 8000eca:	d175      	bne.n	8000fb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <HAL_UART_Transmit+0x2c>
 8000ed2:	88fb      	ldrh	r3, [r7, #6]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e06e      	b.n	8000fba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	2221      	movs	r2, #33	@ 0x21
 8000ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000eea:	f7ff fc9d 	bl	8000828 <HAL_GetTick>
 8000eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	88fa      	ldrh	r2, [r7, #6]
 8000ef4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	88fa      	ldrh	r2, [r7, #6]
 8000efa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f04:	d108      	bne.n	8000f18 <HAL_UART_Transmit+0x6c>
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d104      	bne.n	8000f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	e003      	b.n	8000f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000f20:	e02e      	b.n	8000f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f000 f8df 	bl	80010f0 <UART_WaitOnFlagUntilTimeout>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d005      	beq.n	8000f44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2220      	movs	r2, #32
 8000f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8000f40:	2303      	movs	r3, #3
 8000f42:	e03a      	b.n	8000fba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10b      	bne.n	8000f62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	e007      	b.n	8000f72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d1cb      	bne.n	8000f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2200      	movs	r2, #0
 8000f92:	2140      	movs	r1, #64	@ 0x40
 8000f94:	68f8      	ldr	r0, [r7, #12]
 8000f96:	f000 f8ab 	bl	80010f0 <UART_WaitOnFlagUntilTimeout>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d005      	beq.n	8000fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e006      	b.n	8000fba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2220      	movs	r2, #32
 8000fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e000      	b.n	8000fba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8000fb8:	2302      	movs	r3, #2
  }
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b08a      	sub	sp, #40	@ 0x28
 8000fc6:	af02      	add	r7, sp, #8
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b20      	cmp	r3, #32
 8000fe0:	f040 8081 	bne.w	80010e6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <HAL_UART_Receive+0x2e>
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e079      	b.n	80010e8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2222      	movs	r2, #34	@ 0x22
 8000ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2200      	movs	r2, #0
 8001006:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001008:	f7ff fc0e 	bl	8000828 <HAL_GetTick>
 800100c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	88fa      	ldrh	r2, [r7, #6]
 8001018:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001022:	d108      	bne.n	8001036 <HAL_UART_Receive+0x74>
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	691b      	ldr	r3, [r3, #16]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d104      	bne.n	8001036 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	61bb      	str	r3, [r7, #24]
 8001034:	e003      	b.n	800103e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800103e:	e047      	b.n	80010d0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2200      	movs	r2, #0
 8001048:	2120      	movs	r1, #32
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 f850 	bl	80010f0 <UART_WaitOnFlagUntilTimeout>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d005      	beq.n	8001062 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2220      	movs	r2, #32
 800105a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e042      	b.n	80010e8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10c      	bne.n	8001082 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	b29b      	uxth	r3, r3
 8001070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001074:	b29a      	uxth	r2, r3
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	3302      	adds	r3, #2
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	e01f      	b.n	80010c2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800108a:	d007      	beq.n	800109c <HAL_UART_Receive+0xda>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d10a      	bne.n	80010aa <HAL_UART_Receive+0xe8>
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d106      	bne.n	80010aa <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e008      	b.n	80010bc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	3301      	adds	r3, #1
 80010c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	3b01      	subs	r3, #1
 80010ca:	b29a      	uxth	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1b2      	bne.n	8001040 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2220      	movs	r2, #32
 80010de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e000      	b.n	80010e8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80010e6:	2302      	movs	r3, #2
  }
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	603b      	str	r3, [r7, #0]
 80010fc:	4613      	mov	r3, r2
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001100:	e03b      	b.n	800117a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001102:	6a3b      	ldr	r3, [r7, #32]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001108:	d037      	beq.n	800117a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800110a:	f7ff fb8d 	bl	8000828 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	6a3a      	ldr	r2, [r7, #32]
 8001116:	429a      	cmp	r2, r3
 8001118:	d302      	bcc.n	8001120 <UART_WaitOnFlagUntilTimeout+0x30>
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e03a      	b.n	800119a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	2b00      	cmp	r3, #0
 8001130:	d023      	beq.n	800117a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b80      	cmp	r3, #128	@ 0x80
 8001136:	d020      	beq.n	800117a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b40      	cmp	r3, #64	@ 0x40
 800113c:	d01d      	beq.n	800117a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	2b08      	cmp	r3, #8
 800114a:	d116      	bne.n	800117a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 f81d 	bl	80011a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2208      	movs	r2, #8
 800116c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e00f      	b.n	800119a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4013      	ands	r3, r2
 8001184:	68ba      	ldr	r2, [r7, #8]
 8001186:	429a      	cmp	r2, r3
 8001188:	bf0c      	ite	eq
 800118a:	2301      	moveq	r3, #1
 800118c:	2300      	movne	r3, #0
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	429a      	cmp	r2, r3
 8001196:	d0b4      	beq.n	8001102 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b095      	sub	sp, #84	@ 0x54
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	330c      	adds	r3, #12
 80011b0:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011b4:	e853 3f00 	ldrex	r3, [r3]
 80011b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80011ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80011bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80011c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	330c      	adds	r3, #12
 80011c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011ca:	643a      	str	r2, [r7, #64]	@ 0x40
 80011cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80011d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80011d2:	e841 2300 	strex	r3, r2, [r1]
 80011d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80011d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1e5      	bne.n	80011aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3314      	adds	r3, #20
 80011e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011e6:	6a3b      	ldr	r3, [r7, #32]
 80011e8:	e853 3f00 	ldrex	r3, [r3]
 80011ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	f023 0301 	bic.w	r3, r3, #1
 80011f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	3314      	adds	r3, #20
 80011fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80011fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001206:	e841 2300 	strex	r3, r2, [r1]
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1e5      	bne.n	80011de <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	2b01      	cmp	r3, #1
 8001218:	d119      	bne.n	800124e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	330c      	adds	r3, #12
 8001220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	e853 3f00 	ldrex	r3, [r3]
 8001228:	60bb      	str	r3, [r7, #8]
   return(result);
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	f023 0310 	bic.w	r3, r3, #16
 8001230:	647b      	str	r3, [r7, #68]	@ 0x44
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	330c      	adds	r3, #12
 8001238:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800123a:	61ba      	str	r2, [r7, #24]
 800123c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800123e:	6979      	ldr	r1, [r7, #20]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	e841 2300 	strex	r3, r2, [r1]
 8001246:	613b      	str	r3, [r7, #16]
   return(result);
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1e5      	bne.n	800121a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2220      	movs	r2, #32
 8001252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800125c:	bf00      	nop
 800125e:	3754      	adds	r7, #84	@ 0x54
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800126c:	b0c0      	sub	sp, #256	@ 0x100
 800126e:	af00      	add	r7, sp, #0
 8001270:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001284:	68d9      	ldr	r1, [r3, #12]
 8001286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	ea40 0301 	orr.w	r3, r0, r1
 8001290:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800129c:	691b      	ldr	r3, [r3, #16]
 800129e:	431a      	orrs	r2, r3
 80012a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	431a      	orrs	r2, r3
 80012a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80012b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80012c0:	f021 010c 	bic.w	r1, r1, #12
 80012c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80012ce:	430b      	orrs	r3, r1
 80012d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80012d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80012de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012e2:	6999      	ldr	r1, [r3, #24]
 80012e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	ea40 0301 	orr.w	r3, r0, r1
 80012ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80012f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4b8f      	ldr	r3, [pc, #572]	@ (8001534 <UART_SetConfig+0x2cc>)
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d005      	beq.n	8001308 <UART_SetConfig+0xa0>
 80012fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4b8d      	ldr	r3, [pc, #564]	@ (8001538 <UART_SetConfig+0x2d0>)
 8001304:	429a      	cmp	r2, r3
 8001306:	d104      	bne.n	8001312 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001308:	f7ff fd6c 	bl	8000de4 <HAL_RCC_GetPCLK2Freq>
 800130c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001310:	e003      	b.n	800131a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001312:	f7ff fd53 	bl	8000dbc <HAL_RCC_GetPCLK1Freq>
 8001316:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800131a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800131e:	69db      	ldr	r3, [r3, #28]
 8001320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001324:	f040 810c 	bne.w	8001540 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800132c:	2200      	movs	r2, #0
 800132e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001332:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001336:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800133a:	4622      	mov	r2, r4
 800133c:	462b      	mov	r3, r5
 800133e:	1891      	adds	r1, r2, r2
 8001340:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001342:	415b      	adcs	r3, r3
 8001344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001346:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800134a:	4621      	mov	r1, r4
 800134c:	eb12 0801 	adds.w	r8, r2, r1
 8001350:	4629      	mov	r1, r5
 8001352:	eb43 0901 	adc.w	r9, r3, r1
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800136a:	4690      	mov	r8, r2
 800136c:	4699      	mov	r9, r3
 800136e:	4623      	mov	r3, r4
 8001370:	eb18 0303 	adds.w	r3, r8, r3
 8001374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001378:	462b      	mov	r3, r5
 800137a:	eb49 0303 	adc.w	r3, r9, r3
 800137e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800138e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001396:	460b      	mov	r3, r1
 8001398:	18db      	adds	r3, r3, r3
 800139a:	653b      	str	r3, [r7, #80]	@ 0x50
 800139c:	4613      	mov	r3, r2
 800139e:	eb42 0303 	adc.w	r3, r2, r3
 80013a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80013a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80013a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80013ac:	f7fe ff2a 	bl	8000204 <__aeabi_uldivmod>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	4b61      	ldr	r3, [pc, #388]	@ (800153c <UART_SetConfig+0x2d4>)
 80013b6:	fba3 2302 	umull	r2, r3, r3, r2
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	011c      	lsls	r4, r3, #4
 80013be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013c2:	2200      	movs	r2, #0
 80013c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80013c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80013cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80013d0:	4642      	mov	r2, r8
 80013d2:	464b      	mov	r3, r9
 80013d4:	1891      	adds	r1, r2, r2
 80013d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80013d8:	415b      	adcs	r3, r3
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80013e0:	4641      	mov	r1, r8
 80013e2:	eb12 0a01 	adds.w	sl, r2, r1
 80013e6:	4649      	mov	r1, r9
 80013e8:	eb43 0b01 	adc.w	fp, r3, r1
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001400:	4692      	mov	sl, r2
 8001402:	469b      	mov	fp, r3
 8001404:	4643      	mov	r3, r8
 8001406:	eb1a 0303 	adds.w	r3, sl, r3
 800140a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800140e:	464b      	mov	r3, r9
 8001410:	eb4b 0303 	adc.w	r3, fp, r3
 8001414:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001424:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001428:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800142c:	460b      	mov	r3, r1
 800142e:	18db      	adds	r3, r3, r3
 8001430:	643b      	str	r3, [r7, #64]	@ 0x40
 8001432:	4613      	mov	r3, r2
 8001434:	eb42 0303 	adc.w	r3, r2, r3
 8001438:	647b      	str	r3, [r7, #68]	@ 0x44
 800143a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800143e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001442:	f7fe fedf 	bl	8000204 <__aeabi_uldivmod>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4611      	mov	r1, r2
 800144c:	4b3b      	ldr	r3, [pc, #236]	@ (800153c <UART_SetConfig+0x2d4>)
 800144e:	fba3 2301 	umull	r2, r3, r3, r1
 8001452:	095b      	lsrs	r3, r3, #5
 8001454:	2264      	movs	r2, #100	@ 0x64
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	1acb      	subs	r3, r1, r3
 800145c:	00db      	lsls	r3, r3, #3
 800145e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001462:	4b36      	ldr	r3, [pc, #216]	@ (800153c <UART_SetConfig+0x2d4>)
 8001464:	fba3 2302 	umull	r2, r3, r3, r2
 8001468:	095b      	lsrs	r3, r3, #5
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001470:	441c      	add	r4, r3
 8001472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001476:	2200      	movs	r2, #0
 8001478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800147c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001480:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001484:	4642      	mov	r2, r8
 8001486:	464b      	mov	r3, r9
 8001488:	1891      	adds	r1, r2, r2
 800148a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800148c:	415b      	adcs	r3, r3
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001494:	4641      	mov	r1, r8
 8001496:	1851      	adds	r1, r2, r1
 8001498:	6339      	str	r1, [r7, #48]	@ 0x30
 800149a:	4649      	mov	r1, r9
 800149c:	414b      	adcs	r3, r1
 800149e:	637b      	str	r3, [r7, #52]	@ 0x34
 80014a0:	f04f 0200 	mov.w	r2, #0
 80014a4:	f04f 0300 	mov.w	r3, #0
 80014a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80014ac:	4659      	mov	r1, fp
 80014ae:	00cb      	lsls	r3, r1, #3
 80014b0:	4651      	mov	r1, sl
 80014b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014b6:	4651      	mov	r1, sl
 80014b8:	00ca      	lsls	r2, r1, #3
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	4603      	mov	r3, r0
 80014c0:	4642      	mov	r2, r8
 80014c2:	189b      	adds	r3, r3, r2
 80014c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80014c8:	464b      	mov	r3, r9
 80014ca:	460a      	mov	r2, r1
 80014cc:	eb42 0303 	adc.w	r3, r2, r3
 80014d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80014d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80014e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80014e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80014e8:	460b      	mov	r3, r1
 80014ea:	18db      	adds	r3, r3, r3
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ee:	4613      	mov	r3, r2
 80014f0:	eb42 0303 	adc.w	r3, r2, r3
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80014fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80014fe:	f7fe fe81 	bl	8000204 <__aeabi_uldivmod>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4b0d      	ldr	r3, [pc, #52]	@ (800153c <UART_SetConfig+0x2d4>)
 8001508:	fba3 1302 	umull	r1, r3, r3, r2
 800150c:	095b      	lsrs	r3, r3, #5
 800150e:	2164      	movs	r1, #100	@ 0x64
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	3332      	adds	r3, #50	@ 0x32
 800151a:	4a08      	ldr	r2, [pc, #32]	@ (800153c <UART_SetConfig+0x2d4>)
 800151c:	fba2 2303 	umull	r2, r3, r2, r3
 8001520:	095b      	lsrs	r3, r3, #5
 8001522:	f003 0207 	and.w	r2, r3, #7
 8001526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4422      	add	r2, r4
 800152e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001530:	e106      	b.n	8001740 <UART_SetConfig+0x4d8>
 8001532:	bf00      	nop
 8001534:	40011000 	.word	0x40011000
 8001538:	40011400 	.word	0x40011400
 800153c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001544:	2200      	movs	r2, #0
 8001546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800154a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800154e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001552:	4642      	mov	r2, r8
 8001554:	464b      	mov	r3, r9
 8001556:	1891      	adds	r1, r2, r2
 8001558:	6239      	str	r1, [r7, #32]
 800155a:	415b      	adcs	r3, r3
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
 800155e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001562:	4641      	mov	r1, r8
 8001564:	1854      	adds	r4, r2, r1
 8001566:	4649      	mov	r1, r9
 8001568:	eb43 0501 	adc.w	r5, r3, r1
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	00eb      	lsls	r3, r5, #3
 8001576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800157a:	00e2      	lsls	r2, r4, #3
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	4643      	mov	r3, r8
 8001582:	18e3      	adds	r3, r4, r3
 8001584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001588:	464b      	mov	r3, r9
 800158a:	eb45 0303 	adc.w	r3, r5, r3
 800158e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800159e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015ae:	4629      	mov	r1, r5
 80015b0:	008b      	lsls	r3, r1, #2
 80015b2:	4621      	mov	r1, r4
 80015b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015b8:	4621      	mov	r1, r4
 80015ba:	008a      	lsls	r2, r1, #2
 80015bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80015c0:	f7fe fe20 	bl	8000204 <__aeabi_uldivmod>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4b60      	ldr	r3, [pc, #384]	@ (800174c <UART_SetConfig+0x4e4>)
 80015ca:	fba3 2302 	umull	r2, r3, r3, r2
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	011c      	lsls	r4, r3, #4
 80015d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015d6:	2200      	movs	r2, #0
 80015d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80015e4:	4642      	mov	r2, r8
 80015e6:	464b      	mov	r3, r9
 80015e8:	1891      	adds	r1, r2, r2
 80015ea:	61b9      	str	r1, [r7, #24]
 80015ec:	415b      	adcs	r3, r3
 80015ee:	61fb      	str	r3, [r7, #28]
 80015f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80015f4:	4641      	mov	r1, r8
 80015f6:	1851      	adds	r1, r2, r1
 80015f8:	6139      	str	r1, [r7, #16]
 80015fa:	4649      	mov	r1, r9
 80015fc:	414b      	adcs	r3, r1
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800160c:	4659      	mov	r1, fp
 800160e:	00cb      	lsls	r3, r1, #3
 8001610:	4651      	mov	r1, sl
 8001612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001616:	4651      	mov	r1, sl
 8001618:	00ca      	lsls	r2, r1, #3
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	4603      	mov	r3, r0
 8001620:	4642      	mov	r2, r8
 8001622:	189b      	adds	r3, r3, r2
 8001624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001628:	464b      	mov	r3, r9
 800162a:	460a      	mov	r2, r1
 800162c:	eb42 0303 	adc.w	r3, r2, r3
 8001630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800163e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800164c:	4649      	mov	r1, r9
 800164e:	008b      	lsls	r3, r1, #2
 8001650:	4641      	mov	r1, r8
 8001652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001656:	4641      	mov	r1, r8
 8001658:	008a      	lsls	r2, r1, #2
 800165a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800165e:	f7fe fdd1 	bl	8000204 <__aeabi_uldivmod>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4611      	mov	r1, r2
 8001668:	4b38      	ldr	r3, [pc, #224]	@ (800174c <UART_SetConfig+0x4e4>)
 800166a:	fba3 2301 	umull	r2, r3, r3, r1
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	2264      	movs	r2, #100	@ 0x64
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	1acb      	subs	r3, r1, r3
 8001678:	011b      	lsls	r3, r3, #4
 800167a:	3332      	adds	r3, #50	@ 0x32
 800167c:	4a33      	ldr	r2, [pc, #204]	@ (800174c <UART_SetConfig+0x4e4>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001688:	441c      	add	r4, r3
 800168a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800168e:	2200      	movs	r2, #0
 8001690:	673b      	str	r3, [r7, #112]	@ 0x70
 8001692:	677a      	str	r2, [r7, #116]	@ 0x74
 8001694:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001698:	4642      	mov	r2, r8
 800169a:	464b      	mov	r3, r9
 800169c:	1891      	adds	r1, r2, r2
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	415b      	adcs	r3, r3
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016a8:	4641      	mov	r1, r8
 80016aa:	1851      	adds	r1, r2, r1
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	4649      	mov	r1, r9
 80016b0:	414b      	adcs	r3, r1
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80016c0:	4659      	mov	r1, fp
 80016c2:	00cb      	lsls	r3, r1, #3
 80016c4:	4651      	mov	r1, sl
 80016c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016ca:	4651      	mov	r1, sl
 80016cc:	00ca      	lsls	r2, r1, #3
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	4603      	mov	r3, r0
 80016d4:	4642      	mov	r2, r8
 80016d6:	189b      	adds	r3, r3, r2
 80016d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016da:	464b      	mov	r3, r9
 80016dc:	460a      	mov	r2, r1
 80016de:	eb42 0303 	adc.w	r3, r2, r3
 80016e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80016e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80016ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80016fc:	4649      	mov	r1, r9
 80016fe:	008b      	lsls	r3, r1, #2
 8001700:	4641      	mov	r1, r8
 8001702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001706:	4641      	mov	r1, r8
 8001708:	008a      	lsls	r2, r1, #2
 800170a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800170e:	f7fe fd79 	bl	8000204 <__aeabi_uldivmod>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <UART_SetConfig+0x4e4>)
 8001718:	fba3 1302 	umull	r1, r3, r3, r2
 800171c:	095b      	lsrs	r3, r3, #5
 800171e:	2164      	movs	r1, #100	@ 0x64
 8001720:	fb01 f303 	mul.w	r3, r1, r3
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	011b      	lsls	r3, r3, #4
 8001728:	3332      	adds	r3, #50	@ 0x32
 800172a:	4a08      	ldr	r2, [pc, #32]	@ (800174c <UART_SetConfig+0x4e4>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	095b      	lsrs	r3, r3, #5
 8001732:	f003 020f 	and.w	r2, r3, #15
 8001736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4422      	add	r2, r4
 800173e:	609a      	str	r2, [r3, #8]
}
 8001740:	bf00      	nop
 8001742:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001746:	46bd      	mov	sp, r7
 8001748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800174c:	51eb851f 	.word	0x51eb851f

08001750 <__libc_init_array>:
 8001750:	b570      	push	{r4, r5, r6, lr}
 8001752:	4d0d      	ldr	r5, [pc, #52]	@ (8001788 <__libc_init_array+0x38>)
 8001754:	4c0d      	ldr	r4, [pc, #52]	@ (800178c <__libc_init_array+0x3c>)
 8001756:	1b64      	subs	r4, r4, r5
 8001758:	10a4      	asrs	r4, r4, #2
 800175a:	2600      	movs	r6, #0
 800175c:	42a6      	cmp	r6, r4
 800175e:	d109      	bne.n	8001774 <__libc_init_array+0x24>
 8001760:	4d0b      	ldr	r5, [pc, #44]	@ (8001790 <__libc_init_array+0x40>)
 8001762:	4c0c      	ldr	r4, [pc, #48]	@ (8001794 <__libc_init_array+0x44>)
 8001764:	f000 f818 	bl	8001798 <_init>
 8001768:	1b64      	subs	r4, r4, r5
 800176a:	10a4      	asrs	r4, r4, #2
 800176c:	2600      	movs	r6, #0
 800176e:	42a6      	cmp	r6, r4
 8001770:	d105      	bne.n	800177e <__libc_init_array+0x2e>
 8001772:	bd70      	pop	{r4, r5, r6, pc}
 8001774:	f855 3b04 	ldr.w	r3, [r5], #4
 8001778:	4798      	blx	r3
 800177a:	3601      	adds	r6, #1
 800177c:	e7ee      	b.n	800175c <__libc_init_array+0xc>
 800177e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001782:	4798      	blx	r3
 8001784:	3601      	adds	r6, #1
 8001786:	e7f2      	b.n	800176e <__libc_init_array+0x1e>
 8001788:	080017c0 	.word	0x080017c0
 800178c:	080017c0 	.word	0x080017c0
 8001790:	080017c0 	.word	0x080017c0
 8001794:	080017c4 	.word	0x080017c4

08001798 <_init>:
 8001798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800179a:	bf00      	nop
 800179c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179e:	bc08      	pop	{r3}
 80017a0:	469e      	mov	lr, r3
 80017a2:	4770      	bx	lr

080017a4 <_fini>:
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a6:	bf00      	nop
 80017a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017aa:	bc08      	pop	{r3}
 80017ac:	469e      	mov	lr, r3
 80017ae:	4770      	bx	lr
