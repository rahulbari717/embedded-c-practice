
005_UART2_InterruptBased.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ca4  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001e68  08001e68  00002e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e70  08001e70  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001e70  08001e70  00002e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e78  08001e78  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e78  08001e78  00002e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001e7c  08001e7c  00002e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001e80  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001e8c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001e8c  00003078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007f13  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000156a  00000000  00000000  0000af4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  0000c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f1  00000000  00000000  0000cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b99  00000000  00000000  0000d029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007be0  00000000  00000000  0002dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c783f  00000000  00000000  000357a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcfe1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001980  00000000  00000000  000fd024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000fe9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001e50 	.word	0x08001e50

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001e50 	.word	0x08001e50

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <SysTick_Handler>:
#include "main.h"

extern UART_HandleTypeDef huart2;


void SysTick_Handler(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000534:	f000 f952 	bl	80007dc <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000538:	f000 fa81 	bl	8000a3e <HAL_SYSTICK_IRQHandler>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <USART2_IRQHandler+0x10>)
 8000546:	f000 fd57 	bl	8000ff8 <HAL_UART_IRQHandler>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <SystemClockConfig>:
uint8_t data_buffer[100];
uint8_t received_data;
uint32_t count = 0;
uint8_t reception_complete = FALSE;

void SystemClockConfig(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <Error_handler>:
	}


}

void Error_handler(void){
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0
	while(1);
 8000566:	bf00      	nop
 8000568:	e7fd      	b.n	8000566 <Error_handler+0x4>
	...

0800056c <UART2_Init>:
}


void UART2_Init(){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000570:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <UART2_Init+0x44>)
 8000572:	4a10      	ldr	r2, [pc, #64]	@ (80005b4 <UART2_Init+0x48>)
 8000574:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000576:	4b0e      	ldr	r3, [pc, #56]	@ (80005b0 <UART2_Init+0x44>)
 8000578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800057c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <UART2_Init+0x44>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <UART2_Init+0x44>)
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <UART2_Init+0x44>)
 800058c:	2200      	movs	r2, #0
 800058e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000590:	4b07      	ldr	r3, [pc, #28]	@ (80005b0 <UART2_Init+0x44>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <UART2_Init+0x44>)
 8000598:	220c      	movs	r2, #12
 800059a:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 800059c:	4804      	ldr	r0, [pc, #16]	@ (80005b0 <UART2_Init+0x44>)
 800059e:	f000 fcb5 	bl	8000f0c <HAL_UART_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <UART2_Init+0x40>
		// there is problem
		Error_handler();
 80005a8:	f7ff ffdb 	bl	8000562 <Error_handler>

	}
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000028 	.word	0x20000028
 80005b4:	40004400 	.word	0x40004400

080005b8 <main>:

int main(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	HAL_Init();
 80005bc:	f000 f8bc 	bl	8000738 <HAL_Init>
	SystemClockConfig();
 80005c0:	f7ff ffc8 	bl	8000554 <SystemClockConfig>
	UART2_Init();
 80005c4:	f7ff ffd2 	bl	800056c <UART2_Init>
	// uint16_t len_of_data = strlen(user_data);
//	if (HAL_UART_Transmit(&huart2, (uint8_t *) user_data, len_of_data, HAL_MAX_DELAY) != HAL_OK) {
//		Error_handler();
//	}

	while(reception_complete != TRUE)
 80005c8:	e004      	b.n	80005d4 <main+0x1c>
		HAL_UART_Receive_IT(&huart2, &received_data, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	4904      	ldr	r1, [pc, #16]	@ (80005e0 <main+0x28>)
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <main+0x2c>)
 80005d0:	f000 fcec 	bl	8000fac <HAL_UART_Receive_IT>
	while(reception_complete != TRUE)
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <main+0x30>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d1f6      	bne.n	80005ca <main+0x12>

	while(1);
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <main+0x24>
 80005e0:	20000070 	.word	0x20000070
 80005e4:	20000028 	.word	0x20000028
 80005e8:	20000071 	.word	0x20000071

080005ec <HAL_MspInit>:

#include "stm32f4xx_hal.h"


void HAL_MspInit(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	//  NOTE : The HAL_MspInit could be implemented in the user file

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f0:	2003      	movs	r0, #3
 80005f2:	f000 f9e3 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>
	// 2. Enable the required system exception of arm cortex mx processor
	SCB ->SHCSR |= 0x7 << 16; // usg fault, memory fault, and bus fault, system exception.
 80005f6:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <HAL_MspInit+0x40>)
 80005f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005fa:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <HAL_MspInit+0x40>)
 80005fc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000600:	6253      	str	r3, [r2, #36]	@ 0x24
	// 3. configure the priority fro the system exception.
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	2100      	movs	r1, #0
 8000606:	f06f 000b 	mvn.w	r0, #11
 800060a:	f000 f9e2 	bl	80009d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	f06f 000a 	mvn.w	r0, #10
 8000616:	f000 f9dc 	bl	80009d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	f06f 0009 	mvn.w	r0, #9
 8000622:	f000 f9d6 	bl	80009d2 <HAL_NVIC_SetPriority>

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	// here we are going to do low level inits of uart2
	GPIO_InitTypeDef gpio_uart;
	// 1. enable the clock for USART2
	__HAL_RCC_USART2_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <HAL_UART_MspInit+0x88>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a1d      	ldr	r2, [pc, #116]	@ (80006b8 <HAL_UART_MspInit+0x88>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <HAL_UART_MspInit+0x88>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
 8000658:	4b17      	ldr	r3, [pc, #92]	@ (80006b8 <HAL_UART_MspInit+0x88>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065c:	4a16      	ldr	r2, [pc, #88]	@ (80006b8 <HAL_UART_MspInit+0x88>)
 800065e:	f043 0301 	orr.w	r3, r3, #1
 8000662:	6313      	str	r3, [r2, #48]	@ 0x30
 8000664:	4b14      	ldr	r3, [pc, #80]	@ (80006b8 <HAL_UART_MspInit+0x88>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000668:	f003 0301 	and.w	r3, r3, #1
 800066c:	60fb      	str	r3, [r7, #12]
 800066e:	68fb      	ldr	r3, [r7, #12]
	// 2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;
 8000670:	2304      	movs	r3, #4
 8000672:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000674:	2302      	movs	r3, #2
 8000676:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000678:	2301      	movs	r3, #1
 800067a:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 800067c:	2300      	movs	r3, #0
 800067e:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;				// UART2_TX
 8000680:	2307      	movs	r3, #7
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	4619      	mov	r1, r3
 800068a:	480c      	ldr	r0, [pc, #48]	@ (80006bc <HAL_UART_MspInit+0x8c>)
 800068c:	f000 fa76 	bl	8000b7c <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;							// UART2_RX
 8000690:	2308      	movs	r3, #8
 8000692:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	4808      	ldr	r0, [pc, #32]	@ (80006bc <HAL_UART_MspInit+0x8c>)
 800069c:	f000 fa6e 	bl	8000b7c <HAL_GPIO_Init>
	// 3. Enable the IRQ and set up the priority (NVIC)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 80006a0:	2026      	movs	r0, #38	@ 0x26
 80006a2:	f000 f9b2 	bl	8000a0a <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	210f      	movs	r1, #15
 80006aa:	2026      	movs	r0, #38	@ 0x26
 80006ac:	f000 f991 	bl	80009d2 <HAL_NVIC_SetPriority>
}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	@ 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000

080006c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <SystemInit+0x20>)
 80006c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ca:	4a05      	ldr	r2, [pc, #20]	@ (80006e0 <SystemInit+0x20>)
 80006cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800071c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80006e8:	f7ff ffea 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006ec:	480c      	ldr	r0, [pc, #48]	@ (8000720 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80006ee:	490d      	ldr	r1, [pc, #52]	@ (8000724 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f4:	e002      	b.n	80006fc <LoopCopyDataInit>

080006f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fa:	3304      	adds	r3, #4

080006fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000700:	d3f9      	bcc.n	80006f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000704:	4c0a      	ldr	r4, [pc, #40]	@ (8000730 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000706:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000708:	e001      	b.n	800070e <LoopFillZerobss>

0800070a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800070c:	3204      	adds	r2, #4

0800070e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800070e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000710:	d3fb      	bcc.n	800070a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000712:	f001 fb79 	bl	8001e08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000716:	f7ff ff4f 	bl	80005b8 <main>
  bx  lr    
 800071a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800071c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000728:	08001e80 	.word	0x08001e80
  ldr r2, =_sbss
 800072c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000730:	20000078 	.word	0x20000078

08000734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800073c:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <HAL_Init+0x40>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a0d      	ldr	r2, [pc, #52]	@ (8000778 <HAL_Init+0x40>)
 8000742:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000746:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000748:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <HAL_Init+0x40>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0a      	ldr	r2, [pc, #40]	@ (8000778 <HAL_Init+0x40>)
 800074e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000752:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_Init+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_Init+0x40>)
 800075a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800075e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f92b 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	2000      	movs	r0, #0
 8000768:	f000 f808 	bl	800077c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff ff3e 	bl	80005ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40023c00 	.word	0x40023c00

0800077c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <HAL_InitTick+0x54>)
 8000786:	681a      	ldr	r2, [r3, #0]
 8000788:	4b12      	ldr	r3, [pc, #72]	@ (80007d4 <HAL_InitTick+0x58>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	4619      	mov	r1, r3
 800078e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000792:	fbb3 f3f1 	udiv	r3, r3, r1
 8000796:	fbb2 f3f3 	udiv	r3, r2, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f943 	bl	8000a26 <HAL_SYSTICK_Config>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00e      	b.n	80007c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	d80a      	bhi.n	80007c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b0:	2200      	movs	r2, #0
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007b8:	f000 f90b 	bl	80009d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007bc:	4a06      	ldr	r2, [pc, #24]	@ (80007d8 <HAL_InitTick+0x5c>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007c2:	2300      	movs	r3, #0
 80007c4:	e000      	b.n	80007c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007c6:	2301      	movs	r3, #1
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000008 	.word	0x20000008
 80007d8:	20000004 	.word	0x20000004

080007dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <HAL_IncTick+0x20>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <HAL_IncTick+0x24>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <HAL_IncTick+0x24>)
 80007ee:	6013      	str	r3, [r2, #0]
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000074 	.word	0x20000074

08000804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  return uwTick;
 8000808:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <HAL_GetTick+0x14>)
 800080a:	681b      	ldr	r3, [r3, #0]
}
 800080c:	4618      	mov	r0, r3
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	20000074 	.word	0x20000074

0800081c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800082c:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000832:	68ba      	ldr	r2, [r7, #8]
 8000834:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000838:	4013      	ands	r3, r2
 800083a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000844:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800084c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800084e:	4a04      	ldr	r2, [pc, #16]	@ (8000860 <__NVIC_SetPriorityGrouping+0x44>)
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	60d3      	str	r3, [r2, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000ed00 	.word	0xe000ed00

08000864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000868:	4b04      	ldr	r3, [pc, #16]	@ (800087c <__NVIC_GetPriorityGrouping+0x18>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	0a1b      	lsrs	r3, r3, #8
 800086e:	f003 0307 	and.w	r3, r3, #7
}
 8000872:	4618      	mov	r0, r3
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	2b00      	cmp	r3, #0
 8000890:	db0b      	blt.n	80008aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	f003 021f 	and.w	r2, r3, #31
 8000898:	4907      	ldr	r1, [pc, #28]	@ (80008b8 <__NVIC_EnableIRQ+0x38>)
 800089a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800089e:	095b      	lsrs	r3, r3, #5
 80008a0:	2001      	movs	r0, #1
 80008a2:	fa00 f202 	lsl.w	r2, r0, r2
 80008a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100

080008bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	6039      	str	r1, [r7, #0]
 80008c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	db0a      	blt.n	80008e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	490c      	ldr	r1, [pc, #48]	@ (8000908 <__NVIC_SetPriority+0x4c>)
 80008d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	b2d2      	uxtb	r2, r2
 80008de:	440b      	add	r3, r1
 80008e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008e4:	e00a      	b.n	80008fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	4908      	ldr	r1, [pc, #32]	@ (800090c <__NVIC_SetPriority+0x50>)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	f003 030f 	and.w	r3, r3, #15
 80008f2:	3b04      	subs	r3, #4
 80008f4:	0112      	lsls	r2, r2, #4
 80008f6:	b2d2      	uxtb	r2, r2
 80008f8:	440b      	add	r3, r1
 80008fa:	761a      	strb	r2, [r3, #24]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000e100 	.word	0xe000e100
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000910:	b480      	push	{r7}
 8000912:	b089      	sub	sp, #36	@ 0x24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000924:	69fb      	ldr	r3, [r7, #28]
 8000926:	f1c3 0307 	rsb	r3, r3, #7
 800092a:	2b04      	cmp	r3, #4
 800092c:	bf28      	it	cs
 800092e:	2304      	movcs	r3, #4
 8000930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	3304      	adds	r3, #4
 8000936:	2b06      	cmp	r3, #6
 8000938:	d902      	bls.n	8000940 <NVIC_EncodePriority+0x30>
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	3b03      	subs	r3, #3
 800093e:	e000      	b.n	8000942 <NVIC_EncodePriority+0x32>
 8000940:	2300      	movs	r3, #0
 8000942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43da      	mvns	r2, r3
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	401a      	ands	r2, r3
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000958:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	43d9      	mvns	r1, r3
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	4313      	orrs	r3, r2
         );
}
 800096a:	4618      	mov	r0, r3
 800096c:	3724      	adds	r7, #36	@ 0x24
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000988:	d301      	bcc.n	800098e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800098a:	2301      	movs	r3, #1
 800098c:	e00f      	b.n	80009ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800098e:	4a0a      	ldr	r2, [pc, #40]	@ (80009b8 <SysTick_Config+0x40>)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	3b01      	subs	r3, #1
 8000994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000996:	210f      	movs	r1, #15
 8000998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800099c:	f7ff ff8e 	bl	80008bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009a0:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <SysTick_Config+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009a6:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <SysTick_Config+0x40>)
 80009a8:	2207      	movs	r2, #7
 80009aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	e000e010 	.word	0xe000e010

080009bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff29 	bl	800081c <__NVIC_SetPriorityGrouping>
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b086      	sub	sp, #24
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	4603      	mov	r3, r0
 80009da:	60b9      	str	r1, [r7, #8]
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009e4:	f7ff ff3e 	bl	8000864 <__NVIC_GetPriorityGrouping>
 80009e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	6978      	ldr	r0, [r7, #20]
 80009f0:	f7ff ff8e 	bl	8000910 <NVIC_EncodePriority>
 80009f4:	4602      	mov	r2, r0
 80009f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009fa:	4611      	mov	r1, r2
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff5d 	bl	80008bc <__NVIC_SetPriority>
}
 8000a02:	bf00      	nop
 8000a04:	3718      	adds	r7, #24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	4603      	mov	r3, r0
 8000a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff ff31 	bl	8000880 <__NVIC_EnableIRQ>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f7ff ffa2 	bl	8000978 <SysTick_Config>
 8000a34:	4603      	mov	r3, r0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000a42:	f000 f802 	bl	8000a4a <HAL_SYSTICK_Callback>
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a64:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000a66:	f7ff fecd 	bl	8000804 <HAL_GetTick>
 8000a6a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d008      	beq.n	8000a8a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2200      	movs	r2, #0
 8000a82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e052      	b.n	8000b30 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f022 0216 	bic.w	r2, r2, #22
 8000a98:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000aa8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d103      	bne.n	8000aba <HAL_DMA_Abort+0x62>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d007      	beq.n	8000aca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f022 0208 	bic.w	r2, r2, #8
 8000ac8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0201 	bic.w	r2, r2, #1
 8000ad8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ada:	e013      	b.n	8000b04 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000adc:	f7ff fe92 	bl	8000804 <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	2b05      	cmp	r3, #5
 8000ae8:	d90c      	bls.n	8000b04 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2220      	movs	r2, #32
 8000aee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2203      	movs	r2, #3
 8000af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000b00:	2303      	movs	r3, #3
 8000b02:	e015      	b.n	8000b30 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d1e4      	bne.n	8000adc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000b16:	223f      	movs	r2, #63	@ 0x3f
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2201      	movs	r2, #1
 8000b22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000b2e:	2300      	movs	r3, #0
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3710      	adds	r7, #16
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d004      	beq.n	8000b56 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2280      	movs	r2, #128	@ 0x80
 8000b50:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e00c      	b.n	8000b70 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2205      	movs	r2, #5
 8000b5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f022 0201 	bic.w	r2, r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	61fb      	str	r3, [r7, #28]
 8000b96:	e165      	b.n	8000e64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b98:	2201      	movs	r2, #1
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	697a      	ldr	r2, [r7, #20]
 8000ba8:	4013      	ands	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	f040 8154 	bne.w	8000e5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	2b01      	cmp	r3, #1
 8000bc0:	d005      	beq.n	8000bce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bca:	2b02      	cmp	r3, #2
 8000bcc:	d130      	bne.n	8000c30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	2203      	movs	r2, #3
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	4013      	ands	r3, r2
 8000be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c04:	2201      	movs	r2, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	69ba      	ldr	r2, [r7, #24]
 8000c10:	4013      	ands	r3, r2
 8000c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	091b      	lsrs	r3, r3, #4
 8000c1a:	f003 0201 	and.w	r2, r3, #1
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	69ba      	ldr	r2, [r7, #24]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d017      	beq.n	8000c6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	2203      	movs	r2, #3
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	69ba      	ldr	r2, [r7, #24]
 8000c50:	4013      	ands	r3, r2
 8000c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0303 	and.w	r3, r3, #3
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d123      	bne.n	8000cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	08da      	lsrs	r2, r3, #3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3208      	adds	r2, #8
 8000c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	f003 0307 	and.w	r3, r3, #7
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	691a      	ldr	r2, [r3, #16]
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	08da      	lsrs	r2, r3, #3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	3208      	adds	r2, #8
 8000cba:	69b9      	ldr	r1, [r7, #24]
 8000cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	005b      	lsls	r3, r3, #1
 8000cca:	2203      	movs	r2, #3
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	69ba      	ldr	r2, [r7, #24]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0203 	and.w	r2, r3, #3
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	f000 80ae 	beq.w	8000e5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b5d      	ldr	r3, [pc, #372]	@ (8000e7c <HAL_GPIO_Init+0x300>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000e7c <HAL_GPIO_Init+0x300>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d12:	4b5a      	ldr	r3, [pc, #360]	@ (8000e7c <HAL_GPIO_Init+0x300>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d1e:	4a58      	ldr	r2, [pc, #352]	@ (8000e80 <HAL_GPIO_Init+0x304>)
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	089b      	lsrs	r3, r3, #2
 8000d24:	3302      	adds	r3, #2
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	220f      	movs	r2, #15
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a4f      	ldr	r2, [pc, #316]	@ (8000e84 <HAL_GPIO_Init+0x308>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d025      	beq.n	8000d96 <HAL_GPIO_Init+0x21a>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000e88 <HAL_GPIO_Init+0x30c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01f      	beq.n	8000d92 <HAL_GPIO_Init+0x216>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a4d      	ldr	r2, [pc, #308]	@ (8000e8c <HAL_GPIO_Init+0x310>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d019      	beq.n	8000d8e <HAL_GPIO_Init+0x212>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000e90 <HAL_GPIO_Init+0x314>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x20e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4b      	ldr	r2, [pc, #300]	@ (8000e94 <HAL_GPIO_Init+0x318>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00d      	beq.n	8000d86 <HAL_GPIO_Init+0x20a>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000e98 <HAL_GPIO_Init+0x31c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0x206>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a49      	ldr	r2, [pc, #292]	@ (8000e9c <HAL_GPIO_Init+0x320>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_Init+0x202>
 8000d7a:	2306      	movs	r3, #6
 8000d7c:	e00c      	b.n	8000d98 <HAL_GPIO_Init+0x21c>
 8000d7e:	2307      	movs	r3, #7
 8000d80:	e00a      	b.n	8000d98 <HAL_GPIO_Init+0x21c>
 8000d82:	2305      	movs	r3, #5
 8000d84:	e008      	b.n	8000d98 <HAL_GPIO_Init+0x21c>
 8000d86:	2304      	movs	r3, #4
 8000d88:	e006      	b.n	8000d98 <HAL_GPIO_Init+0x21c>
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	e004      	b.n	8000d98 <HAL_GPIO_Init+0x21c>
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e002      	b.n	8000d98 <HAL_GPIO_Init+0x21c>
 8000d92:	2301      	movs	r3, #1
 8000d94:	e000      	b.n	8000d98 <HAL_GPIO_Init+0x21c>
 8000d96:	2300      	movs	r3, #0
 8000d98:	69fa      	ldr	r2, [r7, #28]
 8000d9a:	f002 0203 	and.w	r2, r2, #3
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	4093      	lsls	r3, r2
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da8:	4935      	ldr	r1, [pc, #212]	@ (8000e80 <HAL_GPIO_Init+0x304>)
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	089b      	lsrs	r3, r3, #2
 8000dae:	3302      	adds	r3, #2
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69ba      	ldr	r2, [r7, #24]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dda:	4a31      	ldr	r2, [pc, #196]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de0:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4013      	ands	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d003      	beq.n	8000e04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e04:	4a26      	ldr	r2, [pc, #152]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	43db      	mvns	r3, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4013      	ands	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d003      	beq.n	8000e2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e26:	69ba      	ldr	r2, [r7, #24]
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e58:	4a11      	ldr	r2, [pc, #68]	@ (8000ea0 <HAL_GPIO_Init+0x324>)
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	3301      	adds	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b0f      	cmp	r3, #15
 8000e68:	f67f ae96 	bls.w	8000b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3724      	adds	r7, #36	@ 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40020000 	.word	0x40020000
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	40020c00 	.word	0x40020c00
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40021400 	.word	0x40021400
 8000e9c:	40021800 	.word	0x40021800
 8000ea0:	40013c00 	.word	0x40013c00

08000ea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000000 	.word	0x20000000

08000ebc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000ec0:	f7ff fff0 	bl	8000ea4 <HAL_RCC_GetHCLKFreq>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_RCC_GetPCLK1Freq+0x20>)
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	0a9b      	lsrs	r3, r3, #10
 8000ecc:	f003 0307 	and.w	r3, r3, #7
 8000ed0:	4903      	ldr	r1, [pc, #12]	@ (8000ee0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000ed2:	5ccb      	ldrb	r3, [r1, r3]
 8000ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	08001e68 	.word	0x08001e68

08000ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000ee8:	f7ff ffdc 	bl	8000ea4 <HAL_RCC_GetHCLKFreq>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	0b5b      	lsrs	r3, r3, #13
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	4903      	ldr	r1, [pc, #12]	@ (8000f08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000efa:	5ccb      	ldrb	r3, [r1, r3]
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40023800 	.word	0x40023800
 8000f08:	08001e68 	.word	0x08001e68

08000f0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d101      	bne.n	8000f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e042      	b.n	8000fa4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d106      	bne.n	8000f38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff fb7c 	bl	8000630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2224      	movs	r2, #36	@ 0x24
 8000f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000f4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f000 fce5 	bl	8001920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000f64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000f74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8000f84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2220      	movs	r2, #32
 8000f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b20      	cmp	r3, #32
 8000fc4:	d112      	bne.n	8000fec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d002      	beq.n	8000fd2 <HAL_UART_Receive_IT+0x26>
 8000fcc:	88fb      	ldrh	r3, [r7, #6]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e00b      	b.n	8000fee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	68f8      	ldr	r0, [r7, #12]
 8000fe4:	f000 fac4 	bl	8001570 <UART_Start_Receive_IT>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	e000      	b.n	8000fee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8000fec:	2302      	movs	r3, #2
  }
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ba      	sub	sp, #232	@ 0xe8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	695b      	ldr	r3, [r3, #20]
 800101a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800102a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001036:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10f      	bne.n	800105e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800103e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	2b00      	cmp	r3, #0
 8001048:	d009      	beq.n	800105e <HAL_UART_IRQHandler+0x66>
 800104a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fba3 	bl	80017a2 <UART_Receive_IT>
      return;
 800105c:	e25b      	b.n	8001516 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800105e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 80de 	beq.w	8001224 <HAL_UART_IRQHandler+0x22c>
 8001068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d106      	bne.n	8001082 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001078:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80d1 	beq.w	8001224 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00b      	beq.n	80010a6 <HAL_UART_IRQHandler+0xae>
 800108e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_UART_IRQHandler+0xd2>
 80010b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d005      	beq.n	80010ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f043 0202 	orr.w	r2, r3, #2
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00b      	beq.n	80010ee <HAL_UART_IRQHandler+0xf6>
 80010d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e6:	f043 0204 	orr.w	r2, r3, #4
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80010ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d011      	beq.n	800111e <HAL_UART_IRQHandler+0x126>
 80010fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80010fe:	f003 0320 	and.w	r3, r3, #32
 8001102:	2b00      	cmp	r3, #0
 8001104:	d105      	bne.n	8001112 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	f043 0208 	orr.w	r2, r3, #8
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	2b00      	cmp	r3, #0
 8001124:	f000 81f2 	beq.w	800150c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800112c:	f003 0320 	and.w	r3, r3, #32
 8001130:	2b00      	cmp	r3, #0
 8001132:	d008      	beq.n	8001146 <HAL_UART_IRQHandler+0x14e>
 8001134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001138:	f003 0320 	and.w	r3, r3, #32
 800113c:	2b00      	cmp	r3, #0
 800113e:	d002      	beq.n	8001146 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 fb2e 	bl	80017a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001150:	2b40      	cmp	r3, #64	@ 0x40
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <HAL_UART_IRQHandler+0x17a>
 800116a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d04f      	beq.n	8001212 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 fa36 	bl	80015e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001182:	2b40      	cmp	r3, #64	@ 0x40
 8001184:	d141      	bne.n	800120a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3314      	adds	r3, #20
 800118c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001190:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001194:	e853 3f00 	ldrex	r3, [r3]
 8001198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800119c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80011a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80011a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3314      	adds	r3, #20
 80011ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80011b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80011b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80011be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80011c2:	e841 2300 	strex	r3, r2, [r1]
 80011c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80011ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1d9      	bne.n	8001186 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d013      	beq.n	8001202 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011de:	4a7e      	ldr	r2, [pc, #504]	@ (80013d8 <HAL_UART_IRQHandler+0x3e0>)
 80011e0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fca6 	bl	8000b38 <HAL_DMA_Abort_IT>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d016      	beq.n	8001220 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80011fc:	4610      	mov	r0, r2
 80011fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001200:	e00e      	b.n	8001220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f99e 	bl	8001544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001208:	e00a      	b.n	8001220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f000 f99a 	bl	8001544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001210:	e006      	b.n	8001220 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f996 	bl	8001544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800121e:	e175      	b.n	800150c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001220:	bf00      	nop
    return;
 8001222:	e173      	b.n	800150c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	2b01      	cmp	r3, #1
 800122a:	f040 814f 	bne.w	80014cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800122e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	2b00      	cmp	r3, #0
 8001238:	f000 8148 	beq.w	80014cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800123c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001240:	f003 0310 	and.w	r3, r3, #16
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8141 	beq.w	80014cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800126a:	2b40      	cmp	r3, #64	@ 0x40
 800126c:	f040 80b6 	bne.w	80013dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800127c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8145 	beq.w	8001510 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800128a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800128e:	429a      	cmp	r2, r3
 8001290:	f080 813e 	bcs.w	8001510 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800129a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80012a6:	f000 8088 	beq.w	80013ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	330c      	adds	r3, #12
 80012b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80012b8:	e853 3f00 	ldrex	r3, [r3]
 80012bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80012c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	330c      	adds	r3, #12
 80012d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80012d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80012da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80012de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80012e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80012e6:	e841 2300 	strex	r3, r2, [r1]
 80012ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80012ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1d9      	bne.n	80012aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3314      	adds	r3, #20
 80012fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001300:	e853 3f00 	ldrex	r3, [r3]
 8001304:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	3314      	adds	r3, #20
 8001316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800131a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800131e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001320:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001322:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001326:	e841 2300 	strex	r3, r2, [r1]
 800132a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800132c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1e1      	bne.n	80012f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3314      	adds	r3, #20
 8001338:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800133a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800133c:	e853 3f00 	ldrex	r3, [r3]
 8001340:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001342:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001344:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	3314      	adds	r3, #20
 8001352:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001356:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001358:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800135a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800135c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800135e:	e841 2300 	strex	r3, r2, [r1]
 8001362:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1e3      	bne.n	8001332 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2220      	movs	r2, #32
 800136e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	330c      	adds	r3, #12
 800137e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001382:	e853 3f00 	ldrex	r3, [r3]
 8001386:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001388:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800138a:	f023 0310 	bic.w	r3, r3, #16
 800138e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	330c      	adds	r3, #12
 8001398:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800139c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800139e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80013a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80013a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80013a4:	e841 2300 	strex	r3, r2, [r1]
 80013a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80013aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1e3      	bne.n	8001378 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fb4f 	bl	8000a58 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2202      	movs	r2, #2
 80013be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f8c1 	bl	8001558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80013d6:	e09b      	b.n	8001510 <HAL_UART_IRQHandler+0x518>
 80013d8:	080016ab 	.word	0x080016ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 808e 	beq.w	8001514 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80013f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8089 	beq.w	8001514 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	330c      	adds	r3, #12
 8001408:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800140a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800140c:	e853 3f00 	ldrex	r3, [r3]
 8001410:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001414:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001418:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	330c      	adds	r3, #12
 8001422:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001426:	647a      	str	r2, [r7, #68]	@ 0x44
 8001428:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800142a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800142c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800142e:	e841 2300 	strex	r3, r2, [r1]
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1e3      	bne.n	8001402 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	3314      	adds	r3, #20
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	e853 3f00 	ldrex	r3, [r3]
 8001448:	623b      	str	r3, [r7, #32]
   return(result);
 800144a:	6a3b      	ldr	r3, [r7, #32]
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	3314      	adds	r3, #20
 800145a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800145e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001466:	e841 2300 	strex	r3, r2, [r1]
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800146c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e3      	bne.n	800143a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	330c      	adds	r3, #12
 8001486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	e853 3f00 	ldrex	r3, [r3]
 800148e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f023 0310 	bic.w	r3, r3, #16
 8001496:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	330c      	adds	r3, #12
 80014a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80014a4:	61fa      	str	r2, [r7, #28]
 80014a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80014a8:	69b9      	ldr	r1, [r7, #24]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	e841 2300 	strex	r3, r2, [r1]
 80014b0:	617b      	str	r3, [r7, #20]
   return(result);
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e3      	bne.n	8001480 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80014be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80014c2:	4619      	mov	r1, r3
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	f000 f847 	bl	8001558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80014ca:	e023      	b.n	8001514 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80014cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80014d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d009      	beq.n	80014ec <HAL_UART_IRQHandler+0x4f4>
 80014d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80014dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 f8f4 	bl	80016d2 <UART_Transmit_IT>
    return;
 80014ea:	e014      	b.n	8001516 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80014ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80014f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d00e      	beq.n	8001516 <HAL_UART_IRQHandler+0x51e>
 80014f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80014fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 f934 	bl	8001772 <UART_EndTransmit_IT>
    return;
 800150a:	e004      	b.n	8001516 <HAL_UART_IRQHandler+0x51e>
    return;
 800150c:	bf00      	nop
 800150e:	e002      	b.n	8001516 <HAL_UART_IRQHandler+0x51e>
      return;
 8001510:	bf00      	nop
 8001512:	e000      	b.n	8001516 <HAL_UART_IRQHandler+0x51e>
      return;
 8001514:	bf00      	nop
  }
}
 8001516:	37e8      	adds	r7, #232	@ 0xe8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	4613      	mov	r3, r2
 800157c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88fa      	ldrh	r2, [r7, #6]
 8001588:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	88fa      	ldrh	r2, [r7, #6]
 800158e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2222      	movs	r2, #34	@ 0x22
 800159a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d007      	beq.n	80015b6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80015b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	695a      	ldr	r2, [r3, #20]
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0201 	orr.w	r2, r2, #1
 80015c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68da      	ldr	r2, [r3, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0220 	orr.w	r2, r2, #32
 80015d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b095      	sub	sp, #84	@ 0x54
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	330c      	adds	r3, #12
 80015f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015f6:	e853 3f00 	ldrex	r3, [r3]
 80015fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80015fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	330c      	adds	r3, #12
 800160a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800160c:	643a      	str	r2, [r7, #64]	@ 0x40
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001614:	e841 2300 	strex	r3, r2, [r1]
 8001618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800161a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e5      	bne.n	80015ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3314      	adds	r3, #20
 8001626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	e853 3f00 	ldrex	r3, [r3]
 800162e:	61fb      	str	r3, [r7, #28]
   return(result);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	3314      	adds	r3, #20
 800163e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001648:	e841 2300 	strex	r3, r2, [r1]
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800164e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1e5      	bne.n	8001620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001658:	2b01      	cmp	r3, #1
 800165a:	d119      	bne.n	8001690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	330c      	adds	r3, #12
 8001662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	e853 3f00 	ldrex	r3, [r3]
 800166a:	60bb      	str	r3, [r7, #8]
   return(result);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f023 0310 	bic.w	r3, r3, #16
 8001672:	647b      	str	r3, [r7, #68]	@ 0x44
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	330c      	adds	r3, #12
 800167a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800167c:	61ba      	str	r2, [r7, #24]
 800167e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001680:	6979      	ldr	r1, [r7, #20]
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	e841 2300 	strex	r3, r2, [r1]
 8001688:	613b      	str	r3, [r7, #16]
   return(result);
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1e5      	bne.n	800165c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800169e:	bf00      	nop
 80016a0:	3754      	adds	r7, #84	@ 0x54
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2200      	movs	r2, #0
 80016bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2200      	movs	r2, #0
 80016c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f7ff ff3d 	bl	8001544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80016ca:	bf00      	nop
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b21      	cmp	r3, #33	@ 0x21
 80016e4:	d13e      	bne.n	8001764 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ee:	d114      	bne.n	800171a <UART_Transmit_IT+0x48>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d110      	bne.n	800171a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800170c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	1c9a      	adds	r2, r3, #2
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	621a      	str	r2, [r3, #32]
 8001718:	e008      	b.n	800172c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a1b      	ldr	r3, [r3, #32]
 800171e:	1c59      	adds	r1, r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6211      	str	r1, [r2, #32]
 8001724:	781a      	ldrb	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b29b      	uxth	r3, r3
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4619      	mov	r1, r3
 800173a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800173c:	2b00      	cmp	r3, #0
 800173e:	d10f      	bne.n	8001760 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800174e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800175e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001760:	2300      	movs	r3, #0
 8001762:	e000      	b.n	8001766 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001764:	2302      	movs	r3, #2
  }
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fec2 	bl	800151c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b08c      	sub	sp, #48	@ 0x30
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b22      	cmp	r3, #34	@ 0x22
 80017b4:	f040 80ae 	bne.w	8001914 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017c0:	d117      	bne.n	80017f2 <UART_Receive_IT+0x50>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d113      	bne.n	80017f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e0:	b29a      	uxth	r2, r3
 80017e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ea:	1c9a      	adds	r2, r3, #2
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80017f0:	e026      	b.n	8001840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001804:	d007      	beq.n	8001816 <UART_Receive_IT+0x74>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d10a      	bne.n	8001824 <UART_Receive_IT+0x82>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	b2da      	uxtb	r2, r3
 800181e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001820:	701a      	strb	r2, [r3, #0]
 8001822:	e008      	b.n	8001836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001830:	b2da      	uxtb	r2, r3
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183a:	1c5a      	adds	r2, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001844:	b29b      	uxth	r3, r3
 8001846:	3b01      	subs	r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4619      	mov	r1, r3
 800184e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001850:	2b00      	cmp	r3, #0
 8001852:	d15d      	bne.n	8001910 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0220 	bic.w	r2, r2, #32
 8001862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68da      	ldr	r2, [r3, #12]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2220      	movs	r2, #32
 8001888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2200      	movs	r2, #0
 8001890:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	2b01      	cmp	r3, #1
 8001898:	d135      	bne.n	8001906 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	330c      	adds	r3, #12
 80018a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	e853 3f00 	ldrex	r3, [r3]
 80018ae:	613b      	str	r3, [r7, #16]
   return(result);
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	f023 0310 	bic.w	r3, r3, #16
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	330c      	adds	r3, #12
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	623a      	str	r2, [r7, #32]
 80018c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018c4:	69f9      	ldr	r1, [r7, #28]
 80018c6:	6a3a      	ldr	r2, [r7, #32]
 80018c8:	e841 2300 	strex	r3, r2, [r1]
 80018cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1e5      	bne.n	80018a0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0310 	and.w	r3, r3, #16
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d10a      	bne.n	80018f8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80018fc:	4619      	mov	r1, r3
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fe2a 	bl	8001558 <HAL_UARTEx_RxEventCallback>
 8001904:	e002      	b.n	800190c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff fe12 	bl	8001530 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800190c:	2300      	movs	r3, #0
 800190e:	e002      	b.n	8001916 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	e000      	b.n	8001916 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001914:	2302      	movs	r3, #2
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3730      	adds	r7, #48	@ 0x30
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001924:	b0c0      	sub	sp, #256	@ 0x100
 8001926:	af00      	add	r7, sp, #0
 8001928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800192c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800193c:	68d9      	ldr	r1, [r3, #12]
 800193e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	ea40 0301 	orr.w	r3, r0, r1
 8001948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800194a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	431a      	orrs	r2, r3
 8001958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	431a      	orrs	r2, r3
 8001960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4313      	orrs	r3, r2
 8001968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800196c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001978:	f021 010c 	bic.w	r1, r1, #12
 800197c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001986:	430b      	orrs	r3, r1
 8001988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800198a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800199a:	6999      	ldr	r1, [r3, #24]
 800199c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	ea40 0301 	orr.w	r3, r0, r1
 80019a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80019a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4b8f      	ldr	r3, [pc, #572]	@ (8001bec <UART_SetConfig+0x2cc>)
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d005      	beq.n	80019c0 <UART_SetConfig+0xa0>
 80019b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4b8d      	ldr	r3, [pc, #564]	@ (8001bf0 <UART_SetConfig+0x2d0>)
 80019bc:	429a      	cmp	r2, r3
 80019be:	d104      	bne.n	80019ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80019c0:	f7ff fa90 	bl	8000ee4 <HAL_RCC_GetPCLK2Freq>
 80019c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80019c8:	e003      	b.n	80019d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80019ca:	f7ff fa77 	bl	8000ebc <HAL_RCC_GetPCLK1Freq>
 80019ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80019d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019dc:	f040 810c 	bne.w	8001bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80019e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80019e4:	2200      	movs	r2, #0
 80019e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80019ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80019ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80019f2:	4622      	mov	r2, r4
 80019f4:	462b      	mov	r3, r5
 80019f6:	1891      	adds	r1, r2, r2
 80019f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80019fa:	415b      	adcs	r3, r3
 80019fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80019fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001a02:	4621      	mov	r1, r4
 8001a04:	eb12 0801 	adds.w	r8, r2, r1
 8001a08:	4629      	mov	r1, r5
 8001a0a:	eb43 0901 	adc.w	r9, r3, r1
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a22:	4690      	mov	r8, r2
 8001a24:	4699      	mov	r9, r3
 8001a26:	4623      	mov	r3, r4
 8001a28:	eb18 0303 	adds.w	r3, r8, r3
 8001a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001a30:	462b      	mov	r3, r5
 8001a32:	eb49 0303 	adc.w	r3, r9, r3
 8001a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001a4e:	460b      	mov	r3, r1
 8001a50:	18db      	adds	r3, r3, r3
 8001a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8001a54:	4613      	mov	r3, r2
 8001a56:	eb42 0303 	adc.w	r3, r2, r3
 8001a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001a64:	f7fe fbce 	bl	8000204 <__aeabi_uldivmod>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	460b      	mov	r3, r1
 8001a6c:	4b61      	ldr	r3, [pc, #388]	@ (8001bf4 <UART_SetConfig+0x2d4>)
 8001a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	011c      	lsls	r4, r3, #4
 8001a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001a88:	4642      	mov	r2, r8
 8001a8a:	464b      	mov	r3, r9
 8001a8c:	1891      	adds	r1, r2, r2
 8001a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001a90:	415b      	adcs	r3, r3
 8001a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001a98:	4641      	mov	r1, r8
 8001a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ab8:	4692      	mov	sl, r2
 8001aba:	469b      	mov	fp, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	eb1a 0303 	adds.w	r3, sl, r3
 8001ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ac6:	464b      	mov	r3, r9
 8001ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8001acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	18db      	adds	r3, r3, r3
 8001ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8001aea:	4613      	mov	r3, r2
 8001aec:	eb42 0303 	adc.w	r3, r2, r3
 8001af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001afa:	f7fe fb83 	bl	8000204 <__aeabi_uldivmod>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4611      	mov	r1, r2
 8001b04:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf4 <UART_SetConfig+0x2d4>)
 8001b06:	fba3 2301 	umull	r2, r3, r3, r1
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2264      	movs	r2, #100	@ 0x64
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	1acb      	subs	r3, r1, r3
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001b1a:	4b36      	ldr	r3, [pc, #216]	@ (8001bf4 <UART_SetConfig+0x2d4>)
 8001b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8001b20:	095b      	lsrs	r3, r3, #5
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001b28:	441c      	add	r4, r3
 8001b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001b3c:	4642      	mov	r2, r8
 8001b3e:	464b      	mov	r3, r9
 8001b40:	1891      	adds	r1, r2, r2
 8001b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b44:	415b      	adcs	r3, r3
 8001b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	1851      	adds	r1, r2, r1
 8001b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8001b52:	4649      	mov	r1, r9
 8001b54:	414b      	adcs	r3, r1
 8001b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001b64:	4659      	mov	r1, fp
 8001b66:	00cb      	lsls	r3, r1, #3
 8001b68:	4651      	mov	r1, sl
 8001b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b6e:	4651      	mov	r1, sl
 8001b70:	00ca      	lsls	r2, r1, #3
 8001b72:	4610      	mov	r0, r2
 8001b74:	4619      	mov	r1, r3
 8001b76:	4603      	mov	r3, r0
 8001b78:	4642      	mov	r2, r8
 8001b7a:	189b      	adds	r3, r3, r2
 8001b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001b80:	464b      	mov	r3, r9
 8001b82:	460a      	mov	r2, r1
 8001b84:	eb42 0303 	adc.w	r3, r2, r3
 8001b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	18db      	adds	r3, r3, r3
 8001ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	eb42 0303 	adc.w	r3, r2, r3
 8001bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001bb6:	f7fe fb25 	bl	8000204 <__aeabi_uldivmod>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf4 <UART_SetConfig+0x2d4>)
 8001bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc4:	095b      	lsrs	r3, r3, #5
 8001bc6:	2164      	movs	r1, #100	@ 0x64
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	3332      	adds	r3, #50	@ 0x32
 8001bd2:	4a08      	ldr	r2, [pc, #32]	@ (8001bf4 <UART_SetConfig+0x2d4>)
 8001bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd8:	095b      	lsrs	r3, r3, #5
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4422      	add	r2, r4
 8001be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001be8:	e106      	b.n	8001df8 <UART_SetConfig+0x4d8>
 8001bea:	bf00      	nop
 8001bec:	40011000 	.word	0x40011000
 8001bf0:	40011400 	.word	0x40011400
 8001bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001c0a:	4642      	mov	r2, r8
 8001c0c:	464b      	mov	r3, r9
 8001c0e:	1891      	adds	r1, r2, r2
 8001c10:	6239      	str	r1, [r7, #32]
 8001c12:	415b      	adcs	r3, r3
 8001c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c1a:	4641      	mov	r1, r8
 8001c1c:	1854      	adds	r4, r2, r1
 8001c1e:	4649      	mov	r1, r9
 8001c20:	eb43 0501 	adc.w	r5, r3, r1
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	00eb      	lsls	r3, r5, #3
 8001c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c32:	00e2      	lsls	r2, r4, #3
 8001c34:	4614      	mov	r4, r2
 8001c36:	461d      	mov	r5, r3
 8001c38:	4643      	mov	r3, r8
 8001c3a:	18e3      	adds	r3, r4, r3
 8001c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c40:	464b      	mov	r3, r9
 8001c42:	eb45 0303 	adc.w	r3, r5, r3
 8001c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001c66:	4629      	mov	r1, r5
 8001c68:	008b      	lsls	r3, r1, #2
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001c70:	4621      	mov	r1, r4
 8001c72:	008a      	lsls	r2, r1, #2
 8001c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001c78:	f7fe fac4 	bl	8000204 <__aeabi_uldivmod>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	460b      	mov	r3, r1
 8001c80:	4b60      	ldr	r3, [pc, #384]	@ (8001e04 <UART_SetConfig+0x4e4>)
 8001c82:	fba3 2302 	umull	r2, r3, r3, r2
 8001c86:	095b      	lsrs	r3, r3, #5
 8001c88:	011c      	lsls	r4, r3, #4
 8001c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001c9c:	4642      	mov	r2, r8
 8001c9e:	464b      	mov	r3, r9
 8001ca0:	1891      	adds	r1, r2, r2
 8001ca2:	61b9      	str	r1, [r7, #24]
 8001ca4:	415b      	adcs	r3, r3
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cac:	4641      	mov	r1, r8
 8001cae:	1851      	adds	r1, r2, r1
 8001cb0:	6139      	str	r1, [r7, #16]
 8001cb2:	4649      	mov	r1, r9
 8001cb4:	414b      	adcs	r3, r1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cc4:	4659      	mov	r1, fp
 8001cc6:	00cb      	lsls	r3, r1, #3
 8001cc8:	4651      	mov	r1, sl
 8001cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001cce:	4651      	mov	r1, sl
 8001cd0:	00ca      	lsls	r2, r1, #3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4642      	mov	r2, r8
 8001cda:	189b      	adds	r3, r3, r2
 8001cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001ce0:	464b      	mov	r3, r9
 8001ce2:	460a      	mov	r2, r1
 8001ce4:	eb42 0303 	adc.w	r3, r2, r3
 8001ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001d04:	4649      	mov	r1, r9
 8001d06:	008b      	lsls	r3, r1, #2
 8001d08:	4641      	mov	r1, r8
 8001d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001d0e:	4641      	mov	r1, r8
 8001d10:	008a      	lsls	r2, r1, #2
 8001d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001d16:	f7fe fa75 	bl	8000204 <__aeabi_uldivmod>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	4b38      	ldr	r3, [pc, #224]	@ (8001e04 <UART_SetConfig+0x4e4>)
 8001d22:	fba3 2301 	umull	r2, r3, r3, r1
 8001d26:	095b      	lsrs	r3, r3, #5
 8001d28:	2264      	movs	r2, #100	@ 0x64
 8001d2a:	fb02 f303 	mul.w	r3, r2, r3
 8001d2e:	1acb      	subs	r3, r1, r3
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	3332      	adds	r3, #50	@ 0x32
 8001d34:	4a33      	ldr	r2, [pc, #204]	@ (8001e04 <UART_SetConfig+0x4e4>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	095b      	lsrs	r3, r3, #5
 8001d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d40:	441c      	add	r4, r3
 8001d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d46:	2200      	movs	r2, #0
 8001d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8001d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8001d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001d50:	4642      	mov	r2, r8
 8001d52:	464b      	mov	r3, r9
 8001d54:	1891      	adds	r1, r2, r2
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	415b      	adcs	r3, r3
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d60:	4641      	mov	r1, r8
 8001d62:	1851      	adds	r1, r2, r1
 8001d64:	6039      	str	r1, [r7, #0]
 8001d66:	4649      	mov	r1, r9
 8001d68:	414b      	adcs	r3, r1
 8001d6a:	607b      	str	r3, [r7, #4]
 8001d6c:	f04f 0200 	mov.w	r2, #0
 8001d70:	f04f 0300 	mov.w	r3, #0
 8001d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001d78:	4659      	mov	r1, fp
 8001d7a:	00cb      	lsls	r3, r1, #3
 8001d7c:	4651      	mov	r1, sl
 8001d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d82:	4651      	mov	r1, sl
 8001d84:	00ca      	lsls	r2, r1, #3
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	189b      	adds	r3, r3, r2
 8001d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d92:	464b      	mov	r3, r9
 8001d94:	460a      	mov	r2, r1
 8001d96:	eb42 0303 	adc.w	r3, r2, r3
 8001d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001db4:	4649      	mov	r1, r9
 8001db6:	008b      	lsls	r3, r1, #2
 8001db8:	4641      	mov	r1, r8
 8001dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001dbe:	4641      	mov	r1, r8
 8001dc0:	008a      	lsls	r2, r1, #2
 8001dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001dc6:	f7fe fa1d 	bl	8000204 <__aeabi_uldivmod>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <UART_SetConfig+0x4e4>)
 8001dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	2164      	movs	r1, #100	@ 0x64
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	3332      	adds	r3, #50	@ 0x32
 8001de2:	4a08      	ldr	r2, [pc, #32]	@ (8001e04 <UART_SetConfig+0x4e4>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	095b      	lsrs	r3, r3, #5
 8001dea:	f003 020f 	and.w	r2, r3, #15
 8001dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4422      	add	r2, r4
 8001df6:	609a      	str	r2, [r3, #8]
}
 8001df8:	bf00      	nop
 8001dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e04:	51eb851f 	.word	0x51eb851f

08001e08 <__libc_init_array>:
 8001e08:	b570      	push	{r4, r5, r6, lr}
 8001e0a:	4d0d      	ldr	r5, [pc, #52]	@ (8001e40 <__libc_init_array+0x38>)
 8001e0c:	4c0d      	ldr	r4, [pc, #52]	@ (8001e44 <__libc_init_array+0x3c>)
 8001e0e:	1b64      	subs	r4, r4, r5
 8001e10:	10a4      	asrs	r4, r4, #2
 8001e12:	2600      	movs	r6, #0
 8001e14:	42a6      	cmp	r6, r4
 8001e16:	d109      	bne.n	8001e2c <__libc_init_array+0x24>
 8001e18:	4d0b      	ldr	r5, [pc, #44]	@ (8001e48 <__libc_init_array+0x40>)
 8001e1a:	4c0c      	ldr	r4, [pc, #48]	@ (8001e4c <__libc_init_array+0x44>)
 8001e1c:	f000 f818 	bl	8001e50 <_init>
 8001e20:	1b64      	subs	r4, r4, r5
 8001e22:	10a4      	asrs	r4, r4, #2
 8001e24:	2600      	movs	r6, #0
 8001e26:	42a6      	cmp	r6, r4
 8001e28:	d105      	bne.n	8001e36 <__libc_init_array+0x2e>
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e30:	4798      	blx	r3
 8001e32:	3601      	adds	r6, #1
 8001e34:	e7ee      	b.n	8001e14 <__libc_init_array+0xc>
 8001e36:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e3a:	4798      	blx	r3
 8001e3c:	3601      	adds	r6, #1
 8001e3e:	e7f2      	b.n	8001e26 <__libc_init_array+0x1e>
 8001e40:	08001e78 	.word	0x08001e78
 8001e44:	08001e78 	.word	0x08001e78
 8001e48:	08001e78 	.word	0x08001e78
 8001e4c:	08001e7c 	.word	0x08001e7c

08001e50 <_init>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	bf00      	nop
 8001e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e56:	bc08      	pop	{r3}
 8001e58:	469e      	mov	lr, r3
 8001e5a:	4770      	bx	lr

08001e5c <_fini>:
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e5e:	bf00      	nop
 8001e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e62:	bc08      	pop	{r3}
 8001e64:	469e      	mov	lr, r3
 8001e66:	4770      	bx	lr
