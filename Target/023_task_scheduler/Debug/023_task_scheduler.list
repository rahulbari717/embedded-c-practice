
023_task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e64  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08001028  08001028  00002028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b0  080010b0  0000306c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080010b0  080010b0  0000306c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080010b0  080010b0  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b0  080010b0  000020b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010b4  080010b4  000020b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080010b8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000006c  08001124  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08001124  000031ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b39  00000000  00000000  0000309c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003bf  00000000  00000000  00003bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00003f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000011f  00000000  00000000  00004130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002da5  00000000  00000000  0000424f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001428  00000000  00000000  00006ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009c5d  00000000  00000000  0000841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00012079  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ba4  00000000  00000000  000120bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00012c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000006c 	.word	0x2000006c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001010 	.word	0x08001010

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000070 	.word	0x20000070
 8000200:	08001010 	.word	0x08001010

08000204 <main>:
uint32_t task_handlers[MAX_TASKS];

uint8_t current_task = 0; 		// task1 is running

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
	enable_processor_faults();
 8000208:	f000 f8ca 	bl	80003a0 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 800020c:	480d      	ldr	r0, [pc, #52]	@ (8000244 <main+0x40>)
 800020e:	f000 f879 	bl	8000304 <init_scheduler_stack>

	task_handlers[0] = (uint32_t ) task1_handler;
 8000212:	4a0d      	ldr	r2, [pc, #52]	@ (8000248 <main+0x44>)
 8000214:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <main+0x48>)
 8000216:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t ) task2_handler;
 8000218:	4a0d      	ldr	r2, [pc, #52]	@ (8000250 <main+0x4c>)
 800021a:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <main+0x48>)
 800021c:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t ) task3_handler;
 800021e:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <main+0x50>)
 8000220:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <main+0x48>)
 8000222:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t ) task4_handler;
 8000224:	4a0c      	ldr	r2, [pc, #48]	@ (8000258 <main+0x54>)
 8000226:	4b09      	ldr	r3, [pc, #36]	@ (800024c <main+0x48>)
 8000228:	60da      	str	r2, [r3, #12]

	init_tasks_stack();
 800022a:	f000 f871 	bl	8000310 <init_tasks_stack>

    init_systick_timer(TICK_HZ);
 800022e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000232:	f000 f833 	bl	800029c <init_systick_timer>

    switch_sp_to_psp();
 8000236:	f000 f90b 	bl	8000450 <switch_sp_to_psp>

    task1_handler();
 800023a:	f000 f80f 	bl	800025c <task1_handler>

	for(;;);
 800023e:	bf00      	nop
 8000240:	e7fd      	b.n	800023e <main+0x3a>
 8000242:	bf00      	nop
 8000244:	2001f000 	.word	0x2001f000
 8000248:	0800025d 	.word	0x0800025d
 800024c:	20000088 	.word	0x20000088
 8000250:	0800026d 	.word	0x0800026d
 8000254:	0800027d 	.word	0x0800027d
 8000258:	0800028d 	.word	0x0800028d

0800025c <task1_handler>:
}

void task1_handler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task1 \n");
 8000260:	4801      	ldr	r0, [pc, #4]	@ (8000268 <task1_handler+0xc>)
 8000262:	f000 fb41 	bl	80008e8 <puts>
 8000266:	e7fb      	b.n	8000260 <task1_handler+0x4>
 8000268:	08001028 	.word	0x08001028

0800026c <task2_handler>:
	}
}

void task2_handler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task2 \n");
 8000270:	4801      	ldr	r0, [pc, #4]	@ (8000278 <task2_handler+0xc>)
 8000272:	f000 fb39 	bl	80008e8 <puts>
 8000276:	e7fb      	b.n	8000270 <task2_handler+0x4>
 8000278:	08001038 	.word	0x08001038

0800027c <task3_handler>:
	}
}

void task3_handler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task3 \n");
 8000280:	4801      	ldr	r0, [pc, #4]	@ (8000288 <task3_handler+0xc>)
 8000282:	f000 fb31 	bl	80008e8 <puts>
 8000286:	e7fb      	b.n	8000280 <task3_handler+0x4>
 8000288:	08001048 	.word	0x08001048

0800028c <task4_handler>:
	}
}

void task4_handler(void)
{
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task4 \n");
 8000290:	4801      	ldr	r0, [pc, #4]	@ (8000298 <task4_handler+0xc>)
 8000292:	f000 fb29 	bl	80008e8 <puts>
 8000296:	e7fb      	b.n	8000290 <task4_handler+0x4>
 8000298:	08001058 	.word	0x08001058

0800029c <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 800029c:	b480      	push	{r7}
 800029e:	b087      	sub	sp, #28
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t *) 0xE000E014;
 80002a4:	4b14      	ldr	r3, [pc, #80]	@ (80002f8 <init_systick_timer+0x5c>)
 80002a6:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t *) 0xE000E010;
 80002a8:	4b14      	ldr	r3, [pc, #80]	@ (80002fc <init_systick_timer+0x60>)
 80002aa:	613b      	str	r3, [r7, #16]

	uint32_t count_value = SYSTICK_TIM_CLK / tick_hz;
 80002ac:	4a14      	ldr	r2, [pc, #80]	@ (8000300 <init_systick_timer+0x64>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80002b4:	60fb      	str	r3, [r7, #12]

	// Clear the value of SVR
	*pSRVR &= ~(0x00FFFFFFFF);
 80002b6:	697b      	ldr	r3, [r7, #20]
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]

	// load the value in to SVR
	*pSRVR |= count_value;
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	681a      	ldr	r2, [r3, #0]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	431a      	orrs	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	601a      	str	r2, [r3, #0]

	// do some settings
	*pSCSR |= (1 << 1);   	// enable Systick exeption request
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	f043 0202 	orr.w	r2, r3, #2
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2);		// Indicatres the clock source, processor clock source
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	f043 0204 	orr.w	r2, r3, #4
 80002dc:	693b      	ldr	r3, [r7, #16]
 80002de:	601a      	str	r2, [r3, #0]

	// enable the systick
	*pSCSR |= (1 << 0); 	// enables the counter
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f043 0201 	orr.w	r2, r3, #1
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	601a      	str	r2, [r3, #0]

}
 80002ec:	bf00      	nop
 80002ee:	371c      	adds	r7, #28
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e014 	.word	0xe000e014
 80002fc:	e000e010 	.word	0xe000e010
 8000300:	00f42400 	.word	0x00f42400

08000304 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000304:	4603      	mov	r3, r0
	__asm volatile ("MSR MSP, %0": : "r" (sched_top_of_stack) : );
 8000306:	f383 8808 	msr	MSP, r3
	__asm volatile ("BX LR");
 800030a:	4770      	bx	lr

}
 800030c:	bf00      	nop
	...

08000310 <init_tasks_stack>:

void init_tasks_stack(void)
{
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0

	uint32_t *pPSP;

	for(int i=0; i<MAX_TASKS; i++)
 8000316:	2300      	movs	r3, #0
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	e032      	b.n	8000382 <init_tasks_stack+0x72>
	{
		pPSP = (uint32_t *) psp_of_tasks[i];
 800031c:	4a1e      	ldr	r2, [pc, #120]	@ (8000398 <init_tasks_stack+0x88>)
 800031e:	68bb      	ldr	r3, [r7, #8]
 8000320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000324:	60fb      	str	r3, [r7, #12]
		pPSP --;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3b04      	subs	r3, #4
 800032a:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; 		// 0x00100000
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000332:	601a      	str	r2, [r3, #0]

		pPSP --;					// PC
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3b04      	subs	r3, #4
 8000338:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800033a:	4a18      	ldr	r2, [pc, #96]	@ (800039c <init_tasks_stack+0x8c>)
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	601a      	str	r2, [r3, #0]

		pPSP --;					// LR
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3b04      	subs	r3, #4
 800034a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	f06f 0202 	mvn.w	r2, #2
 8000352:	601a      	str	r2, [r3, #0]

		for(int j=0; j < 13; j++)
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	e008      	b.n	800036c <init_tasks_stack+0x5c>
		{
			pPSP --;
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	3b04      	subs	r3, #4
 800035e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
		for(int j=0; j < 13; j++)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	3301      	adds	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	2b0c      	cmp	r3, #12
 8000370:	ddf3      	ble.n	800035a <init_tasks_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t) pPSP;
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	4908      	ldr	r1, [pc, #32]	@ (8000398 <init_tasks_stack+0x88>)
 8000376:	68bb      	ldr	r3, [r7, #8]
 8000378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i<MAX_TASKS; i++)
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	3301      	adds	r3, #1
 8000380:	60bb      	str	r3, [r7, #8]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	2b03      	cmp	r3, #3
 8000386:	ddc9      	ble.n	800031c <init_tasks_stack+0xc>
	}
}
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	3714      	adds	r7, #20
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	20000000 	.word	0x20000000
 800039c:	20000088 	.word	0x20000088

080003a0 <enable_processor_faults>:

void enable_processor_faults(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
	uint32_t *pSHSCR = (uint32_t *) 0xE000ED24;
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <enable_processor_faults+0x30>)
 80003a8:	607b      	str	r3, [r7, #4]
	*pSHSCR |= (1 << 16);		// mem managed
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]
	*pSHSCR |= (1 << 17); 		// bus fault
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
	// *pSHSCR |= (1<< 18); 	usage fault
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	e000ed24 	.word	0xe000ed24

080003d4 <get_psp_value>:


uint32_t get_psp_value()
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <get_psp_value+0x1c>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	461a      	mov	r2, r3
 80003de:	4b05      	ldr	r3, [pc, #20]	@ (80003f4 <get_psp_value+0x20>)
 80003e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003e4:	4618      	mov	r0, r3
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000098 	.word	0x20000098
 80003f4:	20000000 	.word	0x20000000

080003f8 <save_psp_value>:

void save_psp_value(uint32_t current_stack_addr)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_stack_addr;
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <save_psp_value+0x24>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	4619      	mov	r1, r3
 8000406:	4a06      	ldr	r2, [pc, #24]	@ (8000420 <save_psp_value+0x28>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000098 	.word	0x20000098
 8000420:	20000000 	.word	0x20000000

08000424 <update_next_task>:

void update_next_task(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	current_task++;
 8000428:	4b08      	ldr	r3, [pc, #32]	@ (800044c <update_next_task+0x28>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3301      	adds	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <update_next_task+0x28>)
 8000432:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS;
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <update_next_task+0x28>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	f003 0303 	and.w	r3, r3, #3
 800043c:	b2da      	uxtb	r2, r3
 800043e:	4b03      	ldr	r3, [pc, #12]	@ (800044c <update_next_task+0x28>)
 8000440:	701a      	strb	r2, [r3, #0]
}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	20000098 	.word	0x20000098

08000450 <switch_sp_to_psp>:
__attribute__((naked)) void switch_sp_to_psp(void)
{
	// 1. initialize the PSP with task1 stack start address

	// get the value of psp of current task
	__asm volatile("PUSH {LR}");				// preserve LR which connects back to main()
 8000450:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 8000452:	f7ff ffbf 	bl	80003d4 <get_psp_value>
	__asm volatile("MSR PSP, R0");				// initialize psp
 8000456:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");					// pops back LR value
 800045a:	f85d eb04 	ldr.w	lr, [sp], #4

	// 2. change SPto PSP using CONTROL register
	__asm volatile ("MOV R0, #0X02");
 800045e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 8000462:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000466:	4770      	bx	lr

}
 8000468:	bf00      	nop

0800046a <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/* Save the context of current task*/

	// 1. Get current running task's PSP value
	__asm volatile ("MRS R0, PSP");
 800046a:	f3ef 8009 	mrs	r0, PSP
	// 2. Using that PSP value store SF2 (R4 to R11);
	__asm volatile ("STMDB R0!, {R4-R11}");
 800046e:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	__asm volatile ("PUSH {LR}");
 8000472:	b500      	push	{lr}
	// 3. Save the current value of PSP
	__asm volatile ("BL save_psp_value");
 8000474:	f7ff ffc0 	bl	80003f8 <save_psp_value>
	/* Retrieve the context of next task */

	// 1. Decide next task to run
	__asm volatile ("BL update_next_task");
 8000478:	f7ff ffd4 	bl	8000424 <update_next_task>
	// 2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 800047c:	f7ff ffaa 	bl	80003d4 <get_psp_value>
	// 3. Using that PSP value retrieve SF2 (R4 to R11)
	__asm volatile ("LDMIA R0!, {R4- R11}");
 8000480:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	// 4. update PSP and exit
	__asm volatile ("MSR PSP, R0");
 8000484:	f380 8809 	msr	PSP, r0

	__asm volatile ("POP {LR}");
 8000488:	f85d eb04 	ldr.w	lr, [sp], #4

	__asm volatile ("");
}
 800048c:	bf00      	nop
	...

08000490 <HardFault_Handler>:


// 2. implement the fault handlers
void HardFault_Handler(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000494:	4802      	ldr	r0, [pc, #8]	@ (80004a0 <HardFault_Handler+0x10>)
 8000496:	f000 fa27 	bl	80008e8 <puts>
	while(1);
 800049a:	bf00      	nop
 800049c:	e7fd      	b.n	800049a <HardFault_Handler+0xa>
 800049e:	bf00      	nop
 80004a0:	08001068 	.word	0x08001068

080004a4 <MemManage_Handler>:

}

void MemManage_Handler(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 80004a8:	4802      	ldr	r0, [pc, #8]	@ (80004b4 <MemManage_Handler+0x10>)
 80004aa:	f000 fa1d 	bl	80008e8 <puts>
	while(1);
 80004ae:	bf00      	nop
 80004b0:	e7fd      	b.n	80004ae <MemManage_Handler+0xa>
 80004b2:	bf00      	nop
 80004b4:	08001080 	.word	0x08001080

080004b8 <BusFault_Handler>:

}

void BusFault_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 80004bc:	4802      	ldr	r0, [pc, #8]	@ (80004c8 <BusFault_Handler+0x10>)
 80004be:	f000 fa13 	bl	80008e8 <puts>
	while(1);
 80004c2:	bf00      	nop
 80004c4:	e7fd      	b.n	80004c2 <BusFault_Handler+0xa>
 80004c6:	bf00      	nop
 80004c8:	08001098 	.word	0x08001098

080004cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000514 <ITM_SendChar+0x48>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a0e      	ldr	r2, [pc, #56]	@ (8000514 <ITM_SendChar+0x48>)
 80004dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000518 <ITM_SendChar+0x4c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <ITM_SendChar+0x4c>)
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ee:	bf00      	nop
 80004f0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f003 0301 	and.w	r3, r3, #1
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f8      	beq.n	80004f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004fe:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	6013      	str	r3, [r2, #0]
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	e000edfc 	.word	0xe000edfc
 8000518:	e0000e00 	.word	0xe0000e00

0800051c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	e00a      	b.n	8000544 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800052e:	f3af 8000 	nop.w
 8000532:	4601      	mov	r1, r0
 8000534:	68bb      	ldr	r3, [r7, #8]
 8000536:	1c5a      	adds	r2, r3, #1
 8000538:	60ba      	str	r2, [r7, #8]
 800053a:	b2ca      	uxtb	r2, r1
 800053c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	3301      	adds	r3, #1
 8000542:	617b      	str	r3, [r7, #20]
 8000544:	697a      	ldr	r2, [r7, #20]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	dbf0      	blt.n	800052e <_read+0x12>
  }

  return len;
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	4618      	mov	r0, r3
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000556:	b580      	push	{r7, lr}
 8000558:	b086      	sub	sp, #24
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e009      	b.n	800057c <_write+0x26>
  {
    // __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f7ff ffab 	bl	80004cc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	3301      	adds	r3, #1
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	697a      	ldr	r2, [r7, #20]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <_write+0x12>
  }
  return len;
 8000584:	687b      	ldr	r3, [r7, #4]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_close>:

int _close(int file)
{
 800058e:	b480      	push	{r7}
 8000590:	b083      	sub	sp, #12
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800059a:	4618      	mov	r0, r3
 800059c:	370c      	adds	r7, #12
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr

080005a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b083      	sub	sp, #12
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
 80005ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005b6:	605a      	str	r2, [r3, #4]
  return 0;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <_isatty>:

int _isatty(int file)
{
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005ce:	2301      	movs	r3, #1
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005e8:	2300      	movs	r3, #0
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
	...

080005f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b086      	sub	sp, #24
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000600:	4a14      	ldr	r2, [pc, #80]	@ (8000654 <_sbrk+0x5c>)
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <_sbrk+0x60>)
 8000604:	1ad3      	subs	r3, r2, r3
 8000606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800060c:	4b13      	ldr	r3, [pc, #76]	@ (800065c <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d102      	bne.n	800061a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000614:	4b11      	ldr	r3, [pc, #68]	@ (800065c <_sbrk+0x64>)
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <_sbrk+0x68>)
 8000618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800061a:	4b10      	ldr	r3, [pc, #64]	@ (800065c <_sbrk+0x64>)
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4413      	add	r3, r2
 8000622:	693a      	ldr	r2, [r7, #16]
 8000624:	429a      	cmp	r2, r3
 8000626:	d207      	bcs.n	8000638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000628:	f000 fa8c 	bl	8000b44 <__errno>
 800062c:	4603      	mov	r3, r0
 800062e:	220c      	movs	r2, #12
 8000630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000636:	e009      	b.n	800064c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000638:	4b08      	ldr	r3, [pc, #32]	@ (800065c <_sbrk+0x64>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800063e:	4b07      	ldr	r3, [pc, #28]	@ (800065c <_sbrk+0x64>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	4413      	add	r3, r2
 8000646:	4a05      	ldr	r2, [pc, #20]	@ (800065c <_sbrk+0x64>)
 8000648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3718      	adds	r7, #24
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20020000 	.word	0x20020000
 8000658:	00000400 	.word	0x00000400
 800065c:	2000009c 	.word	0x2000009c
 8000660:	200001f0 	.word	0x200001f0

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000664:	480d      	ldr	r0, [pc, #52]	@ (800069c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000666:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000668:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800066e:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <LoopForever+0xe>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a0a      	ldr	r2, [pc, #40]	@ (80006ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000684:	4c0a      	ldr	r4, [pc, #40]	@ (80006b0 <LoopForever+0x16>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000692:	f000 fa5d 	bl	8000b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff fdb5 	bl	8000204 <main>

0800069a <LoopForever>:

LoopForever:
  b LoopForever
 800069a:	e7fe      	b.n	800069a <LoopForever>
  ldr   r0, =_estack
 800069c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80006a8:	080010b8 	.word	0x080010b8
  ldr r2, =_sbss
 80006ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80006b0:	200001ec 	.word	0x200001ec

080006b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b4:	e7fe      	b.n	80006b4 <ADC_IRQHandler>
	...

080006b8 <std>:
 80006b8:	2300      	movs	r3, #0
 80006ba:	b510      	push	{r4, lr}
 80006bc:	4604      	mov	r4, r0
 80006be:	e9c0 3300 	strd	r3, r3, [r0]
 80006c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006c6:	6083      	str	r3, [r0, #8]
 80006c8:	8181      	strh	r1, [r0, #12]
 80006ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80006cc:	81c2      	strh	r2, [r0, #14]
 80006ce:	6183      	str	r3, [r0, #24]
 80006d0:	4619      	mov	r1, r3
 80006d2:	2208      	movs	r2, #8
 80006d4:	305c      	adds	r0, #92	@ 0x5c
 80006d6:	f000 f9e7 	bl	8000aa8 <memset>
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <std+0x58>)
 80006dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80006de:	4b0d      	ldr	r3, [pc, #52]	@ (8000714 <std+0x5c>)
 80006e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000718 <std+0x60>)
 80006e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006e6:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <std+0x64>)
 80006e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <std+0x68>)
 80006ec:	6224      	str	r4, [r4, #32]
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d006      	beq.n	8000700 <std+0x48>
 80006f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006f6:	4294      	cmp	r4, r2
 80006f8:	d002      	beq.n	8000700 <std+0x48>
 80006fa:	33d0      	adds	r3, #208	@ 0xd0
 80006fc:	429c      	cmp	r4, r3
 80006fe:	d105      	bne.n	800070c <std+0x54>
 8000700:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000704:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000708:	f000 ba46 	b.w	8000b98 <__retarget_lock_init_recursive>
 800070c:	bd10      	pop	{r4, pc}
 800070e:	bf00      	nop
 8000710:	080008f9 	.word	0x080008f9
 8000714:	0800091b 	.word	0x0800091b
 8000718:	08000953 	.word	0x08000953
 800071c:	08000977 	.word	0x08000977
 8000720:	200000a0 	.word	0x200000a0

08000724 <stdio_exit_handler>:
 8000724:	4a02      	ldr	r2, [pc, #8]	@ (8000730 <stdio_exit_handler+0xc>)
 8000726:	4903      	ldr	r1, [pc, #12]	@ (8000734 <stdio_exit_handler+0x10>)
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <stdio_exit_handler+0x14>)
 800072a:	f000 b869 	b.w	8000800 <_fwalk_sglue>
 800072e:	bf00      	nop
 8000730:	20000010 	.word	0x20000010
 8000734:	08000e99 	.word	0x08000e99
 8000738:	20000020 	.word	0x20000020

0800073c <cleanup_stdio>:
 800073c:	6841      	ldr	r1, [r0, #4]
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <cleanup_stdio+0x34>)
 8000740:	4299      	cmp	r1, r3
 8000742:	b510      	push	{r4, lr}
 8000744:	4604      	mov	r4, r0
 8000746:	d001      	beq.n	800074c <cleanup_stdio+0x10>
 8000748:	f000 fba6 	bl	8000e98 <_fflush_r>
 800074c:	68a1      	ldr	r1, [r4, #8]
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <cleanup_stdio+0x38>)
 8000750:	4299      	cmp	r1, r3
 8000752:	d002      	beq.n	800075a <cleanup_stdio+0x1e>
 8000754:	4620      	mov	r0, r4
 8000756:	f000 fb9f 	bl	8000e98 <_fflush_r>
 800075a:	68e1      	ldr	r1, [r4, #12]
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <cleanup_stdio+0x3c>)
 800075e:	4299      	cmp	r1, r3
 8000760:	d004      	beq.n	800076c <cleanup_stdio+0x30>
 8000762:	4620      	mov	r0, r4
 8000764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000768:	f000 bb96 	b.w	8000e98 <_fflush_r>
 800076c:	bd10      	pop	{r4, pc}
 800076e:	bf00      	nop
 8000770:	200000a0 	.word	0x200000a0
 8000774:	20000108 	.word	0x20000108
 8000778:	20000170 	.word	0x20000170

0800077c <global_stdio_init.part.0>:
 800077c:	b510      	push	{r4, lr}
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <global_stdio_init.part.0+0x30>)
 8000780:	4c0b      	ldr	r4, [pc, #44]	@ (80007b0 <global_stdio_init.part.0+0x34>)
 8000782:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <global_stdio_init.part.0+0x38>)
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	4620      	mov	r0, r4
 8000788:	2200      	movs	r2, #0
 800078a:	2104      	movs	r1, #4
 800078c:	f7ff ff94 	bl	80006b8 <std>
 8000790:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000794:	2201      	movs	r2, #1
 8000796:	2109      	movs	r1, #9
 8000798:	f7ff ff8e 	bl	80006b8 <std>
 800079c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007a0:	2202      	movs	r2, #2
 80007a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a6:	2112      	movs	r1, #18
 80007a8:	f7ff bf86 	b.w	80006b8 <std>
 80007ac:	200001d8 	.word	0x200001d8
 80007b0:	200000a0 	.word	0x200000a0
 80007b4:	08000725 	.word	0x08000725

080007b8 <__sfp_lock_acquire>:
 80007b8:	4801      	ldr	r0, [pc, #4]	@ (80007c0 <__sfp_lock_acquire+0x8>)
 80007ba:	f000 b9ee 	b.w	8000b9a <__retarget_lock_acquire_recursive>
 80007be:	bf00      	nop
 80007c0:	200001e1 	.word	0x200001e1

080007c4 <__sfp_lock_release>:
 80007c4:	4801      	ldr	r0, [pc, #4]	@ (80007cc <__sfp_lock_release+0x8>)
 80007c6:	f000 b9e9 	b.w	8000b9c <__retarget_lock_release_recursive>
 80007ca:	bf00      	nop
 80007cc:	200001e1 	.word	0x200001e1

080007d0 <__sinit>:
 80007d0:	b510      	push	{r4, lr}
 80007d2:	4604      	mov	r4, r0
 80007d4:	f7ff fff0 	bl	80007b8 <__sfp_lock_acquire>
 80007d8:	6a23      	ldr	r3, [r4, #32]
 80007da:	b11b      	cbz	r3, 80007e4 <__sinit+0x14>
 80007dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e0:	f7ff bff0 	b.w	80007c4 <__sfp_lock_release>
 80007e4:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <__sinit+0x28>)
 80007e6:	6223      	str	r3, [r4, #32]
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <__sinit+0x2c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d1f5      	bne.n	80007dc <__sinit+0xc>
 80007f0:	f7ff ffc4 	bl	800077c <global_stdio_init.part.0>
 80007f4:	e7f2      	b.n	80007dc <__sinit+0xc>
 80007f6:	bf00      	nop
 80007f8:	0800073d 	.word	0x0800073d
 80007fc:	200001d8 	.word	0x200001d8

08000800 <_fwalk_sglue>:
 8000800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000804:	4607      	mov	r7, r0
 8000806:	4688      	mov	r8, r1
 8000808:	4614      	mov	r4, r2
 800080a:	2600      	movs	r6, #0
 800080c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000810:	f1b9 0901 	subs.w	r9, r9, #1
 8000814:	d505      	bpl.n	8000822 <_fwalk_sglue+0x22>
 8000816:	6824      	ldr	r4, [r4, #0]
 8000818:	2c00      	cmp	r4, #0
 800081a:	d1f7      	bne.n	800080c <_fwalk_sglue+0xc>
 800081c:	4630      	mov	r0, r6
 800081e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000822:	89ab      	ldrh	r3, [r5, #12]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d907      	bls.n	8000838 <_fwalk_sglue+0x38>
 8000828:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800082c:	3301      	adds	r3, #1
 800082e:	d003      	beq.n	8000838 <_fwalk_sglue+0x38>
 8000830:	4629      	mov	r1, r5
 8000832:	4638      	mov	r0, r7
 8000834:	47c0      	blx	r8
 8000836:	4306      	orrs	r6, r0
 8000838:	3568      	adds	r5, #104	@ 0x68
 800083a:	e7e9      	b.n	8000810 <_fwalk_sglue+0x10>

0800083c <_puts_r>:
 800083c:	6a03      	ldr	r3, [r0, #32]
 800083e:	b570      	push	{r4, r5, r6, lr}
 8000840:	6884      	ldr	r4, [r0, #8]
 8000842:	4605      	mov	r5, r0
 8000844:	460e      	mov	r6, r1
 8000846:	b90b      	cbnz	r3, 800084c <_puts_r+0x10>
 8000848:	f7ff ffc2 	bl	80007d0 <__sinit>
 800084c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800084e:	07db      	lsls	r3, r3, #31
 8000850:	d405      	bmi.n	800085e <_puts_r+0x22>
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	0598      	lsls	r0, r3, #22
 8000856:	d402      	bmi.n	800085e <_puts_r+0x22>
 8000858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800085a:	f000 f99e 	bl	8000b9a <__retarget_lock_acquire_recursive>
 800085e:	89a3      	ldrh	r3, [r4, #12]
 8000860:	0719      	lsls	r1, r3, #28
 8000862:	d502      	bpl.n	800086a <_puts_r+0x2e>
 8000864:	6923      	ldr	r3, [r4, #16]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d135      	bne.n	80008d6 <_puts_r+0x9a>
 800086a:	4621      	mov	r1, r4
 800086c:	4628      	mov	r0, r5
 800086e:	f000 f8c5 	bl	80009fc <__swsetup_r>
 8000872:	b380      	cbz	r0, 80008d6 <_puts_r+0x9a>
 8000874:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8000878:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800087a:	07da      	lsls	r2, r3, #31
 800087c:	d405      	bmi.n	800088a <_puts_r+0x4e>
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	059b      	lsls	r3, r3, #22
 8000882:	d402      	bmi.n	800088a <_puts_r+0x4e>
 8000884:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000886:	f000 f989 	bl	8000b9c <__retarget_lock_release_recursive>
 800088a:	4628      	mov	r0, r5
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	2b00      	cmp	r3, #0
 8000890:	da04      	bge.n	800089c <_puts_r+0x60>
 8000892:	69a2      	ldr	r2, [r4, #24]
 8000894:	429a      	cmp	r2, r3
 8000896:	dc17      	bgt.n	80008c8 <_puts_r+0x8c>
 8000898:	290a      	cmp	r1, #10
 800089a:	d015      	beq.n	80008c8 <_puts_r+0x8c>
 800089c:	6823      	ldr	r3, [r4, #0]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	6022      	str	r2, [r4, #0]
 80008a2:	7019      	strb	r1, [r3, #0]
 80008a4:	68a3      	ldr	r3, [r4, #8]
 80008a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008aa:	3b01      	subs	r3, #1
 80008ac:	60a3      	str	r3, [r4, #8]
 80008ae:	2900      	cmp	r1, #0
 80008b0:	d1ed      	bne.n	800088e <_puts_r+0x52>
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da11      	bge.n	80008da <_puts_r+0x9e>
 80008b6:	4622      	mov	r2, r4
 80008b8:	210a      	movs	r1, #10
 80008ba:	4628      	mov	r0, r5
 80008bc:	f000 f85f 	bl	800097e <__swbuf_r>
 80008c0:	3001      	adds	r0, #1
 80008c2:	d0d7      	beq.n	8000874 <_puts_r+0x38>
 80008c4:	250a      	movs	r5, #10
 80008c6:	e7d7      	b.n	8000878 <_puts_r+0x3c>
 80008c8:	4622      	mov	r2, r4
 80008ca:	4628      	mov	r0, r5
 80008cc:	f000 f857 	bl	800097e <__swbuf_r>
 80008d0:	3001      	adds	r0, #1
 80008d2:	d1e7      	bne.n	80008a4 <_puts_r+0x68>
 80008d4:	e7ce      	b.n	8000874 <_puts_r+0x38>
 80008d6:	3e01      	subs	r6, #1
 80008d8:	e7e4      	b.n	80008a4 <_puts_r+0x68>
 80008da:	6823      	ldr	r3, [r4, #0]
 80008dc:	1c5a      	adds	r2, r3, #1
 80008de:	6022      	str	r2, [r4, #0]
 80008e0:	220a      	movs	r2, #10
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e7ee      	b.n	80008c4 <_puts_r+0x88>
	...

080008e8 <puts>:
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <puts+0xc>)
 80008ea:	4601      	mov	r1, r0
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	f7ff bfa5 	b.w	800083c <_puts_r>
 80008f2:	bf00      	nop
 80008f4:	2000001c 	.word	0x2000001c

080008f8 <__sread>:
 80008f8:	b510      	push	{r4, lr}
 80008fa:	460c      	mov	r4, r1
 80008fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000900:	f000 f8fc 	bl	8000afc <_read_r>
 8000904:	2800      	cmp	r0, #0
 8000906:	bfab      	itete	ge
 8000908:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800090a:	89a3      	ldrhlt	r3, [r4, #12]
 800090c:	181b      	addge	r3, r3, r0
 800090e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000912:	bfac      	ite	ge
 8000914:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000916:	81a3      	strhlt	r3, [r4, #12]
 8000918:	bd10      	pop	{r4, pc}

0800091a <__swrite>:
 800091a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800091e:	461f      	mov	r7, r3
 8000920:	898b      	ldrh	r3, [r1, #12]
 8000922:	05db      	lsls	r3, r3, #23
 8000924:	4605      	mov	r5, r0
 8000926:	460c      	mov	r4, r1
 8000928:	4616      	mov	r6, r2
 800092a:	d505      	bpl.n	8000938 <__swrite+0x1e>
 800092c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000930:	2302      	movs	r3, #2
 8000932:	2200      	movs	r2, #0
 8000934:	f000 f8d0 	bl	8000ad8 <_lseek_r>
 8000938:	89a3      	ldrh	r3, [r4, #12]
 800093a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800093e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000942:	81a3      	strh	r3, [r4, #12]
 8000944:	4632      	mov	r2, r6
 8000946:	463b      	mov	r3, r7
 8000948:	4628      	mov	r0, r5
 800094a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800094e:	f000 b8e7 	b.w	8000b20 <_write_r>

08000952 <__sseek>:
 8000952:	b510      	push	{r4, lr}
 8000954:	460c      	mov	r4, r1
 8000956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095a:	f000 f8bd 	bl	8000ad8 <_lseek_r>
 800095e:	1c43      	adds	r3, r0, #1
 8000960:	89a3      	ldrh	r3, [r4, #12]
 8000962:	bf15      	itete	ne
 8000964:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000966:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800096a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800096e:	81a3      	strheq	r3, [r4, #12]
 8000970:	bf18      	it	ne
 8000972:	81a3      	strhne	r3, [r4, #12]
 8000974:	bd10      	pop	{r4, pc}

08000976 <__sclose>:
 8000976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800097a:	f000 b89d 	b.w	8000ab8 <_close_r>

0800097e <__swbuf_r>:
 800097e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000980:	460e      	mov	r6, r1
 8000982:	4614      	mov	r4, r2
 8000984:	4605      	mov	r5, r0
 8000986:	b118      	cbz	r0, 8000990 <__swbuf_r+0x12>
 8000988:	6a03      	ldr	r3, [r0, #32]
 800098a:	b90b      	cbnz	r3, 8000990 <__swbuf_r+0x12>
 800098c:	f7ff ff20 	bl	80007d0 <__sinit>
 8000990:	69a3      	ldr	r3, [r4, #24]
 8000992:	60a3      	str	r3, [r4, #8]
 8000994:	89a3      	ldrh	r3, [r4, #12]
 8000996:	071a      	lsls	r2, r3, #28
 8000998:	d501      	bpl.n	800099e <__swbuf_r+0x20>
 800099a:	6923      	ldr	r3, [r4, #16]
 800099c:	b943      	cbnz	r3, 80009b0 <__swbuf_r+0x32>
 800099e:	4621      	mov	r1, r4
 80009a0:	4628      	mov	r0, r5
 80009a2:	f000 f82b 	bl	80009fc <__swsetup_r>
 80009a6:	b118      	cbz	r0, 80009b0 <__swbuf_r+0x32>
 80009a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80009ac:	4638      	mov	r0, r7
 80009ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009b0:	6823      	ldr	r3, [r4, #0]
 80009b2:	6922      	ldr	r2, [r4, #16]
 80009b4:	1a98      	subs	r0, r3, r2
 80009b6:	6963      	ldr	r3, [r4, #20]
 80009b8:	b2f6      	uxtb	r6, r6
 80009ba:	4283      	cmp	r3, r0
 80009bc:	4637      	mov	r7, r6
 80009be:	dc05      	bgt.n	80009cc <__swbuf_r+0x4e>
 80009c0:	4621      	mov	r1, r4
 80009c2:	4628      	mov	r0, r5
 80009c4:	f000 fa68 	bl	8000e98 <_fflush_r>
 80009c8:	2800      	cmp	r0, #0
 80009ca:	d1ed      	bne.n	80009a8 <__swbuf_r+0x2a>
 80009cc:	68a3      	ldr	r3, [r4, #8]
 80009ce:	3b01      	subs	r3, #1
 80009d0:	60a3      	str	r3, [r4, #8]
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	1c5a      	adds	r2, r3, #1
 80009d6:	6022      	str	r2, [r4, #0]
 80009d8:	701e      	strb	r6, [r3, #0]
 80009da:	6962      	ldr	r2, [r4, #20]
 80009dc:	1c43      	adds	r3, r0, #1
 80009de:	429a      	cmp	r2, r3
 80009e0:	d004      	beq.n	80009ec <__swbuf_r+0x6e>
 80009e2:	89a3      	ldrh	r3, [r4, #12]
 80009e4:	07db      	lsls	r3, r3, #31
 80009e6:	d5e1      	bpl.n	80009ac <__swbuf_r+0x2e>
 80009e8:	2e0a      	cmp	r6, #10
 80009ea:	d1df      	bne.n	80009ac <__swbuf_r+0x2e>
 80009ec:	4621      	mov	r1, r4
 80009ee:	4628      	mov	r0, r5
 80009f0:	f000 fa52 	bl	8000e98 <_fflush_r>
 80009f4:	2800      	cmp	r0, #0
 80009f6:	d0d9      	beq.n	80009ac <__swbuf_r+0x2e>
 80009f8:	e7d6      	b.n	80009a8 <__swbuf_r+0x2a>
	...

080009fc <__swsetup_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <__swsetup_r+0xa8>)
 8000a00:	4605      	mov	r5, r0
 8000a02:	6818      	ldr	r0, [r3, #0]
 8000a04:	460c      	mov	r4, r1
 8000a06:	b118      	cbz	r0, 8000a10 <__swsetup_r+0x14>
 8000a08:	6a03      	ldr	r3, [r0, #32]
 8000a0a:	b90b      	cbnz	r3, 8000a10 <__swsetup_r+0x14>
 8000a0c:	f7ff fee0 	bl	80007d0 <__sinit>
 8000a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a14:	0719      	lsls	r1, r3, #28
 8000a16:	d422      	bmi.n	8000a5e <__swsetup_r+0x62>
 8000a18:	06da      	lsls	r2, r3, #27
 8000a1a:	d407      	bmi.n	8000a2c <__swsetup_r+0x30>
 8000a1c:	2209      	movs	r2, #9
 8000a1e:	602a      	str	r2, [r5, #0]
 8000a20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a24:	81a3      	strh	r3, [r4, #12]
 8000a26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a2a:	e033      	b.n	8000a94 <__swsetup_r+0x98>
 8000a2c:	0758      	lsls	r0, r3, #29
 8000a2e:	d512      	bpl.n	8000a56 <__swsetup_r+0x5a>
 8000a30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a32:	b141      	cbz	r1, 8000a46 <__swsetup_r+0x4a>
 8000a34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a38:	4299      	cmp	r1, r3
 8000a3a:	d002      	beq.n	8000a42 <__swsetup_r+0x46>
 8000a3c:	4628      	mov	r0, r5
 8000a3e:	f000 f8af 	bl	8000ba0 <_free_r>
 8000a42:	2300      	movs	r3, #0
 8000a44:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a46:	89a3      	ldrh	r3, [r4, #12]
 8000a48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a4c:	81a3      	strh	r3, [r4, #12]
 8000a4e:	2300      	movs	r3, #0
 8000a50:	6063      	str	r3, [r4, #4]
 8000a52:	6923      	ldr	r3, [r4, #16]
 8000a54:	6023      	str	r3, [r4, #0]
 8000a56:	89a3      	ldrh	r3, [r4, #12]
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	81a3      	strh	r3, [r4, #12]
 8000a5e:	6923      	ldr	r3, [r4, #16]
 8000a60:	b94b      	cbnz	r3, 8000a76 <__swsetup_r+0x7a>
 8000a62:	89a3      	ldrh	r3, [r4, #12]
 8000a64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a6c:	d003      	beq.n	8000a76 <__swsetup_r+0x7a>
 8000a6e:	4621      	mov	r1, r4
 8000a70:	4628      	mov	r0, r5
 8000a72:	f000 fa5f 	bl	8000f34 <__smakebuf_r>
 8000a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a7a:	f013 0201 	ands.w	r2, r3, #1
 8000a7e:	d00a      	beq.n	8000a96 <__swsetup_r+0x9a>
 8000a80:	2200      	movs	r2, #0
 8000a82:	60a2      	str	r2, [r4, #8]
 8000a84:	6962      	ldr	r2, [r4, #20]
 8000a86:	4252      	negs	r2, r2
 8000a88:	61a2      	str	r2, [r4, #24]
 8000a8a:	6922      	ldr	r2, [r4, #16]
 8000a8c:	b942      	cbnz	r2, 8000aa0 <__swsetup_r+0xa4>
 8000a8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a92:	d1c5      	bne.n	8000a20 <__swsetup_r+0x24>
 8000a94:	bd38      	pop	{r3, r4, r5, pc}
 8000a96:	0799      	lsls	r1, r3, #30
 8000a98:	bf58      	it	pl
 8000a9a:	6962      	ldrpl	r2, [r4, #20]
 8000a9c:	60a2      	str	r2, [r4, #8]
 8000a9e:	e7f4      	b.n	8000a8a <__swsetup_r+0x8e>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e7f7      	b.n	8000a94 <__swsetup_r+0x98>
 8000aa4:	2000001c 	.word	0x2000001c

08000aa8 <memset>:
 8000aa8:	4402      	add	r2, r0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d100      	bne.n	8000ab2 <memset+0xa>
 8000ab0:	4770      	bx	lr
 8000ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8000ab6:	e7f9      	b.n	8000aac <memset+0x4>

08000ab8 <_close_r>:
 8000ab8:	b538      	push	{r3, r4, r5, lr}
 8000aba:	4d06      	ldr	r5, [pc, #24]	@ (8000ad4 <_close_r+0x1c>)
 8000abc:	2300      	movs	r3, #0
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	602b      	str	r3, [r5, #0]
 8000ac4:	f7ff fd63 	bl	800058e <_close>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d102      	bne.n	8000ad2 <_close_r+0x1a>
 8000acc:	682b      	ldr	r3, [r5, #0]
 8000ace:	b103      	cbz	r3, 8000ad2 <_close_r+0x1a>
 8000ad0:	6023      	str	r3, [r4, #0]
 8000ad2:	bd38      	pop	{r3, r4, r5, pc}
 8000ad4:	200001dc 	.word	0x200001dc

08000ad8 <_lseek_r>:
 8000ad8:	b538      	push	{r3, r4, r5, lr}
 8000ada:	4d07      	ldr	r5, [pc, #28]	@ (8000af8 <_lseek_r+0x20>)
 8000adc:	4604      	mov	r4, r0
 8000ade:	4608      	mov	r0, r1
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	602a      	str	r2, [r5, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	f7ff fd78 	bl	80005dc <_lseek>
 8000aec:	1c43      	adds	r3, r0, #1
 8000aee:	d102      	bne.n	8000af6 <_lseek_r+0x1e>
 8000af0:	682b      	ldr	r3, [r5, #0]
 8000af2:	b103      	cbz	r3, 8000af6 <_lseek_r+0x1e>
 8000af4:	6023      	str	r3, [r4, #0]
 8000af6:	bd38      	pop	{r3, r4, r5, pc}
 8000af8:	200001dc 	.word	0x200001dc

08000afc <_read_r>:
 8000afc:	b538      	push	{r3, r4, r5, lr}
 8000afe:	4d07      	ldr	r5, [pc, #28]	@ (8000b1c <_read_r+0x20>)
 8000b00:	4604      	mov	r4, r0
 8000b02:	4608      	mov	r0, r1
 8000b04:	4611      	mov	r1, r2
 8000b06:	2200      	movs	r2, #0
 8000b08:	602a      	str	r2, [r5, #0]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	f7ff fd06 	bl	800051c <_read>
 8000b10:	1c43      	adds	r3, r0, #1
 8000b12:	d102      	bne.n	8000b1a <_read_r+0x1e>
 8000b14:	682b      	ldr	r3, [r5, #0]
 8000b16:	b103      	cbz	r3, 8000b1a <_read_r+0x1e>
 8000b18:	6023      	str	r3, [r4, #0]
 8000b1a:	bd38      	pop	{r3, r4, r5, pc}
 8000b1c:	200001dc 	.word	0x200001dc

08000b20 <_write_r>:
 8000b20:	b538      	push	{r3, r4, r5, lr}
 8000b22:	4d07      	ldr	r5, [pc, #28]	@ (8000b40 <_write_r+0x20>)
 8000b24:	4604      	mov	r4, r0
 8000b26:	4608      	mov	r0, r1
 8000b28:	4611      	mov	r1, r2
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	602a      	str	r2, [r5, #0]
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f7ff fd11 	bl	8000556 <_write>
 8000b34:	1c43      	adds	r3, r0, #1
 8000b36:	d102      	bne.n	8000b3e <_write_r+0x1e>
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	b103      	cbz	r3, 8000b3e <_write_r+0x1e>
 8000b3c:	6023      	str	r3, [r4, #0]
 8000b3e:	bd38      	pop	{r3, r4, r5, pc}
 8000b40:	200001dc 	.word	0x200001dc

08000b44 <__errno>:
 8000b44:	4b01      	ldr	r3, [pc, #4]	@ (8000b4c <__errno+0x8>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	2000001c 	.word	0x2000001c

08000b50 <__libc_init_array>:
 8000b50:	b570      	push	{r4, r5, r6, lr}
 8000b52:	4d0d      	ldr	r5, [pc, #52]	@ (8000b88 <__libc_init_array+0x38>)
 8000b54:	4c0d      	ldr	r4, [pc, #52]	@ (8000b8c <__libc_init_array+0x3c>)
 8000b56:	1b64      	subs	r4, r4, r5
 8000b58:	10a4      	asrs	r4, r4, #2
 8000b5a:	2600      	movs	r6, #0
 8000b5c:	42a6      	cmp	r6, r4
 8000b5e:	d109      	bne.n	8000b74 <__libc_init_array+0x24>
 8000b60:	4d0b      	ldr	r5, [pc, #44]	@ (8000b90 <__libc_init_array+0x40>)
 8000b62:	4c0c      	ldr	r4, [pc, #48]	@ (8000b94 <__libc_init_array+0x44>)
 8000b64:	f000 fa54 	bl	8001010 <_init>
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	10a4      	asrs	r4, r4, #2
 8000b6c:	2600      	movs	r6, #0
 8000b6e:	42a6      	cmp	r6, r4
 8000b70:	d105      	bne.n	8000b7e <__libc_init_array+0x2e>
 8000b72:	bd70      	pop	{r4, r5, r6, pc}
 8000b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b78:	4798      	blx	r3
 8000b7a:	3601      	adds	r6, #1
 8000b7c:	e7ee      	b.n	8000b5c <__libc_init_array+0xc>
 8000b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b82:	4798      	blx	r3
 8000b84:	3601      	adds	r6, #1
 8000b86:	e7f2      	b.n	8000b6e <__libc_init_array+0x1e>
 8000b88:	080010b0 	.word	0x080010b0
 8000b8c:	080010b0 	.word	0x080010b0
 8000b90:	080010b0 	.word	0x080010b0
 8000b94:	080010b4 	.word	0x080010b4

08000b98 <__retarget_lock_init_recursive>:
 8000b98:	4770      	bx	lr

08000b9a <__retarget_lock_acquire_recursive>:
 8000b9a:	4770      	bx	lr

08000b9c <__retarget_lock_release_recursive>:
 8000b9c:	4770      	bx	lr
	...

08000ba0 <_free_r>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	d041      	beq.n	8000c2c <_free_r+0x8c>
 8000ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bac:	1f0c      	subs	r4, r1, #4
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	bfb8      	it	lt
 8000bb2:	18e4      	addlt	r4, r4, r3
 8000bb4:	f000 f8e0 	bl	8000d78 <__malloc_lock>
 8000bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c30 <_free_r+0x90>)
 8000bba:	6813      	ldr	r3, [r2, #0]
 8000bbc:	b933      	cbnz	r3, 8000bcc <_free_r+0x2c>
 8000bbe:	6063      	str	r3, [r4, #4]
 8000bc0:	6014      	str	r4, [r2, #0]
 8000bc2:	4628      	mov	r0, r5
 8000bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bc8:	f000 b8dc 	b.w	8000d84 <__malloc_unlock>
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	d908      	bls.n	8000be2 <_free_r+0x42>
 8000bd0:	6820      	ldr	r0, [r4, #0]
 8000bd2:	1821      	adds	r1, r4, r0
 8000bd4:	428b      	cmp	r3, r1
 8000bd6:	bf01      	itttt	eq
 8000bd8:	6819      	ldreq	r1, [r3, #0]
 8000bda:	685b      	ldreq	r3, [r3, #4]
 8000bdc:	1809      	addeq	r1, r1, r0
 8000bde:	6021      	streq	r1, [r4, #0]
 8000be0:	e7ed      	b.n	8000bbe <_free_r+0x1e>
 8000be2:	461a      	mov	r2, r3
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	b10b      	cbz	r3, 8000bec <_free_r+0x4c>
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	d9fa      	bls.n	8000be2 <_free_r+0x42>
 8000bec:	6811      	ldr	r1, [r2, #0]
 8000bee:	1850      	adds	r0, r2, r1
 8000bf0:	42a0      	cmp	r0, r4
 8000bf2:	d10b      	bne.n	8000c0c <_free_r+0x6c>
 8000bf4:	6820      	ldr	r0, [r4, #0]
 8000bf6:	4401      	add	r1, r0
 8000bf8:	1850      	adds	r0, r2, r1
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	6011      	str	r1, [r2, #0]
 8000bfe:	d1e0      	bne.n	8000bc2 <_free_r+0x22>
 8000c00:	6818      	ldr	r0, [r3, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	6053      	str	r3, [r2, #4]
 8000c06:	4408      	add	r0, r1
 8000c08:	6010      	str	r0, [r2, #0]
 8000c0a:	e7da      	b.n	8000bc2 <_free_r+0x22>
 8000c0c:	d902      	bls.n	8000c14 <_free_r+0x74>
 8000c0e:	230c      	movs	r3, #12
 8000c10:	602b      	str	r3, [r5, #0]
 8000c12:	e7d6      	b.n	8000bc2 <_free_r+0x22>
 8000c14:	6820      	ldr	r0, [r4, #0]
 8000c16:	1821      	adds	r1, r4, r0
 8000c18:	428b      	cmp	r3, r1
 8000c1a:	bf04      	itt	eq
 8000c1c:	6819      	ldreq	r1, [r3, #0]
 8000c1e:	685b      	ldreq	r3, [r3, #4]
 8000c20:	6063      	str	r3, [r4, #4]
 8000c22:	bf04      	itt	eq
 8000c24:	1809      	addeq	r1, r1, r0
 8000c26:	6021      	streq	r1, [r4, #0]
 8000c28:	6054      	str	r4, [r2, #4]
 8000c2a:	e7ca      	b.n	8000bc2 <_free_r+0x22>
 8000c2c:	bd38      	pop	{r3, r4, r5, pc}
 8000c2e:	bf00      	nop
 8000c30:	200001e8 	.word	0x200001e8

08000c34 <sbrk_aligned>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	4e0f      	ldr	r6, [pc, #60]	@ (8000c74 <sbrk_aligned+0x40>)
 8000c38:	460c      	mov	r4, r1
 8000c3a:	6831      	ldr	r1, [r6, #0]
 8000c3c:	4605      	mov	r5, r0
 8000c3e:	b911      	cbnz	r1, 8000c46 <sbrk_aligned+0x12>
 8000c40:	f000 f9d6 	bl	8000ff0 <_sbrk_r>
 8000c44:	6030      	str	r0, [r6, #0]
 8000c46:	4621      	mov	r1, r4
 8000c48:	4628      	mov	r0, r5
 8000c4a:	f000 f9d1 	bl	8000ff0 <_sbrk_r>
 8000c4e:	1c43      	adds	r3, r0, #1
 8000c50:	d103      	bne.n	8000c5a <sbrk_aligned+0x26>
 8000c52:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c56:	4620      	mov	r0, r4
 8000c58:	bd70      	pop	{r4, r5, r6, pc}
 8000c5a:	1cc4      	adds	r4, r0, #3
 8000c5c:	f024 0403 	bic.w	r4, r4, #3
 8000c60:	42a0      	cmp	r0, r4
 8000c62:	d0f8      	beq.n	8000c56 <sbrk_aligned+0x22>
 8000c64:	1a21      	subs	r1, r4, r0
 8000c66:	4628      	mov	r0, r5
 8000c68:	f000 f9c2 	bl	8000ff0 <_sbrk_r>
 8000c6c:	3001      	adds	r0, #1
 8000c6e:	d1f2      	bne.n	8000c56 <sbrk_aligned+0x22>
 8000c70:	e7ef      	b.n	8000c52 <sbrk_aligned+0x1e>
 8000c72:	bf00      	nop
 8000c74:	200001e4 	.word	0x200001e4

08000c78 <_malloc_r>:
 8000c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c7c:	1ccd      	adds	r5, r1, #3
 8000c7e:	f025 0503 	bic.w	r5, r5, #3
 8000c82:	3508      	adds	r5, #8
 8000c84:	2d0c      	cmp	r5, #12
 8000c86:	bf38      	it	cc
 8000c88:	250c      	movcc	r5, #12
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	4606      	mov	r6, r0
 8000c8e:	db01      	blt.n	8000c94 <_malloc_r+0x1c>
 8000c90:	42a9      	cmp	r1, r5
 8000c92:	d904      	bls.n	8000c9e <_malloc_r+0x26>
 8000c94:	230c      	movs	r3, #12
 8000c96:	6033      	str	r3, [r6, #0]
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d74 <_malloc_r+0xfc>
 8000ca2:	f000 f869 	bl	8000d78 <__malloc_lock>
 8000ca6:	f8d8 3000 	ldr.w	r3, [r8]
 8000caa:	461c      	mov	r4, r3
 8000cac:	bb44      	cbnz	r4, 8000d00 <_malloc_r+0x88>
 8000cae:	4629      	mov	r1, r5
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	f7ff ffbf 	bl	8000c34 <sbrk_aligned>
 8000cb6:	1c43      	adds	r3, r0, #1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	d158      	bne.n	8000d6e <_malloc_r+0xf6>
 8000cbc:	f8d8 4000 	ldr.w	r4, [r8]
 8000cc0:	4627      	mov	r7, r4
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d143      	bne.n	8000d4e <_malloc_r+0xd6>
 8000cc6:	2c00      	cmp	r4, #0
 8000cc8:	d04b      	beq.n	8000d62 <_malloc_r+0xea>
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	4630      	mov	r0, r6
 8000cd0:	eb04 0903 	add.w	r9, r4, r3
 8000cd4:	f000 f98c 	bl	8000ff0 <_sbrk_r>
 8000cd8:	4581      	cmp	r9, r0
 8000cda:	d142      	bne.n	8000d62 <_malloc_r+0xea>
 8000cdc:	6821      	ldr	r1, [r4, #0]
 8000cde:	1a6d      	subs	r5, r5, r1
 8000ce0:	4629      	mov	r1, r5
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	f7ff ffa6 	bl	8000c34 <sbrk_aligned>
 8000ce8:	3001      	adds	r0, #1
 8000cea:	d03a      	beq.n	8000d62 <_malloc_r+0xea>
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	442b      	add	r3, r5
 8000cf0:	6023      	str	r3, [r4, #0]
 8000cf2:	f8d8 3000 	ldr.w	r3, [r8]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	bb62      	cbnz	r2, 8000d54 <_malloc_r+0xdc>
 8000cfa:	f8c8 7000 	str.w	r7, [r8]
 8000cfe:	e00f      	b.n	8000d20 <_malloc_r+0xa8>
 8000d00:	6822      	ldr	r2, [r4, #0]
 8000d02:	1b52      	subs	r2, r2, r5
 8000d04:	d420      	bmi.n	8000d48 <_malloc_r+0xd0>
 8000d06:	2a0b      	cmp	r2, #11
 8000d08:	d917      	bls.n	8000d3a <_malloc_r+0xc2>
 8000d0a:	1961      	adds	r1, r4, r5
 8000d0c:	42a3      	cmp	r3, r4
 8000d0e:	6025      	str	r5, [r4, #0]
 8000d10:	bf18      	it	ne
 8000d12:	6059      	strne	r1, [r3, #4]
 8000d14:	6863      	ldr	r3, [r4, #4]
 8000d16:	bf08      	it	eq
 8000d18:	f8c8 1000 	streq.w	r1, [r8]
 8000d1c:	5162      	str	r2, [r4, r5]
 8000d1e:	604b      	str	r3, [r1, #4]
 8000d20:	4630      	mov	r0, r6
 8000d22:	f000 f82f 	bl	8000d84 <__malloc_unlock>
 8000d26:	f104 000b 	add.w	r0, r4, #11
 8000d2a:	1d23      	adds	r3, r4, #4
 8000d2c:	f020 0007 	bic.w	r0, r0, #7
 8000d30:	1ac2      	subs	r2, r0, r3
 8000d32:	bf1c      	itt	ne
 8000d34:	1a1b      	subne	r3, r3, r0
 8000d36:	50a3      	strne	r3, [r4, r2]
 8000d38:	e7af      	b.n	8000c9a <_malloc_r+0x22>
 8000d3a:	6862      	ldr	r2, [r4, #4]
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	bf0c      	ite	eq
 8000d40:	f8c8 2000 	streq.w	r2, [r8]
 8000d44:	605a      	strne	r2, [r3, #4]
 8000d46:	e7eb      	b.n	8000d20 <_malloc_r+0xa8>
 8000d48:	4623      	mov	r3, r4
 8000d4a:	6864      	ldr	r4, [r4, #4]
 8000d4c:	e7ae      	b.n	8000cac <_malloc_r+0x34>
 8000d4e:	463c      	mov	r4, r7
 8000d50:	687f      	ldr	r7, [r7, #4]
 8000d52:	e7b6      	b.n	8000cc2 <_malloc_r+0x4a>
 8000d54:	461a      	mov	r2, r3
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	42a3      	cmp	r3, r4
 8000d5a:	d1fb      	bne.n	8000d54 <_malloc_r+0xdc>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	6053      	str	r3, [r2, #4]
 8000d60:	e7de      	b.n	8000d20 <_malloc_r+0xa8>
 8000d62:	230c      	movs	r3, #12
 8000d64:	6033      	str	r3, [r6, #0]
 8000d66:	4630      	mov	r0, r6
 8000d68:	f000 f80c 	bl	8000d84 <__malloc_unlock>
 8000d6c:	e794      	b.n	8000c98 <_malloc_r+0x20>
 8000d6e:	6005      	str	r5, [r0, #0]
 8000d70:	e7d6      	b.n	8000d20 <_malloc_r+0xa8>
 8000d72:	bf00      	nop
 8000d74:	200001e8 	.word	0x200001e8

08000d78 <__malloc_lock>:
 8000d78:	4801      	ldr	r0, [pc, #4]	@ (8000d80 <__malloc_lock+0x8>)
 8000d7a:	f7ff bf0e 	b.w	8000b9a <__retarget_lock_acquire_recursive>
 8000d7e:	bf00      	nop
 8000d80:	200001e0 	.word	0x200001e0

08000d84 <__malloc_unlock>:
 8000d84:	4801      	ldr	r0, [pc, #4]	@ (8000d8c <__malloc_unlock+0x8>)
 8000d86:	f7ff bf09 	b.w	8000b9c <__retarget_lock_release_recursive>
 8000d8a:	bf00      	nop
 8000d8c:	200001e0 	.word	0x200001e0

08000d90 <__sflush_r>:
 8000d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d98:	0716      	lsls	r6, r2, #28
 8000d9a:	4605      	mov	r5, r0
 8000d9c:	460c      	mov	r4, r1
 8000d9e:	d454      	bmi.n	8000e4a <__sflush_r+0xba>
 8000da0:	684b      	ldr	r3, [r1, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	dc02      	bgt.n	8000dac <__sflush_r+0x1c>
 8000da6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	dd48      	ble.n	8000e3e <__sflush_r+0xae>
 8000dac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d045      	beq.n	8000e3e <__sflush_r+0xae>
 8000db2:	2300      	movs	r3, #0
 8000db4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000db8:	682f      	ldr	r7, [r5, #0]
 8000dba:	6a21      	ldr	r1, [r4, #32]
 8000dbc:	602b      	str	r3, [r5, #0]
 8000dbe:	d030      	beq.n	8000e22 <__sflush_r+0x92>
 8000dc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000dc2:	89a3      	ldrh	r3, [r4, #12]
 8000dc4:	0759      	lsls	r1, r3, #29
 8000dc6:	d505      	bpl.n	8000dd4 <__sflush_r+0x44>
 8000dc8:	6863      	ldr	r3, [r4, #4]
 8000dca:	1ad2      	subs	r2, r2, r3
 8000dcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000dce:	b10b      	cbz	r3, 8000dd4 <__sflush_r+0x44>
 8000dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000dd2:	1ad2      	subs	r2, r2, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000dd8:	6a21      	ldr	r1, [r4, #32]
 8000dda:	4628      	mov	r0, r5
 8000ddc:	47b0      	blx	r6
 8000dde:	1c43      	adds	r3, r0, #1
 8000de0:	89a3      	ldrh	r3, [r4, #12]
 8000de2:	d106      	bne.n	8000df2 <__sflush_r+0x62>
 8000de4:	6829      	ldr	r1, [r5, #0]
 8000de6:	291d      	cmp	r1, #29
 8000de8:	d82b      	bhi.n	8000e42 <__sflush_r+0xb2>
 8000dea:	4a2a      	ldr	r2, [pc, #168]	@ (8000e94 <__sflush_r+0x104>)
 8000dec:	40ca      	lsrs	r2, r1
 8000dee:	07d6      	lsls	r6, r2, #31
 8000df0:	d527      	bpl.n	8000e42 <__sflush_r+0xb2>
 8000df2:	2200      	movs	r2, #0
 8000df4:	6062      	str	r2, [r4, #4]
 8000df6:	04d9      	lsls	r1, r3, #19
 8000df8:	6922      	ldr	r2, [r4, #16]
 8000dfa:	6022      	str	r2, [r4, #0]
 8000dfc:	d504      	bpl.n	8000e08 <__sflush_r+0x78>
 8000dfe:	1c42      	adds	r2, r0, #1
 8000e00:	d101      	bne.n	8000e06 <__sflush_r+0x76>
 8000e02:	682b      	ldr	r3, [r5, #0]
 8000e04:	b903      	cbnz	r3, 8000e08 <__sflush_r+0x78>
 8000e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8000e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e0a:	602f      	str	r7, [r5, #0]
 8000e0c:	b1b9      	cbz	r1, 8000e3e <__sflush_r+0xae>
 8000e0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d002      	beq.n	8000e1c <__sflush_r+0x8c>
 8000e16:	4628      	mov	r0, r5
 8000e18:	f7ff fec2 	bl	8000ba0 <_free_r>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e20:	e00d      	b.n	8000e3e <__sflush_r+0xae>
 8000e22:	2301      	movs	r3, #1
 8000e24:	4628      	mov	r0, r5
 8000e26:	47b0      	blx	r6
 8000e28:	4602      	mov	r2, r0
 8000e2a:	1c50      	adds	r0, r2, #1
 8000e2c:	d1c9      	bne.n	8000dc2 <__sflush_r+0x32>
 8000e2e:	682b      	ldr	r3, [r5, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0c6      	beq.n	8000dc2 <__sflush_r+0x32>
 8000e34:	2b1d      	cmp	r3, #29
 8000e36:	d001      	beq.n	8000e3c <__sflush_r+0xac>
 8000e38:	2b16      	cmp	r3, #22
 8000e3a:	d11e      	bne.n	8000e7a <__sflush_r+0xea>
 8000e3c:	602f      	str	r7, [r5, #0]
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e022      	b.n	8000e88 <__sflush_r+0xf8>
 8000e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e46:	b21b      	sxth	r3, r3
 8000e48:	e01b      	b.n	8000e82 <__sflush_r+0xf2>
 8000e4a:	690f      	ldr	r7, [r1, #16]
 8000e4c:	2f00      	cmp	r7, #0
 8000e4e:	d0f6      	beq.n	8000e3e <__sflush_r+0xae>
 8000e50:	0793      	lsls	r3, r2, #30
 8000e52:	680e      	ldr	r6, [r1, #0]
 8000e54:	bf08      	it	eq
 8000e56:	694b      	ldreq	r3, [r1, #20]
 8000e58:	600f      	str	r7, [r1, #0]
 8000e5a:	bf18      	it	ne
 8000e5c:	2300      	movne	r3, #0
 8000e5e:	eba6 0807 	sub.w	r8, r6, r7
 8000e62:	608b      	str	r3, [r1, #8]
 8000e64:	f1b8 0f00 	cmp.w	r8, #0
 8000e68:	dde9      	ble.n	8000e3e <__sflush_r+0xae>
 8000e6a:	6a21      	ldr	r1, [r4, #32]
 8000e6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000e6e:	4643      	mov	r3, r8
 8000e70:	463a      	mov	r2, r7
 8000e72:	4628      	mov	r0, r5
 8000e74:	47b0      	blx	r6
 8000e76:	2800      	cmp	r0, #0
 8000e78:	dc08      	bgt.n	8000e8c <__sflush_r+0xfc>
 8000e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e82:	81a3      	strh	r3, [r4, #12]
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e8c:	4407      	add	r7, r0
 8000e8e:	eba8 0800 	sub.w	r8, r8, r0
 8000e92:	e7e7      	b.n	8000e64 <__sflush_r+0xd4>
 8000e94:	20400001 	.word	0x20400001

08000e98 <_fflush_r>:
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	690b      	ldr	r3, [r1, #16]
 8000e9c:	4605      	mov	r5, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	b913      	cbnz	r3, 8000ea8 <_fflush_r+0x10>
 8000ea2:	2500      	movs	r5, #0
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	bd38      	pop	{r3, r4, r5, pc}
 8000ea8:	b118      	cbz	r0, 8000eb2 <_fflush_r+0x1a>
 8000eaa:	6a03      	ldr	r3, [r0, #32]
 8000eac:	b90b      	cbnz	r3, 8000eb2 <_fflush_r+0x1a>
 8000eae:	f7ff fc8f 	bl	80007d0 <__sinit>
 8000eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d0f3      	beq.n	8000ea2 <_fflush_r+0xa>
 8000eba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000ebc:	07d0      	lsls	r0, r2, #31
 8000ebe:	d404      	bmi.n	8000eca <_fflush_r+0x32>
 8000ec0:	0599      	lsls	r1, r3, #22
 8000ec2:	d402      	bmi.n	8000eca <_fflush_r+0x32>
 8000ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ec6:	f7ff fe68 	bl	8000b9a <__retarget_lock_acquire_recursive>
 8000eca:	4628      	mov	r0, r5
 8000ecc:	4621      	mov	r1, r4
 8000ece:	f7ff ff5f 	bl	8000d90 <__sflush_r>
 8000ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000ed4:	07da      	lsls	r2, r3, #31
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	d4e4      	bmi.n	8000ea4 <_fflush_r+0xc>
 8000eda:	89a3      	ldrh	r3, [r4, #12]
 8000edc:	059b      	lsls	r3, r3, #22
 8000ede:	d4e1      	bmi.n	8000ea4 <_fflush_r+0xc>
 8000ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ee2:	f7ff fe5b 	bl	8000b9c <__retarget_lock_release_recursive>
 8000ee6:	e7dd      	b.n	8000ea4 <_fflush_r+0xc>

08000ee8 <__swhatbuf_r>:
 8000ee8:	b570      	push	{r4, r5, r6, lr}
 8000eea:	460c      	mov	r4, r1
 8000eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ef0:	2900      	cmp	r1, #0
 8000ef2:	b096      	sub	sp, #88	@ 0x58
 8000ef4:	4615      	mov	r5, r2
 8000ef6:	461e      	mov	r6, r3
 8000ef8:	da0d      	bge.n	8000f16 <__swhatbuf_r+0x2e>
 8000efa:	89a3      	ldrh	r3, [r4, #12]
 8000efc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000f00:	f04f 0100 	mov.w	r1, #0
 8000f04:	bf14      	ite	ne
 8000f06:	2340      	movne	r3, #64	@ 0x40
 8000f08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	6031      	str	r1, [r6, #0]
 8000f10:	602b      	str	r3, [r5, #0]
 8000f12:	b016      	add	sp, #88	@ 0x58
 8000f14:	bd70      	pop	{r4, r5, r6, pc}
 8000f16:	466a      	mov	r2, sp
 8000f18:	f000 f848 	bl	8000fac <_fstat_r>
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	dbec      	blt.n	8000efa <__swhatbuf_r+0x12>
 8000f20:	9901      	ldr	r1, [sp, #4]
 8000f22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000f26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000f2a:	4259      	negs	r1, r3
 8000f2c:	4159      	adcs	r1, r3
 8000f2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f32:	e7eb      	b.n	8000f0c <__swhatbuf_r+0x24>

08000f34 <__smakebuf_r>:
 8000f34:	898b      	ldrh	r3, [r1, #12]
 8000f36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f38:	079d      	lsls	r5, r3, #30
 8000f3a:	4606      	mov	r6, r0
 8000f3c:	460c      	mov	r4, r1
 8000f3e:	d507      	bpl.n	8000f50 <__smakebuf_r+0x1c>
 8000f40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f44:	6023      	str	r3, [r4, #0]
 8000f46:	6123      	str	r3, [r4, #16]
 8000f48:	2301      	movs	r3, #1
 8000f4a:	6163      	str	r3, [r4, #20]
 8000f4c:	b003      	add	sp, #12
 8000f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f50:	ab01      	add	r3, sp, #4
 8000f52:	466a      	mov	r2, sp
 8000f54:	f7ff ffc8 	bl	8000ee8 <__swhatbuf_r>
 8000f58:	9f00      	ldr	r7, [sp, #0]
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	4639      	mov	r1, r7
 8000f5e:	4630      	mov	r0, r6
 8000f60:	f7ff fe8a 	bl	8000c78 <_malloc_r>
 8000f64:	b948      	cbnz	r0, 8000f7a <__smakebuf_r+0x46>
 8000f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f6a:	059a      	lsls	r2, r3, #22
 8000f6c:	d4ee      	bmi.n	8000f4c <__smakebuf_r+0x18>
 8000f6e:	f023 0303 	bic.w	r3, r3, #3
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	81a3      	strh	r3, [r4, #12]
 8000f78:	e7e2      	b.n	8000f40 <__smakebuf_r+0xc>
 8000f7a:	89a3      	ldrh	r3, [r4, #12]
 8000f7c:	6020      	str	r0, [r4, #0]
 8000f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f82:	81a3      	strh	r3, [r4, #12]
 8000f84:	9b01      	ldr	r3, [sp, #4]
 8000f86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f8a:	b15b      	cbz	r3, 8000fa4 <__smakebuf_r+0x70>
 8000f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f90:	4630      	mov	r0, r6
 8000f92:	f000 f81d 	bl	8000fd0 <_isatty_r>
 8000f96:	b128      	cbz	r0, 8000fa4 <__smakebuf_r+0x70>
 8000f98:	89a3      	ldrh	r3, [r4, #12]
 8000f9a:	f023 0303 	bic.w	r3, r3, #3
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	81a3      	strh	r3, [r4, #12]
 8000fa4:	89a3      	ldrh	r3, [r4, #12]
 8000fa6:	431d      	orrs	r5, r3
 8000fa8:	81a5      	strh	r5, [r4, #12]
 8000faa:	e7cf      	b.n	8000f4c <__smakebuf_r+0x18>

08000fac <_fstat_r>:
 8000fac:	b538      	push	{r3, r4, r5, lr}
 8000fae:	4d07      	ldr	r5, [pc, #28]	@ (8000fcc <_fstat_r+0x20>)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	602b      	str	r3, [r5, #0]
 8000fba:	f7ff faf4 	bl	80005a6 <_fstat>
 8000fbe:	1c43      	adds	r3, r0, #1
 8000fc0:	d102      	bne.n	8000fc8 <_fstat_r+0x1c>
 8000fc2:	682b      	ldr	r3, [r5, #0]
 8000fc4:	b103      	cbz	r3, 8000fc8 <_fstat_r+0x1c>
 8000fc6:	6023      	str	r3, [r4, #0]
 8000fc8:	bd38      	pop	{r3, r4, r5, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001dc 	.word	0x200001dc

08000fd0 <_isatty_r>:
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 8000fd2:	4d06      	ldr	r5, [pc, #24]	@ (8000fec <_isatty_r+0x1c>)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	602b      	str	r3, [r5, #0]
 8000fdc:	f7ff faf3 	bl	80005c6 <_isatty>
 8000fe0:	1c43      	adds	r3, r0, #1
 8000fe2:	d102      	bne.n	8000fea <_isatty_r+0x1a>
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	b103      	cbz	r3, 8000fea <_isatty_r+0x1a>
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	200001dc 	.word	0x200001dc

08000ff0 <_sbrk_r>:
 8000ff0:	b538      	push	{r3, r4, r5, lr}
 8000ff2:	4d06      	ldr	r5, [pc, #24]	@ (800100c <_sbrk_r+0x1c>)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	602b      	str	r3, [r5, #0]
 8000ffc:	f7ff fafc 	bl	80005f8 <_sbrk>
 8001000:	1c43      	adds	r3, r0, #1
 8001002:	d102      	bne.n	800100a <_sbrk_r+0x1a>
 8001004:	682b      	ldr	r3, [r5, #0]
 8001006:	b103      	cbz	r3, 800100a <_sbrk_r+0x1a>
 8001008:	6023      	str	r3, [r4, #0]
 800100a:	bd38      	pop	{r3, r4, r5, pc}
 800100c:	200001dc 	.word	0x200001dc

08001010 <_init>:
 8001010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001012:	bf00      	nop
 8001014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001016:	bc08      	pop	{r3}
 8001018:	469e      	mov	lr, r3
 800101a:	4770      	bx	lr

0800101c <_fini>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	bf00      	nop
 8001020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001022:	bc08      	pop	{r3}
 8001024:	469e      	mov	lr, r3
 8001026:	4770      	bx	lr
