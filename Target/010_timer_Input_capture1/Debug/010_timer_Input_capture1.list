
010_timer_Input_capture1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006708  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080068d8  080068d8  000078d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c84  08006c84  000081d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006c84  08006c84  00007c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c8c  08006c8c  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c8c  08006c8c  00007c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006c94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d8  08006e6c  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006e6c  000083e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d41d  00000000  00000000  00008208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d77  00000000  00000000  00015625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  000173a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009c4  00000000  00000000  00018020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022c98  00000000  00000000  000189e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e2d6  00000000  00000000  0003b67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d27da  00000000  00000000  00049952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c12c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004610  00000000  00000000  0011c170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00120780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068c0 	.word	0x080068c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080068c0 	.word	0x080068c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <SysTick_Handler>:
 */

#include "main.h"
extern TIM_HandleTypeDef htimer2;

void SysTick_Handler(void){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000f18:	f000 fc02 	bl	8001720 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000f1c:	f000 fd4e 	bl	80019bc <HAL_SYSTICK_IRQHandler>
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <TIM2_IRQHandler+0x10>)
 8000f2a:	f001 feb1 	bl	8002c90 <HAL_TIM_IRQHandler>
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200001f4 	.word	0x200001f4

08000f38 <main>:

uint32_t input_capture[2] = {0}; 
uint8_t count = 1;
uint8_t is_capture_done = FALSE;

int main(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b0a4      	sub	sp, #144	@ 0x90
 8000f3c:	af00      	add	r7, sp, #0
	uint32_t capture_difference = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	double timer2_cnt_freq = 0;
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	double timer2_cnt_res = 0;
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	f04f 0300 	mov.w	r3, #0
 8000f58:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
	double user_signal_time_period = 0;
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	double user_signal_freq = 0;
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68





UART2_Init();
 8000f74:	f000 f882 	bl	800107c <UART2_Init>
	HAL_Init();
 8000f78:	f000 fb80 	bl	800167c <HAL_Init>

	SystemClock_Config(SYSCLOCK_FREQ_50MHZ);
 8000f7c:	2032      	movs	r0, #50	@ 0x32
 8000f7e:	f000 f93b 	bl	80011f8 <SystemClock_Config>

	GPIO_Init();
 8000f82:	f000 f8a1 	bl	80010c8 <GPIO_Init>
	UART2_Init();
 8000f86:	f000 f879 	bl	800107c <UART2_Init>
	TIMER2_Init();
 8000f8a:	f000 f8c1 	bl	8001110 <TIMER2_Init>
	HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	4834      	ldr	r0, [pc, #208]	@ (8001064 <main+0x12c>)
 8000f92:	f001 fd55 	bl	8002a40 <HAL_TIM_IC_Start_IT>
	LSE_Configuration();
 8000f96:	f000 f8ed 	bl	8001174 <LSE_Configuration>

	while(1){
		if(is_capture_done){
 8000f9a:	4b33      	ldr	r3, [pc, #204]	@ (8001068 <main+0x130>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d0fb      	beq.n	8000f9a <main+0x62>
			if(input_capture[0] > input_capture[1]){
 8000fa2:	4b32      	ldr	r3, [pc, #200]	@ (800106c <main+0x134>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	@ (800106c <main+0x134>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d907      	bls.n	8000fbe <main+0x86>
				capture_difference = input_capture[1] - input_capture[0];
 8000fae:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <main+0x134>)
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <main+0x134>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000fbc:	e007      	b.n	8000fce <main+0x96>
			} else{
				capture_difference = (0xFFFFFFFF - input_capture[0]) + input_capture[1];
 8000fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800106c <main+0x134>)
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <main+0x134>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
			}
		
			timer2_cnt_freq = (HAL_RCC_GetPCLK1Freq() * 2 ) / (htimer2.Init.Prescaler+1);
 8000fce:	f000 fff1 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	005a      	lsls	r2, r3, #1
 8000fd6:	4b23      	ldr	r3, [pc, #140]	@ (8001064 <main+0x12c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff faaf 	bl	8000544 <__aeabi_ui2d>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	460b      	mov	r3, r1
 8000fea:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
			timer2_cnt_res = 1 / timer2_cnt_freq;
 8000fee:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	491e      	ldr	r1, [pc, #120]	@ (8001070 <main+0x138>)
 8000ff8:	f7ff fc48 	bl	800088c <__aeabi_ddiv>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
			user_signal_time_period = capture_difference * timer2_cnt_res;
 8001004:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001008:	f7ff fa9c 	bl	8000544 <__aeabi_ui2d>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8001014:	f7ff fb10 	bl	8000638 <__aeabi_dmul>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
			user_signal_freq = 1 / user_signal_time_period;
 8001020:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001024:	f04f 0000 	mov.w	r0, #0
 8001028:	4911      	ldr	r1, [pc, #68]	@ (8001070 <main+0x138>)
 800102a:	f7ff fc2f 	bl	800088c <__aeabi_ddiv>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
			
			sprintf(user_msg, "Frequency of the applied : %f\r\n", user_signal_freq	);
 8001036:	1d38      	adds	r0, r7, #4
 8001038:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800103c:	490d      	ldr	r1, [pc, #52]	@ (8001074 <main+0x13c>)
 800103e:	f003 fb0d 	bl	800465c <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)user_msg, strlen(user_msg), HAL_MAX_DELAY);
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff f933 	bl	80002b0 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29a      	uxth	r2, r3
 800104e:	1d39      	adds	r1, r7, #4
 8001050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001054:	4808      	ldr	r0, [pc, #32]	@ (8001078 <main+0x140>)
 8001056:	f002 fa2e 	bl	80034b6 <HAL_UART_Transmit>
			is_capture_done = FALSE;
 800105a:	4b03      	ldr	r3, [pc, #12]	@ (8001068 <main+0x130>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
		if(is_capture_done){
 8001060:	e79b      	b.n	8000f9a <main+0x62>
 8001062:	bf00      	nop
 8001064:	200001f4 	.word	0x200001f4
 8001068:	2000028c 	.word	0x2000028c
 800106c:	20000284 	.word	0x20000284
 8001070:	3ff00000 	.word	0x3ff00000
 8001074:	080068d8 	.word	0x080068d8
 8001078:	2000023c 	.word	0x2000023c

0800107c <UART2_Init>:
	}

	return 0;
}

void UART2_Init(){
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8001080:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <UART2_Init+0x44>)
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <UART2_Init+0x48>)
 8001084:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001086:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <UART2_Init+0x44>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <UART2_Init+0x44>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <UART2_Init+0x44>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <UART2_Init+0x44>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <UART2_Init+0x44>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <UART2_Init+0x44>)
 80010a8:	220c      	movs	r2, #12
 80010aa:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 80010ac:	4804      	ldr	r0, [pc, #16]	@ (80010c0 <UART2_Init+0x44>)
 80010ae:	f002 f9b2 	bl	8003416 <HAL_UART_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <UART2_Init+0x40>
		// there is problem
		Error_handler();
 80010b8:	f000 f89a 	bl	80011f0 <Error_handler>

	}
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000023c 	.word	0x2000023c
 80010c4:	40004400 	.word	0x40004400

080010c8 <GPIO_Init>:

void GPIO_Init(void){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0

	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <GPIO_Init+0x40>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001108 <GPIO_Init+0x40>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <GPIO_Init+0x40>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80010ea:	2320      	movs	r3, #32
 80010ec:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &ledgpio);
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <GPIO_Init+0x44>)
 80010fc:	f000 fc6c 	bl	80019d8 <HAL_GPIO_Init>
}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000

08001110 <TIMER2_Init>:

void TIMER2_Init(void){
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0

	TIM_IC_InitTypeDef timer2IC_Config;

	htimer2.Instance = TIM2;
 8001116:	4b16      	ldr	r3, [pc, #88]	@ (8001170 <TIMER2_Init+0x60>)
 8001118:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800111c:	601a      	str	r2, [r3, #0]
	htimer2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <TIMER2_Init+0x60>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
	htimer2.Init.Period = 0xFFFFFFFF;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <TIMER2_Init+0x60>)
 8001126:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800112a:	60da      	str	r2, [r3, #12]
	htimer2.Init.Prescaler = 1;
 800112c:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <TIMER2_Init+0x60>)
 800112e:	2201      	movs	r2, #1
 8001130:	605a      	str	r2, [r3, #4]
	if(HAL_TIM_IC_Init(&htimer2) != HAL_OK){
 8001132:	480f      	ldr	r0, [pc, #60]	@ (8001170 <TIMER2_Init+0x60>)
 8001134:	f001 fc34 	bl	80029a0 <HAL_TIM_IC_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <TIMER2_Init+0x32>
		Error_handler();
 800113e:	f000 f857 	bl	80011f0 <Error_handler>
	}

	timer2IC_Config.ICFilter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
	timer2IC_Config.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
	timer2IC_Config.ICPrescaler	= TIM_ICPSC_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
	timer2IC_Config.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800114e:	2301      	movs	r3, #1
 8001150:	607b      	str	r3, [r7, #4]
	if(HAL_TIM_IC_ConfigChannel(&htimer2, &timer2IC_Config, TIM_CHANNEL_1) != HAL_OK){
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	@ (8001170 <TIMER2_Init+0x60>)
 800115a:	f001 fe89 	bl	8002e70 <HAL_TIM_IC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <TIMER2_Init+0x58>
		Error_handler();
 8001164:	f000 f844 	bl	80011f0 <Error_handler>
	}
	
}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200001f4 	.word	0x200001f4

08001174 <LSE_Configuration>:

void LSE_Configuration(void){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
		Error_handler();
	}
#endif

	// HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_LSE, RCC_MCODIV_1);
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_4);
 8001178:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800117c:	2100      	movs	r1, #0
 800117e:	2000      	movs	r0, #0
 8001180:	f000 fea4 	bl	8001ecc <HAL_RCC_MCOConfig>
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
	if(! is_capture_done){
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d11e      	bne.n	80011d6 <HAL_TIM_IC_CaptureCallback+0x4e>
		if(count == 1){
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x60>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10b      	bne.n	80011b8 <HAL_TIM_IC_CaptureCallback+0x30>
			input_capture[0] = __HAL_TIM_GetCompare(htim, TIM_CHANNEL_1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011a6:	4a11      	ldr	r2, [pc, #68]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80011a8:	6013      	str	r3, [r2, #0]
			count++;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	3301      	adds	r3, #1
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011b4:	701a      	strb	r2, [r3, #0]
			input_capture[1] = __HAL_TIM_GetCompare(htim, TIM_CHANNEL_1);
			count = 1;
			is_capture_done = TRUE;
		}
	}
}
 80011b6:	e00e      	b.n	80011d6 <HAL_TIM_IC_CaptureCallback+0x4e>
		else if(count == 2){
 80011b8:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d10a      	bne.n	80011d6 <HAL_TIM_IC_CaptureCallback+0x4e>
			input_capture[1] = __HAL_TIM_GetCompare(htim, TIM_CHANNEL_1);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c6:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <HAL_TIM_IC_CaptureCallback+0x64>)
 80011c8:	6053      	str	r3, [r2, #4]
			count = 1;
 80011ca:	4b07      	ldr	r3, [pc, #28]	@ (80011e8 <HAL_TIM_IC_CaptureCallback+0x60>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	701a      	strb	r2, [r3, #0]
			is_capture_done = TRUE;
 80011d0:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	701a      	strb	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	2000028c 	.word	0x2000028c
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000284 	.word	0x20000284

080011f0 <Error_handler>:


void Error_handler(void){
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
	while(1);
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <Error_handler+0x4>

080011f8 <SystemClock_Config>:
}

void SystemClock_Config(uint8_t clock_freq){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b096      	sub	sp, #88	@ 0x58
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	657b      	str	r3, [r7, #84]	@ 0x54

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI  ;
 8001206:	2307      	movs	r3, #7
 8001208:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 800120a:	2301      	movs	r3, #1
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	osc_init.LSEState = RCC_LSE_ON;
 800120e:	2301      	movs	r3, #1
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
	osc_init.HSEState = RCC_HSE_ON;
 8001212:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001218:	2310      	movs	r3, #16
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001220:	2300      	movs	r3, #0
 8001222:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clock_freq)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b78      	cmp	r3, #120	@ 0x78
 8001228:	d038      	beq.n	800129c <SystemClock_Config+0xa4>
 800122a:	2b78      	cmp	r3, #120	@ 0x78
 800122c:	dc77      	bgt.n	800131e <SystemClock_Config+0x126>
 800122e:	2b32      	cmp	r3, #50	@ 0x32
 8001230:	d002      	beq.n	8001238 <SystemClock_Config+0x40>
 8001232:	2b54      	cmp	r3, #84	@ 0x54
 8001234:	d019      	beq.n	800126a <SystemClock_Config+0x72>
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:
			return;
 8001236:	e072      	b.n	800131e <SystemClock_Config+0x126>
			osc_init.PLL.PLLM = 16;
 8001238:	2310      	movs	r3, #16
 800123a:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 100;
 800123c:	2364      	movs	r3, #100	@ 0x64
 800123e:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 8001240:	2302      	movs	r3, #2
 8001242:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 8001248:	2302      	movs	r3, #2
 800124a:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800124c:	230f      	movs	r3, #15
 800124e:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001250:	2302      	movs	r3, #2
 8001252:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 8001258:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800125c:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_1WS;
 8001264:	2301      	movs	r3, #1
 8001266:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 8001268:	e031      	b.n	80012ce <SystemClock_Config+0xd6>
			osc_init.PLL.PLLM = 16;
 800126a:	2310      	movs	r3, #16
 800126c:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 168;
 800126e:	23a8      	movs	r3, #168	@ 0xa8
 8001270:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8001276:	2302      	movs	r3, #2
 8001278:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 800127a:	2302      	movs	r3, #2
 800127c:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800127e:	230f      	movs	r3, #15
 8001280:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001282:	2302      	movs	r3, #2
 8001284:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8001290:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001294:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_2WS;
 8001296:	2302      	movs	r3, #2
 8001298:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 800129a:	e018      	b.n	80012ce <SystemClock_Config+0xd6>
			osc_init.PLL.PLLM = 16;
 800129c:	2310      	movs	r3, #16
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 240;
 80012a0:	23f0      	movs	r3, #240	@ 0xf0
 80012a2:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012b0:	230f      	movs	r3, #15
 80012b2:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b4:	2302      	movs	r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 80012bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c0:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c6:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_3WS;
 80012c8:	2303      	movs	r3, #3
 80012ca:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 80012cc:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 f8c6 	bl	8002464 <HAL_RCC_OscConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xea>
		Error_handler();
 80012de:	f7ff ff87 	bl	80011f0 <Error_handler>
	}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 80012e2:	f107 030c 	add.w	r3, r7, #12
 80012e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 fd09 	bl	8001d00 <HAL_RCC_ClockConfig>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <SystemClock_Config+0x100>
		Error_handler();
 80012f4:	f7ff ff7c 	bl	80011f0 <Error_handler>
	}
	if(HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000) != HAL_OK){
 80012f8:	f000 fe50 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <SystemClock_Config+0x130>)
 8001300:	fba2 2303 	umull	r2, r3, r2, r3
 8001304:	099b      	lsrs	r3, r3, #6
 8001306:	4618      	mov	r0, r3
 8001308:	f000 fb2f 	bl	800196a <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x11e>
		Error_handler();
 8001312:	f7ff ff6d 	bl	80011f0 <Error_handler>
	}
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001316:	2004      	movs	r0, #4
 8001318:	f000 fb34 	bl	8001984 <HAL_SYSTICK_CLKSourceConfig>
 800131c:	e000      	b.n	8001320 <SystemClock_Config+0x128>
			return;
 800131e:	bf00      	nop

}
 8001320:	3758      	adds	r7, #88	@ 0x58
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	10624dd3 	.word	0x10624dd3

0800132c <HAL_MspInit>:
  */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	//  NOTE : The HAL_MspInit could be implemented in the user file

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f000 fae5 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>
	// 2. Enable the required system exception of arm cortex mx processor
	SCB ->SHCSR |= 0x7 << 16; // usg fault, memory fault, and bus fault, system exception.
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <HAL_MspInit+0x40>)
 8001338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133a:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <HAL_MspInit+0x40>)
 800133c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8001340:	6253      	str	r3, [r2, #36]	@ 0x24
	// 3. configure the priority fro the system exception.
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	f06f 000b 	mvn.w	r0, #11
 800134a:	f000 fae4 	bl	8001916 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	f06f 000a 	mvn.w	r0, #10
 8001356:	f000 fade 	bl	8001916 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	f06f 0009 	mvn.w	r0, #9
 8001362:	f000 fad8 	bl	8001916 <HAL_NVIC_SetPriority>

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2ch1_gpio;
	// 1. Enable the clock for the timer2 peripheral
	__HAL_RCC_TIM2_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <HAL_TIM_IC_MspInit+0x70>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001380:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <HAL_TIM_IC_MspInit+0x70>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6413      	str	r3, [r2, #64]	@ 0x40
 8001388:	4b15      	ldr	r3, [pc, #84]	@ (80013e0 <HAL_TIM_IC_MspInit+0x70>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <HAL_TIM_IC_MspInit+0x70>)
 800139a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139c:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <HAL_TIM_IC_MspInit+0x70>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a4:	4b0e      	ldr	r3, [pc, #56]	@ (80013e0 <HAL_TIM_IC_MspInit+0x70>)
 80013a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]

	// 2. configure the GPIO to behave as timer2 channel 1
	tim2ch1_gpio.Pin = GPIO_PIN_0;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
	tim2ch1_gpio.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	61bb      	str	r3, [r7, #24]
	tim2ch1_gpio.Alternate = GPIO_AF1_TIM2;
 80013b8:	2301      	movs	r3, #1
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &tim2ch1_gpio);
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	4619      	mov	r1, r3
 80013c2:	4808      	ldr	r0, [pc, #32]	@ (80013e4 <HAL_TIM_IC_MspInit+0x74>)
 80013c4:	f000 fb08 	bl	80019d8 <HAL_GPIO_Init>

	// 3. Enable the nvic setting for the timer2 global interrupt
	HAL_NVIC_SetPriority(TIM2_IRQn,15,0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	210f      	movs	r1, #15
 80013cc:	201c      	movs	r0, #28
 80013ce:	f000 faa2 	bl	8001916 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d2:	201c      	movs	r0, #28
 80013d4:	f000 fabb 	bl	800194e <HAL_NVIC_EnableIRQ>
	

}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	@ 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	@ 0x28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	// here we are going to do low level inits of uart2
	GPIO_InitTypeDef gpio_uart;
	// 1. enable the clock for USART2
	__HAL_RCC_USART2_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <HAL_UART_MspInit+0x88>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <HAL_UART_MspInit+0x88>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001400:	4b1b      	ldr	r3, [pc, #108]	@ (8001470 <HAL_UART_MspInit+0x88>)
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <HAL_UART_MspInit+0x88>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001414:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <HAL_UART_MspInit+0x88>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6313      	str	r3, [r2, #48]	@ 0x30
 800141c:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <HAL_UART_MspInit+0x88>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
	// 2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;
 8001428:	2304      	movs	r3, #4
 800142a:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8001430:	2301      	movs	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;				// UART2_TX
 8001438:	2307      	movs	r3, #7
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	480c      	ldr	r0, [pc, #48]	@ (8001474 <HAL_UART_MspInit+0x8c>)
 8001444:	f000 fac8 	bl	80019d8 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;							// UART2_RX
 8001448:	2308      	movs	r3, #8
 800144a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4808      	ldr	r0, [pc, #32]	@ (8001474 <HAL_UART_MspInit+0x8c>)
 8001454:	f000 fac0 	bl	80019d8 <HAL_GPIO_Init>
	// 3. Enable the IRQ and set up the priority (NVIC)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001458:	2026      	movs	r0, #38	@ 0x26
 800145a:	f000 fa78 	bl	800194e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	210f      	movs	r1, #15
 8001462:	2026      	movs	r0, #38	@ 0x26
 8001464:	f000 fa57 	bl	8001916 <HAL_NVIC_SetPriority>
}
 8001468:	bf00      	nop
 800146a:	3728      	adds	r7, #40	@ 0x28
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40023800 	.word	0x40023800
 8001474:	40020000 	.word	0x40020000

08001478 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return 1;
 800147c:	2301      	movs	r3, #1
}
 800147e:	4618      	mov	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <_kill>:

int _kill(int pid, int sig)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001492:	f003 f99b 	bl	80047cc <__errno>
 8001496:	4603      	mov	r3, r0
 8001498:	2216      	movs	r2, #22
 800149a:	601a      	str	r2, [r3, #0]
  return -1;
 800149c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <_exit>:

void _exit (int status)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ffe7 	bl	8001488 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014ba:	bf00      	nop
 80014bc:	e7fd      	b.n	80014ba <_exit+0x12>

080014be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	60f8      	str	r0, [r7, #12]
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	e00a      	b.n	80014e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014d0:	f3af 8000 	nop.w
 80014d4:	4601      	mov	r1, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1c5a      	adds	r2, r3, #1
 80014da:	60ba      	str	r2, [r7, #8]
 80014dc:	b2ca      	uxtb	r2, r1
 80014de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	3301      	adds	r3, #1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	dbf0      	blt.n	80014d0 <_read+0x12>
  }

  return len;
 80014ee:	687b      	ldr	r3, [r7, #4]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e009      	b.n	800151e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1c5a      	adds	r2, r3, #1
 800150e:	60ba      	str	r2, [r7, #8]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	429a      	cmp	r2, r3
 8001524:	dbf1      	blt.n	800150a <_write+0x12>
  }
  return len;
 8001526:	687b      	ldr	r3, [r7, #4]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <_close>:

int _close(int file)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001558:	605a      	str	r2, [r3, #4]
  return 0;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_isatty>:

int _isatty(int file)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800157e:	b480      	push	{r7}
 8001580:	b085      	sub	sp, #20
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a0:	4a14      	ldr	r2, [pc, #80]	@ (80015f4 <_sbrk+0x5c>)
 80015a2:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <_sbrk+0x60>)
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <_sbrk+0x64>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d102      	bne.n	80015ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <_sbrk+0x64>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <_sbrk+0x68>)
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d207      	bcs.n	80015d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015c8:	f003 f900 	bl	80047cc <__errno>
 80015cc:	4603      	mov	r3, r0
 80015ce:	220c      	movs	r2, #12
 80015d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015d6:	e009      	b.n	80015ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015d8:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015de:	4b07      	ldr	r3, [pc, #28]	@ (80015fc <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <_sbrk+0x64>)
 80015e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ea:	68fb      	ldr	r3, [r7, #12]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20020000 	.word	0x20020000
 80015f8:	00000400 	.word	0x00000400
 80015fc:	20000290 	.word	0x20000290
 8001600:	200003e8 	.word	0x200003e8

08001604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001608:	4b06      	ldr	r3, [pc, #24]	@ (8001624 <SystemInit+0x20>)
 800160a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800160e:	4a05      	ldr	r2, [pc, #20]	@ (8001624 <SystemInit+0x20>)
 8001610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001628:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001660 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800162c:	f7ff ffea 	bl	8001604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001632:	490d      	ldr	r1, [pc, #52]	@ (8001668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001648:	4c0a      	ldr	r4, [pc, #40]	@ (8001674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001656:	f003 f8bf 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff fc6d 	bl	8000f38 <main>
  bx  lr    
 800165e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001668:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800166c:	08006c94 	.word	0x08006c94
  ldr r2, =_sbss
 8001670:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001674:	200003e4 	.word	0x200003e4

08001678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001680:	4b0e      	ldr	r3, [pc, #56]	@ (80016bc <HAL_Init+0x40>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <HAL_Init+0x40>)
 8001686:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800168a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_Init+0x40>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <HAL_Init+0x40>)
 8001692:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a07      	ldr	r2, [pc, #28]	@ (80016bc <HAL_Init+0x40>)
 800169e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a4:	2003      	movs	r0, #3
 80016a6:	f000 f92b 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f000 f808 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016b0:	f7ff fe3c 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023c00 	.word	0x40023c00

080016c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <HAL_InitTick+0x54>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <HAL_InitTick+0x58>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4619      	mov	r1, r3
 80016d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f943 	bl	800196a <HAL_SYSTICK_Config>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00e      	b.n	800170c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2b0f      	cmp	r3, #15
 80016f2:	d80a      	bhi.n	800170a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f4:	2200      	movs	r2, #0
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016fc:	f000 f90b 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001700:	4a06      	ldr	r2, [pc, #24]	@ (800171c <HAL_InitTick+0x5c>)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001706:	2300      	movs	r3, #0
 8001708:	e000      	b.n	800170c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000004 	.word	0x20000004
 8001718:	2000000c 	.word	0x2000000c
 800171c:	20000008 	.word	0x20000008

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	2000000c 	.word	0x2000000c
 8001744:	20000294 	.word	0x20000294

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000294 	.word	0x20000294

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018e0:	f7ff ff8e 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	@ (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff29 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff3e 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff8e 	bl	8001854 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5d 	bl	8001800 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff31 	bl	80017c4 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b04      	cmp	r3, #4
 8001990:	d106      	bne.n	80019a0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001998:	f043 0304 	orr.w	r3, r3, #4
 800199c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800199e:	e005      	b.n	80019ac <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	6013      	str	r3, [r2, #0]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80019c0:	f000 f802 	bl	80019c8 <HAL_SYSTICK_Callback>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e165      	b.n	8001cc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8154 	bne.w	8001cba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80ae 	beq.w	8001cba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b5d      	ldr	r3, [pc, #372]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd8 <HAL_GPIO_Init+0x300>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a58      	ldr	r2, [pc, #352]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce0 <HAL_GPIO_Init+0x308>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce4 <HAL_GPIO_Init+0x30c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x216>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce8 <HAL_GPIO_Init+0x310>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x212>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cec <HAL_GPIO_Init+0x314>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x20e>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf0 <HAL_GPIO_Init+0x318>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x20a>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf4 <HAL_GPIO_Init+0x31c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x206>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a49      	ldr	r2, [pc, #292]	@ (8001cf8 <HAL_GPIO_Init+0x320>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x202>
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	e00c      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00a      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bde:	2305      	movs	r3, #5
 8001be0:	e008      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be2:	2304      	movs	r3, #4
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001be6:	2303      	movs	r3, #3
 8001be8:	e004      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <HAL_GPIO_Init+0x21c>
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	f002 0203 	and.w	r2, r2, #3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4093      	lsls	r3, r2
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c04:	4935      	ldr	r1, [pc, #212]	@ (8001cdc <HAL_GPIO_Init+0x304>)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	089b      	lsrs	r3, r3, #2
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c12:	4b3a      	ldr	r3, [pc, #232]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c36:	4a31      	ldr	r2, [pc, #196]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c60:	4a26      	ldr	r2, [pc, #152]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c66:	4b25      	ldr	r3, [pc, #148]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c90:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb4:	4a11      	ldr	r2, [pc, #68]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2b0f      	cmp	r3, #15
 8001cc4:	f67f ae96 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3724      	adds	r7, #36	@ 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40013800 	.word	0x40013800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	40020400 	.word	0x40020400
 8001ce8:	40020800 	.word	0x40020800
 8001cec:	40020c00 	.word	0x40020c00
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40021400 	.word	0x40021400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0cc      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b68      	ldr	r3, [pc, #416]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 030f 	and.w	r3, r3, #15
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d90c      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b65      	ldr	r3, [pc, #404]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a52      	ldr	r2, [pc, #328]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d044      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d119      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e067      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4934      	ldr	r1, [pc, #208]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff fcaa 	bl	8001748 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff fca6 	bl	8001748 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e04f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d20c      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f8bd 	bl	8002004 <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fc0a 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	080068f8 	.word	0x080068f8
 8001ec4:	20000004 	.word	0x20000004
 8001ec8:	20000008 	.word	0x20000008

08001ecc <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08c      	sub	sp, #48	@ 0x30
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d129      	bne.n	8001f32 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61bb      	str	r3, [r7, #24]
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a2a      	ldr	r2, [pc, #168]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b28      	ldr	r3, [pc, #160]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001efa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	481f      	ldr	r0, [pc, #124]	@ (8001f94 <HAL_RCC_MCOConfig+0xc8>)
 8001f18:	f7ff fd5e 	bl	80019d8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 8001f24:	68b9      	ldr	r1, [r7, #8]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	430b      	orrs	r3, r1
 8001f2a:	4919      	ldr	r1, [pc, #100]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8001f30:	e029      	b.n	8001f86 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	4b16      	ldr	r3, [pc, #88]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a15      	ldr	r2, [pc, #84]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001f3c:	f043 0304 	orr.w	r3, r3, #4
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b13      	ldr	r3, [pc, #76]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001f4e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	480b      	ldr	r0, [pc, #44]	@ (8001f98 <HAL_RCC_MCOConfig+0xcc>)
 8001f6c:	f7ff fd34 	bl	80019d8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8001f70:	4b07      	ldr	r3, [pc, #28]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	00d9      	lsls	r1, r3, #3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	4903      	ldr	r1, [pc, #12]	@ (8001f90 <HAL_RCC_MCOConfig+0xc4>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	608b      	str	r3, [r1, #8]
}
 8001f86:	bf00      	nop
 8001f88:	3730      	adds	r7, #48	@ 0x30
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020800 	.word	0x40020800

08001f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	@ (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000004 	.word	0x20000004

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a9b      	lsrs	r3, r3, #10
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4903      	ldr	r1, [pc, #12]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08006908 	.word	0x08006908

08001fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe0:	f7ff ffdc 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	0b5b      	lsrs	r3, r3, #13
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	4903      	ldr	r1, [pc, #12]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40023800 	.word	0x40023800
 8002000:	08006908 	.word	0x08006908

08002004 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002008:	b0ae      	sub	sp, #184	@ 0xb8
 800200a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202a:	4bcb      	ldr	r3, [pc, #812]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
 8002032:	2b0c      	cmp	r3, #12
 8002034:	f200 8206 	bhi.w	8002444 <HAL_RCC_GetSysClockFreq+0x440>
 8002038:	a201      	add	r2, pc, #4	@ (adr r2, 8002040 <HAL_RCC_GetSysClockFreq+0x3c>)
 800203a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800203e:	bf00      	nop
 8002040:	08002075 	.word	0x08002075
 8002044:	08002445 	.word	0x08002445
 8002048:	08002445 	.word	0x08002445
 800204c:	08002445 	.word	0x08002445
 8002050:	0800207d 	.word	0x0800207d
 8002054:	08002445 	.word	0x08002445
 8002058:	08002445 	.word	0x08002445
 800205c:	08002445 	.word	0x08002445
 8002060:	08002085 	.word	0x08002085
 8002064:	08002445 	.word	0x08002445
 8002068:	08002445 	.word	0x08002445
 800206c:	08002445 	.word	0x08002445
 8002070:	08002275 	.word	0x08002275
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002074:	4bb9      	ldr	r3, [pc, #740]	@ (800235c <HAL_RCC_GetSysClockFreq+0x358>)
 8002076:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800207a:	e1e7      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800207c:	4bb8      	ldr	r3, [pc, #736]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x35c>)
 800207e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002082:	e1e3      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002084:	4bb4      	ldr	r3, [pc, #720]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800208c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002090:	4bb1      	ldr	r3, [pc, #708]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d071      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209c:	4bae      	ldr	r3, [pc, #696]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	099b      	lsrs	r3, r3, #6
 80020a2:	2200      	movs	r2, #0
 80020a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80020ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80020b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80020be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80020c2:	4622      	mov	r2, r4
 80020c4:	462b      	mov	r3, r5
 80020c6:	f04f 0000 	mov.w	r0, #0
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	0159      	lsls	r1, r3, #5
 80020d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020d4:	0150      	lsls	r0, r2, #5
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4621      	mov	r1, r4
 80020dc:	1a51      	subs	r1, r2, r1
 80020de:	6439      	str	r1, [r7, #64]	@ 0x40
 80020e0:	4629      	mov	r1, r5
 80020e2:	eb63 0301 	sbc.w	r3, r3, r1
 80020e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80020e8:	f04f 0200 	mov.w	r2, #0
 80020ec:	f04f 0300 	mov.w	r3, #0
 80020f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80020f4:	4649      	mov	r1, r9
 80020f6:	018b      	lsls	r3, r1, #6
 80020f8:	4641      	mov	r1, r8
 80020fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020fe:	4641      	mov	r1, r8
 8002100:	018a      	lsls	r2, r1, #6
 8002102:	4641      	mov	r1, r8
 8002104:	1a51      	subs	r1, r2, r1
 8002106:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002108:	4649      	mov	r1, r9
 800210a:	eb63 0301 	sbc.w	r3, r3, r1
 800210e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800211c:	4649      	mov	r1, r9
 800211e:	00cb      	lsls	r3, r1, #3
 8002120:	4641      	mov	r1, r8
 8002122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002126:	4641      	mov	r1, r8
 8002128:	00ca      	lsls	r2, r1, #3
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	4603      	mov	r3, r0
 8002130:	4622      	mov	r2, r4
 8002132:	189b      	adds	r3, r3, r2
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
 8002136:	462b      	mov	r3, r5
 8002138:	460a      	mov	r2, r1
 800213a:	eb42 0303 	adc.w	r3, r2, r3
 800213e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	f04f 0300 	mov.w	r3, #0
 8002148:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800214c:	4629      	mov	r1, r5
 800214e:	024b      	lsls	r3, r1, #9
 8002150:	4621      	mov	r1, r4
 8002152:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002156:	4621      	mov	r1, r4
 8002158:	024a      	lsls	r2, r1, #9
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002162:	2200      	movs	r2, #0
 8002164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002168:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800216c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002170:	f7fe fd3a 	bl	8000be8 <__aeabi_uldivmod>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4613      	mov	r3, r2
 800217a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800217e:	e067      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002180:	4b75      	ldr	r3, [pc, #468]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	099b      	lsrs	r3, r3, #6
 8002186:	2200      	movs	r2, #0
 8002188:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800218c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002190:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002198:	67bb      	str	r3, [r7, #120]	@ 0x78
 800219a:	2300      	movs	r3, #0
 800219c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800219e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80021a2:	4622      	mov	r2, r4
 80021a4:	462b      	mov	r3, r5
 80021a6:	f04f 0000 	mov.w	r0, #0
 80021aa:	f04f 0100 	mov.w	r1, #0
 80021ae:	0159      	lsls	r1, r3, #5
 80021b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021b4:	0150      	lsls	r0, r2, #5
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4621      	mov	r1, r4
 80021bc:	1a51      	subs	r1, r2, r1
 80021be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021c0:	4629      	mov	r1, r5
 80021c2:	eb63 0301 	sbc.w	r3, r3, r1
 80021c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80021d4:	4649      	mov	r1, r9
 80021d6:	018b      	lsls	r3, r1, #6
 80021d8:	4641      	mov	r1, r8
 80021da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021de:	4641      	mov	r1, r8
 80021e0:	018a      	lsls	r2, r1, #6
 80021e2:	4641      	mov	r1, r8
 80021e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80021e8:	4649      	mov	r1, r9
 80021ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80021ee:	f04f 0200 	mov.w	r2, #0
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002202:	4692      	mov	sl, r2
 8002204:	469b      	mov	fp, r3
 8002206:	4623      	mov	r3, r4
 8002208:	eb1a 0303 	adds.w	r3, sl, r3
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	462b      	mov	r3, r5
 8002210:	eb4b 0303 	adc.w	r3, fp, r3
 8002214:	627b      	str	r3, [r7, #36]	@ 0x24
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002222:	4629      	mov	r1, r5
 8002224:	028b      	lsls	r3, r1, #10
 8002226:	4621      	mov	r1, r4
 8002228:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800222c:	4621      	mov	r1, r4
 800222e:	028a      	lsls	r2, r1, #10
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002238:	2200      	movs	r2, #0
 800223a:	673b      	str	r3, [r7, #112]	@ 0x70
 800223c:	677a      	str	r2, [r7, #116]	@ 0x74
 800223e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002242:	f7fe fcd1 	bl	8000be8 <__aeabi_uldivmod>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4613      	mov	r3, r2
 800224c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002250:	4b41      	ldr	r3, [pc, #260]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	3301      	adds	r3, #1
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002272:	e0eb      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002274:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800227c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d06b      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228c:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x354>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	2200      	movs	r2, #0
 8002294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002296:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800229a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229e:	663b      	str	r3, [r7, #96]	@ 0x60
 80022a0:	2300      	movs	r3, #0
 80022a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80022a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80022a8:	4622      	mov	r2, r4
 80022aa:	462b      	mov	r3, r5
 80022ac:	f04f 0000 	mov.w	r0, #0
 80022b0:	f04f 0100 	mov.w	r1, #0
 80022b4:	0159      	lsls	r1, r3, #5
 80022b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022ba:	0150      	lsls	r0, r2, #5
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4621      	mov	r1, r4
 80022c2:	1a51      	subs	r1, r2, r1
 80022c4:	61b9      	str	r1, [r7, #24]
 80022c6:	4629      	mov	r1, r5
 80022c8:	eb63 0301 	sbc.w	r3, r3, r1
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	f04f 0300 	mov.w	r3, #0
 80022d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80022da:	4659      	mov	r1, fp
 80022dc:	018b      	lsls	r3, r1, #6
 80022de:	4651      	mov	r1, sl
 80022e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e4:	4651      	mov	r1, sl
 80022e6:	018a      	lsls	r2, r1, #6
 80022e8:	4651      	mov	r1, sl
 80022ea:	ebb2 0801 	subs.w	r8, r2, r1
 80022ee:	4659      	mov	r1, fp
 80022f0:	eb63 0901 	sbc.w	r9, r3, r1
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002300:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002304:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002308:	4690      	mov	r8, r2
 800230a:	4699      	mov	r9, r3
 800230c:	4623      	mov	r3, r4
 800230e:	eb18 0303 	adds.w	r3, r8, r3
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	462b      	mov	r3, r5
 8002316:	eb49 0303 	adc.w	r3, r9, r3
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002328:	4629      	mov	r1, r5
 800232a:	024b      	lsls	r3, r1, #9
 800232c:	4621      	mov	r1, r4
 800232e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002332:	4621      	mov	r1, r4
 8002334:	024a      	lsls	r2, r1, #9
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800233e:	2200      	movs	r2, #0
 8002340:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002342:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002344:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002348:	f7fe fc4e 	bl	8000be8 <__aeabi_uldivmod>
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	4613      	mov	r3, r2
 8002352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002356:	e065      	b.n	8002424 <HAL_RCC_GetSysClockFreq+0x420>
 8002358:	40023800 	.word	0x40023800
 800235c:	00f42400 	.word	0x00f42400
 8002360:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002364:	4b3d      	ldr	r3, [pc, #244]	@ (800245c <HAL_RCC_GetSysClockFreq+0x458>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	099b      	lsrs	r3, r3, #6
 800236a:	2200      	movs	r2, #0
 800236c:	4618      	mov	r0, r3
 800236e:	4611      	mov	r1, r2
 8002370:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002374:	653b      	str	r3, [r7, #80]	@ 0x50
 8002376:	2300      	movs	r3, #0
 8002378:	657b      	str	r3, [r7, #84]	@ 0x54
 800237a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800237e:	4642      	mov	r2, r8
 8002380:	464b      	mov	r3, r9
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f04f 0100 	mov.w	r1, #0
 800238a:	0159      	lsls	r1, r3, #5
 800238c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002390:	0150      	lsls	r0, r2, #5
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4641      	mov	r1, r8
 8002398:	1a51      	subs	r1, r2, r1
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	4649      	mov	r1, r9
 800239e:	eb63 0301 	sbc.w	r3, r3, r1
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	f04f 0300 	mov.w	r3, #0
 80023ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80023b0:	4659      	mov	r1, fp
 80023b2:	018b      	lsls	r3, r1, #6
 80023b4:	4651      	mov	r1, sl
 80023b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ba:	4651      	mov	r1, sl
 80023bc:	018a      	lsls	r2, r1, #6
 80023be:	4651      	mov	r1, sl
 80023c0:	1a54      	subs	r4, r2, r1
 80023c2:	4659      	mov	r1, fp
 80023c4:	eb63 0501 	sbc.w	r5, r3, r1
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	00eb      	lsls	r3, r5, #3
 80023d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023d6:	00e2      	lsls	r2, r4, #3
 80023d8:	4614      	mov	r4, r2
 80023da:	461d      	mov	r5, r3
 80023dc:	4643      	mov	r3, r8
 80023de:	18e3      	adds	r3, r4, r3
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	464b      	mov	r3, r9
 80023e4:	eb45 0303 	adc.w	r3, r5, r3
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	f04f 0300 	mov.w	r3, #0
 80023f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023f6:	4629      	mov	r1, r5
 80023f8:	028b      	lsls	r3, r1, #10
 80023fa:	4621      	mov	r1, r4
 80023fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002400:	4621      	mov	r1, r4
 8002402:	028a      	lsls	r2, r1, #10
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800240c:	2200      	movs	r2, #0
 800240e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002410:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002412:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002416:	f7fe fbe7 	bl	8000be8 <__aeabi_uldivmod>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4613      	mov	r3, r2
 8002420:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002424:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RCC_GetSysClockFreq+0x458>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	0f1b      	lsrs	r3, r3, #28
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002436:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002442:	e003      	b.n	800244c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002444:	4b06      	ldr	r3, [pc, #24]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002446:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800244a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800244c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002450:	4618      	mov	r0, r3
 8002452:	37b8      	adds	r7, #184	@ 0xb8
 8002454:	46bd      	mov	sp, r7
 8002456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
 8002460:	00f42400 	.word	0x00f42400

08002464 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e28d      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8083 	beq.w	800258a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002484:	4b94      	ldr	r3, [pc, #592]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b04      	cmp	r3, #4
 800248e:	d019      	beq.n	80024c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002490:	4b91      	ldr	r3, [pc, #580]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
        || \
 8002498:	2b08      	cmp	r3, #8
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800249c:	4b8e      	ldr	r3, [pc, #568]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024a8:	d00c      	beq.n	80024c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b8b      	ldr	r3, [pc, #556]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80024b2:	2b0c      	cmp	r3, #12
 80024b4:	d112      	bne.n	80024dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b6:	4b88      	ldr	r3, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024c2:	d10b      	bne.n	80024dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c4:	4b84      	ldr	r3, [pc, #528]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d05b      	beq.n	8002588 <HAL_RCC_OscConfig+0x124>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d157      	bne.n	8002588 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e25a      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e4:	d106      	bne.n	80024f4 <HAL_RCC_OscConfig+0x90>
 80024e6:	4b7c      	ldr	r3, [pc, #496]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7b      	ldr	r2, [pc, #492]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80024ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e01d      	b.n	8002530 <HAL_RCC_OscConfig+0xcc>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0xb4>
 80024fe:	4b76      	ldr	r3, [pc, #472]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002504:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	4b73      	ldr	r3, [pc, #460]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a72      	ldr	r2, [pc, #456]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002510:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	e00b      	b.n	8002530 <HAL_RCC_OscConfig+0xcc>
 8002518:	4b6f      	ldr	r3, [pc, #444]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6e      	ldr	r2, [pc, #440]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800251e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	4b6c      	ldr	r3, [pc, #432]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a6b      	ldr	r2, [pc, #428]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800252a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d013      	beq.n	8002560 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff f906 	bl	8001748 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002540:	f7ff f902 	bl	8001748 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b64      	cmp	r3, #100	@ 0x64
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e21f      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	4b61      	ldr	r3, [pc, #388]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0xdc>
 800255e:	e014      	b.n	800258a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff f8f2 	bl	8001748 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff f8ee 	bl	8001748 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	@ 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e20b      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	4b57      	ldr	r3, [pc, #348]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x104>
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06f      	beq.n	8002676 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002596:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d017      	beq.n	80025d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025a2:	4b4d      	ldr	r3, [pc, #308]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d105      	bne.n	80025ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025ae:	4b4a      	ldr	r3, [pc, #296]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80025c2:	2b0c      	cmp	r3, #12
 80025c4:	d11c      	bne.n	8002600 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c6:	4b44      	ldr	r3, [pc, #272]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d116      	bne.n	8002600 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d2:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_RCC_OscConfig+0x186>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e1d3      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ea:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4937      	ldr	r1, [pc, #220]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	e03a      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d020      	beq.n	800264a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002608:	4b34      	ldr	r3, [pc, #208]	@ (80026dc <HAL_RCC_OscConfig+0x278>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260e:	f7ff f89b 	bl	8001748 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002616:	f7ff f897 	bl	8001748 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e1b4      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002628:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0302 	and.w	r3, r3, #2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d0f0      	beq.n	8002616 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002634:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	4925      	ldr	r1, [pc, #148]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]
 8002648:	e015      	b.n	8002676 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_OscConfig+0x278>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff f87a 	bl	8001748 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002658:	f7ff f876 	bl	8001748 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e193      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d036      	beq.n	80026f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d016      	beq.n	80026b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_RCC_OscConfig+0x27c>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002690:	f7ff f85a 	bl	8001748 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff f856 	bl	8001748 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e173      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026aa:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80026ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0x234>
 80026b6:	e01b      	b.n	80026f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <HAL_RCC_OscConfig+0x27c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7ff f843 	bl	8001748 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e00e      	b.n	80026e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c6:	f7ff f83f 	bl	8001748 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d907      	bls.n	80026e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e15c      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	42470000 	.word	0x42470000
 80026e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ea      	bne.n	80026c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8097 	beq.w	800282c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026fe:	2300      	movs	r3, #0
 8002700:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002702:	4b83      	ldr	r3, [pc, #524]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10f      	bne.n	800272e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	4b7f      	ldr	r3, [pc, #508]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	4a7e      	ldr	r2, [pc, #504]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	@ 0x40
 800271e:	4b7c      	ldr	r3, [pc, #496]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272a:	2301      	movs	r3, #1
 800272c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272e:	4b79      	ldr	r3, [pc, #484]	@ (8002914 <HAL_RCC_OscConfig+0x4b0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d118      	bne.n	800276c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273a:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCC_OscConfig+0x4b0>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a75      	ldr	r2, [pc, #468]	@ (8002914 <HAL_RCC_OscConfig+0x4b0>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002746:	f7fe ffff 	bl	8001748 <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274e:	f7fe fffb 	bl	8001748 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e118      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002760:	4b6c      	ldr	r3, [pc, #432]	@ (8002914 <HAL_RCC_OscConfig+0x4b0>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x31e>
 8002774:	4b66      	ldr	r3, [pc, #408]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a65      	ldr	r2, [pc, #404]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002780:	e01c      	b.n	80027bc <HAL_RCC_OscConfig+0x358>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b05      	cmp	r3, #5
 8002788:	d10c      	bne.n	80027a4 <HAL_RCC_OscConfig+0x340>
 800278a:	4b61      	ldr	r3, [pc, #388]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278e:	4a60      	ldr	r2, [pc, #384]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	@ 0x70
 8002796:	4b5e      	ldr	r3, [pc, #376]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800279a:	4a5d      	ldr	r2, [pc, #372]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a2:	e00b      	b.n	80027bc <HAL_RCC_OscConfig+0x358>
 80027a4:	4b5a      	ldr	r3, [pc, #360]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a8:	4a59      	ldr	r2, [pc, #356]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b0:	4b57      	ldr	r3, [pc, #348]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b4:	4a56      	ldr	r2, [pc, #344]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027b6:	f023 0304 	bic.w	r3, r3, #4
 80027ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d015      	beq.n	80027f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe ffc0 	bl	8001748 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe ffbc 	bl	8001748 <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e0d7      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ee      	beq.n	80027cc <HAL_RCC_OscConfig+0x368>
 80027ee:	e014      	b.n	800281a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe ffaa 	bl	8001748 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f6:	e00a      	b.n	800280e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f8:	f7fe ffa6 	bl	8001748 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e0c1      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280e:	4b40      	ldr	r3, [pc, #256]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1ee      	bne.n	80027f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d105      	bne.n	800282c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002820:	4b3b      	ldr	r3, [pc, #236]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	4a3a      	ldr	r2, [pc, #232]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800282a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 80ad 	beq.w	8002990 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002836:	4b36      	ldr	r3, [pc, #216]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b08      	cmp	r3, #8
 8002840:	d060      	beq.n	8002904 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d145      	bne.n	80028d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b33      	ldr	r3, [pc, #204]	@ (8002918 <HAL_RCC_OscConfig+0x4b4>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe ff7a 	bl	8001748 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe ff76 	bl	8001748 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e093      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	4b29      	ldr	r3, [pc, #164]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69da      	ldr	r2, [r3, #28]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	3b01      	subs	r3, #1
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	071b      	lsls	r3, r3, #28
 80028a2:	491b      	ldr	r1, [pc, #108]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_RCC_OscConfig+0x4b4>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ae:	f7fe ff4b 	bl	8001748 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b6:	f7fe ff47 	bl	8001748 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e064      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x452>
 80028d4:	e05c      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <HAL_RCC_OscConfig+0x4b4>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028dc:	f7fe ff34 	bl	8001748 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e4:	f7fe ff30 	bl	8001748 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e04d      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x480>
 8002902:	e045      	b.n	8002990 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e040      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
 8002910:	40023800 	.word	0x40023800
 8002914:	40007000 	.word	0x40007000
 8002918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291c:	4b1f      	ldr	r3, [pc, #124]	@ (800299c <HAL_RCC_OscConfig+0x538>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d030      	beq.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d129      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d122      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	4293      	cmp	r3, r2
 8002956:	d119      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d10f      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d107      	bne.n	800298c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e000      	b.n	8002992 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40023800 	.word	0x40023800

080029a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e041      	b.n	8002a36 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7fe fcd2 	bl	8001370 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2202      	movs	r2, #2
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3304      	adds	r3, #4
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f000 fb0a 	bl	8002ff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_IC_Start_IT+0x1e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	e013      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x46>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_IC_Start_IT+0x2e>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	e00b      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x46>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d104      	bne.n	8002a7e <HAL_TIM_IC_Start_IT+0x3e>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	e003      	b.n	8002a86 <HAL_TIM_IC_Start_IT+0x46>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <HAL_TIM_IC_Start_IT+0x58>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	e013      	b.n	8002ac0 <HAL_TIM_IC_Start_IT+0x80>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d104      	bne.n	8002aa8 <HAL_TIM_IC_Start_IT+0x68>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	e00b      	b.n	8002ac0 <HAL_TIM_IC_Start_IT+0x80>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d104      	bne.n	8002ab8 <HAL_TIM_IC_Start_IT+0x78>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e003      	b.n	8002ac0 <HAL_TIM_IC_Start_IT+0x80>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ac2:	7bbb      	ldrb	r3, [r7, #14]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d102      	bne.n	8002ace <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ac8:	7b7b      	ldrb	r3, [r7, #13]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d001      	beq.n	8002ad2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e0cc      	b.n	8002c6c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d104      	bne.n	8002ae2 <HAL_TIM_IC_Start_IT+0xa2>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ae0:	e013      	b.n	8002b0a <HAL_TIM_IC_Start_IT+0xca>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d104      	bne.n	8002af2 <HAL_TIM_IC_Start_IT+0xb2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002af0:	e00b      	b.n	8002b0a <HAL_TIM_IC_Start_IT+0xca>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_IC_Start_IT+0xc2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b00:	e003      	b.n	8002b0a <HAL_TIM_IC_Start_IT+0xca>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_IC_Start_IT+0xda>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b18:	e013      	b.n	8002b42 <HAL_TIM_IC_Start_IT+0x102>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_IC_Start_IT+0xea>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b28:	e00b      	b.n	8002b42 <HAL_TIM_IC_Start_IT+0x102>
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d104      	bne.n	8002b3a <HAL_TIM_IC_Start_IT+0xfa>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b38:	e003      	b.n	8002b42 <HAL_TIM_IC_Start_IT+0x102>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	2b0c      	cmp	r3, #12
 8002b46:	d841      	bhi.n	8002bcc <HAL_TIM_IC_Start_IT+0x18c>
 8002b48:	a201      	add	r2, pc, #4	@ (adr r2, 8002b50 <HAL_TIM_IC_Start_IT+0x110>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b85 	.word	0x08002b85
 8002b54:	08002bcd 	.word	0x08002bcd
 8002b58:	08002bcd 	.word	0x08002bcd
 8002b5c:	08002bcd 	.word	0x08002bcd
 8002b60:	08002b97 	.word	0x08002b97
 8002b64:	08002bcd 	.word	0x08002bcd
 8002b68:	08002bcd 	.word	0x08002bcd
 8002b6c:	08002bcd 	.word	0x08002bcd
 8002b70:	08002ba9 	.word	0x08002ba9
 8002b74:	08002bcd 	.word	0x08002bcd
 8002b78:	08002bcd 	.word	0x08002bcd
 8002b7c:	08002bcd 	.word	0x08002bcd
 8002b80:	08002bbb 	.word	0x08002bbb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0202 	orr.w	r2, r2, #2
 8002b92:	60da      	str	r2, [r3, #12]
      break;
 8002b94:	e01d      	b.n	8002bd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0204 	orr.w	r2, r2, #4
 8002ba4:	60da      	str	r2, [r3, #12]
      break;
 8002ba6:	e014      	b.n	8002bd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0208 	orr.w	r2, r2, #8
 8002bb6:	60da      	str	r2, [r3, #12]
      break;
 8002bb8:	e00b      	b.n	8002bd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0210 	orr.w	r2, r2, #16
 8002bc8:	60da      	str	r2, [r3, #12]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d148      	bne.n	8002c6a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	6839      	ldr	r1, [r7, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fbdf 	bl	80033a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a22      	ldr	r2, [pc, #136]	@ (8002c74 <HAL_TIM_IC_Start_IT+0x234>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d022      	beq.n	8002c36 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bf8:	d01d      	beq.n	8002c36 <HAL_TIM_IC_Start_IT+0x1f6>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002c78 <HAL_TIM_IC_Start_IT+0x238>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d018      	beq.n	8002c36 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a1c      	ldr	r2, [pc, #112]	@ (8002c7c <HAL_TIM_IC_Start_IT+0x23c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1b      	ldr	r2, [pc, #108]	@ (8002c80 <HAL_TIM_IC_Start_IT+0x240>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d00e      	beq.n	8002c36 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a19      	ldr	r2, [pc, #100]	@ (8002c84 <HAL_TIM_IC_Start_IT+0x244>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d009      	beq.n	8002c36 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a18      	ldr	r2, [pc, #96]	@ (8002c88 <HAL_TIM_IC_Start_IT+0x248>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d004      	beq.n	8002c36 <HAL_TIM_IC_Start_IT+0x1f6>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a16      	ldr	r2, [pc, #88]	@ (8002c8c <HAL_TIM_IC_Start_IT+0x24c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d111      	bne.n	8002c5a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0307 	and.w	r3, r3, #7
 8002c40:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2b06      	cmp	r3, #6
 8002c46:	d010      	beq.n	8002c6a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0201 	orr.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c58:	e007      	b.n	8002c6a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40010000 	.word	0x40010000
 8002c78:	40000400 	.word	0x40000400
 8002c7c:	40000800 	.word	0x40000800
 8002c80:	40000c00 	.word	0x40000c00
 8002c84:	40010400 	.word	0x40010400
 8002c88:	40014000 	.word	0x40014000
 8002c8c:	40001800 	.word	0x40001800

08002c90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d020      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01b      	beq.n	8002cf4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0202 	mvn.w	r2, #2
 8002cc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe fa54 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8002ce0:	e005      	b.n	8002cee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f96a 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f971 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d020      	beq.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01b      	beq.n	8002d40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f06f 0204 	mvn.w	r2, #4
 8002d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2202      	movs	r2, #2
 8002d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	699b      	ldr	r3, [r3, #24]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fa2e 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8002d2c:	e005      	b.n	8002d3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f944 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f94b 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d020      	beq.n	8002d8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01b      	beq.n	8002d8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0208 	mvn.w	r2, #8
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2204      	movs	r2, #4
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7fe fa08 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f91e 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f925 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d020      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d01b      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f06f 0210 	mvn.w	r2, #16
 8002da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2208      	movs	r2, #8
 8002dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe f9e2 	bl	8001188 <HAL_TIM_IC_CaptureCallback>
 8002dc4:	e005      	b.n	8002dd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8f8 	bl	8002fbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f8ff 	bl	8002fd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00c      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d007      	beq.n	8002dfc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0201 	mvn.w	r2, #1
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8d6 	bl	8002fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00c      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 faf1 	bl	8003402 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00c      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8d0 	bl	8002fe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	f003 0320 	and.w	r3, r3, #32
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0320 	and.w	r3, r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0220 	mvn.w	r2, #32
 8002e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fac3 	bl	80033ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e68:	bf00      	nop
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d101      	bne.n	8002e8e <HAL_TIM_IC_ConfigChannel+0x1e>
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	e088      	b.n	8002fa0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d11b      	bne.n	8002ed4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002eac:	f000 f950 	bl	8003150 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 020c 	bic.w	r2, r2, #12
 8002ebe:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	619a      	str	r2, [r3, #24]
 8002ed2:	e060      	b.n	8002f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b04      	cmp	r3, #4
 8002ed8:	d11c      	bne.n	8002f14 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002eea:	f000 f9a5 	bl	8003238 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	699a      	ldr	r2, [r3, #24]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002efc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6999      	ldr	r1, [r3, #24]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	021a      	lsls	r2, r3, #8
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	619a      	str	r2, [r3, #24]
 8002f12:	e040      	b.n	8002f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d11b      	bne.n	8002f52 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002f2a:	f000 f9c2 	bl	80032b2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020c 	bic.w	r2, r2, #12
 8002f3c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69d9      	ldr	r1, [r3, #28]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	61da      	str	r2, [r3, #28]
 8002f50:	e021      	b.n	8002f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d11c      	bne.n	8002f92 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002f68:	f000 f9df 	bl	800332a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f7a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	69d9      	ldr	r1, [r3, #28]
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	021a      	lsls	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	61da      	str	r2, [r3, #28]
 8002f90:	e001      	b.n	8002f96 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fc4:	bf00      	nop
 8002fc6:	370c      	adds	r7, #12
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a46      	ldr	r2, [pc, #280]	@ (8003124 <TIM_Base_SetConfig+0x12c>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d013      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003016:	d00f      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a43      	ldr	r2, [pc, #268]	@ (8003128 <TIM_Base_SetConfig+0x130>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00b      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a42      	ldr	r2, [pc, #264]	@ (800312c <TIM_Base_SetConfig+0x134>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d007      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a41      	ldr	r2, [pc, #260]	@ (8003130 <TIM_Base_SetConfig+0x138>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d003      	beq.n	8003038 <TIM_Base_SetConfig+0x40>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a40      	ldr	r2, [pc, #256]	@ (8003134 <TIM_Base_SetConfig+0x13c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d108      	bne.n	800304a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800303e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a35      	ldr	r2, [pc, #212]	@ (8003124 <TIM_Base_SetConfig+0x12c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02b      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003058:	d027      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a32      	ldr	r2, [pc, #200]	@ (8003128 <TIM_Base_SetConfig+0x130>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d023      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a31      	ldr	r2, [pc, #196]	@ (800312c <TIM_Base_SetConfig+0x134>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d01f      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a30      	ldr	r2, [pc, #192]	@ (8003130 <TIM_Base_SetConfig+0x138>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d01b      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a2f      	ldr	r2, [pc, #188]	@ (8003134 <TIM_Base_SetConfig+0x13c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d017      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a2e      	ldr	r2, [pc, #184]	@ (8003138 <TIM_Base_SetConfig+0x140>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a2d      	ldr	r2, [pc, #180]	@ (800313c <TIM_Base_SetConfig+0x144>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00f      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a2c      	ldr	r2, [pc, #176]	@ (8003140 <TIM_Base_SetConfig+0x148>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a2b      	ldr	r2, [pc, #172]	@ (8003144 <TIM_Base_SetConfig+0x14c>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a2a      	ldr	r2, [pc, #168]	@ (8003148 <TIM_Base_SetConfig+0x150>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <TIM_Base_SetConfig+0xb2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a29      	ldr	r2, [pc, #164]	@ (800314c <TIM_Base_SetConfig+0x154>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d108      	bne.n	80030bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68fa      	ldr	r2, [r7, #12]
 80030ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a10      	ldr	r2, [pc, #64]	@ (8003124 <TIM_Base_SetConfig+0x12c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d003      	beq.n	80030f0 <TIM_Base_SetConfig+0xf8>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a12      	ldr	r2, [pc, #72]	@ (8003134 <TIM_Base_SetConfig+0x13c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d103      	bne.n	80030f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b01      	cmp	r3, #1
 8003108:	d105      	bne.n	8003116 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	f023 0201 	bic.w	r2, r3, #1
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	611a      	str	r2, [r3, #16]
  }
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40010000 	.word	0x40010000
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40010400 	.word	0x40010400
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800
 8003144:	40001800 	.word	0x40001800
 8003148:	40001c00 	.word	0x40001c00
 800314c:	40002000 	.word	0x40002000

08003150 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
 800315c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f023 0201 	bic.w	r2, r3, #1
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	4a28      	ldr	r2, [pc, #160]	@ (800321c <TIM_TI1_SetConfig+0xcc>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01b      	beq.n	80031b6 <TIM_TI1_SetConfig+0x66>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003184:	d017      	beq.n	80031b6 <TIM_TI1_SetConfig+0x66>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	4a25      	ldr	r2, [pc, #148]	@ (8003220 <TIM_TI1_SetConfig+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <TIM_TI1_SetConfig+0x66>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4a24      	ldr	r2, [pc, #144]	@ (8003224 <TIM_TI1_SetConfig+0xd4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00f      	beq.n	80031b6 <TIM_TI1_SetConfig+0x66>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a23      	ldr	r2, [pc, #140]	@ (8003228 <TIM_TI1_SetConfig+0xd8>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_TI1_SetConfig+0x66>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a22      	ldr	r2, [pc, #136]	@ (800322c <TIM_TI1_SetConfig+0xdc>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_TI1_SetConfig+0x66>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4a21      	ldr	r2, [pc, #132]	@ (8003230 <TIM_TI1_SetConfig+0xe0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_TI1_SetConfig+0x66>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4a20      	ldr	r2, [pc, #128]	@ (8003234 <TIM_TI1_SetConfig+0xe4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <TIM_TI1_SetConfig+0x6a>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <TIM_TI1_SetConfig+0x6c>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	e003      	b.n	80031da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f023 030a 	bic.w	r3, r3, #10
 80031f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f003 030a 	and.w	r3, r3, #10
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	621a      	str	r2, [r3, #32]
}
 800320e:	bf00      	nop
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40010000 	.word	0x40010000
 8003220:	40000400 	.word	0x40000400
 8003224:	40000800 	.word	0x40000800
 8003228:	40000c00 	.word	0x40000c00
 800322c:	40010400 	.word	0x40010400
 8003230:	40014000 	.word	0x40014000
 8003234:	40001800 	.word	0x40001800

08003238 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a1b      	ldr	r3, [r3, #32]
 8003250:	f023 0210 	bic.w	r2, r3, #16
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	031b      	lsls	r3, r3, #12
 800327c:	b29b      	uxth	r3, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800328a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	621a      	str	r2, [r3, #32]
}
 80032a6:	bf00      	nop
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b087      	sub	sp, #28
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003302:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4313      	orrs	r3, r2
 8003310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800332a:	b480      	push	{r7}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003356:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003368:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	031b      	lsls	r3, r3, #12
 800336e:	b29b      	uxth	r3, r3
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800337c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	031b      	lsls	r3, r3, #12
 8003382:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	621a      	str	r2, [r3, #32]
}
 8003398:	bf00      	nop
 800339a:	371c      	adds	r7, #28
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2201      	movs	r2, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a1a      	ldr	r2, [r3, #32]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1a      	ldr	r2, [r3, #32]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b082      	sub	sp, #8
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e042      	b.n	80034ae <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d106      	bne.n	8003442 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7fd ffd3 	bl	80013e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2224      	movs	r2, #36	@ 0x24
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003458:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f972 	bl	8003744 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	691a      	ldr	r2, [r3, #16]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800346e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800347e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800348e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b08a      	sub	sp, #40	@ 0x28
 80034ba:	af02      	add	r7, sp, #8
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	603b      	str	r3, [r7, #0]
 80034c2:	4613      	mov	r3, r2
 80034c4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b20      	cmp	r3, #32
 80034d4:	d175      	bne.n	80035c2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d002      	beq.n	80034e2 <HAL_UART_Transmit+0x2c>
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06e      	b.n	80035c4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2221      	movs	r2, #33	@ 0x21
 80034f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f4:	f7fe f928 	bl	8001748 <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	88fa      	ldrh	r2, [r7, #6]
 80034fe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	88fa      	ldrh	r2, [r7, #6]
 8003504:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800350e:	d108      	bne.n	8003522 <HAL_UART_Transmit+0x6c>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	61bb      	str	r3, [r7, #24]
 8003520:	e003      	b.n	800352a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352a:	e02e      	b.n	800358a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	9300      	str	r3, [sp, #0]
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2200      	movs	r2, #0
 8003534:	2180      	movs	r1, #128	@ 0x80
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f848 	bl	80035cc <UART_WaitOnFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d005      	beq.n	800354e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e03a      	b.n	80035c4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10b      	bne.n	800356c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003562:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	3302      	adds	r3, #2
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	e007      	b.n	800357c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	781a      	ldrb	r2, [r3, #0]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003580:	b29b      	uxth	r3, r3
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1cb      	bne.n	800352c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	2140      	movs	r1, #64	@ 0x40
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 f814 	bl	80035cc <UART_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d005      	beq.n	80035b6 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e006      	b.n	80035c4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035be:	2300      	movs	r3, #0
 80035c0:	e000      	b.n	80035c4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035c2:	2302      	movs	r3, #2
  }
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3720      	adds	r7, #32
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	4613      	mov	r3, r2
 80035da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035dc:	e03b      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035de:	6a3b      	ldr	r3, [r7, #32]
 80035e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035e4:	d037      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035e6:	f7fe f8af 	bl	8001748 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d302      	bcc.n	80035fc <UART_WaitOnFlagUntilTimeout+0x30>
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e03a      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0304 	and.w	r3, r3, #4
 800360a:	2b00      	cmp	r3, #0
 800360c:	d023      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x8a>
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b80      	cmp	r3, #128	@ 0x80
 8003612:	d020      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d01d      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0308 	and.w	r3, r3, #8
 8003624:	2b08      	cmp	r3, #8
 8003626:	d116      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	617b      	str	r3, [r7, #20]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f81d 	bl	800367e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2208      	movs	r2, #8
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e00f      	b.n	8003676 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	429a      	cmp	r2, r3
 8003672:	d0b4      	beq.n	80035de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3718      	adds	r7, #24
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800367e:	b480      	push	{r7}
 8003680:	b095      	sub	sp, #84	@ 0x54
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	330c      	adds	r3, #12
 800368c:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800368e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003690:	e853 3f00 	ldrex	r3, [r3]
 8003694:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800369c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80036a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1e5      	bne.n	8003686 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3314      	adds	r3, #20
 80036c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	e853 3f00 	ldrex	r3, [r3]
 80036c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036e2:	e841 2300 	strex	r3, r2, [r1]
 80036e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e5      	bne.n	80036ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d119      	bne.n	800372a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	60bb      	str	r3, [r7, #8]
   return(result);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f023 0310 	bic.w	r3, r3, #16
 800370c:	647b      	str	r3, [r7, #68]	@ 0x44
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003716:	61ba      	str	r2, [r7, #24]
 8003718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6979      	ldr	r1, [r7, #20]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	613b      	str	r3, [r7, #16]
   return(result);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003738:	bf00      	nop
 800373a:	3754      	adds	r7, #84	@ 0x54
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003748:	b0c0      	sub	sp, #256	@ 0x100
 800374a:	af00      	add	r7, sp, #0
 800374c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	68d9      	ldr	r1, [r3, #12]
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	ea40 0301 	orr.w	r3, r0, r1
 800376c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800376e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	431a      	orrs	r2, r3
 800377c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	4313      	orrs	r3, r2
 800378c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800379c:	f021 010c 	bic.w	r1, r1, #12
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037aa:	430b      	orrs	r3, r1
 80037ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037be:	6999      	ldr	r1, [r3, #24]
 80037c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	ea40 0301 	orr.w	r3, r0, r1
 80037ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b8f      	ldr	r3, [pc, #572]	@ (8003a10 <UART_SetConfig+0x2cc>)
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d005      	beq.n	80037e4 <UART_SetConfig+0xa0>
 80037d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b8d      	ldr	r3, [pc, #564]	@ (8003a14 <UART_SetConfig+0x2d0>)
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d104      	bne.n	80037ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037e4:	f7fe fbfa 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80037e8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037ec:	e003      	b.n	80037f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ee:	f7fe fbe1 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 80037f2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003800:	f040 810c 	bne.w	8003a1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800380e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003812:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003816:	4622      	mov	r2, r4
 8003818:	462b      	mov	r3, r5
 800381a:	1891      	adds	r1, r2, r2
 800381c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800381e:	415b      	adcs	r3, r3
 8003820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003822:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003826:	4621      	mov	r1, r4
 8003828:	eb12 0801 	adds.w	r8, r2, r1
 800382c:	4629      	mov	r1, r5
 800382e:	eb43 0901 	adc.w	r9, r3, r1
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800383e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003846:	4690      	mov	r8, r2
 8003848:	4699      	mov	r9, r3
 800384a:	4623      	mov	r3, r4
 800384c:	eb18 0303 	adds.w	r3, r8, r3
 8003850:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003854:	462b      	mov	r3, r5
 8003856:	eb49 0303 	adc.w	r3, r9, r3
 800385a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800385e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800386a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800386e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003872:	460b      	mov	r3, r1
 8003874:	18db      	adds	r3, r3, r3
 8003876:	653b      	str	r3, [r7, #80]	@ 0x50
 8003878:	4613      	mov	r3, r2
 800387a:	eb42 0303 	adc.w	r3, r2, r3
 800387e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003880:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003884:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003888:	f7fd f9ae 	bl	8000be8 <__aeabi_uldivmod>
 800388c:	4602      	mov	r2, r0
 800388e:	460b      	mov	r3, r1
 8003890:	4b61      	ldr	r3, [pc, #388]	@ (8003a18 <UART_SetConfig+0x2d4>)
 8003892:	fba3 2302 	umull	r2, r3, r3, r2
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	011c      	lsls	r4, r3, #4
 800389a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800389e:	2200      	movs	r2, #0
 80038a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038a4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038ac:	4642      	mov	r2, r8
 80038ae:	464b      	mov	r3, r9
 80038b0:	1891      	adds	r1, r2, r2
 80038b2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038b4:	415b      	adcs	r3, r3
 80038b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038bc:	4641      	mov	r1, r8
 80038be:	eb12 0a01 	adds.w	sl, r2, r1
 80038c2:	4649      	mov	r1, r9
 80038c4:	eb43 0b01 	adc.w	fp, r3, r1
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	f04f 0300 	mov.w	r3, #0
 80038d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038dc:	4692      	mov	sl, r2
 80038de:	469b      	mov	fp, r3
 80038e0:	4643      	mov	r3, r8
 80038e2:	eb1a 0303 	adds.w	r3, sl, r3
 80038e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ea:	464b      	mov	r3, r9
 80038ec:	eb4b 0303 	adc.w	r3, fp, r3
 80038f0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003900:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003904:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003908:	460b      	mov	r3, r1
 800390a:	18db      	adds	r3, r3, r3
 800390c:	643b      	str	r3, [r7, #64]	@ 0x40
 800390e:	4613      	mov	r3, r2
 8003910:	eb42 0303 	adc.w	r3, r2, r3
 8003914:	647b      	str	r3, [r7, #68]	@ 0x44
 8003916:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800391a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800391e:	f7fd f963 	bl	8000be8 <__aeabi_uldivmod>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4611      	mov	r1, r2
 8003928:	4b3b      	ldr	r3, [pc, #236]	@ (8003a18 <UART_SetConfig+0x2d4>)
 800392a:	fba3 2301 	umull	r2, r3, r3, r1
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2264      	movs	r2, #100	@ 0x64
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	1acb      	subs	r3, r1, r3
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800393e:	4b36      	ldr	r3, [pc, #216]	@ (8003a18 <UART_SetConfig+0x2d4>)
 8003940:	fba3 2302 	umull	r2, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800394c:	441c      	add	r4, r3
 800394e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003952:	2200      	movs	r2, #0
 8003954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003958:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800395c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003960:	4642      	mov	r2, r8
 8003962:	464b      	mov	r3, r9
 8003964:	1891      	adds	r1, r2, r2
 8003966:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003968:	415b      	adcs	r3, r3
 800396a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800396c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003970:	4641      	mov	r1, r8
 8003972:	1851      	adds	r1, r2, r1
 8003974:	6339      	str	r1, [r7, #48]	@ 0x30
 8003976:	4649      	mov	r1, r9
 8003978:	414b      	adcs	r3, r1
 800397a:	637b      	str	r3, [r7, #52]	@ 0x34
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	f04f 0300 	mov.w	r3, #0
 8003984:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003988:	4659      	mov	r1, fp
 800398a:	00cb      	lsls	r3, r1, #3
 800398c:	4651      	mov	r1, sl
 800398e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003992:	4651      	mov	r1, sl
 8003994:	00ca      	lsls	r2, r1, #3
 8003996:	4610      	mov	r0, r2
 8003998:	4619      	mov	r1, r3
 800399a:	4603      	mov	r3, r0
 800399c:	4642      	mov	r2, r8
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039a4:	464b      	mov	r3, r9
 80039a6:	460a      	mov	r2, r1
 80039a8:	eb42 0303 	adc.w	r3, r2, r3
 80039ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039bc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039c4:	460b      	mov	r3, r1
 80039c6:	18db      	adds	r3, r3, r3
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ca:	4613      	mov	r3, r2
 80039cc:	eb42 0303 	adc.w	r3, r2, r3
 80039d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039da:	f7fd f905 	bl	8000be8 <__aeabi_uldivmod>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003a18 <UART_SetConfig+0x2d4>)
 80039e4:	fba3 1302 	umull	r1, r3, r3, r2
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	2164      	movs	r1, #100	@ 0x64
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	3332      	adds	r3, #50	@ 0x32
 80039f6:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <UART_SetConfig+0x2d4>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	f003 0207 	and.w	r2, r3, #7
 8003a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4422      	add	r2, r4
 8003a0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a0c:	e106      	b.n	8003c1c <UART_SetConfig+0x4d8>
 8003a0e:	bf00      	nop
 8003a10:	40011000 	.word	0x40011000
 8003a14:	40011400 	.word	0x40011400
 8003a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a2e:	4642      	mov	r2, r8
 8003a30:	464b      	mov	r3, r9
 8003a32:	1891      	adds	r1, r2, r2
 8003a34:	6239      	str	r1, [r7, #32]
 8003a36:	415b      	adcs	r3, r3
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a3e:	4641      	mov	r1, r8
 8003a40:	1854      	adds	r4, r2, r1
 8003a42:	4649      	mov	r1, r9
 8003a44:	eb43 0501 	adc.w	r5, r3, r1
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	00eb      	lsls	r3, r5, #3
 8003a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a56:	00e2      	lsls	r2, r4, #3
 8003a58:	4614      	mov	r4, r2
 8003a5a:	461d      	mov	r5, r3
 8003a5c:	4643      	mov	r3, r8
 8003a5e:	18e3      	adds	r3, r4, r3
 8003a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a64:	464b      	mov	r3, r9
 8003a66:	eb45 0303 	adc.w	r3, r5, r3
 8003a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a8a:	4629      	mov	r1, r5
 8003a8c:	008b      	lsls	r3, r1, #2
 8003a8e:	4621      	mov	r1, r4
 8003a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a94:	4621      	mov	r1, r4
 8003a96:	008a      	lsls	r2, r1, #2
 8003a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a9c:	f7fd f8a4 	bl	8000be8 <__aeabi_uldivmod>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	4b60      	ldr	r3, [pc, #384]	@ (8003c28 <UART_SetConfig+0x4e4>)
 8003aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	011c      	lsls	r4, r3, #4
 8003aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ab8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	1891      	adds	r1, r2, r2
 8003ac6:	61b9      	str	r1, [r7, #24]
 8003ac8:	415b      	adcs	r3, r3
 8003aca:	61fb      	str	r3, [r7, #28]
 8003acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	1851      	adds	r1, r2, r1
 8003ad4:	6139      	str	r1, [r7, #16]
 8003ad6:	4649      	mov	r1, r9
 8003ad8:	414b      	adcs	r3, r1
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	f04f 0200 	mov.w	r2, #0
 8003ae0:	f04f 0300 	mov.w	r3, #0
 8003ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae8:	4659      	mov	r1, fp
 8003aea:	00cb      	lsls	r3, r1, #3
 8003aec:	4651      	mov	r1, sl
 8003aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af2:	4651      	mov	r1, sl
 8003af4:	00ca      	lsls	r2, r1, #3
 8003af6:	4610      	mov	r0, r2
 8003af8:	4619      	mov	r1, r3
 8003afa:	4603      	mov	r3, r0
 8003afc:	4642      	mov	r2, r8
 8003afe:	189b      	adds	r3, r3, r2
 8003b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b04:	464b      	mov	r3, r9
 8003b06:	460a      	mov	r2, r1
 8003b08:	eb42 0303 	adc.w	r3, r2, r3
 8003b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b1c:	f04f 0200 	mov.w	r2, #0
 8003b20:	f04f 0300 	mov.w	r3, #0
 8003b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b28:	4649      	mov	r1, r9
 8003b2a:	008b      	lsls	r3, r1, #2
 8003b2c:	4641      	mov	r1, r8
 8003b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b32:	4641      	mov	r1, r8
 8003b34:	008a      	lsls	r2, r1, #2
 8003b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b3a:	f7fd f855 	bl	8000be8 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	4b38      	ldr	r3, [pc, #224]	@ (8003c28 <UART_SetConfig+0x4e4>)
 8003b46:	fba3 2301 	umull	r2, r3, r3, r1
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2264      	movs	r2, #100	@ 0x64
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	1acb      	subs	r3, r1, r3
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	3332      	adds	r3, #50	@ 0x32
 8003b58:	4a33      	ldr	r2, [pc, #204]	@ (8003c28 <UART_SetConfig+0x4e4>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b64:	441c      	add	r4, r3
 8003b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b74:	4642      	mov	r2, r8
 8003b76:	464b      	mov	r3, r9
 8003b78:	1891      	adds	r1, r2, r2
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	415b      	adcs	r3, r3
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b84:	4641      	mov	r1, r8
 8003b86:	1851      	adds	r1, r2, r1
 8003b88:	6039      	str	r1, [r7, #0]
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	414b      	adcs	r3, r1
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b9c:	4659      	mov	r1, fp
 8003b9e:	00cb      	lsls	r3, r1, #3
 8003ba0:	4651      	mov	r1, sl
 8003ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ba6:	4651      	mov	r1, sl
 8003ba8:	00ca      	lsls	r2, r1, #3
 8003baa:	4610      	mov	r0, r2
 8003bac:	4619      	mov	r1, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	4642      	mov	r2, r8
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	460a      	mov	r2, r1
 8003bba:	eb42 0303 	adc.w	r3, r2, r3
 8003bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bca:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	f04f 0300 	mov.w	r3, #0
 8003bd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bd8:	4649      	mov	r1, r9
 8003bda:	008b      	lsls	r3, r1, #2
 8003bdc:	4641      	mov	r1, r8
 8003bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003be2:	4641      	mov	r1, r8
 8003be4:	008a      	lsls	r2, r1, #2
 8003be6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bea:	f7fc fffd 	bl	8000be8 <__aeabi_uldivmod>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8003c28 <UART_SetConfig+0x4e4>)
 8003bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	2164      	movs	r1, #100	@ 0x64
 8003bfc:	fb01 f303 	mul.w	r3, r1, r3
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	3332      	adds	r3, #50	@ 0x32
 8003c06:	4a08      	ldr	r2, [pc, #32]	@ (8003c28 <UART_SetConfig+0x4e4>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	095b      	lsrs	r3, r3, #5
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4422      	add	r2, r4
 8003c1a:	609a      	str	r2, [r3, #8]
}
 8003c1c:	bf00      	nop
 8003c1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c22:	46bd      	mov	sp, r7
 8003c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c28:	51eb851f 	.word	0x51eb851f

08003c2c <__cvt>:
 8003c2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c30:	ec57 6b10 	vmov	r6, r7, d0
 8003c34:	2f00      	cmp	r7, #0
 8003c36:	460c      	mov	r4, r1
 8003c38:	4619      	mov	r1, r3
 8003c3a:	463b      	mov	r3, r7
 8003c3c:	bfbb      	ittet	lt
 8003c3e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c42:	461f      	movlt	r7, r3
 8003c44:	2300      	movge	r3, #0
 8003c46:	232d      	movlt	r3, #45	@ 0x2d
 8003c48:	700b      	strb	r3, [r1, #0]
 8003c4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c4c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c50:	4691      	mov	r9, r2
 8003c52:	f023 0820 	bic.w	r8, r3, #32
 8003c56:	bfbc      	itt	lt
 8003c58:	4632      	movlt	r2, r6
 8003c5a:	4616      	movlt	r6, r2
 8003c5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c60:	d005      	beq.n	8003c6e <__cvt+0x42>
 8003c62:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c66:	d100      	bne.n	8003c6a <__cvt+0x3e>
 8003c68:	3401      	adds	r4, #1
 8003c6a:	2102      	movs	r1, #2
 8003c6c:	e000      	b.n	8003c70 <__cvt+0x44>
 8003c6e:	2103      	movs	r1, #3
 8003c70:	ab03      	add	r3, sp, #12
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	ab02      	add	r3, sp, #8
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	ec47 6b10 	vmov	d0, r6, r7
 8003c7c:	4653      	mov	r3, sl
 8003c7e:	4622      	mov	r2, r4
 8003c80:	f000 fe5a 	bl	8004938 <_dtoa_r>
 8003c84:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003c88:	4605      	mov	r5, r0
 8003c8a:	d119      	bne.n	8003cc0 <__cvt+0x94>
 8003c8c:	f019 0f01 	tst.w	r9, #1
 8003c90:	d00e      	beq.n	8003cb0 <__cvt+0x84>
 8003c92:	eb00 0904 	add.w	r9, r0, r4
 8003c96:	2200      	movs	r2, #0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	f7fc ff33 	bl	8000b08 <__aeabi_dcmpeq>
 8003ca2:	b108      	cbz	r0, 8003ca8 <__cvt+0x7c>
 8003ca4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ca8:	2230      	movs	r2, #48	@ 0x30
 8003caa:	9b03      	ldr	r3, [sp, #12]
 8003cac:	454b      	cmp	r3, r9
 8003cae:	d31e      	bcc.n	8003cee <__cvt+0xc2>
 8003cb0:	9b03      	ldr	r3, [sp, #12]
 8003cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003cb4:	1b5b      	subs	r3, r3, r5
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	b004      	add	sp, #16
 8003cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003cc4:	eb00 0904 	add.w	r9, r0, r4
 8003cc8:	d1e5      	bne.n	8003c96 <__cvt+0x6a>
 8003cca:	7803      	ldrb	r3, [r0, #0]
 8003ccc:	2b30      	cmp	r3, #48	@ 0x30
 8003cce:	d10a      	bne.n	8003ce6 <__cvt+0xba>
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	4630      	mov	r0, r6
 8003cd6:	4639      	mov	r1, r7
 8003cd8:	f7fc ff16 	bl	8000b08 <__aeabi_dcmpeq>
 8003cdc:	b918      	cbnz	r0, 8003ce6 <__cvt+0xba>
 8003cde:	f1c4 0401 	rsb	r4, r4, #1
 8003ce2:	f8ca 4000 	str.w	r4, [sl]
 8003ce6:	f8da 3000 	ldr.w	r3, [sl]
 8003cea:	4499      	add	r9, r3
 8003cec:	e7d3      	b.n	8003c96 <__cvt+0x6a>
 8003cee:	1c59      	adds	r1, r3, #1
 8003cf0:	9103      	str	r1, [sp, #12]
 8003cf2:	701a      	strb	r2, [r3, #0]
 8003cf4:	e7d9      	b.n	8003caa <__cvt+0x7e>

08003cf6 <__exponent>:
 8003cf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	bfba      	itte	lt
 8003cfc:	4249      	neglt	r1, r1
 8003cfe:	232d      	movlt	r3, #45	@ 0x2d
 8003d00:	232b      	movge	r3, #43	@ 0x2b
 8003d02:	2909      	cmp	r1, #9
 8003d04:	7002      	strb	r2, [r0, #0]
 8003d06:	7043      	strb	r3, [r0, #1]
 8003d08:	dd29      	ble.n	8003d5e <__exponent+0x68>
 8003d0a:	f10d 0307 	add.w	r3, sp, #7
 8003d0e:	461d      	mov	r5, r3
 8003d10:	270a      	movs	r7, #10
 8003d12:	461a      	mov	r2, r3
 8003d14:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d18:	fb07 1416 	mls	r4, r7, r6, r1
 8003d1c:	3430      	adds	r4, #48	@ 0x30
 8003d1e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d22:	460c      	mov	r4, r1
 8003d24:	2c63      	cmp	r4, #99	@ 0x63
 8003d26:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	dcf1      	bgt.n	8003d12 <__exponent+0x1c>
 8003d2e:	3130      	adds	r1, #48	@ 0x30
 8003d30:	1e94      	subs	r4, r2, #2
 8003d32:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d36:	1c41      	adds	r1, r0, #1
 8003d38:	4623      	mov	r3, r4
 8003d3a:	42ab      	cmp	r3, r5
 8003d3c:	d30a      	bcc.n	8003d54 <__exponent+0x5e>
 8003d3e:	f10d 0309 	add.w	r3, sp, #9
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	42ac      	cmp	r4, r5
 8003d46:	bf88      	it	hi
 8003d48:	2300      	movhi	r3, #0
 8003d4a:	3302      	adds	r3, #2
 8003d4c:	4403      	add	r3, r0
 8003d4e:	1a18      	subs	r0, r3, r0
 8003d50:	b003      	add	sp, #12
 8003d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d54:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d58:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d5c:	e7ed      	b.n	8003d3a <__exponent+0x44>
 8003d5e:	2330      	movs	r3, #48	@ 0x30
 8003d60:	3130      	adds	r1, #48	@ 0x30
 8003d62:	7083      	strb	r3, [r0, #2]
 8003d64:	70c1      	strb	r1, [r0, #3]
 8003d66:	1d03      	adds	r3, r0, #4
 8003d68:	e7f1      	b.n	8003d4e <__exponent+0x58>
	...

08003d6c <_printf_float>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	b08d      	sub	sp, #52	@ 0x34
 8003d72:	460c      	mov	r4, r1
 8003d74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003d78:	4616      	mov	r6, r2
 8003d7a:	461f      	mov	r7, r3
 8003d7c:	4605      	mov	r5, r0
 8003d7e:	f000 fcdb 	bl	8004738 <_localeconv_r>
 8003d82:	6803      	ldr	r3, [r0, #0]
 8003d84:	9304      	str	r3, [sp, #16]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc fa92 	bl	80002b0 <strlen>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003d90:	f8d8 3000 	ldr.w	r3, [r8]
 8003d94:	9005      	str	r0, [sp, #20]
 8003d96:	3307      	adds	r3, #7
 8003d98:	f023 0307 	bic.w	r3, r3, #7
 8003d9c:	f103 0208 	add.w	r2, r3, #8
 8003da0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003da4:	f8d4 b000 	ldr.w	fp, [r4]
 8003da8:	f8c8 2000 	str.w	r2, [r8]
 8003dac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003db0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003db4:	9307      	str	r3, [sp, #28]
 8003db6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dc2:	4b9c      	ldr	r3, [pc, #624]	@ (8004034 <_printf_float+0x2c8>)
 8003dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dc8:	f7fc fed0 	bl	8000b6c <__aeabi_dcmpun>
 8003dcc:	bb70      	cbnz	r0, 8003e2c <_printf_float+0xc0>
 8003dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003dd2:	4b98      	ldr	r3, [pc, #608]	@ (8004034 <_printf_float+0x2c8>)
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dd8:	f7fc feaa 	bl	8000b30 <__aeabi_dcmple>
 8003ddc:	bb30      	cbnz	r0, 8003e2c <_printf_float+0xc0>
 8003dde:	2200      	movs	r2, #0
 8003de0:	2300      	movs	r3, #0
 8003de2:	4640      	mov	r0, r8
 8003de4:	4649      	mov	r1, r9
 8003de6:	f7fc fe99 	bl	8000b1c <__aeabi_dcmplt>
 8003dea:	b110      	cbz	r0, 8003df2 <_printf_float+0x86>
 8003dec:	232d      	movs	r3, #45	@ 0x2d
 8003dee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003df2:	4a91      	ldr	r2, [pc, #580]	@ (8004038 <_printf_float+0x2cc>)
 8003df4:	4b91      	ldr	r3, [pc, #580]	@ (800403c <_printf_float+0x2d0>)
 8003df6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003dfa:	bf8c      	ite	hi
 8003dfc:	4690      	movhi	r8, r2
 8003dfe:	4698      	movls	r8, r3
 8003e00:	2303      	movs	r3, #3
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	f02b 0304 	bic.w	r3, fp, #4
 8003e08:	6023      	str	r3, [r4, #0]
 8003e0a:	f04f 0900 	mov.w	r9, #0
 8003e0e:	9700      	str	r7, [sp, #0]
 8003e10:	4633      	mov	r3, r6
 8003e12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e14:	4621      	mov	r1, r4
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 f9d2 	bl	80041c0 <_printf_common>
 8003e1c:	3001      	adds	r0, #1
 8003e1e:	f040 808d 	bne.w	8003f3c <_printf_float+0x1d0>
 8003e22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e26:	b00d      	add	sp, #52	@ 0x34
 8003e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	464b      	mov	r3, r9
 8003e30:	4640      	mov	r0, r8
 8003e32:	4649      	mov	r1, r9
 8003e34:	f7fc fe9a 	bl	8000b6c <__aeabi_dcmpun>
 8003e38:	b140      	cbz	r0, 8003e4c <_printf_float+0xe0>
 8003e3a:	464b      	mov	r3, r9
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bfbc      	itt	lt
 8003e40:	232d      	movlt	r3, #45	@ 0x2d
 8003e42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e46:	4a7e      	ldr	r2, [pc, #504]	@ (8004040 <_printf_float+0x2d4>)
 8003e48:	4b7e      	ldr	r3, [pc, #504]	@ (8004044 <_printf_float+0x2d8>)
 8003e4a:	e7d4      	b.n	8003df6 <_printf_float+0x8a>
 8003e4c:	6863      	ldr	r3, [r4, #4]
 8003e4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e52:	9206      	str	r2, [sp, #24]
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	d13b      	bne.n	8003ed0 <_printf_float+0x164>
 8003e58:	2306      	movs	r3, #6
 8003e5a:	6063      	str	r3, [r4, #4]
 8003e5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e60:	2300      	movs	r3, #0
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	9303      	str	r3, [sp, #12]
 8003e66:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e6c:	ab09      	add	r3, sp, #36	@ 0x24
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	6861      	ldr	r1, [r4, #4]
 8003e72:	ec49 8b10 	vmov	d0, r8, r9
 8003e76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f7ff fed6 	bl	8003c2c <__cvt>
 8003e80:	9b06      	ldr	r3, [sp, #24]
 8003e82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003e84:	2b47      	cmp	r3, #71	@ 0x47
 8003e86:	4680      	mov	r8, r0
 8003e88:	d129      	bne.n	8003ede <_printf_float+0x172>
 8003e8a:	1cc8      	adds	r0, r1, #3
 8003e8c:	db02      	blt.n	8003e94 <_printf_float+0x128>
 8003e8e:	6863      	ldr	r3, [r4, #4]
 8003e90:	4299      	cmp	r1, r3
 8003e92:	dd41      	ble.n	8003f18 <_printf_float+0x1ac>
 8003e94:	f1aa 0a02 	sub.w	sl, sl, #2
 8003e98:	fa5f fa8a 	uxtb.w	sl, sl
 8003e9c:	3901      	subs	r1, #1
 8003e9e:	4652      	mov	r2, sl
 8003ea0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ea4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ea6:	f7ff ff26 	bl	8003cf6 <__exponent>
 8003eaa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003eac:	1813      	adds	r3, r2, r0
 8003eae:	2a01      	cmp	r2, #1
 8003eb0:	4681      	mov	r9, r0
 8003eb2:	6123      	str	r3, [r4, #16]
 8003eb4:	dc02      	bgt.n	8003ebc <_printf_float+0x150>
 8003eb6:	6822      	ldr	r2, [r4, #0]
 8003eb8:	07d2      	lsls	r2, r2, #31
 8003eba:	d501      	bpl.n	8003ec0 <_printf_float+0x154>
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	6123      	str	r3, [r4, #16]
 8003ec0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0a2      	beq.n	8003e0e <_printf_float+0xa2>
 8003ec8:	232d      	movs	r3, #45	@ 0x2d
 8003eca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ece:	e79e      	b.n	8003e0e <_printf_float+0xa2>
 8003ed0:	9a06      	ldr	r2, [sp, #24]
 8003ed2:	2a47      	cmp	r2, #71	@ 0x47
 8003ed4:	d1c2      	bne.n	8003e5c <_printf_float+0xf0>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1c0      	bne.n	8003e5c <_printf_float+0xf0>
 8003eda:	2301      	movs	r3, #1
 8003edc:	e7bd      	b.n	8003e5a <_printf_float+0xee>
 8003ede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003ee2:	d9db      	bls.n	8003e9c <_printf_float+0x130>
 8003ee4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003ee8:	d118      	bne.n	8003f1c <_printf_float+0x1b0>
 8003eea:	2900      	cmp	r1, #0
 8003eec:	6863      	ldr	r3, [r4, #4]
 8003eee:	dd0b      	ble.n	8003f08 <_printf_float+0x19c>
 8003ef0:	6121      	str	r1, [r4, #16]
 8003ef2:	b913      	cbnz	r3, 8003efa <_printf_float+0x18e>
 8003ef4:	6822      	ldr	r2, [r4, #0]
 8003ef6:	07d0      	lsls	r0, r2, #31
 8003ef8:	d502      	bpl.n	8003f00 <_printf_float+0x194>
 8003efa:	3301      	adds	r3, #1
 8003efc:	440b      	add	r3, r1
 8003efe:	6123      	str	r3, [r4, #16]
 8003f00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f02:	f04f 0900 	mov.w	r9, #0
 8003f06:	e7db      	b.n	8003ec0 <_printf_float+0x154>
 8003f08:	b913      	cbnz	r3, 8003f10 <_printf_float+0x1a4>
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	07d2      	lsls	r2, r2, #31
 8003f0e:	d501      	bpl.n	8003f14 <_printf_float+0x1a8>
 8003f10:	3302      	adds	r3, #2
 8003f12:	e7f4      	b.n	8003efe <_printf_float+0x192>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e7f2      	b.n	8003efe <_printf_float+0x192>
 8003f18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f1e:	4299      	cmp	r1, r3
 8003f20:	db05      	blt.n	8003f2e <_printf_float+0x1c2>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	6121      	str	r1, [r4, #16]
 8003f26:	07d8      	lsls	r0, r3, #31
 8003f28:	d5ea      	bpl.n	8003f00 <_printf_float+0x194>
 8003f2a:	1c4b      	adds	r3, r1, #1
 8003f2c:	e7e7      	b.n	8003efe <_printf_float+0x192>
 8003f2e:	2900      	cmp	r1, #0
 8003f30:	bfd4      	ite	le
 8003f32:	f1c1 0202 	rsble	r2, r1, #2
 8003f36:	2201      	movgt	r2, #1
 8003f38:	4413      	add	r3, r2
 8003f3a:	e7e0      	b.n	8003efe <_printf_float+0x192>
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	055a      	lsls	r2, r3, #21
 8003f40:	d407      	bmi.n	8003f52 <_printf_float+0x1e6>
 8003f42:	6923      	ldr	r3, [r4, #16]
 8003f44:	4642      	mov	r2, r8
 8003f46:	4631      	mov	r1, r6
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b8      	blx	r7
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d12b      	bne.n	8003fa8 <_printf_float+0x23c>
 8003f50:	e767      	b.n	8003e22 <_printf_float+0xb6>
 8003f52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f56:	f240 80dd 	bls.w	8004114 <_printf_float+0x3a8>
 8003f5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f5e:	2200      	movs	r2, #0
 8003f60:	2300      	movs	r3, #0
 8003f62:	f7fc fdd1 	bl	8000b08 <__aeabi_dcmpeq>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d033      	beq.n	8003fd2 <_printf_float+0x266>
 8003f6a:	4a37      	ldr	r2, [pc, #220]	@ (8004048 <_printf_float+0x2dc>)
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	4631      	mov	r1, r6
 8003f70:	4628      	mov	r0, r5
 8003f72:	47b8      	blx	r7
 8003f74:	3001      	adds	r0, #1
 8003f76:	f43f af54 	beq.w	8003e22 <_printf_float+0xb6>
 8003f7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003f7e:	4543      	cmp	r3, r8
 8003f80:	db02      	blt.n	8003f88 <_printf_float+0x21c>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	07d8      	lsls	r0, r3, #31
 8003f86:	d50f      	bpl.n	8003fa8 <_printf_float+0x23c>
 8003f88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f8c:	4631      	mov	r1, r6
 8003f8e:	4628      	mov	r0, r5
 8003f90:	47b8      	blx	r7
 8003f92:	3001      	adds	r0, #1
 8003f94:	f43f af45 	beq.w	8003e22 <_printf_float+0xb6>
 8003f98:	f04f 0900 	mov.w	r9, #0
 8003f9c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8003fa0:	f104 0a1a 	add.w	sl, r4, #26
 8003fa4:	45c8      	cmp	r8, r9
 8003fa6:	dc09      	bgt.n	8003fbc <_printf_float+0x250>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	079b      	lsls	r3, r3, #30
 8003fac:	f100 8103 	bmi.w	80041b6 <_printf_float+0x44a>
 8003fb0:	68e0      	ldr	r0, [r4, #12]
 8003fb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fb4:	4298      	cmp	r0, r3
 8003fb6:	bfb8      	it	lt
 8003fb8:	4618      	movlt	r0, r3
 8003fba:	e734      	b.n	8003e26 <_printf_float+0xba>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	4652      	mov	r2, sl
 8003fc0:	4631      	mov	r1, r6
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	47b8      	blx	r7
 8003fc6:	3001      	adds	r0, #1
 8003fc8:	f43f af2b 	beq.w	8003e22 <_printf_float+0xb6>
 8003fcc:	f109 0901 	add.w	r9, r9, #1
 8003fd0:	e7e8      	b.n	8003fa4 <_printf_float+0x238>
 8003fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dc39      	bgt.n	800404c <_printf_float+0x2e0>
 8003fd8:	4a1b      	ldr	r2, [pc, #108]	@ (8004048 <_printf_float+0x2dc>)
 8003fda:	2301      	movs	r3, #1
 8003fdc:	4631      	mov	r1, r6
 8003fde:	4628      	mov	r0, r5
 8003fe0:	47b8      	blx	r7
 8003fe2:	3001      	adds	r0, #1
 8003fe4:	f43f af1d 	beq.w	8003e22 <_printf_float+0xb6>
 8003fe8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003fec:	ea59 0303 	orrs.w	r3, r9, r3
 8003ff0:	d102      	bne.n	8003ff8 <_printf_float+0x28c>
 8003ff2:	6823      	ldr	r3, [r4, #0]
 8003ff4:	07d9      	lsls	r1, r3, #31
 8003ff6:	d5d7      	bpl.n	8003fa8 <_printf_float+0x23c>
 8003ff8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ffc:	4631      	mov	r1, r6
 8003ffe:	4628      	mov	r0, r5
 8004000:	47b8      	blx	r7
 8004002:	3001      	adds	r0, #1
 8004004:	f43f af0d 	beq.w	8003e22 <_printf_float+0xb6>
 8004008:	f04f 0a00 	mov.w	sl, #0
 800400c:	f104 0b1a 	add.w	fp, r4, #26
 8004010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004012:	425b      	negs	r3, r3
 8004014:	4553      	cmp	r3, sl
 8004016:	dc01      	bgt.n	800401c <_printf_float+0x2b0>
 8004018:	464b      	mov	r3, r9
 800401a:	e793      	b.n	8003f44 <_printf_float+0x1d8>
 800401c:	2301      	movs	r3, #1
 800401e:	465a      	mov	r2, fp
 8004020:	4631      	mov	r1, r6
 8004022:	4628      	mov	r0, r5
 8004024:	47b8      	blx	r7
 8004026:	3001      	adds	r0, #1
 8004028:	f43f aefb 	beq.w	8003e22 <_printf_float+0xb6>
 800402c:	f10a 0a01 	add.w	sl, sl, #1
 8004030:	e7ee      	b.n	8004010 <_printf_float+0x2a4>
 8004032:	bf00      	nop
 8004034:	7fefffff 	.word	0x7fefffff
 8004038:	08006914 	.word	0x08006914
 800403c:	08006910 	.word	0x08006910
 8004040:	0800691c 	.word	0x0800691c
 8004044:	08006918 	.word	0x08006918
 8004048:	08006920 	.word	0x08006920
 800404c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800404e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004052:	4553      	cmp	r3, sl
 8004054:	bfa8      	it	ge
 8004056:	4653      	movge	r3, sl
 8004058:	2b00      	cmp	r3, #0
 800405a:	4699      	mov	r9, r3
 800405c:	dc36      	bgt.n	80040cc <_printf_float+0x360>
 800405e:	f04f 0b00 	mov.w	fp, #0
 8004062:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004066:	f104 021a 	add.w	r2, r4, #26
 800406a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800406c:	9306      	str	r3, [sp, #24]
 800406e:	eba3 0309 	sub.w	r3, r3, r9
 8004072:	455b      	cmp	r3, fp
 8004074:	dc31      	bgt.n	80040da <_printf_float+0x36e>
 8004076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004078:	459a      	cmp	sl, r3
 800407a:	dc3a      	bgt.n	80040f2 <_printf_float+0x386>
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	07da      	lsls	r2, r3, #31
 8004080:	d437      	bmi.n	80040f2 <_printf_float+0x386>
 8004082:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004084:	ebaa 0903 	sub.w	r9, sl, r3
 8004088:	9b06      	ldr	r3, [sp, #24]
 800408a:	ebaa 0303 	sub.w	r3, sl, r3
 800408e:	4599      	cmp	r9, r3
 8004090:	bfa8      	it	ge
 8004092:	4699      	movge	r9, r3
 8004094:	f1b9 0f00 	cmp.w	r9, #0
 8004098:	dc33      	bgt.n	8004102 <_printf_float+0x396>
 800409a:	f04f 0800 	mov.w	r8, #0
 800409e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040a2:	f104 0b1a 	add.w	fp, r4, #26
 80040a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040a8:	ebaa 0303 	sub.w	r3, sl, r3
 80040ac:	eba3 0309 	sub.w	r3, r3, r9
 80040b0:	4543      	cmp	r3, r8
 80040b2:	f77f af79 	ble.w	8003fa8 <_printf_float+0x23c>
 80040b6:	2301      	movs	r3, #1
 80040b8:	465a      	mov	r2, fp
 80040ba:	4631      	mov	r1, r6
 80040bc:	4628      	mov	r0, r5
 80040be:	47b8      	blx	r7
 80040c0:	3001      	adds	r0, #1
 80040c2:	f43f aeae 	beq.w	8003e22 <_printf_float+0xb6>
 80040c6:	f108 0801 	add.w	r8, r8, #1
 80040ca:	e7ec      	b.n	80040a6 <_printf_float+0x33a>
 80040cc:	4642      	mov	r2, r8
 80040ce:	4631      	mov	r1, r6
 80040d0:	4628      	mov	r0, r5
 80040d2:	47b8      	blx	r7
 80040d4:	3001      	adds	r0, #1
 80040d6:	d1c2      	bne.n	800405e <_printf_float+0x2f2>
 80040d8:	e6a3      	b.n	8003e22 <_printf_float+0xb6>
 80040da:	2301      	movs	r3, #1
 80040dc:	4631      	mov	r1, r6
 80040de:	4628      	mov	r0, r5
 80040e0:	9206      	str	r2, [sp, #24]
 80040e2:	47b8      	blx	r7
 80040e4:	3001      	adds	r0, #1
 80040e6:	f43f ae9c 	beq.w	8003e22 <_printf_float+0xb6>
 80040ea:	9a06      	ldr	r2, [sp, #24]
 80040ec:	f10b 0b01 	add.w	fp, fp, #1
 80040f0:	e7bb      	b.n	800406a <_printf_float+0x2fe>
 80040f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f6:	4631      	mov	r1, r6
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b8      	blx	r7
 80040fc:	3001      	adds	r0, #1
 80040fe:	d1c0      	bne.n	8004082 <_printf_float+0x316>
 8004100:	e68f      	b.n	8003e22 <_printf_float+0xb6>
 8004102:	9a06      	ldr	r2, [sp, #24]
 8004104:	464b      	mov	r3, r9
 8004106:	4442      	add	r2, r8
 8004108:	4631      	mov	r1, r6
 800410a:	4628      	mov	r0, r5
 800410c:	47b8      	blx	r7
 800410e:	3001      	adds	r0, #1
 8004110:	d1c3      	bne.n	800409a <_printf_float+0x32e>
 8004112:	e686      	b.n	8003e22 <_printf_float+0xb6>
 8004114:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004118:	f1ba 0f01 	cmp.w	sl, #1
 800411c:	dc01      	bgt.n	8004122 <_printf_float+0x3b6>
 800411e:	07db      	lsls	r3, r3, #31
 8004120:	d536      	bpl.n	8004190 <_printf_float+0x424>
 8004122:	2301      	movs	r3, #1
 8004124:	4642      	mov	r2, r8
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	47b8      	blx	r7
 800412c:	3001      	adds	r0, #1
 800412e:	f43f ae78 	beq.w	8003e22 <_printf_float+0xb6>
 8004132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004136:	4631      	mov	r1, r6
 8004138:	4628      	mov	r0, r5
 800413a:	47b8      	blx	r7
 800413c:	3001      	adds	r0, #1
 800413e:	f43f ae70 	beq.w	8003e22 <_printf_float+0xb6>
 8004142:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004146:	2200      	movs	r2, #0
 8004148:	2300      	movs	r3, #0
 800414a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800414e:	f7fc fcdb 	bl	8000b08 <__aeabi_dcmpeq>
 8004152:	b9c0      	cbnz	r0, 8004186 <_printf_float+0x41a>
 8004154:	4653      	mov	r3, sl
 8004156:	f108 0201 	add.w	r2, r8, #1
 800415a:	4631      	mov	r1, r6
 800415c:	4628      	mov	r0, r5
 800415e:	47b8      	blx	r7
 8004160:	3001      	adds	r0, #1
 8004162:	d10c      	bne.n	800417e <_printf_float+0x412>
 8004164:	e65d      	b.n	8003e22 <_printf_float+0xb6>
 8004166:	2301      	movs	r3, #1
 8004168:	465a      	mov	r2, fp
 800416a:	4631      	mov	r1, r6
 800416c:	4628      	mov	r0, r5
 800416e:	47b8      	blx	r7
 8004170:	3001      	adds	r0, #1
 8004172:	f43f ae56 	beq.w	8003e22 <_printf_float+0xb6>
 8004176:	f108 0801 	add.w	r8, r8, #1
 800417a:	45d0      	cmp	r8, sl
 800417c:	dbf3      	blt.n	8004166 <_printf_float+0x3fa>
 800417e:	464b      	mov	r3, r9
 8004180:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004184:	e6df      	b.n	8003f46 <_printf_float+0x1da>
 8004186:	f04f 0800 	mov.w	r8, #0
 800418a:	f104 0b1a 	add.w	fp, r4, #26
 800418e:	e7f4      	b.n	800417a <_printf_float+0x40e>
 8004190:	2301      	movs	r3, #1
 8004192:	4642      	mov	r2, r8
 8004194:	e7e1      	b.n	800415a <_printf_float+0x3ee>
 8004196:	2301      	movs	r3, #1
 8004198:	464a      	mov	r2, r9
 800419a:	4631      	mov	r1, r6
 800419c:	4628      	mov	r0, r5
 800419e:	47b8      	blx	r7
 80041a0:	3001      	adds	r0, #1
 80041a2:	f43f ae3e 	beq.w	8003e22 <_printf_float+0xb6>
 80041a6:	f108 0801 	add.w	r8, r8, #1
 80041aa:	68e3      	ldr	r3, [r4, #12]
 80041ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041ae:	1a5b      	subs	r3, r3, r1
 80041b0:	4543      	cmp	r3, r8
 80041b2:	dcf0      	bgt.n	8004196 <_printf_float+0x42a>
 80041b4:	e6fc      	b.n	8003fb0 <_printf_float+0x244>
 80041b6:	f04f 0800 	mov.w	r8, #0
 80041ba:	f104 0919 	add.w	r9, r4, #25
 80041be:	e7f4      	b.n	80041aa <_printf_float+0x43e>

080041c0 <_printf_common>:
 80041c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c4:	4616      	mov	r6, r2
 80041c6:	4698      	mov	r8, r3
 80041c8:	688a      	ldr	r2, [r1, #8]
 80041ca:	690b      	ldr	r3, [r1, #16]
 80041cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bfb8      	it	lt
 80041d4:	4613      	movlt	r3, r2
 80041d6:	6033      	str	r3, [r6, #0]
 80041d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80041dc:	4607      	mov	r7, r0
 80041de:	460c      	mov	r4, r1
 80041e0:	b10a      	cbz	r2, 80041e6 <_printf_common+0x26>
 80041e2:	3301      	adds	r3, #1
 80041e4:	6033      	str	r3, [r6, #0]
 80041e6:	6823      	ldr	r3, [r4, #0]
 80041e8:	0699      	lsls	r1, r3, #26
 80041ea:	bf42      	ittt	mi
 80041ec:	6833      	ldrmi	r3, [r6, #0]
 80041ee:	3302      	addmi	r3, #2
 80041f0:	6033      	strmi	r3, [r6, #0]
 80041f2:	6825      	ldr	r5, [r4, #0]
 80041f4:	f015 0506 	ands.w	r5, r5, #6
 80041f8:	d106      	bne.n	8004208 <_printf_common+0x48>
 80041fa:	f104 0a19 	add.w	sl, r4, #25
 80041fe:	68e3      	ldr	r3, [r4, #12]
 8004200:	6832      	ldr	r2, [r6, #0]
 8004202:	1a9b      	subs	r3, r3, r2
 8004204:	42ab      	cmp	r3, r5
 8004206:	dc26      	bgt.n	8004256 <_printf_common+0x96>
 8004208:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800420c:	6822      	ldr	r2, [r4, #0]
 800420e:	3b00      	subs	r3, #0
 8004210:	bf18      	it	ne
 8004212:	2301      	movne	r3, #1
 8004214:	0692      	lsls	r2, r2, #26
 8004216:	d42b      	bmi.n	8004270 <_printf_common+0xb0>
 8004218:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800421c:	4641      	mov	r1, r8
 800421e:	4638      	mov	r0, r7
 8004220:	47c8      	blx	r9
 8004222:	3001      	adds	r0, #1
 8004224:	d01e      	beq.n	8004264 <_printf_common+0xa4>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	f003 0306 	and.w	r3, r3, #6
 800422e:	2b04      	cmp	r3, #4
 8004230:	bf02      	ittt	eq
 8004232:	68e5      	ldreq	r5, [r4, #12]
 8004234:	6833      	ldreq	r3, [r6, #0]
 8004236:	1aed      	subeq	r5, r5, r3
 8004238:	68a3      	ldr	r3, [r4, #8]
 800423a:	bf0c      	ite	eq
 800423c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004240:	2500      	movne	r5, #0
 8004242:	4293      	cmp	r3, r2
 8004244:	bfc4      	itt	gt
 8004246:	1a9b      	subgt	r3, r3, r2
 8004248:	18ed      	addgt	r5, r5, r3
 800424a:	2600      	movs	r6, #0
 800424c:	341a      	adds	r4, #26
 800424e:	42b5      	cmp	r5, r6
 8004250:	d11a      	bne.n	8004288 <_printf_common+0xc8>
 8004252:	2000      	movs	r0, #0
 8004254:	e008      	b.n	8004268 <_printf_common+0xa8>
 8004256:	2301      	movs	r3, #1
 8004258:	4652      	mov	r2, sl
 800425a:	4641      	mov	r1, r8
 800425c:	4638      	mov	r0, r7
 800425e:	47c8      	blx	r9
 8004260:	3001      	adds	r0, #1
 8004262:	d103      	bne.n	800426c <_printf_common+0xac>
 8004264:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800426c:	3501      	adds	r5, #1
 800426e:	e7c6      	b.n	80041fe <_printf_common+0x3e>
 8004270:	18e1      	adds	r1, r4, r3
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	2030      	movs	r0, #48	@ 0x30
 8004276:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800427a:	4422      	add	r2, r4
 800427c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004280:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004284:	3302      	adds	r3, #2
 8004286:	e7c7      	b.n	8004218 <_printf_common+0x58>
 8004288:	2301      	movs	r3, #1
 800428a:	4622      	mov	r2, r4
 800428c:	4641      	mov	r1, r8
 800428e:	4638      	mov	r0, r7
 8004290:	47c8      	blx	r9
 8004292:	3001      	adds	r0, #1
 8004294:	d0e6      	beq.n	8004264 <_printf_common+0xa4>
 8004296:	3601      	adds	r6, #1
 8004298:	e7d9      	b.n	800424e <_printf_common+0x8e>
	...

0800429c <_printf_i>:
 800429c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	7e0f      	ldrb	r7, [r1, #24]
 80042a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042a4:	2f78      	cmp	r7, #120	@ 0x78
 80042a6:	4691      	mov	r9, r2
 80042a8:	4680      	mov	r8, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	469a      	mov	sl, r3
 80042ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042b2:	d807      	bhi.n	80042c4 <_printf_i+0x28>
 80042b4:	2f62      	cmp	r7, #98	@ 0x62
 80042b6:	d80a      	bhi.n	80042ce <_printf_i+0x32>
 80042b8:	2f00      	cmp	r7, #0
 80042ba:	f000 80d1 	beq.w	8004460 <_printf_i+0x1c4>
 80042be:	2f58      	cmp	r7, #88	@ 0x58
 80042c0:	f000 80b8 	beq.w	8004434 <_printf_i+0x198>
 80042c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042cc:	e03a      	b.n	8004344 <_printf_i+0xa8>
 80042ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80042d2:	2b15      	cmp	r3, #21
 80042d4:	d8f6      	bhi.n	80042c4 <_printf_i+0x28>
 80042d6:	a101      	add	r1, pc, #4	@ (adr r1, 80042dc <_printf_i+0x40>)
 80042d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80042dc:	08004335 	.word	0x08004335
 80042e0:	08004349 	.word	0x08004349
 80042e4:	080042c5 	.word	0x080042c5
 80042e8:	080042c5 	.word	0x080042c5
 80042ec:	080042c5 	.word	0x080042c5
 80042f0:	080042c5 	.word	0x080042c5
 80042f4:	08004349 	.word	0x08004349
 80042f8:	080042c5 	.word	0x080042c5
 80042fc:	080042c5 	.word	0x080042c5
 8004300:	080042c5 	.word	0x080042c5
 8004304:	080042c5 	.word	0x080042c5
 8004308:	08004447 	.word	0x08004447
 800430c:	08004373 	.word	0x08004373
 8004310:	08004401 	.word	0x08004401
 8004314:	080042c5 	.word	0x080042c5
 8004318:	080042c5 	.word	0x080042c5
 800431c:	08004469 	.word	0x08004469
 8004320:	080042c5 	.word	0x080042c5
 8004324:	08004373 	.word	0x08004373
 8004328:	080042c5 	.word	0x080042c5
 800432c:	080042c5 	.word	0x080042c5
 8004330:	08004409 	.word	0x08004409
 8004334:	6833      	ldr	r3, [r6, #0]
 8004336:	1d1a      	adds	r2, r3, #4
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6032      	str	r2, [r6, #0]
 800433c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004340:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004344:	2301      	movs	r3, #1
 8004346:	e09c      	b.n	8004482 <_printf_i+0x1e6>
 8004348:	6833      	ldr	r3, [r6, #0]
 800434a:	6820      	ldr	r0, [r4, #0]
 800434c:	1d19      	adds	r1, r3, #4
 800434e:	6031      	str	r1, [r6, #0]
 8004350:	0606      	lsls	r6, r0, #24
 8004352:	d501      	bpl.n	8004358 <_printf_i+0xbc>
 8004354:	681d      	ldr	r5, [r3, #0]
 8004356:	e003      	b.n	8004360 <_printf_i+0xc4>
 8004358:	0645      	lsls	r5, r0, #25
 800435a:	d5fb      	bpl.n	8004354 <_printf_i+0xb8>
 800435c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004360:	2d00      	cmp	r5, #0
 8004362:	da03      	bge.n	800436c <_printf_i+0xd0>
 8004364:	232d      	movs	r3, #45	@ 0x2d
 8004366:	426d      	negs	r5, r5
 8004368:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800436c:	4858      	ldr	r0, [pc, #352]	@ (80044d0 <_printf_i+0x234>)
 800436e:	230a      	movs	r3, #10
 8004370:	e011      	b.n	8004396 <_printf_i+0xfa>
 8004372:	6821      	ldr	r1, [r4, #0]
 8004374:	6833      	ldr	r3, [r6, #0]
 8004376:	0608      	lsls	r0, r1, #24
 8004378:	f853 5b04 	ldr.w	r5, [r3], #4
 800437c:	d402      	bmi.n	8004384 <_printf_i+0xe8>
 800437e:	0649      	lsls	r1, r1, #25
 8004380:	bf48      	it	mi
 8004382:	b2ad      	uxthmi	r5, r5
 8004384:	2f6f      	cmp	r7, #111	@ 0x6f
 8004386:	4852      	ldr	r0, [pc, #328]	@ (80044d0 <_printf_i+0x234>)
 8004388:	6033      	str	r3, [r6, #0]
 800438a:	bf14      	ite	ne
 800438c:	230a      	movne	r3, #10
 800438e:	2308      	moveq	r3, #8
 8004390:	2100      	movs	r1, #0
 8004392:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004396:	6866      	ldr	r6, [r4, #4]
 8004398:	60a6      	str	r6, [r4, #8]
 800439a:	2e00      	cmp	r6, #0
 800439c:	db05      	blt.n	80043aa <_printf_i+0x10e>
 800439e:	6821      	ldr	r1, [r4, #0]
 80043a0:	432e      	orrs	r6, r5
 80043a2:	f021 0104 	bic.w	r1, r1, #4
 80043a6:	6021      	str	r1, [r4, #0]
 80043a8:	d04b      	beq.n	8004442 <_printf_i+0x1a6>
 80043aa:	4616      	mov	r6, r2
 80043ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80043b0:	fb03 5711 	mls	r7, r3, r1, r5
 80043b4:	5dc7      	ldrb	r7, [r0, r7]
 80043b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043ba:	462f      	mov	r7, r5
 80043bc:	42bb      	cmp	r3, r7
 80043be:	460d      	mov	r5, r1
 80043c0:	d9f4      	bls.n	80043ac <_printf_i+0x110>
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d10b      	bne.n	80043de <_printf_i+0x142>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	07df      	lsls	r7, r3, #31
 80043ca:	d508      	bpl.n	80043de <_printf_i+0x142>
 80043cc:	6923      	ldr	r3, [r4, #16]
 80043ce:	6861      	ldr	r1, [r4, #4]
 80043d0:	4299      	cmp	r1, r3
 80043d2:	bfde      	ittt	le
 80043d4:	2330      	movle	r3, #48	@ 0x30
 80043d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80043de:	1b92      	subs	r2, r2, r6
 80043e0:	6122      	str	r2, [r4, #16]
 80043e2:	f8cd a000 	str.w	sl, [sp]
 80043e6:	464b      	mov	r3, r9
 80043e8:	aa03      	add	r2, sp, #12
 80043ea:	4621      	mov	r1, r4
 80043ec:	4640      	mov	r0, r8
 80043ee:	f7ff fee7 	bl	80041c0 <_printf_common>
 80043f2:	3001      	adds	r0, #1
 80043f4:	d14a      	bne.n	800448c <_printf_i+0x1f0>
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043fa:	b004      	add	sp, #16
 80043fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	f043 0320 	orr.w	r3, r3, #32
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	4832      	ldr	r0, [pc, #200]	@ (80044d4 <_printf_i+0x238>)
 800440a:	2778      	movs	r7, #120	@ 0x78
 800440c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	6831      	ldr	r1, [r6, #0]
 8004414:	061f      	lsls	r7, r3, #24
 8004416:	f851 5b04 	ldr.w	r5, [r1], #4
 800441a:	d402      	bmi.n	8004422 <_printf_i+0x186>
 800441c:	065f      	lsls	r7, r3, #25
 800441e:	bf48      	it	mi
 8004420:	b2ad      	uxthmi	r5, r5
 8004422:	6031      	str	r1, [r6, #0]
 8004424:	07d9      	lsls	r1, r3, #31
 8004426:	bf44      	itt	mi
 8004428:	f043 0320 	orrmi.w	r3, r3, #32
 800442c:	6023      	strmi	r3, [r4, #0]
 800442e:	b11d      	cbz	r5, 8004438 <_printf_i+0x19c>
 8004430:	2310      	movs	r3, #16
 8004432:	e7ad      	b.n	8004390 <_printf_i+0xf4>
 8004434:	4826      	ldr	r0, [pc, #152]	@ (80044d0 <_printf_i+0x234>)
 8004436:	e7e9      	b.n	800440c <_printf_i+0x170>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f023 0320 	bic.w	r3, r3, #32
 800443e:	6023      	str	r3, [r4, #0]
 8004440:	e7f6      	b.n	8004430 <_printf_i+0x194>
 8004442:	4616      	mov	r6, r2
 8004444:	e7bd      	b.n	80043c2 <_printf_i+0x126>
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	6825      	ldr	r5, [r4, #0]
 800444a:	6961      	ldr	r1, [r4, #20]
 800444c:	1d18      	adds	r0, r3, #4
 800444e:	6030      	str	r0, [r6, #0]
 8004450:	062e      	lsls	r6, r5, #24
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	d501      	bpl.n	800445a <_printf_i+0x1be>
 8004456:	6019      	str	r1, [r3, #0]
 8004458:	e002      	b.n	8004460 <_printf_i+0x1c4>
 800445a:	0668      	lsls	r0, r5, #25
 800445c:	d5fb      	bpl.n	8004456 <_printf_i+0x1ba>
 800445e:	8019      	strh	r1, [r3, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	6123      	str	r3, [r4, #16]
 8004464:	4616      	mov	r6, r2
 8004466:	e7bc      	b.n	80043e2 <_printf_i+0x146>
 8004468:	6833      	ldr	r3, [r6, #0]
 800446a:	1d1a      	adds	r2, r3, #4
 800446c:	6032      	str	r2, [r6, #0]
 800446e:	681e      	ldr	r6, [r3, #0]
 8004470:	6862      	ldr	r2, [r4, #4]
 8004472:	2100      	movs	r1, #0
 8004474:	4630      	mov	r0, r6
 8004476:	f7fb fecb 	bl	8000210 <memchr>
 800447a:	b108      	cbz	r0, 8004480 <_printf_i+0x1e4>
 800447c:	1b80      	subs	r0, r0, r6
 800447e:	6060      	str	r0, [r4, #4]
 8004480:	6863      	ldr	r3, [r4, #4]
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	2300      	movs	r3, #0
 8004486:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800448a:	e7aa      	b.n	80043e2 <_printf_i+0x146>
 800448c:	6923      	ldr	r3, [r4, #16]
 800448e:	4632      	mov	r2, r6
 8004490:	4649      	mov	r1, r9
 8004492:	4640      	mov	r0, r8
 8004494:	47d0      	blx	sl
 8004496:	3001      	adds	r0, #1
 8004498:	d0ad      	beq.n	80043f6 <_printf_i+0x15a>
 800449a:	6823      	ldr	r3, [r4, #0]
 800449c:	079b      	lsls	r3, r3, #30
 800449e:	d413      	bmi.n	80044c8 <_printf_i+0x22c>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	4298      	cmp	r0, r3
 80044a6:	bfb8      	it	lt
 80044a8:	4618      	movlt	r0, r3
 80044aa:	e7a6      	b.n	80043fa <_printf_i+0x15e>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4632      	mov	r2, r6
 80044b0:	4649      	mov	r1, r9
 80044b2:	4640      	mov	r0, r8
 80044b4:	47d0      	blx	sl
 80044b6:	3001      	adds	r0, #1
 80044b8:	d09d      	beq.n	80043f6 <_printf_i+0x15a>
 80044ba:	3501      	adds	r5, #1
 80044bc:	68e3      	ldr	r3, [r4, #12]
 80044be:	9903      	ldr	r1, [sp, #12]
 80044c0:	1a5b      	subs	r3, r3, r1
 80044c2:	42ab      	cmp	r3, r5
 80044c4:	dcf2      	bgt.n	80044ac <_printf_i+0x210>
 80044c6:	e7eb      	b.n	80044a0 <_printf_i+0x204>
 80044c8:	2500      	movs	r5, #0
 80044ca:	f104 0619 	add.w	r6, r4, #25
 80044ce:	e7f5      	b.n	80044bc <_printf_i+0x220>
 80044d0:	08006922 	.word	0x08006922
 80044d4:	08006933 	.word	0x08006933

080044d8 <std>:
 80044d8:	2300      	movs	r3, #0
 80044da:	b510      	push	{r4, lr}
 80044dc:	4604      	mov	r4, r0
 80044de:	e9c0 3300 	strd	r3, r3, [r0]
 80044e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044e6:	6083      	str	r3, [r0, #8]
 80044e8:	8181      	strh	r1, [r0, #12]
 80044ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80044ec:	81c2      	strh	r2, [r0, #14]
 80044ee:	6183      	str	r3, [r0, #24]
 80044f0:	4619      	mov	r1, r3
 80044f2:	2208      	movs	r2, #8
 80044f4:	305c      	adds	r0, #92	@ 0x5c
 80044f6:	f000 f916 	bl	8004726 <memset>
 80044fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004530 <std+0x58>)
 80044fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80044fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004534 <std+0x5c>)
 8004500:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004502:	4b0d      	ldr	r3, [pc, #52]	@ (8004538 <std+0x60>)
 8004504:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <std+0x64>)
 8004508:	6323      	str	r3, [r4, #48]	@ 0x30
 800450a:	4b0d      	ldr	r3, [pc, #52]	@ (8004540 <std+0x68>)
 800450c:	6224      	str	r4, [r4, #32]
 800450e:	429c      	cmp	r4, r3
 8004510:	d006      	beq.n	8004520 <std+0x48>
 8004512:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004516:	4294      	cmp	r4, r2
 8004518:	d002      	beq.n	8004520 <std+0x48>
 800451a:	33d0      	adds	r3, #208	@ 0xd0
 800451c:	429c      	cmp	r4, r3
 800451e:	d105      	bne.n	800452c <std+0x54>
 8004520:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004528:	f000 b97a 	b.w	8004820 <__retarget_lock_init_recursive>
 800452c:	bd10      	pop	{r4, pc}
 800452e:	bf00      	nop
 8004530:	080046a1 	.word	0x080046a1
 8004534:	080046c3 	.word	0x080046c3
 8004538:	080046fb 	.word	0x080046fb
 800453c:	0800471f 	.word	0x0800471f
 8004540:	20000298 	.word	0x20000298

08004544 <stdio_exit_handler>:
 8004544:	4a02      	ldr	r2, [pc, #8]	@ (8004550 <stdio_exit_handler+0xc>)
 8004546:	4903      	ldr	r1, [pc, #12]	@ (8004554 <stdio_exit_handler+0x10>)
 8004548:	4803      	ldr	r0, [pc, #12]	@ (8004558 <stdio_exit_handler+0x14>)
 800454a:	f000 b869 	b.w	8004620 <_fwalk_sglue>
 800454e:	bf00      	nop
 8004550:	20000010 	.word	0x20000010
 8004554:	08006185 	.word	0x08006185
 8004558:	20000020 	.word	0x20000020

0800455c <cleanup_stdio>:
 800455c:	6841      	ldr	r1, [r0, #4]
 800455e:	4b0c      	ldr	r3, [pc, #48]	@ (8004590 <cleanup_stdio+0x34>)
 8004560:	4299      	cmp	r1, r3
 8004562:	b510      	push	{r4, lr}
 8004564:	4604      	mov	r4, r0
 8004566:	d001      	beq.n	800456c <cleanup_stdio+0x10>
 8004568:	f001 fe0c 	bl	8006184 <_fflush_r>
 800456c:	68a1      	ldr	r1, [r4, #8]
 800456e:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <cleanup_stdio+0x38>)
 8004570:	4299      	cmp	r1, r3
 8004572:	d002      	beq.n	800457a <cleanup_stdio+0x1e>
 8004574:	4620      	mov	r0, r4
 8004576:	f001 fe05 	bl	8006184 <_fflush_r>
 800457a:	68e1      	ldr	r1, [r4, #12]
 800457c:	4b06      	ldr	r3, [pc, #24]	@ (8004598 <cleanup_stdio+0x3c>)
 800457e:	4299      	cmp	r1, r3
 8004580:	d004      	beq.n	800458c <cleanup_stdio+0x30>
 8004582:	4620      	mov	r0, r4
 8004584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004588:	f001 bdfc 	b.w	8006184 <_fflush_r>
 800458c:	bd10      	pop	{r4, pc}
 800458e:	bf00      	nop
 8004590:	20000298 	.word	0x20000298
 8004594:	20000300 	.word	0x20000300
 8004598:	20000368 	.word	0x20000368

0800459c <global_stdio_init.part.0>:
 800459c:	b510      	push	{r4, lr}
 800459e:	4b0b      	ldr	r3, [pc, #44]	@ (80045cc <global_stdio_init.part.0+0x30>)
 80045a0:	4c0b      	ldr	r4, [pc, #44]	@ (80045d0 <global_stdio_init.part.0+0x34>)
 80045a2:	4a0c      	ldr	r2, [pc, #48]	@ (80045d4 <global_stdio_init.part.0+0x38>)
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	4620      	mov	r0, r4
 80045a8:	2200      	movs	r2, #0
 80045aa:	2104      	movs	r1, #4
 80045ac:	f7ff ff94 	bl	80044d8 <std>
 80045b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80045b4:	2201      	movs	r2, #1
 80045b6:	2109      	movs	r1, #9
 80045b8:	f7ff ff8e 	bl	80044d8 <std>
 80045bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80045c0:	2202      	movs	r2, #2
 80045c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c6:	2112      	movs	r1, #18
 80045c8:	f7ff bf86 	b.w	80044d8 <std>
 80045cc:	200003d0 	.word	0x200003d0
 80045d0:	20000298 	.word	0x20000298
 80045d4:	08004545 	.word	0x08004545

080045d8 <__sfp_lock_acquire>:
 80045d8:	4801      	ldr	r0, [pc, #4]	@ (80045e0 <__sfp_lock_acquire+0x8>)
 80045da:	f000 b922 	b.w	8004822 <__retarget_lock_acquire_recursive>
 80045de:	bf00      	nop
 80045e0:	200003d9 	.word	0x200003d9

080045e4 <__sfp_lock_release>:
 80045e4:	4801      	ldr	r0, [pc, #4]	@ (80045ec <__sfp_lock_release+0x8>)
 80045e6:	f000 b91d 	b.w	8004824 <__retarget_lock_release_recursive>
 80045ea:	bf00      	nop
 80045ec:	200003d9 	.word	0x200003d9

080045f0 <__sinit>:
 80045f0:	b510      	push	{r4, lr}
 80045f2:	4604      	mov	r4, r0
 80045f4:	f7ff fff0 	bl	80045d8 <__sfp_lock_acquire>
 80045f8:	6a23      	ldr	r3, [r4, #32]
 80045fa:	b11b      	cbz	r3, 8004604 <__sinit+0x14>
 80045fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004600:	f7ff bff0 	b.w	80045e4 <__sfp_lock_release>
 8004604:	4b04      	ldr	r3, [pc, #16]	@ (8004618 <__sinit+0x28>)
 8004606:	6223      	str	r3, [r4, #32]
 8004608:	4b04      	ldr	r3, [pc, #16]	@ (800461c <__sinit+0x2c>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1f5      	bne.n	80045fc <__sinit+0xc>
 8004610:	f7ff ffc4 	bl	800459c <global_stdio_init.part.0>
 8004614:	e7f2      	b.n	80045fc <__sinit+0xc>
 8004616:	bf00      	nop
 8004618:	0800455d 	.word	0x0800455d
 800461c:	200003d0 	.word	0x200003d0

08004620 <_fwalk_sglue>:
 8004620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004624:	4607      	mov	r7, r0
 8004626:	4688      	mov	r8, r1
 8004628:	4614      	mov	r4, r2
 800462a:	2600      	movs	r6, #0
 800462c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004630:	f1b9 0901 	subs.w	r9, r9, #1
 8004634:	d505      	bpl.n	8004642 <_fwalk_sglue+0x22>
 8004636:	6824      	ldr	r4, [r4, #0]
 8004638:	2c00      	cmp	r4, #0
 800463a:	d1f7      	bne.n	800462c <_fwalk_sglue+0xc>
 800463c:	4630      	mov	r0, r6
 800463e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004642:	89ab      	ldrh	r3, [r5, #12]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d907      	bls.n	8004658 <_fwalk_sglue+0x38>
 8004648:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800464c:	3301      	adds	r3, #1
 800464e:	d003      	beq.n	8004658 <_fwalk_sglue+0x38>
 8004650:	4629      	mov	r1, r5
 8004652:	4638      	mov	r0, r7
 8004654:	47c0      	blx	r8
 8004656:	4306      	orrs	r6, r0
 8004658:	3568      	adds	r5, #104	@ 0x68
 800465a:	e7e9      	b.n	8004630 <_fwalk_sglue+0x10>

0800465c <siprintf>:
 800465c:	b40e      	push	{r1, r2, r3}
 800465e:	b510      	push	{r4, lr}
 8004660:	b09d      	sub	sp, #116	@ 0x74
 8004662:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004664:	9002      	str	r0, [sp, #8]
 8004666:	9006      	str	r0, [sp, #24]
 8004668:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800466c:	480a      	ldr	r0, [pc, #40]	@ (8004698 <siprintf+0x3c>)
 800466e:	9107      	str	r1, [sp, #28]
 8004670:	9104      	str	r1, [sp, #16]
 8004672:	490a      	ldr	r1, [pc, #40]	@ (800469c <siprintf+0x40>)
 8004674:	f853 2b04 	ldr.w	r2, [r3], #4
 8004678:	9105      	str	r1, [sp, #20]
 800467a:	2400      	movs	r4, #0
 800467c:	a902      	add	r1, sp, #8
 800467e:	6800      	ldr	r0, [r0, #0]
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004684:	f001 fbfe 	bl	8005e84 <_svfiprintf_r>
 8004688:	9b02      	ldr	r3, [sp, #8]
 800468a:	701c      	strb	r4, [r3, #0]
 800468c:	b01d      	add	sp, #116	@ 0x74
 800468e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004692:	b003      	add	sp, #12
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	2000001c 	.word	0x2000001c
 800469c:	ffff0208 	.word	0xffff0208

080046a0 <__sread>:
 80046a0:	b510      	push	{r4, lr}
 80046a2:	460c      	mov	r4, r1
 80046a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a8:	f000 f86c 	bl	8004784 <_read_r>
 80046ac:	2800      	cmp	r0, #0
 80046ae:	bfab      	itete	ge
 80046b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80046b2:	89a3      	ldrhlt	r3, [r4, #12]
 80046b4:	181b      	addge	r3, r3, r0
 80046b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80046ba:	bfac      	ite	ge
 80046bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80046be:	81a3      	strhlt	r3, [r4, #12]
 80046c0:	bd10      	pop	{r4, pc}

080046c2 <__swrite>:
 80046c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046c6:	461f      	mov	r7, r3
 80046c8:	898b      	ldrh	r3, [r1, #12]
 80046ca:	05db      	lsls	r3, r3, #23
 80046cc:	4605      	mov	r5, r0
 80046ce:	460c      	mov	r4, r1
 80046d0:	4616      	mov	r6, r2
 80046d2:	d505      	bpl.n	80046e0 <__swrite+0x1e>
 80046d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046d8:	2302      	movs	r3, #2
 80046da:	2200      	movs	r2, #0
 80046dc:	f000 f840 	bl	8004760 <_lseek_r>
 80046e0:	89a3      	ldrh	r3, [r4, #12]
 80046e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80046ea:	81a3      	strh	r3, [r4, #12]
 80046ec:	4632      	mov	r2, r6
 80046ee:	463b      	mov	r3, r7
 80046f0:	4628      	mov	r0, r5
 80046f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046f6:	f000 b857 	b.w	80047a8 <_write_r>

080046fa <__sseek>:
 80046fa:	b510      	push	{r4, lr}
 80046fc:	460c      	mov	r4, r1
 80046fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004702:	f000 f82d 	bl	8004760 <_lseek_r>
 8004706:	1c43      	adds	r3, r0, #1
 8004708:	89a3      	ldrh	r3, [r4, #12]
 800470a:	bf15      	itete	ne
 800470c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800470e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004712:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004716:	81a3      	strheq	r3, [r4, #12]
 8004718:	bf18      	it	ne
 800471a:	81a3      	strhne	r3, [r4, #12]
 800471c:	bd10      	pop	{r4, pc}

0800471e <__sclose>:
 800471e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004722:	f000 b80d 	b.w	8004740 <_close_r>

08004726 <memset>:
 8004726:	4402      	add	r2, r0
 8004728:	4603      	mov	r3, r0
 800472a:	4293      	cmp	r3, r2
 800472c:	d100      	bne.n	8004730 <memset+0xa>
 800472e:	4770      	bx	lr
 8004730:	f803 1b01 	strb.w	r1, [r3], #1
 8004734:	e7f9      	b.n	800472a <memset+0x4>
	...

08004738 <_localeconv_r>:
 8004738:	4800      	ldr	r0, [pc, #0]	@ (800473c <_localeconv_r+0x4>)
 800473a:	4770      	bx	lr
 800473c:	2000015c 	.word	0x2000015c

08004740 <_close_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d06      	ldr	r5, [pc, #24]	@ (800475c <_close_r+0x1c>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	602b      	str	r3, [r5, #0]
 800474c:	f7fc fef0 	bl	8001530 <_close>
 8004750:	1c43      	adds	r3, r0, #1
 8004752:	d102      	bne.n	800475a <_close_r+0x1a>
 8004754:	682b      	ldr	r3, [r5, #0]
 8004756:	b103      	cbz	r3, 800475a <_close_r+0x1a>
 8004758:	6023      	str	r3, [r4, #0]
 800475a:	bd38      	pop	{r3, r4, r5, pc}
 800475c:	200003d4 	.word	0x200003d4

08004760 <_lseek_r>:
 8004760:	b538      	push	{r3, r4, r5, lr}
 8004762:	4d07      	ldr	r5, [pc, #28]	@ (8004780 <_lseek_r+0x20>)
 8004764:	4604      	mov	r4, r0
 8004766:	4608      	mov	r0, r1
 8004768:	4611      	mov	r1, r2
 800476a:	2200      	movs	r2, #0
 800476c:	602a      	str	r2, [r5, #0]
 800476e:	461a      	mov	r2, r3
 8004770:	f7fc ff05 	bl	800157e <_lseek>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d102      	bne.n	800477e <_lseek_r+0x1e>
 8004778:	682b      	ldr	r3, [r5, #0]
 800477a:	b103      	cbz	r3, 800477e <_lseek_r+0x1e>
 800477c:	6023      	str	r3, [r4, #0]
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	200003d4 	.word	0x200003d4

08004784 <_read_r>:
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4d07      	ldr	r5, [pc, #28]	@ (80047a4 <_read_r+0x20>)
 8004788:	4604      	mov	r4, r0
 800478a:	4608      	mov	r0, r1
 800478c:	4611      	mov	r1, r2
 800478e:	2200      	movs	r2, #0
 8004790:	602a      	str	r2, [r5, #0]
 8004792:	461a      	mov	r2, r3
 8004794:	f7fc fe93 	bl	80014be <_read>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d102      	bne.n	80047a2 <_read_r+0x1e>
 800479c:	682b      	ldr	r3, [r5, #0]
 800479e:	b103      	cbz	r3, 80047a2 <_read_r+0x1e>
 80047a0:	6023      	str	r3, [r4, #0]
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	200003d4 	.word	0x200003d4

080047a8 <_write_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4d07      	ldr	r5, [pc, #28]	@ (80047c8 <_write_r+0x20>)
 80047ac:	4604      	mov	r4, r0
 80047ae:	4608      	mov	r0, r1
 80047b0:	4611      	mov	r1, r2
 80047b2:	2200      	movs	r2, #0
 80047b4:	602a      	str	r2, [r5, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f7fc fe9e 	bl	80014f8 <_write>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d102      	bne.n	80047c6 <_write_r+0x1e>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	b103      	cbz	r3, 80047c6 <_write_r+0x1e>
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	200003d4 	.word	0x200003d4

080047cc <__errno>:
 80047cc:	4b01      	ldr	r3, [pc, #4]	@ (80047d4 <__errno+0x8>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000001c 	.word	0x2000001c

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	@ (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	@ (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	@ (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	@ (800481c <__libc_init_array+0x44>)
 80047ec:	f002 f868 	bl	80068c0 <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	08006c8c 	.word	0x08006c8c
 8004814:	08006c8c 	.word	0x08006c8c
 8004818:	08006c8c 	.word	0x08006c8c
 800481c:	08006c90 	.word	0x08006c90

08004820 <__retarget_lock_init_recursive>:
 8004820:	4770      	bx	lr

08004822 <__retarget_lock_acquire_recursive>:
 8004822:	4770      	bx	lr

08004824 <__retarget_lock_release_recursive>:
 8004824:	4770      	bx	lr

08004826 <quorem>:
 8004826:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800482a:	6903      	ldr	r3, [r0, #16]
 800482c:	690c      	ldr	r4, [r1, #16]
 800482e:	42a3      	cmp	r3, r4
 8004830:	4607      	mov	r7, r0
 8004832:	db7e      	blt.n	8004932 <quorem+0x10c>
 8004834:	3c01      	subs	r4, #1
 8004836:	f101 0814 	add.w	r8, r1, #20
 800483a:	00a3      	lsls	r3, r4, #2
 800483c:	f100 0514 	add.w	r5, r0, #20
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004846:	9301      	str	r3, [sp, #4]
 8004848:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800484c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004850:	3301      	adds	r3, #1
 8004852:	429a      	cmp	r2, r3
 8004854:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004858:	fbb2 f6f3 	udiv	r6, r2, r3
 800485c:	d32e      	bcc.n	80048bc <quorem+0x96>
 800485e:	f04f 0a00 	mov.w	sl, #0
 8004862:	46c4      	mov	ip, r8
 8004864:	46ae      	mov	lr, r5
 8004866:	46d3      	mov	fp, sl
 8004868:	f85c 3b04 	ldr.w	r3, [ip], #4
 800486c:	b298      	uxth	r0, r3
 800486e:	fb06 a000 	mla	r0, r6, r0, sl
 8004872:	0c02      	lsrs	r2, r0, #16
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	fb06 2303 	mla	r3, r6, r3, r2
 800487a:	f8de 2000 	ldr.w	r2, [lr]
 800487e:	b280      	uxth	r0, r0
 8004880:	b292      	uxth	r2, r2
 8004882:	1a12      	subs	r2, r2, r0
 8004884:	445a      	add	r2, fp
 8004886:	f8de 0000 	ldr.w	r0, [lr]
 800488a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800488e:	b29b      	uxth	r3, r3
 8004890:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004894:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004898:	b292      	uxth	r2, r2
 800489a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800489e:	45e1      	cmp	r9, ip
 80048a0:	f84e 2b04 	str.w	r2, [lr], #4
 80048a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80048a8:	d2de      	bcs.n	8004868 <quorem+0x42>
 80048aa:	9b00      	ldr	r3, [sp, #0]
 80048ac:	58eb      	ldr	r3, [r5, r3]
 80048ae:	b92b      	cbnz	r3, 80048bc <quorem+0x96>
 80048b0:	9b01      	ldr	r3, [sp, #4]
 80048b2:	3b04      	subs	r3, #4
 80048b4:	429d      	cmp	r5, r3
 80048b6:	461a      	mov	r2, r3
 80048b8:	d32f      	bcc.n	800491a <quorem+0xf4>
 80048ba:	613c      	str	r4, [r7, #16]
 80048bc:	4638      	mov	r0, r7
 80048be:	f001 f97d 	bl	8005bbc <__mcmp>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	db25      	blt.n	8004912 <quorem+0xec>
 80048c6:	4629      	mov	r1, r5
 80048c8:	2000      	movs	r0, #0
 80048ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80048ce:	f8d1 c000 	ldr.w	ip, [r1]
 80048d2:	fa1f fe82 	uxth.w	lr, r2
 80048d6:	fa1f f38c 	uxth.w	r3, ip
 80048da:	eba3 030e 	sub.w	r3, r3, lr
 80048de:	4403      	add	r3, r0
 80048e0:	0c12      	lsrs	r2, r2, #16
 80048e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80048e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048f0:	45c1      	cmp	r9, r8
 80048f2:	f841 3b04 	str.w	r3, [r1], #4
 80048f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80048fa:	d2e6      	bcs.n	80048ca <quorem+0xa4>
 80048fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004900:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004904:	b922      	cbnz	r2, 8004910 <quorem+0xea>
 8004906:	3b04      	subs	r3, #4
 8004908:	429d      	cmp	r5, r3
 800490a:	461a      	mov	r2, r3
 800490c:	d30b      	bcc.n	8004926 <quorem+0x100>
 800490e:	613c      	str	r4, [r7, #16]
 8004910:	3601      	adds	r6, #1
 8004912:	4630      	mov	r0, r6
 8004914:	b003      	add	sp, #12
 8004916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	3b04      	subs	r3, #4
 800491e:	2a00      	cmp	r2, #0
 8004920:	d1cb      	bne.n	80048ba <quorem+0x94>
 8004922:	3c01      	subs	r4, #1
 8004924:	e7c6      	b.n	80048b4 <quorem+0x8e>
 8004926:	6812      	ldr	r2, [r2, #0]
 8004928:	3b04      	subs	r3, #4
 800492a:	2a00      	cmp	r2, #0
 800492c:	d1ef      	bne.n	800490e <quorem+0xe8>
 800492e:	3c01      	subs	r4, #1
 8004930:	e7ea      	b.n	8004908 <quorem+0xe2>
 8004932:	2000      	movs	r0, #0
 8004934:	e7ee      	b.n	8004914 <quorem+0xee>
	...

08004938 <_dtoa_r>:
 8004938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	69c7      	ldr	r7, [r0, #28]
 800493e:	b097      	sub	sp, #92	@ 0x5c
 8004940:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004944:	ec55 4b10 	vmov	r4, r5, d0
 8004948:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800494a:	9107      	str	r1, [sp, #28]
 800494c:	4681      	mov	r9, r0
 800494e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004950:	9311      	str	r3, [sp, #68]	@ 0x44
 8004952:	b97f      	cbnz	r7, 8004974 <_dtoa_r+0x3c>
 8004954:	2010      	movs	r0, #16
 8004956:	f000 fe09 	bl	800556c <malloc>
 800495a:	4602      	mov	r2, r0
 800495c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004960:	b920      	cbnz	r0, 800496c <_dtoa_r+0x34>
 8004962:	4ba9      	ldr	r3, [pc, #676]	@ (8004c08 <_dtoa_r+0x2d0>)
 8004964:	21ef      	movs	r1, #239	@ 0xef
 8004966:	48a9      	ldr	r0, [pc, #676]	@ (8004c0c <_dtoa_r+0x2d4>)
 8004968:	f001 fc6c 	bl	8006244 <__assert_func>
 800496c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004970:	6007      	str	r7, [r0, #0]
 8004972:	60c7      	str	r7, [r0, #12]
 8004974:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004978:	6819      	ldr	r1, [r3, #0]
 800497a:	b159      	cbz	r1, 8004994 <_dtoa_r+0x5c>
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	604a      	str	r2, [r1, #4]
 8004980:	2301      	movs	r3, #1
 8004982:	4093      	lsls	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
 8004986:	4648      	mov	r0, r9
 8004988:	f000 fee6 	bl	8005758 <_Bfree>
 800498c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	1e2b      	subs	r3, r5, #0
 8004996:	bfb9      	ittee	lt
 8004998:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800499c:	9305      	strlt	r3, [sp, #20]
 800499e:	2300      	movge	r3, #0
 80049a0:	6033      	strge	r3, [r6, #0]
 80049a2:	9f05      	ldr	r7, [sp, #20]
 80049a4:	4b9a      	ldr	r3, [pc, #616]	@ (8004c10 <_dtoa_r+0x2d8>)
 80049a6:	bfbc      	itt	lt
 80049a8:	2201      	movlt	r2, #1
 80049aa:	6032      	strlt	r2, [r6, #0]
 80049ac:	43bb      	bics	r3, r7
 80049ae:	d112      	bne.n	80049d6 <_dtoa_r+0x9e>
 80049b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80049b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80049bc:	4323      	orrs	r3, r4
 80049be:	f000 855a 	beq.w	8005476 <_dtoa_r+0xb3e>
 80049c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004c24 <_dtoa_r+0x2ec>
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 855c 	beq.w	8005486 <_dtoa_r+0xb4e>
 80049ce:	f10a 0303 	add.w	r3, sl, #3
 80049d2:	f000 bd56 	b.w	8005482 <_dtoa_r+0xb4a>
 80049d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80049da:	2200      	movs	r2, #0
 80049dc:	ec51 0b17 	vmov	r0, r1, d7
 80049e0:	2300      	movs	r3, #0
 80049e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80049e6:	f7fc f88f 	bl	8000b08 <__aeabi_dcmpeq>
 80049ea:	4680      	mov	r8, r0
 80049ec:	b158      	cbz	r0, 8004a06 <_dtoa_r+0xce>
 80049ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80049f0:	2301      	movs	r3, #1
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049f6:	b113      	cbz	r3, 80049fe <_dtoa_r+0xc6>
 80049f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80049fa:	4b86      	ldr	r3, [pc, #536]	@ (8004c14 <_dtoa_r+0x2dc>)
 80049fc:	6013      	str	r3, [r2, #0]
 80049fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004c28 <_dtoa_r+0x2f0>
 8004a02:	f000 bd40 	b.w	8005486 <_dtoa_r+0xb4e>
 8004a06:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004a0a:	aa14      	add	r2, sp, #80	@ 0x50
 8004a0c:	a915      	add	r1, sp, #84	@ 0x54
 8004a0e:	4648      	mov	r0, r9
 8004a10:	f001 f984 	bl	8005d1c <__d2b>
 8004a14:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004a18:	9002      	str	r0, [sp, #8]
 8004a1a:	2e00      	cmp	r6, #0
 8004a1c:	d078      	beq.n	8004b10 <_dtoa_r+0x1d8>
 8004a1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a20:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a2c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004a30:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004a34:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004a38:	4619      	mov	r1, r3
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	4b76      	ldr	r3, [pc, #472]	@ (8004c18 <_dtoa_r+0x2e0>)
 8004a3e:	f7fb fc43 	bl	80002c8 <__aeabi_dsub>
 8004a42:	a36b      	add	r3, pc, #428	@ (adr r3, 8004bf0 <_dtoa_r+0x2b8>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fdf6 	bl	8000638 <__aeabi_dmul>
 8004a4c:	a36a      	add	r3, pc, #424	@ (adr r3, 8004bf8 <_dtoa_r+0x2c0>)
 8004a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a52:	f7fb fc3b 	bl	80002cc <__adddf3>
 8004a56:	4604      	mov	r4, r0
 8004a58:	4630      	mov	r0, r6
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	f7fb fd82 	bl	8000564 <__aeabi_i2d>
 8004a60:	a367      	add	r3, pc, #412	@ (adr r3, 8004c00 <_dtoa_r+0x2c8>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fde7 	bl	8000638 <__aeabi_dmul>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4620      	mov	r0, r4
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fb fc2b 	bl	80002cc <__adddf3>
 8004a76:	4604      	mov	r4, r0
 8004a78:	460d      	mov	r5, r1
 8004a7a:	f7fc f88d 	bl	8000b98 <__aeabi_d2iz>
 8004a7e:	2200      	movs	r2, #0
 8004a80:	4607      	mov	r7, r0
 8004a82:	2300      	movs	r3, #0
 8004a84:	4620      	mov	r0, r4
 8004a86:	4629      	mov	r1, r5
 8004a88:	f7fc f848 	bl	8000b1c <__aeabi_dcmplt>
 8004a8c:	b140      	cbz	r0, 8004aa0 <_dtoa_r+0x168>
 8004a8e:	4638      	mov	r0, r7
 8004a90:	f7fb fd68 	bl	8000564 <__aeabi_i2d>
 8004a94:	4622      	mov	r2, r4
 8004a96:	462b      	mov	r3, r5
 8004a98:	f7fc f836 	bl	8000b08 <__aeabi_dcmpeq>
 8004a9c:	b900      	cbnz	r0, 8004aa0 <_dtoa_r+0x168>
 8004a9e:	3f01      	subs	r7, #1
 8004aa0:	2f16      	cmp	r7, #22
 8004aa2:	d852      	bhi.n	8004b4a <_dtoa_r+0x212>
 8004aa4:	4b5d      	ldr	r3, [pc, #372]	@ (8004c1c <_dtoa_r+0x2e4>)
 8004aa6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ab2:	f7fc f833 	bl	8000b1c <__aeabi_dcmplt>
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d049      	beq.n	8004b4e <_dtoa_r+0x216>
 8004aba:	3f01      	subs	r7, #1
 8004abc:	2300      	movs	r3, #0
 8004abe:	9310      	str	r3, [sp, #64]	@ 0x40
 8004ac0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004ac2:	1b9b      	subs	r3, r3, r6
 8004ac4:	1e5a      	subs	r2, r3, #1
 8004ac6:	bf45      	ittet	mi
 8004ac8:	f1c3 0301 	rsbmi	r3, r3, #1
 8004acc:	9300      	strmi	r3, [sp, #0]
 8004ace:	2300      	movpl	r3, #0
 8004ad0:	2300      	movmi	r3, #0
 8004ad2:	9206      	str	r2, [sp, #24]
 8004ad4:	bf54      	ite	pl
 8004ad6:	9300      	strpl	r3, [sp, #0]
 8004ad8:	9306      	strmi	r3, [sp, #24]
 8004ada:	2f00      	cmp	r7, #0
 8004adc:	db39      	blt.n	8004b52 <_dtoa_r+0x21a>
 8004ade:	9b06      	ldr	r3, [sp, #24]
 8004ae0:	970d      	str	r7, [sp, #52]	@ 0x34
 8004ae2:	443b      	add	r3, r7
 8004ae4:	9306      	str	r3, [sp, #24]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9308      	str	r3, [sp, #32]
 8004aea:	9b07      	ldr	r3, [sp, #28]
 8004aec:	2b09      	cmp	r3, #9
 8004aee:	d863      	bhi.n	8004bb8 <_dtoa_r+0x280>
 8004af0:	2b05      	cmp	r3, #5
 8004af2:	bfc4      	itt	gt
 8004af4:	3b04      	subgt	r3, #4
 8004af6:	9307      	strgt	r3, [sp, #28]
 8004af8:	9b07      	ldr	r3, [sp, #28]
 8004afa:	f1a3 0302 	sub.w	r3, r3, #2
 8004afe:	bfcc      	ite	gt
 8004b00:	2400      	movgt	r4, #0
 8004b02:	2401      	movle	r4, #1
 8004b04:	2b03      	cmp	r3, #3
 8004b06:	d863      	bhi.n	8004bd0 <_dtoa_r+0x298>
 8004b08:	e8df f003 	tbb	[pc, r3]
 8004b0c:	2b375452 	.word	0x2b375452
 8004b10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004b14:	441e      	add	r6, r3
 8004b16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004b1a:	2b20      	cmp	r3, #32
 8004b1c:	bfc1      	itttt	gt
 8004b1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004b22:	409f      	lslgt	r7, r3
 8004b24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004b28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004b2c:	bfd6      	itet	le
 8004b2e:	f1c3 0320 	rsble	r3, r3, #32
 8004b32:	ea47 0003 	orrgt.w	r0, r7, r3
 8004b36:	fa04 f003 	lslle.w	r0, r4, r3
 8004b3a:	f7fb fd03 	bl	8000544 <__aeabi_ui2d>
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004b44:	3e01      	subs	r6, #1
 8004b46:	9212      	str	r2, [sp, #72]	@ 0x48
 8004b48:	e776      	b.n	8004a38 <_dtoa_r+0x100>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e7b7      	b.n	8004abe <_dtoa_r+0x186>
 8004b4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004b50:	e7b6      	b.n	8004ac0 <_dtoa_r+0x188>
 8004b52:	9b00      	ldr	r3, [sp, #0]
 8004b54:	1bdb      	subs	r3, r3, r7
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	427b      	negs	r3, r7
 8004b5a:	9308      	str	r3, [sp, #32]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004b60:	e7c3      	b.n	8004aea <_dtoa_r+0x1b2>
 8004b62:	2301      	movs	r3, #1
 8004b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004b68:	eb07 0b03 	add.w	fp, r7, r3
 8004b6c:	f10b 0301 	add.w	r3, fp, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	9303      	str	r3, [sp, #12]
 8004b74:	bfb8      	it	lt
 8004b76:	2301      	movlt	r3, #1
 8004b78:	e006      	b.n	8004b88 <_dtoa_r+0x250>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	dd28      	ble.n	8004bd6 <_dtoa_r+0x29e>
 8004b84:	469b      	mov	fp, r3
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	2204      	movs	r2, #4
 8004b90:	f102 0514 	add.w	r5, r2, #20
 8004b94:	429d      	cmp	r5, r3
 8004b96:	d926      	bls.n	8004be6 <_dtoa_r+0x2ae>
 8004b98:	6041      	str	r1, [r0, #4]
 8004b9a:	4648      	mov	r0, r9
 8004b9c:	f000 fd9c 	bl	80056d8 <_Balloc>
 8004ba0:	4682      	mov	sl, r0
 8004ba2:	2800      	cmp	r0, #0
 8004ba4:	d142      	bne.n	8004c2c <_dtoa_r+0x2f4>
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8004c20 <_dtoa_r+0x2e8>)
 8004ba8:	4602      	mov	r2, r0
 8004baa:	f240 11af 	movw	r1, #431	@ 0x1af
 8004bae:	e6da      	b.n	8004966 <_dtoa_r+0x2e>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e7e3      	b.n	8004b7c <_dtoa_r+0x244>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e7d5      	b.n	8004b64 <_dtoa_r+0x22c>
 8004bb8:	2401      	movs	r4, #1
 8004bba:	2300      	movs	r3, #0
 8004bbc:	9307      	str	r3, [sp, #28]
 8004bbe:	9409      	str	r4, [sp, #36]	@ 0x24
 8004bc0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8cd b00c 	str.w	fp, [sp, #12]
 8004bca:	2312      	movs	r3, #18
 8004bcc:	920c      	str	r2, [sp, #48]	@ 0x30
 8004bce:	e7db      	b.n	8004b88 <_dtoa_r+0x250>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bd4:	e7f4      	b.n	8004bc0 <_dtoa_r+0x288>
 8004bd6:	f04f 0b01 	mov.w	fp, #1
 8004bda:	f8cd b00c 	str.w	fp, [sp, #12]
 8004bde:	465b      	mov	r3, fp
 8004be0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004be4:	e7d0      	b.n	8004b88 <_dtoa_r+0x250>
 8004be6:	3101      	adds	r1, #1
 8004be8:	0052      	lsls	r2, r2, #1
 8004bea:	e7d1      	b.n	8004b90 <_dtoa_r+0x258>
 8004bec:	f3af 8000 	nop.w
 8004bf0:	636f4361 	.word	0x636f4361
 8004bf4:	3fd287a7 	.word	0x3fd287a7
 8004bf8:	8b60c8b3 	.word	0x8b60c8b3
 8004bfc:	3fc68a28 	.word	0x3fc68a28
 8004c00:	509f79fb 	.word	0x509f79fb
 8004c04:	3fd34413 	.word	0x3fd34413
 8004c08:	08006951 	.word	0x08006951
 8004c0c:	08006968 	.word	0x08006968
 8004c10:	7ff00000 	.word	0x7ff00000
 8004c14:	08006921 	.word	0x08006921
 8004c18:	3ff80000 	.word	0x3ff80000
 8004c1c:	08006ab8 	.word	0x08006ab8
 8004c20:	080069c0 	.word	0x080069c0
 8004c24:	0800694d 	.word	0x0800694d
 8004c28:	08006920 	.word	0x08006920
 8004c2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004c30:	6018      	str	r0, [r3, #0]
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	2b0e      	cmp	r3, #14
 8004c36:	f200 80a1 	bhi.w	8004d7c <_dtoa_r+0x444>
 8004c3a:	2c00      	cmp	r4, #0
 8004c3c:	f000 809e 	beq.w	8004d7c <_dtoa_r+0x444>
 8004c40:	2f00      	cmp	r7, #0
 8004c42:	dd33      	ble.n	8004cac <_dtoa_r+0x374>
 8004c44:	4b9c      	ldr	r3, [pc, #624]	@ (8004eb8 <_dtoa_r+0x580>)
 8004c46:	f007 020f 	and.w	r2, r7, #15
 8004c4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004c4e:	ed93 7b00 	vldr	d7, [r3]
 8004c52:	05f8      	lsls	r0, r7, #23
 8004c54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004c58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004c5c:	d516      	bpl.n	8004c8c <_dtoa_r+0x354>
 8004c5e:	4b97      	ldr	r3, [pc, #604]	@ (8004ebc <_dtoa_r+0x584>)
 8004c60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c68:	f7fb fe10 	bl	800088c <__aeabi_ddiv>
 8004c6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c70:	f004 040f 	and.w	r4, r4, #15
 8004c74:	2603      	movs	r6, #3
 8004c76:	4d91      	ldr	r5, [pc, #580]	@ (8004ebc <_dtoa_r+0x584>)
 8004c78:	b954      	cbnz	r4, 8004c90 <_dtoa_r+0x358>
 8004c7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004c7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c82:	f7fb fe03 	bl	800088c <__aeabi_ddiv>
 8004c86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004c8a:	e028      	b.n	8004cde <_dtoa_r+0x3a6>
 8004c8c:	2602      	movs	r6, #2
 8004c8e:	e7f2      	b.n	8004c76 <_dtoa_r+0x33e>
 8004c90:	07e1      	lsls	r1, r4, #31
 8004c92:	d508      	bpl.n	8004ca6 <_dtoa_r+0x36e>
 8004c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004c98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c9c:	f7fb fccc 	bl	8000638 <__aeabi_dmul>
 8004ca0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ca4:	3601      	adds	r6, #1
 8004ca6:	1064      	asrs	r4, r4, #1
 8004ca8:	3508      	adds	r5, #8
 8004caa:	e7e5      	b.n	8004c78 <_dtoa_r+0x340>
 8004cac:	f000 80af 	beq.w	8004e0e <_dtoa_r+0x4d6>
 8004cb0:	427c      	negs	r4, r7
 8004cb2:	4b81      	ldr	r3, [pc, #516]	@ (8004eb8 <_dtoa_r+0x580>)
 8004cb4:	4d81      	ldr	r5, [pc, #516]	@ (8004ebc <_dtoa_r+0x584>)
 8004cb6:	f004 020f 	and.w	r2, r4, #15
 8004cba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004cc6:	f7fb fcb7 	bl	8000638 <__aeabi_dmul>
 8004cca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cce:	1124      	asrs	r4, r4, #4
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2602      	movs	r6, #2
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	f040 808f 	bne.w	8004df8 <_dtoa_r+0x4c0>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1d3      	bne.n	8004c86 <_dtoa_r+0x34e>
 8004cde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ce0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8094 	beq.w	8004e12 <_dtoa_r+0x4da>
 8004cea:	4b75      	ldr	r3, [pc, #468]	@ (8004ec0 <_dtoa_r+0x588>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb ff13 	bl	8000b1c <__aeabi_dcmplt>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	f000 808b 	beq.w	8004e12 <_dtoa_r+0x4da>
 8004cfc:	9b03      	ldr	r3, [sp, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	f000 8087 	beq.w	8004e12 <_dtoa_r+0x4da>
 8004d04:	f1bb 0f00 	cmp.w	fp, #0
 8004d08:	dd34      	ble.n	8004d74 <_dtoa_r+0x43c>
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	4b6d      	ldr	r3, [pc, #436]	@ (8004ec4 <_dtoa_r+0x58c>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	4629      	mov	r1, r5
 8004d12:	f7fb fc91 	bl	8000638 <__aeabi_dmul>
 8004d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d1a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004d1e:	3601      	adds	r6, #1
 8004d20:	465c      	mov	r4, fp
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7fb fc1e 	bl	8000564 <__aeabi_i2d>
 8004d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d2c:	f7fb fc84 	bl	8000638 <__aeabi_dmul>
 8004d30:	4b65      	ldr	r3, [pc, #404]	@ (8004ec8 <_dtoa_r+0x590>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	f7fb faca 	bl	80002cc <__adddf3>
 8004d38:	4605      	mov	r5, r0
 8004d3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	d16a      	bne.n	8004e18 <_dtoa_r+0x4e0>
 8004d42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d46:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <_dtoa_r+0x594>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f7fb fabd 	bl	80002c8 <__aeabi_dsub>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d56:	462a      	mov	r2, r5
 8004d58:	4633      	mov	r3, r6
 8004d5a:	f7fb fefd 	bl	8000b58 <__aeabi_dcmpgt>
 8004d5e:	2800      	cmp	r0, #0
 8004d60:	f040 8298 	bne.w	8005294 <_dtoa_r+0x95c>
 8004d64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d68:	462a      	mov	r2, r5
 8004d6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004d6e:	f7fb fed5 	bl	8000b1c <__aeabi_dcmplt>
 8004d72:	bb38      	cbnz	r0, 8004dc4 <_dtoa_r+0x48c>
 8004d74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004d78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004d7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f2c0 8157 	blt.w	8005032 <_dtoa_r+0x6fa>
 8004d84:	2f0e      	cmp	r7, #14
 8004d86:	f300 8154 	bgt.w	8005032 <_dtoa_r+0x6fa>
 8004d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb8 <_dtoa_r+0x580>)
 8004d8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d90:	ed93 7b00 	vldr	d7, [r3]
 8004d94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	ed8d 7b00 	vstr	d7, [sp]
 8004d9c:	f280 80e5 	bge.w	8004f6a <_dtoa_r+0x632>
 8004da0:	9b03      	ldr	r3, [sp, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	f300 80e1 	bgt.w	8004f6a <_dtoa_r+0x632>
 8004da8:	d10c      	bne.n	8004dc4 <_dtoa_r+0x48c>
 8004daa:	4b48      	ldr	r3, [pc, #288]	@ (8004ecc <_dtoa_r+0x594>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	ec51 0b17 	vmov	r0, r1, d7
 8004db2:	f7fb fc41 	bl	8000638 <__aeabi_dmul>
 8004db6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dba:	f7fb fec3 	bl	8000b44 <__aeabi_dcmpge>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	f000 8266 	beq.w	8005290 <_dtoa_r+0x958>
 8004dc4:	2400      	movs	r4, #0
 8004dc6:	4625      	mov	r5, r4
 8004dc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004dca:	4656      	mov	r6, sl
 8004dcc:	ea6f 0803 	mvn.w	r8, r3
 8004dd0:	2700      	movs	r7, #0
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4648      	mov	r0, r9
 8004dd6:	f000 fcbf 	bl	8005758 <_Bfree>
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	f000 80bd 	beq.w	8004f5a <_dtoa_r+0x622>
 8004de0:	b12f      	cbz	r7, 8004dee <_dtoa_r+0x4b6>
 8004de2:	42af      	cmp	r7, r5
 8004de4:	d003      	beq.n	8004dee <_dtoa_r+0x4b6>
 8004de6:	4639      	mov	r1, r7
 8004de8:	4648      	mov	r0, r9
 8004dea:	f000 fcb5 	bl	8005758 <_Bfree>
 8004dee:	4629      	mov	r1, r5
 8004df0:	4648      	mov	r0, r9
 8004df2:	f000 fcb1 	bl	8005758 <_Bfree>
 8004df6:	e0b0      	b.n	8004f5a <_dtoa_r+0x622>
 8004df8:	07e2      	lsls	r2, r4, #31
 8004dfa:	d505      	bpl.n	8004e08 <_dtoa_r+0x4d0>
 8004dfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e00:	f7fb fc1a 	bl	8000638 <__aeabi_dmul>
 8004e04:	3601      	adds	r6, #1
 8004e06:	2301      	movs	r3, #1
 8004e08:	1064      	asrs	r4, r4, #1
 8004e0a:	3508      	adds	r5, #8
 8004e0c:	e762      	b.n	8004cd4 <_dtoa_r+0x39c>
 8004e0e:	2602      	movs	r6, #2
 8004e10:	e765      	b.n	8004cde <_dtoa_r+0x3a6>
 8004e12:	9c03      	ldr	r4, [sp, #12]
 8004e14:	46b8      	mov	r8, r7
 8004e16:	e784      	b.n	8004d22 <_dtoa_r+0x3ea>
 8004e18:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <_dtoa_r+0x580>)
 8004e1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004e24:	4454      	add	r4, sl
 8004e26:	2900      	cmp	r1, #0
 8004e28:	d054      	beq.n	8004ed4 <_dtoa_r+0x59c>
 8004e2a:	4929      	ldr	r1, [pc, #164]	@ (8004ed0 <_dtoa_r+0x598>)
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	f7fb fd2d 	bl	800088c <__aeabi_ddiv>
 8004e32:	4633      	mov	r3, r6
 8004e34:	462a      	mov	r2, r5
 8004e36:	f7fb fa47 	bl	80002c8 <__aeabi_dsub>
 8004e3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004e3e:	4656      	mov	r6, sl
 8004e40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e44:	f7fb fea8 	bl	8000b98 <__aeabi_d2iz>
 8004e48:	4605      	mov	r5, r0
 8004e4a:	f7fb fb8b 	bl	8000564 <__aeabi_i2d>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e56:	f7fb fa37 	bl	80002c8 <__aeabi_dsub>
 8004e5a:	3530      	adds	r5, #48	@ 0x30
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004e64:	f806 5b01 	strb.w	r5, [r6], #1
 8004e68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004e6c:	f7fb fe56 	bl	8000b1c <__aeabi_dcmplt>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d172      	bne.n	8004f5a <_dtoa_r+0x622>
 8004e74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e78:	4911      	ldr	r1, [pc, #68]	@ (8004ec0 <_dtoa_r+0x588>)
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7fb fa24 	bl	80002c8 <__aeabi_dsub>
 8004e80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004e84:	f7fb fe4a 	bl	8000b1c <__aeabi_dcmplt>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	f040 80b4 	bne.w	8004ff6 <_dtoa_r+0x6be>
 8004e8e:	42a6      	cmp	r6, r4
 8004e90:	f43f af70 	beq.w	8004d74 <_dtoa_r+0x43c>
 8004e94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004e98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <_dtoa_r+0x58c>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f7fb fbcc 	bl	8000638 <__aeabi_dmul>
 8004ea0:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <_dtoa_r+0x58c>)
 8004ea2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eac:	f7fb fbc4 	bl	8000638 <__aeabi_dmul>
 8004eb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eb4:	e7c4      	b.n	8004e40 <_dtoa_r+0x508>
 8004eb6:	bf00      	nop
 8004eb8:	08006ab8 	.word	0x08006ab8
 8004ebc:	08006a90 	.word	0x08006a90
 8004ec0:	3ff00000 	.word	0x3ff00000
 8004ec4:	40240000 	.word	0x40240000
 8004ec8:	401c0000 	.word	0x401c0000
 8004ecc:	40140000 	.word	0x40140000
 8004ed0:	3fe00000 	.word	0x3fe00000
 8004ed4:	4631      	mov	r1, r6
 8004ed6:	4628      	mov	r0, r5
 8004ed8:	f7fb fbae 	bl	8000638 <__aeabi_dmul>
 8004edc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ee0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004ee2:	4656      	mov	r6, sl
 8004ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ee8:	f7fb fe56 	bl	8000b98 <__aeabi_d2iz>
 8004eec:	4605      	mov	r5, r0
 8004eee:	f7fb fb39 	bl	8000564 <__aeabi_i2d>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004efa:	f7fb f9e5 	bl	80002c8 <__aeabi_dsub>
 8004efe:	3530      	adds	r5, #48	@ 0x30
 8004f00:	f806 5b01 	strb.w	r5, [r6], #1
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	42a6      	cmp	r6, r4
 8004f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f0e:	f04f 0200 	mov.w	r2, #0
 8004f12:	d124      	bne.n	8004f5e <_dtoa_r+0x626>
 8004f14:	4baf      	ldr	r3, [pc, #700]	@ (80051d4 <_dtoa_r+0x89c>)
 8004f16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004f1a:	f7fb f9d7 	bl	80002cc <__adddf3>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f26:	f7fb fe17 	bl	8000b58 <__aeabi_dcmpgt>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d163      	bne.n	8004ff6 <_dtoa_r+0x6be>
 8004f2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004f32:	49a8      	ldr	r1, [pc, #672]	@ (80051d4 <_dtoa_r+0x89c>)
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7fb f9c7 	bl	80002c8 <__aeabi_dsub>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f42:	f7fb fdeb 	bl	8000b1c <__aeabi_dcmplt>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	f43f af14 	beq.w	8004d74 <_dtoa_r+0x43c>
 8004f4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004f4e:	1e73      	subs	r3, r6, #1
 8004f50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004f52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f56:	2b30      	cmp	r3, #48	@ 0x30
 8004f58:	d0f8      	beq.n	8004f4c <_dtoa_r+0x614>
 8004f5a:	4647      	mov	r7, r8
 8004f5c:	e03b      	b.n	8004fd6 <_dtoa_r+0x69e>
 8004f5e:	4b9e      	ldr	r3, [pc, #632]	@ (80051d8 <_dtoa_r+0x8a0>)
 8004f60:	f7fb fb6a 	bl	8000638 <__aeabi_dmul>
 8004f64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f68:	e7bc      	b.n	8004ee4 <_dtoa_r+0x5ac>
 8004f6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004f6e:	4656      	mov	r6, sl
 8004f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f74:	4620      	mov	r0, r4
 8004f76:	4629      	mov	r1, r5
 8004f78:	f7fb fc88 	bl	800088c <__aeabi_ddiv>
 8004f7c:	f7fb fe0c 	bl	8000b98 <__aeabi_d2iz>
 8004f80:	4680      	mov	r8, r0
 8004f82:	f7fb faef 	bl	8000564 <__aeabi_i2d>
 8004f86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f8a:	f7fb fb55 	bl	8000638 <__aeabi_dmul>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4620      	mov	r0, r4
 8004f94:	4629      	mov	r1, r5
 8004f96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004f9a:	f7fb f995 	bl	80002c8 <__aeabi_dsub>
 8004f9e:	f806 4b01 	strb.w	r4, [r6], #1
 8004fa2:	9d03      	ldr	r5, [sp, #12]
 8004fa4:	eba6 040a 	sub.w	r4, r6, sl
 8004fa8:	42a5      	cmp	r5, r4
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	d133      	bne.n	8005018 <_dtoa_r+0x6e0>
 8004fb0:	f7fb f98c 	bl	80002cc <__adddf3>
 8004fb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fb8:	4604      	mov	r4, r0
 8004fba:	460d      	mov	r5, r1
 8004fbc:	f7fb fdcc 	bl	8000b58 <__aeabi_dcmpgt>
 8004fc0:	b9c0      	cbnz	r0, 8004ff4 <_dtoa_r+0x6bc>
 8004fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	f7fb fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 8004fce:	b110      	cbz	r0, 8004fd6 <_dtoa_r+0x69e>
 8004fd0:	f018 0f01 	tst.w	r8, #1
 8004fd4:	d10e      	bne.n	8004ff4 <_dtoa_r+0x6bc>
 8004fd6:	9902      	ldr	r1, [sp, #8]
 8004fd8:	4648      	mov	r0, r9
 8004fda:	f000 fbbd 	bl	8005758 <_Bfree>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	7033      	strb	r3, [r6, #0]
 8004fe2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004fe4:	3701      	adds	r7, #1
 8004fe6:	601f      	str	r7, [r3, #0]
 8004fe8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 824b 	beq.w	8005486 <_dtoa_r+0xb4e>
 8004ff0:	601e      	str	r6, [r3, #0]
 8004ff2:	e248      	b.n	8005486 <_dtoa_r+0xb4e>
 8004ff4:	46b8      	mov	r8, r7
 8004ff6:	4633      	mov	r3, r6
 8004ff8:	461e      	mov	r6, r3
 8004ffa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ffe:	2a39      	cmp	r2, #57	@ 0x39
 8005000:	d106      	bne.n	8005010 <_dtoa_r+0x6d8>
 8005002:	459a      	cmp	sl, r3
 8005004:	d1f8      	bne.n	8004ff8 <_dtoa_r+0x6c0>
 8005006:	2230      	movs	r2, #48	@ 0x30
 8005008:	f108 0801 	add.w	r8, r8, #1
 800500c:	f88a 2000 	strb.w	r2, [sl]
 8005010:	781a      	ldrb	r2, [r3, #0]
 8005012:	3201      	adds	r2, #1
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e7a0      	b.n	8004f5a <_dtoa_r+0x622>
 8005018:	4b6f      	ldr	r3, [pc, #444]	@ (80051d8 <_dtoa_r+0x8a0>)
 800501a:	2200      	movs	r2, #0
 800501c:	f7fb fb0c 	bl	8000638 <__aeabi_dmul>
 8005020:	2200      	movs	r2, #0
 8005022:	2300      	movs	r3, #0
 8005024:	4604      	mov	r4, r0
 8005026:	460d      	mov	r5, r1
 8005028:	f7fb fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 800502c:	2800      	cmp	r0, #0
 800502e:	d09f      	beq.n	8004f70 <_dtoa_r+0x638>
 8005030:	e7d1      	b.n	8004fd6 <_dtoa_r+0x69e>
 8005032:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005034:	2a00      	cmp	r2, #0
 8005036:	f000 80ea 	beq.w	800520e <_dtoa_r+0x8d6>
 800503a:	9a07      	ldr	r2, [sp, #28]
 800503c:	2a01      	cmp	r2, #1
 800503e:	f300 80cd 	bgt.w	80051dc <_dtoa_r+0x8a4>
 8005042:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005044:	2a00      	cmp	r2, #0
 8005046:	f000 80c1 	beq.w	80051cc <_dtoa_r+0x894>
 800504a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800504e:	9c08      	ldr	r4, [sp, #32]
 8005050:	9e00      	ldr	r6, [sp, #0]
 8005052:	9a00      	ldr	r2, [sp, #0]
 8005054:	441a      	add	r2, r3
 8005056:	9200      	str	r2, [sp, #0]
 8005058:	9a06      	ldr	r2, [sp, #24]
 800505a:	2101      	movs	r1, #1
 800505c:	441a      	add	r2, r3
 800505e:	4648      	mov	r0, r9
 8005060:	9206      	str	r2, [sp, #24]
 8005062:	f000 fc2d 	bl	80058c0 <__i2b>
 8005066:	4605      	mov	r5, r0
 8005068:	b166      	cbz	r6, 8005084 <_dtoa_r+0x74c>
 800506a:	9b06      	ldr	r3, [sp, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	dd09      	ble.n	8005084 <_dtoa_r+0x74c>
 8005070:	42b3      	cmp	r3, r6
 8005072:	9a00      	ldr	r2, [sp, #0]
 8005074:	bfa8      	it	ge
 8005076:	4633      	movge	r3, r6
 8005078:	1ad2      	subs	r2, r2, r3
 800507a:	9200      	str	r2, [sp, #0]
 800507c:	9a06      	ldr	r2, [sp, #24]
 800507e:	1af6      	subs	r6, r6, r3
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	9306      	str	r3, [sp, #24]
 8005084:	9b08      	ldr	r3, [sp, #32]
 8005086:	b30b      	cbz	r3, 80050cc <_dtoa_r+0x794>
 8005088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80c6 	beq.w	800521c <_dtoa_r+0x8e4>
 8005090:	2c00      	cmp	r4, #0
 8005092:	f000 80c0 	beq.w	8005216 <_dtoa_r+0x8de>
 8005096:	4629      	mov	r1, r5
 8005098:	4622      	mov	r2, r4
 800509a:	4648      	mov	r0, r9
 800509c:	f000 fcc8 	bl	8005a30 <__pow5mult>
 80050a0:	9a02      	ldr	r2, [sp, #8]
 80050a2:	4601      	mov	r1, r0
 80050a4:	4605      	mov	r5, r0
 80050a6:	4648      	mov	r0, r9
 80050a8:	f000 fc20 	bl	80058ec <__multiply>
 80050ac:	9902      	ldr	r1, [sp, #8]
 80050ae:	4680      	mov	r8, r0
 80050b0:	4648      	mov	r0, r9
 80050b2:	f000 fb51 	bl	8005758 <_Bfree>
 80050b6:	9b08      	ldr	r3, [sp, #32]
 80050b8:	1b1b      	subs	r3, r3, r4
 80050ba:	9308      	str	r3, [sp, #32]
 80050bc:	f000 80b1 	beq.w	8005222 <_dtoa_r+0x8ea>
 80050c0:	9a08      	ldr	r2, [sp, #32]
 80050c2:	4641      	mov	r1, r8
 80050c4:	4648      	mov	r0, r9
 80050c6:	f000 fcb3 	bl	8005a30 <__pow5mult>
 80050ca:	9002      	str	r0, [sp, #8]
 80050cc:	2101      	movs	r1, #1
 80050ce:	4648      	mov	r0, r9
 80050d0:	f000 fbf6 	bl	80058c0 <__i2b>
 80050d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80050d6:	4604      	mov	r4, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	f000 81d8 	beq.w	800548e <_dtoa_r+0xb56>
 80050de:	461a      	mov	r2, r3
 80050e0:	4601      	mov	r1, r0
 80050e2:	4648      	mov	r0, r9
 80050e4:	f000 fca4 	bl	8005a30 <__pow5mult>
 80050e8:	9b07      	ldr	r3, [sp, #28]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	4604      	mov	r4, r0
 80050ee:	f300 809f 	bgt.w	8005230 <_dtoa_r+0x8f8>
 80050f2:	9b04      	ldr	r3, [sp, #16]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 8097 	bne.w	8005228 <_dtoa_r+0x8f0>
 80050fa:	9b05      	ldr	r3, [sp, #20]
 80050fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 8093 	bne.w	800522c <_dtoa_r+0x8f4>
 8005106:	9b05      	ldr	r3, [sp, #20]
 8005108:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800510c:	0d1b      	lsrs	r3, r3, #20
 800510e:	051b      	lsls	r3, r3, #20
 8005110:	b133      	cbz	r3, 8005120 <_dtoa_r+0x7e8>
 8005112:	9b00      	ldr	r3, [sp, #0]
 8005114:	3301      	adds	r3, #1
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	9b06      	ldr	r3, [sp, #24]
 800511a:	3301      	adds	r3, #1
 800511c:	9306      	str	r3, [sp, #24]
 800511e:	2301      	movs	r3, #1
 8005120:	9308      	str	r3, [sp, #32]
 8005122:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005124:	2b00      	cmp	r3, #0
 8005126:	f000 81b8 	beq.w	800549a <_dtoa_r+0xb62>
 800512a:	6923      	ldr	r3, [r4, #16]
 800512c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005130:	6918      	ldr	r0, [r3, #16]
 8005132:	f000 fb79 	bl	8005828 <__hi0bits>
 8005136:	f1c0 0020 	rsb	r0, r0, #32
 800513a:	9b06      	ldr	r3, [sp, #24]
 800513c:	4418      	add	r0, r3
 800513e:	f010 001f 	ands.w	r0, r0, #31
 8005142:	f000 8082 	beq.w	800524a <_dtoa_r+0x912>
 8005146:	f1c0 0320 	rsb	r3, r0, #32
 800514a:	2b04      	cmp	r3, #4
 800514c:	dd73      	ble.n	8005236 <_dtoa_r+0x8fe>
 800514e:	9b00      	ldr	r3, [sp, #0]
 8005150:	f1c0 001c 	rsb	r0, r0, #28
 8005154:	4403      	add	r3, r0
 8005156:	9300      	str	r3, [sp, #0]
 8005158:	9b06      	ldr	r3, [sp, #24]
 800515a:	4403      	add	r3, r0
 800515c:	4406      	add	r6, r0
 800515e:	9306      	str	r3, [sp, #24]
 8005160:	9b00      	ldr	r3, [sp, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	dd05      	ble.n	8005172 <_dtoa_r+0x83a>
 8005166:	9902      	ldr	r1, [sp, #8]
 8005168:	461a      	mov	r2, r3
 800516a:	4648      	mov	r0, r9
 800516c:	f000 fcba 	bl	8005ae4 <__lshift>
 8005170:	9002      	str	r0, [sp, #8]
 8005172:	9b06      	ldr	r3, [sp, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	dd05      	ble.n	8005184 <_dtoa_r+0x84c>
 8005178:	4621      	mov	r1, r4
 800517a:	461a      	mov	r2, r3
 800517c:	4648      	mov	r0, r9
 800517e:	f000 fcb1 	bl	8005ae4 <__lshift>
 8005182:	4604      	mov	r4, r0
 8005184:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005186:	2b00      	cmp	r3, #0
 8005188:	d061      	beq.n	800524e <_dtoa_r+0x916>
 800518a:	9802      	ldr	r0, [sp, #8]
 800518c:	4621      	mov	r1, r4
 800518e:	f000 fd15 	bl	8005bbc <__mcmp>
 8005192:	2800      	cmp	r0, #0
 8005194:	da5b      	bge.n	800524e <_dtoa_r+0x916>
 8005196:	2300      	movs	r3, #0
 8005198:	9902      	ldr	r1, [sp, #8]
 800519a:	220a      	movs	r2, #10
 800519c:	4648      	mov	r0, r9
 800519e:	f000 fafd 	bl	800579c <__multadd>
 80051a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a4:	9002      	str	r0, [sp, #8]
 80051a6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 8177 	beq.w	800549e <_dtoa_r+0xb66>
 80051b0:	4629      	mov	r1, r5
 80051b2:	2300      	movs	r3, #0
 80051b4:	220a      	movs	r2, #10
 80051b6:	4648      	mov	r0, r9
 80051b8:	f000 faf0 	bl	800579c <__multadd>
 80051bc:	f1bb 0f00 	cmp.w	fp, #0
 80051c0:	4605      	mov	r5, r0
 80051c2:	dc6f      	bgt.n	80052a4 <_dtoa_r+0x96c>
 80051c4:	9b07      	ldr	r3, [sp, #28]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	dc49      	bgt.n	800525e <_dtoa_r+0x926>
 80051ca:	e06b      	b.n	80052a4 <_dtoa_r+0x96c>
 80051cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80051d2:	e73c      	b.n	800504e <_dtoa_r+0x716>
 80051d4:	3fe00000 	.word	0x3fe00000
 80051d8:	40240000 	.word	0x40240000
 80051dc:	9b03      	ldr	r3, [sp, #12]
 80051de:	1e5c      	subs	r4, r3, #1
 80051e0:	9b08      	ldr	r3, [sp, #32]
 80051e2:	42a3      	cmp	r3, r4
 80051e4:	db09      	blt.n	80051fa <_dtoa_r+0x8c2>
 80051e6:	1b1c      	subs	r4, r3, r4
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f6bf af30 	bge.w	8005050 <_dtoa_r+0x718>
 80051f0:	9b00      	ldr	r3, [sp, #0]
 80051f2:	9a03      	ldr	r2, [sp, #12]
 80051f4:	1a9e      	subs	r6, r3, r2
 80051f6:	2300      	movs	r3, #0
 80051f8:	e72b      	b.n	8005052 <_dtoa_r+0x71a>
 80051fa:	9b08      	ldr	r3, [sp, #32]
 80051fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80051fe:	9408      	str	r4, [sp, #32]
 8005200:	1ae3      	subs	r3, r4, r3
 8005202:	441a      	add	r2, r3
 8005204:	9e00      	ldr	r6, [sp, #0]
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	920d      	str	r2, [sp, #52]	@ 0x34
 800520a:	2400      	movs	r4, #0
 800520c:	e721      	b.n	8005052 <_dtoa_r+0x71a>
 800520e:	9c08      	ldr	r4, [sp, #32]
 8005210:	9e00      	ldr	r6, [sp, #0]
 8005212:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005214:	e728      	b.n	8005068 <_dtoa_r+0x730>
 8005216:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800521a:	e751      	b.n	80050c0 <_dtoa_r+0x788>
 800521c:	9a08      	ldr	r2, [sp, #32]
 800521e:	9902      	ldr	r1, [sp, #8]
 8005220:	e750      	b.n	80050c4 <_dtoa_r+0x78c>
 8005222:	f8cd 8008 	str.w	r8, [sp, #8]
 8005226:	e751      	b.n	80050cc <_dtoa_r+0x794>
 8005228:	2300      	movs	r3, #0
 800522a:	e779      	b.n	8005120 <_dtoa_r+0x7e8>
 800522c:	9b04      	ldr	r3, [sp, #16]
 800522e:	e777      	b.n	8005120 <_dtoa_r+0x7e8>
 8005230:	2300      	movs	r3, #0
 8005232:	9308      	str	r3, [sp, #32]
 8005234:	e779      	b.n	800512a <_dtoa_r+0x7f2>
 8005236:	d093      	beq.n	8005160 <_dtoa_r+0x828>
 8005238:	9a00      	ldr	r2, [sp, #0]
 800523a:	331c      	adds	r3, #28
 800523c:	441a      	add	r2, r3
 800523e:	9200      	str	r2, [sp, #0]
 8005240:	9a06      	ldr	r2, [sp, #24]
 8005242:	441a      	add	r2, r3
 8005244:	441e      	add	r6, r3
 8005246:	9206      	str	r2, [sp, #24]
 8005248:	e78a      	b.n	8005160 <_dtoa_r+0x828>
 800524a:	4603      	mov	r3, r0
 800524c:	e7f4      	b.n	8005238 <_dtoa_r+0x900>
 800524e:	9b03      	ldr	r3, [sp, #12]
 8005250:	2b00      	cmp	r3, #0
 8005252:	46b8      	mov	r8, r7
 8005254:	dc20      	bgt.n	8005298 <_dtoa_r+0x960>
 8005256:	469b      	mov	fp, r3
 8005258:	9b07      	ldr	r3, [sp, #28]
 800525a:	2b02      	cmp	r3, #2
 800525c:	dd1e      	ble.n	800529c <_dtoa_r+0x964>
 800525e:	f1bb 0f00 	cmp.w	fp, #0
 8005262:	f47f adb1 	bne.w	8004dc8 <_dtoa_r+0x490>
 8005266:	4621      	mov	r1, r4
 8005268:	465b      	mov	r3, fp
 800526a:	2205      	movs	r2, #5
 800526c:	4648      	mov	r0, r9
 800526e:	f000 fa95 	bl	800579c <__multadd>
 8005272:	4601      	mov	r1, r0
 8005274:	4604      	mov	r4, r0
 8005276:	9802      	ldr	r0, [sp, #8]
 8005278:	f000 fca0 	bl	8005bbc <__mcmp>
 800527c:	2800      	cmp	r0, #0
 800527e:	f77f ada3 	ble.w	8004dc8 <_dtoa_r+0x490>
 8005282:	4656      	mov	r6, sl
 8005284:	2331      	movs	r3, #49	@ 0x31
 8005286:	f806 3b01 	strb.w	r3, [r6], #1
 800528a:	f108 0801 	add.w	r8, r8, #1
 800528e:	e59f      	b.n	8004dd0 <_dtoa_r+0x498>
 8005290:	9c03      	ldr	r4, [sp, #12]
 8005292:	46b8      	mov	r8, r7
 8005294:	4625      	mov	r5, r4
 8005296:	e7f4      	b.n	8005282 <_dtoa_r+0x94a>
 8005298:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800529c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8101 	beq.w	80054a6 <_dtoa_r+0xb6e>
 80052a4:	2e00      	cmp	r6, #0
 80052a6:	dd05      	ble.n	80052b4 <_dtoa_r+0x97c>
 80052a8:	4629      	mov	r1, r5
 80052aa:	4632      	mov	r2, r6
 80052ac:	4648      	mov	r0, r9
 80052ae:	f000 fc19 	bl	8005ae4 <__lshift>
 80052b2:	4605      	mov	r5, r0
 80052b4:	9b08      	ldr	r3, [sp, #32]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d05c      	beq.n	8005374 <_dtoa_r+0xa3c>
 80052ba:	6869      	ldr	r1, [r5, #4]
 80052bc:	4648      	mov	r0, r9
 80052be:	f000 fa0b 	bl	80056d8 <_Balloc>
 80052c2:	4606      	mov	r6, r0
 80052c4:	b928      	cbnz	r0, 80052d2 <_dtoa_r+0x99a>
 80052c6:	4b82      	ldr	r3, [pc, #520]	@ (80054d0 <_dtoa_r+0xb98>)
 80052c8:	4602      	mov	r2, r0
 80052ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80052ce:	f7ff bb4a 	b.w	8004966 <_dtoa_r+0x2e>
 80052d2:	692a      	ldr	r2, [r5, #16]
 80052d4:	3202      	adds	r2, #2
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	f105 010c 	add.w	r1, r5, #12
 80052dc:	300c      	adds	r0, #12
 80052de:	f000 ffa3 	bl	8006228 <memcpy>
 80052e2:	2201      	movs	r2, #1
 80052e4:	4631      	mov	r1, r6
 80052e6:	4648      	mov	r0, r9
 80052e8:	f000 fbfc 	bl	8005ae4 <__lshift>
 80052ec:	f10a 0301 	add.w	r3, sl, #1
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	eb0a 030b 	add.w	r3, sl, fp
 80052f6:	9308      	str	r3, [sp, #32]
 80052f8:	9b04      	ldr	r3, [sp, #16]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	462f      	mov	r7, r5
 8005300:	9306      	str	r3, [sp, #24]
 8005302:	4605      	mov	r5, r0
 8005304:	9b00      	ldr	r3, [sp, #0]
 8005306:	9802      	ldr	r0, [sp, #8]
 8005308:	4621      	mov	r1, r4
 800530a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800530e:	f7ff fa8a 	bl	8004826 <quorem>
 8005312:	4603      	mov	r3, r0
 8005314:	3330      	adds	r3, #48	@ 0x30
 8005316:	9003      	str	r0, [sp, #12]
 8005318:	4639      	mov	r1, r7
 800531a:	9802      	ldr	r0, [sp, #8]
 800531c:	9309      	str	r3, [sp, #36]	@ 0x24
 800531e:	f000 fc4d 	bl	8005bbc <__mcmp>
 8005322:	462a      	mov	r2, r5
 8005324:	9004      	str	r0, [sp, #16]
 8005326:	4621      	mov	r1, r4
 8005328:	4648      	mov	r0, r9
 800532a:	f000 fc63 	bl	8005bf4 <__mdiff>
 800532e:	68c2      	ldr	r2, [r0, #12]
 8005330:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005332:	4606      	mov	r6, r0
 8005334:	bb02      	cbnz	r2, 8005378 <_dtoa_r+0xa40>
 8005336:	4601      	mov	r1, r0
 8005338:	9802      	ldr	r0, [sp, #8]
 800533a:	f000 fc3f 	bl	8005bbc <__mcmp>
 800533e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005340:	4602      	mov	r2, r0
 8005342:	4631      	mov	r1, r6
 8005344:	4648      	mov	r0, r9
 8005346:	920c      	str	r2, [sp, #48]	@ 0x30
 8005348:	9309      	str	r3, [sp, #36]	@ 0x24
 800534a:	f000 fa05 	bl	8005758 <_Bfree>
 800534e:	9b07      	ldr	r3, [sp, #28]
 8005350:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005352:	9e00      	ldr	r6, [sp, #0]
 8005354:	ea42 0103 	orr.w	r1, r2, r3
 8005358:	9b06      	ldr	r3, [sp, #24]
 800535a:	4319      	orrs	r1, r3
 800535c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800535e:	d10d      	bne.n	800537c <_dtoa_r+0xa44>
 8005360:	2b39      	cmp	r3, #57	@ 0x39
 8005362:	d027      	beq.n	80053b4 <_dtoa_r+0xa7c>
 8005364:	9a04      	ldr	r2, [sp, #16]
 8005366:	2a00      	cmp	r2, #0
 8005368:	dd01      	ble.n	800536e <_dtoa_r+0xa36>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	3331      	adds	r3, #49	@ 0x31
 800536e:	f88b 3000 	strb.w	r3, [fp]
 8005372:	e52e      	b.n	8004dd2 <_dtoa_r+0x49a>
 8005374:	4628      	mov	r0, r5
 8005376:	e7b9      	b.n	80052ec <_dtoa_r+0x9b4>
 8005378:	2201      	movs	r2, #1
 800537a:	e7e2      	b.n	8005342 <_dtoa_r+0xa0a>
 800537c:	9904      	ldr	r1, [sp, #16]
 800537e:	2900      	cmp	r1, #0
 8005380:	db04      	blt.n	800538c <_dtoa_r+0xa54>
 8005382:	9807      	ldr	r0, [sp, #28]
 8005384:	4301      	orrs	r1, r0
 8005386:	9806      	ldr	r0, [sp, #24]
 8005388:	4301      	orrs	r1, r0
 800538a:	d120      	bne.n	80053ce <_dtoa_r+0xa96>
 800538c:	2a00      	cmp	r2, #0
 800538e:	ddee      	ble.n	800536e <_dtoa_r+0xa36>
 8005390:	9902      	ldr	r1, [sp, #8]
 8005392:	9300      	str	r3, [sp, #0]
 8005394:	2201      	movs	r2, #1
 8005396:	4648      	mov	r0, r9
 8005398:	f000 fba4 	bl	8005ae4 <__lshift>
 800539c:	4621      	mov	r1, r4
 800539e:	9002      	str	r0, [sp, #8]
 80053a0:	f000 fc0c 	bl	8005bbc <__mcmp>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	9b00      	ldr	r3, [sp, #0]
 80053a8:	dc02      	bgt.n	80053b0 <_dtoa_r+0xa78>
 80053aa:	d1e0      	bne.n	800536e <_dtoa_r+0xa36>
 80053ac:	07da      	lsls	r2, r3, #31
 80053ae:	d5de      	bpl.n	800536e <_dtoa_r+0xa36>
 80053b0:	2b39      	cmp	r3, #57	@ 0x39
 80053b2:	d1da      	bne.n	800536a <_dtoa_r+0xa32>
 80053b4:	2339      	movs	r3, #57	@ 0x39
 80053b6:	f88b 3000 	strb.w	r3, [fp]
 80053ba:	4633      	mov	r3, r6
 80053bc:	461e      	mov	r6, r3
 80053be:	3b01      	subs	r3, #1
 80053c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80053c4:	2a39      	cmp	r2, #57	@ 0x39
 80053c6:	d04e      	beq.n	8005466 <_dtoa_r+0xb2e>
 80053c8:	3201      	adds	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
 80053cc:	e501      	b.n	8004dd2 <_dtoa_r+0x49a>
 80053ce:	2a00      	cmp	r2, #0
 80053d0:	dd03      	ble.n	80053da <_dtoa_r+0xaa2>
 80053d2:	2b39      	cmp	r3, #57	@ 0x39
 80053d4:	d0ee      	beq.n	80053b4 <_dtoa_r+0xa7c>
 80053d6:	3301      	adds	r3, #1
 80053d8:	e7c9      	b.n	800536e <_dtoa_r+0xa36>
 80053da:	9a00      	ldr	r2, [sp, #0]
 80053dc:	9908      	ldr	r1, [sp, #32]
 80053de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80053e2:	428a      	cmp	r2, r1
 80053e4:	d028      	beq.n	8005438 <_dtoa_r+0xb00>
 80053e6:	9902      	ldr	r1, [sp, #8]
 80053e8:	2300      	movs	r3, #0
 80053ea:	220a      	movs	r2, #10
 80053ec:	4648      	mov	r0, r9
 80053ee:	f000 f9d5 	bl	800579c <__multadd>
 80053f2:	42af      	cmp	r7, r5
 80053f4:	9002      	str	r0, [sp, #8]
 80053f6:	f04f 0300 	mov.w	r3, #0
 80053fa:	f04f 020a 	mov.w	r2, #10
 80053fe:	4639      	mov	r1, r7
 8005400:	4648      	mov	r0, r9
 8005402:	d107      	bne.n	8005414 <_dtoa_r+0xadc>
 8005404:	f000 f9ca 	bl	800579c <__multadd>
 8005408:	4607      	mov	r7, r0
 800540a:	4605      	mov	r5, r0
 800540c:	9b00      	ldr	r3, [sp, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	e777      	b.n	8005304 <_dtoa_r+0x9cc>
 8005414:	f000 f9c2 	bl	800579c <__multadd>
 8005418:	4629      	mov	r1, r5
 800541a:	4607      	mov	r7, r0
 800541c:	2300      	movs	r3, #0
 800541e:	220a      	movs	r2, #10
 8005420:	4648      	mov	r0, r9
 8005422:	f000 f9bb 	bl	800579c <__multadd>
 8005426:	4605      	mov	r5, r0
 8005428:	e7f0      	b.n	800540c <_dtoa_r+0xad4>
 800542a:	f1bb 0f00 	cmp.w	fp, #0
 800542e:	bfcc      	ite	gt
 8005430:	465e      	movgt	r6, fp
 8005432:	2601      	movle	r6, #1
 8005434:	4456      	add	r6, sl
 8005436:	2700      	movs	r7, #0
 8005438:	9902      	ldr	r1, [sp, #8]
 800543a:	9300      	str	r3, [sp, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4648      	mov	r0, r9
 8005440:	f000 fb50 	bl	8005ae4 <__lshift>
 8005444:	4621      	mov	r1, r4
 8005446:	9002      	str	r0, [sp, #8]
 8005448:	f000 fbb8 	bl	8005bbc <__mcmp>
 800544c:	2800      	cmp	r0, #0
 800544e:	dcb4      	bgt.n	80053ba <_dtoa_r+0xa82>
 8005450:	d102      	bne.n	8005458 <_dtoa_r+0xb20>
 8005452:	9b00      	ldr	r3, [sp, #0]
 8005454:	07db      	lsls	r3, r3, #31
 8005456:	d4b0      	bmi.n	80053ba <_dtoa_r+0xa82>
 8005458:	4633      	mov	r3, r6
 800545a:	461e      	mov	r6, r3
 800545c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005460:	2a30      	cmp	r2, #48	@ 0x30
 8005462:	d0fa      	beq.n	800545a <_dtoa_r+0xb22>
 8005464:	e4b5      	b.n	8004dd2 <_dtoa_r+0x49a>
 8005466:	459a      	cmp	sl, r3
 8005468:	d1a8      	bne.n	80053bc <_dtoa_r+0xa84>
 800546a:	2331      	movs	r3, #49	@ 0x31
 800546c:	f108 0801 	add.w	r8, r8, #1
 8005470:	f88a 3000 	strb.w	r3, [sl]
 8005474:	e4ad      	b.n	8004dd2 <_dtoa_r+0x49a>
 8005476:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005478:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80054d4 <_dtoa_r+0xb9c>
 800547c:	b11b      	cbz	r3, 8005486 <_dtoa_r+0xb4e>
 800547e:	f10a 0308 	add.w	r3, sl, #8
 8005482:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	4650      	mov	r0, sl
 8005488:	b017      	add	sp, #92	@ 0x5c
 800548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548e:	9b07      	ldr	r3, [sp, #28]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f77f ae2e 	ble.w	80050f2 <_dtoa_r+0x7ba>
 8005496:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005498:	9308      	str	r3, [sp, #32]
 800549a:	2001      	movs	r0, #1
 800549c:	e64d      	b.n	800513a <_dtoa_r+0x802>
 800549e:	f1bb 0f00 	cmp.w	fp, #0
 80054a2:	f77f aed9 	ble.w	8005258 <_dtoa_r+0x920>
 80054a6:	4656      	mov	r6, sl
 80054a8:	9802      	ldr	r0, [sp, #8]
 80054aa:	4621      	mov	r1, r4
 80054ac:	f7ff f9bb 	bl	8004826 <quorem>
 80054b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80054b4:	f806 3b01 	strb.w	r3, [r6], #1
 80054b8:	eba6 020a 	sub.w	r2, r6, sl
 80054bc:	4593      	cmp	fp, r2
 80054be:	ddb4      	ble.n	800542a <_dtoa_r+0xaf2>
 80054c0:	9902      	ldr	r1, [sp, #8]
 80054c2:	2300      	movs	r3, #0
 80054c4:	220a      	movs	r2, #10
 80054c6:	4648      	mov	r0, r9
 80054c8:	f000 f968 	bl	800579c <__multadd>
 80054cc:	9002      	str	r0, [sp, #8]
 80054ce:	e7eb      	b.n	80054a8 <_dtoa_r+0xb70>
 80054d0:	080069c0 	.word	0x080069c0
 80054d4:	08006944 	.word	0x08006944

080054d8 <_free_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4605      	mov	r5, r0
 80054dc:	2900      	cmp	r1, #0
 80054de:	d041      	beq.n	8005564 <_free_r+0x8c>
 80054e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054e4:	1f0c      	subs	r4, r1, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bfb8      	it	lt
 80054ea:	18e4      	addlt	r4, r4, r3
 80054ec:	f000 f8e8 	bl	80056c0 <__malloc_lock>
 80054f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005568 <_free_r+0x90>)
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	b933      	cbnz	r3, 8005504 <_free_r+0x2c>
 80054f6:	6063      	str	r3, [r4, #4]
 80054f8:	6014      	str	r4, [r2, #0]
 80054fa:	4628      	mov	r0, r5
 80054fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005500:	f000 b8e4 	b.w	80056cc <__malloc_unlock>
 8005504:	42a3      	cmp	r3, r4
 8005506:	d908      	bls.n	800551a <_free_r+0x42>
 8005508:	6820      	ldr	r0, [r4, #0]
 800550a:	1821      	adds	r1, r4, r0
 800550c:	428b      	cmp	r3, r1
 800550e:	bf01      	itttt	eq
 8005510:	6819      	ldreq	r1, [r3, #0]
 8005512:	685b      	ldreq	r3, [r3, #4]
 8005514:	1809      	addeq	r1, r1, r0
 8005516:	6021      	streq	r1, [r4, #0]
 8005518:	e7ed      	b.n	80054f6 <_free_r+0x1e>
 800551a:	461a      	mov	r2, r3
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	b10b      	cbz	r3, 8005524 <_free_r+0x4c>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d9fa      	bls.n	800551a <_free_r+0x42>
 8005524:	6811      	ldr	r1, [r2, #0]
 8005526:	1850      	adds	r0, r2, r1
 8005528:	42a0      	cmp	r0, r4
 800552a:	d10b      	bne.n	8005544 <_free_r+0x6c>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	4401      	add	r1, r0
 8005530:	1850      	adds	r0, r2, r1
 8005532:	4283      	cmp	r3, r0
 8005534:	6011      	str	r1, [r2, #0]
 8005536:	d1e0      	bne.n	80054fa <_free_r+0x22>
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	6053      	str	r3, [r2, #4]
 800553e:	4408      	add	r0, r1
 8005540:	6010      	str	r0, [r2, #0]
 8005542:	e7da      	b.n	80054fa <_free_r+0x22>
 8005544:	d902      	bls.n	800554c <_free_r+0x74>
 8005546:	230c      	movs	r3, #12
 8005548:	602b      	str	r3, [r5, #0]
 800554a:	e7d6      	b.n	80054fa <_free_r+0x22>
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	1821      	adds	r1, r4, r0
 8005550:	428b      	cmp	r3, r1
 8005552:	bf04      	itt	eq
 8005554:	6819      	ldreq	r1, [r3, #0]
 8005556:	685b      	ldreq	r3, [r3, #4]
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	bf04      	itt	eq
 800555c:	1809      	addeq	r1, r1, r0
 800555e:	6021      	streq	r1, [r4, #0]
 8005560:	6054      	str	r4, [r2, #4]
 8005562:	e7ca      	b.n	80054fa <_free_r+0x22>
 8005564:	bd38      	pop	{r3, r4, r5, pc}
 8005566:	bf00      	nop
 8005568:	200003e0 	.word	0x200003e0

0800556c <malloc>:
 800556c:	4b02      	ldr	r3, [pc, #8]	@ (8005578 <malloc+0xc>)
 800556e:	4601      	mov	r1, r0
 8005570:	6818      	ldr	r0, [r3, #0]
 8005572:	f000 b825 	b.w	80055c0 <_malloc_r>
 8005576:	bf00      	nop
 8005578:	2000001c 	.word	0x2000001c

0800557c <sbrk_aligned>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4e0f      	ldr	r6, [pc, #60]	@ (80055bc <sbrk_aligned+0x40>)
 8005580:	460c      	mov	r4, r1
 8005582:	6831      	ldr	r1, [r6, #0]
 8005584:	4605      	mov	r5, r0
 8005586:	b911      	cbnz	r1, 800558e <sbrk_aligned+0x12>
 8005588:	f000 fe3e 	bl	8006208 <_sbrk_r>
 800558c:	6030      	str	r0, [r6, #0]
 800558e:	4621      	mov	r1, r4
 8005590:	4628      	mov	r0, r5
 8005592:	f000 fe39 	bl	8006208 <_sbrk_r>
 8005596:	1c43      	adds	r3, r0, #1
 8005598:	d103      	bne.n	80055a2 <sbrk_aligned+0x26>
 800559a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800559e:	4620      	mov	r0, r4
 80055a0:	bd70      	pop	{r4, r5, r6, pc}
 80055a2:	1cc4      	adds	r4, r0, #3
 80055a4:	f024 0403 	bic.w	r4, r4, #3
 80055a8:	42a0      	cmp	r0, r4
 80055aa:	d0f8      	beq.n	800559e <sbrk_aligned+0x22>
 80055ac:	1a21      	subs	r1, r4, r0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f000 fe2a 	bl	8006208 <_sbrk_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	d1f2      	bne.n	800559e <sbrk_aligned+0x22>
 80055b8:	e7ef      	b.n	800559a <sbrk_aligned+0x1e>
 80055ba:	bf00      	nop
 80055bc:	200003dc 	.word	0x200003dc

080055c0 <_malloc_r>:
 80055c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c4:	1ccd      	adds	r5, r1, #3
 80055c6:	f025 0503 	bic.w	r5, r5, #3
 80055ca:	3508      	adds	r5, #8
 80055cc:	2d0c      	cmp	r5, #12
 80055ce:	bf38      	it	cc
 80055d0:	250c      	movcc	r5, #12
 80055d2:	2d00      	cmp	r5, #0
 80055d4:	4606      	mov	r6, r0
 80055d6:	db01      	blt.n	80055dc <_malloc_r+0x1c>
 80055d8:	42a9      	cmp	r1, r5
 80055da:	d904      	bls.n	80055e6 <_malloc_r+0x26>
 80055dc:	230c      	movs	r3, #12
 80055de:	6033      	str	r3, [r6, #0]
 80055e0:	2000      	movs	r0, #0
 80055e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056bc <_malloc_r+0xfc>
 80055ea:	f000 f869 	bl	80056c0 <__malloc_lock>
 80055ee:	f8d8 3000 	ldr.w	r3, [r8]
 80055f2:	461c      	mov	r4, r3
 80055f4:	bb44      	cbnz	r4, 8005648 <_malloc_r+0x88>
 80055f6:	4629      	mov	r1, r5
 80055f8:	4630      	mov	r0, r6
 80055fa:	f7ff ffbf 	bl	800557c <sbrk_aligned>
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	4604      	mov	r4, r0
 8005602:	d158      	bne.n	80056b6 <_malloc_r+0xf6>
 8005604:	f8d8 4000 	ldr.w	r4, [r8]
 8005608:	4627      	mov	r7, r4
 800560a:	2f00      	cmp	r7, #0
 800560c:	d143      	bne.n	8005696 <_malloc_r+0xd6>
 800560e:	2c00      	cmp	r4, #0
 8005610:	d04b      	beq.n	80056aa <_malloc_r+0xea>
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	4639      	mov	r1, r7
 8005616:	4630      	mov	r0, r6
 8005618:	eb04 0903 	add.w	r9, r4, r3
 800561c:	f000 fdf4 	bl	8006208 <_sbrk_r>
 8005620:	4581      	cmp	r9, r0
 8005622:	d142      	bne.n	80056aa <_malloc_r+0xea>
 8005624:	6821      	ldr	r1, [r4, #0]
 8005626:	1a6d      	subs	r5, r5, r1
 8005628:	4629      	mov	r1, r5
 800562a:	4630      	mov	r0, r6
 800562c:	f7ff ffa6 	bl	800557c <sbrk_aligned>
 8005630:	3001      	adds	r0, #1
 8005632:	d03a      	beq.n	80056aa <_malloc_r+0xea>
 8005634:	6823      	ldr	r3, [r4, #0]
 8005636:	442b      	add	r3, r5
 8005638:	6023      	str	r3, [r4, #0]
 800563a:	f8d8 3000 	ldr.w	r3, [r8]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	bb62      	cbnz	r2, 800569c <_malloc_r+0xdc>
 8005642:	f8c8 7000 	str.w	r7, [r8]
 8005646:	e00f      	b.n	8005668 <_malloc_r+0xa8>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	1b52      	subs	r2, r2, r5
 800564c:	d420      	bmi.n	8005690 <_malloc_r+0xd0>
 800564e:	2a0b      	cmp	r2, #11
 8005650:	d917      	bls.n	8005682 <_malloc_r+0xc2>
 8005652:	1961      	adds	r1, r4, r5
 8005654:	42a3      	cmp	r3, r4
 8005656:	6025      	str	r5, [r4, #0]
 8005658:	bf18      	it	ne
 800565a:	6059      	strne	r1, [r3, #4]
 800565c:	6863      	ldr	r3, [r4, #4]
 800565e:	bf08      	it	eq
 8005660:	f8c8 1000 	streq.w	r1, [r8]
 8005664:	5162      	str	r2, [r4, r5]
 8005666:	604b      	str	r3, [r1, #4]
 8005668:	4630      	mov	r0, r6
 800566a:	f000 f82f 	bl	80056cc <__malloc_unlock>
 800566e:	f104 000b 	add.w	r0, r4, #11
 8005672:	1d23      	adds	r3, r4, #4
 8005674:	f020 0007 	bic.w	r0, r0, #7
 8005678:	1ac2      	subs	r2, r0, r3
 800567a:	bf1c      	itt	ne
 800567c:	1a1b      	subne	r3, r3, r0
 800567e:	50a3      	strne	r3, [r4, r2]
 8005680:	e7af      	b.n	80055e2 <_malloc_r+0x22>
 8005682:	6862      	ldr	r2, [r4, #4]
 8005684:	42a3      	cmp	r3, r4
 8005686:	bf0c      	ite	eq
 8005688:	f8c8 2000 	streq.w	r2, [r8]
 800568c:	605a      	strne	r2, [r3, #4]
 800568e:	e7eb      	b.n	8005668 <_malloc_r+0xa8>
 8005690:	4623      	mov	r3, r4
 8005692:	6864      	ldr	r4, [r4, #4]
 8005694:	e7ae      	b.n	80055f4 <_malloc_r+0x34>
 8005696:	463c      	mov	r4, r7
 8005698:	687f      	ldr	r7, [r7, #4]
 800569a:	e7b6      	b.n	800560a <_malloc_r+0x4a>
 800569c:	461a      	mov	r2, r3
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	42a3      	cmp	r3, r4
 80056a2:	d1fb      	bne.n	800569c <_malloc_r+0xdc>
 80056a4:	2300      	movs	r3, #0
 80056a6:	6053      	str	r3, [r2, #4]
 80056a8:	e7de      	b.n	8005668 <_malloc_r+0xa8>
 80056aa:	230c      	movs	r3, #12
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 f80c 	bl	80056cc <__malloc_unlock>
 80056b4:	e794      	b.n	80055e0 <_malloc_r+0x20>
 80056b6:	6005      	str	r5, [r0, #0]
 80056b8:	e7d6      	b.n	8005668 <_malloc_r+0xa8>
 80056ba:	bf00      	nop
 80056bc:	200003e0 	.word	0x200003e0

080056c0 <__malloc_lock>:
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <__malloc_lock+0x8>)
 80056c2:	f7ff b8ae 	b.w	8004822 <__retarget_lock_acquire_recursive>
 80056c6:	bf00      	nop
 80056c8:	200003d8 	.word	0x200003d8

080056cc <__malloc_unlock>:
 80056cc:	4801      	ldr	r0, [pc, #4]	@ (80056d4 <__malloc_unlock+0x8>)
 80056ce:	f7ff b8a9 	b.w	8004824 <__retarget_lock_release_recursive>
 80056d2:	bf00      	nop
 80056d4:	200003d8 	.word	0x200003d8

080056d8 <_Balloc>:
 80056d8:	b570      	push	{r4, r5, r6, lr}
 80056da:	69c6      	ldr	r6, [r0, #28]
 80056dc:	4604      	mov	r4, r0
 80056de:	460d      	mov	r5, r1
 80056e0:	b976      	cbnz	r6, 8005700 <_Balloc+0x28>
 80056e2:	2010      	movs	r0, #16
 80056e4:	f7ff ff42 	bl	800556c <malloc>
 80056e8:	4602      	mov	r2, r0
 80056ea:	61e0      	str	r0, [r4, #28]
 80056ec:	b920      	cbnz	r0, 80056f8 <_Balloc+0x20>
 80056ee:	4b18      	ldr	r3, [pc, #96]	@ (8005750 <_Balloc+0x78>)
 80056f0:	4818      	ldr	r0, [pc, #96]	@ (8005754 <_Balloc+0x7c>)
 80056f2:	216b      	movs	r1, #107	@ 0x6b
 80056f4:	f000 fda6 	bl	8006244 <__assert_func>
 80056f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80056fc:	6006      	str	r6, [r0, #0]
 80056fe:	60c6      	str	r6, [r0, #12]
 8005700:	69e6      	ldr	r6, [r4, #28]
 8005702:	68f3      	ldr	r3, [r6, #12]
 8005704:	b183      	cbz	r3, 8005728 <_Balloc+0x50>
 8005706:	69e3      	ldr	r3, [r4, #28]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800570e:	b9b8      	cbnz	r0, 8005740 <_Balloc+0x68>
 8005710:	2101      	movs	r1, #1
 8005712:	fa01 f605 	lsl.w	r6, r1, r5
 8005716:	1d72      	adds	r2, r6, #5
 8005718:	0092      	lsls	r2, r2, #2
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fdb0 	bl	8006280 <_calloc_r>
 8005720:	b160      	cbz	r0, 800573c <_Balloc+0x64>
 8005722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005726:	e00e      	b.n	8005746 <_Balloc+0x6e>
 8005728:	2221      	movs	r2, #33	@ 0x21
 800572a:	2104      	movs	r1, #4
 800572c:	4620      	mov	r0, r4
 800572e:	f000 fda7 	bl	8006280 <_calloc_r>
 8005732:	69e3      	ldr	r3, [r4, #28]
 8005734:	60f0      	str	r0, [r6, #12]
 8005736:	68db      	ldr	r3, [r3, #12]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e4      	bne.n	8005706 <_Balloc+0x2e>
 800573c:	2000      	movs	r0, #0
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	6802      	ldr	r2, [r0, #0]
 8005742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005746:	2300      	movs	r3, #0
 8005748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800574c:	e7f7      	b.n	800573e <_Balloc+0x66>
 800574e:	bf00      	nop
 8005750:	08006951 	.word	0x08006951
 8005754:	080069d1 	.word	0x080069d1

08005758 <_Bfree>:
 8005758:	b570      	push	{r4, r5, r6, lr}
 800575a:	69c6      	ldr	r6, [r0, #28]
 800575c:	4605      	mov	r5, r0
 800575e:	460c      	mov	r4, r1
 8005760:	b976      	cbnz	r6, 8005780 <_Bfree+0x28>
 8005762:	2010      	movs	r0, #16
 8005764:	f7ff ff02 	bl	800556c <malloc>
 8005768:	4602      	mov	r2, r0
 800576a:	61e8      	str	r0, [r5, #28]
 800576c:	b920      	cbnz	r0, 8005778 <_Bfree+0x20>
 800576e:	4b09      	ldr	r3, [pc, #36]	@ (8005794 <_Bfree+0x3c>)
 8005770:	4809      	ldr	r0, [pc, #36]	@ (8005798 <_Bfree+0x40>)
 8005772:	218f      	movs	r1, #143	@ 0x8f
 8005774:	f000 fd66 	bl	8006244 <__assert_func>
 8005778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800577c:	6006      	str	r6, [r0, #0]
 800577e:	60c6      	str	r6, [r0, #12]
 8005780:	b13c      	cbz	r4, 8005792 <_Bfree+0x3a>
 8005782:	69eb      	ldr	r3, [r5, #28]
 8005784:	6862      	ldr	r2, [r4, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800578c:	6021      	str	r1, [r4, #0]
 800578e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005792:	bd70      	pop	{r4, r5, r6, pc}
 8005794:	08006951 	.word	0x08006951
 8005798:	080069d1 	.word	0x080069d1

0800579c <__multadd>:
 800579c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057a0:	690d      	ldr	r5, [r1, #16]
 80057a2:	4607      	mov	r7, r0
 80057a4:	460c      	mov	r4, r1
 80057a6:	461e      	mov	r6, r3
 80057a8:	f101 0c14 	add.w	ip, r1, #20
 80057ac:	2000      	movs	r0, #0
 80057ae:	f8dc 3000 	ldr.w	r3, [ip]
 80057b2:	b299      	uxth	r1, r3
 80057b4:	fb02 6101 	mla	r1, r2, r1, r6
 80057b8:	0c1e      	lsrs	r6, r3, #16
 80057ba:	0c0b      	lsrs	r3, r1, #16
 80057bc:	fb02 3306 	mla	r3, r2, r6, r3
 80057c0:	b289      	uxth	r1, r1
 80057c2:	3001      	adds	r0, #1
 80057c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80057c8:	4285      	cmp	r5, r0
 80057ca:	f84c 1b04 	str.w	r1, [ip], #4
 80057ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80057d2:	dcec      	bgt.n	80057ae <__multadd+0x12>
 80057d4:	b30e      	cbz	r6, 800581a <__multadd+0x7e>
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	42ab      	cmp	r3, r5
 80057da:	dc19      	bgt.n	8005810 <__multadd+0x74>
 80057dc:	6861      	ldr	r1, [r4, #4]
 80057de:	4638      	mov	r0, r7
 80057e0:	3101      	adds	r1, #1
 80057e2:	f7ff ff79 	bl	80056d8 <_Balloc>
 80057e6:	4680      	mov	r8, r0
 80057e8:	b928      	cbnz	r0, 80057f6 <__multadd+0x5a>
 80057ea:	4602      	mov	r2, r0
 80057ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005820 <__multadd+0x84>)
 80057ee:	480d      	ldr	r0, [pc, #52]	@ (8005824 <__multadd+0x88>)
 80057f0:	21ba      	movs	r1, #186	@ 0xba
 80057f2:	f000 fd27 	bl	8006244 <__assert_func>
 80057f6:	6922      	ldr	r2, [r4, #16]
 80057f8:	3202      	adds	r2, #2
 80057fa:	f104 010c 	add.w	r1, r4, #12
 80057fe:	0092      	lsls	r2, r2, #2
 8005800:	300c      	adds	r0, #12
 8005802:	f000 fd11 	bl	8006228 <memcpy>
 8005806:	4621      	mov	r1, r4
 8005808:	4638      	mov	r0, r7
 800580a:	f7ff ffa5 	bl	8005758 <_Bfree>
 800580e:	4644      	mov	r4, r8
 8005810:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005814:	3501      	adds	r5, #1
 8005816:	615e      	str	r6, [r3, #20]
 8005818:	6125      	str	r5, [r4, #16]
 800581a:	4620      	mov	r0, r4
 800581c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005820:	080069c0 	.word	0x080069c0
 8005824:	080069d1 	.word	0x080069d1

08005828 <__hi0bits>:
 8005828:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800582c:	4603      	mov	r3, r0
 800582e:	bf36      	itet	cc
 8005830:	0403      	lslcc	r3, r0, #16
 8005832:	2000      	movcs	r0, #0
 8005834:	2010      	movcc	r0, #16
 8005836:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800583a:	bf3c      	itt	cc
 800583c:	021b      	lslcc	r3, r3, #8
 800583e:	3008      	addcc	r0, #8
 8005840:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005844:	bf3c      	itt	cc
 8005846:	011b      	lslcc	r3, r3, #4
 8005848:	3004      	addcc	r0, #4
 800584a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584e:	bf3c      	itt	cc
 8005850:	009b      	lslcc	r3, r3, #2
 8005852:	3002      	addcc	r0, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	db05      	blt.n	8005864 <__hi0bits+0x3c>
 8005858:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800585c:	f100 0001 	add.w	r0, r0, #1
 8005860:	bf08      	it	eq
 8005862:	2020      	moveq	r0, #32
 8005864:	4770      	bx	lr

08005866 <__lo0bits>:
 8005866:	6803      	ldr	r3, [r0, #0]
 8005868:	4602      	mov	r2, r0
 800586a:	f013 0007 	ands.w	r0, r3, #7
 800586e:	d00b      	beq.n	8005888 <__lo0bits+0x22>
 8005870:	07d9      	lsls	r1, r3, #31
 8005872:	d421      	bmi.n	80058b8 <__lo0bits+0x52>
 8005874:	0798      	lsls	r0, r3, #30
 8005876:	bf49      	itett	mi
 8005878:	085b      	lsrmi	r3, r3, #1
 800587a:	089b      	lsrpl	r3, r3, #2
 800587c:	2001      	movmi	r0, #1
 800587e:	6013      	strmi	r3, [r2, #0]
 8005880:	bf5c      	itt	pl
 8005882:	6013      	strpl	r3, [r2, #0]
 8005884:	2002      	movpl	r0, #2
 8005886:	4770      	bx	lr
 8005888:	b299      	uxth	r1, r3
 800588a:	b909      	cbnz	r1, 8005890 <__lo0bits+0x2a>
 800588c:	0c1b      	lsrs	r3, r3, #16
 800588e:	2010      	movs	r0, #16
 8005890:	b2d9      	uxtb	r1, r3
 8005892:	b909      	cbnz	r1, 8005898 <__lo0bits+0x32>
 8005894:	3008      	adds	r0, #8
 8005896:	0a1b      	lsrs	r3, r3, #8
 8005898:	0719      	lsls	r1, r3, #28
 800589a:	bf04      	itt	eq
 800589c:	091b      	lsreq	r3, r3, #4
 800589e:	3004      	addeq	r0, #4
 80058a0:	0799      	lsls	r1, r3, #30
 80058a2:	bf04      	itt	eq
 80058a4:	089b      	lsreq	r3, r3, #2
 80058a6:	3002      	addeq	r0, #2
 80058a8:	07d9      	lsls	r1, r3, #31
 80058aa:	d403      	bmi.n	80058b4 <__lo0bits+0x4e>
 80058ac:	085b      	lsrs	r3, r3, #1
 80058ae:	f100 0001 	add.w	r0, r0, #1
 80058b2:	d003      	beq.n	80058bc <__lo0bits+0x56>
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	4770      	bx	lr
 80058b8:	2000      	movs	r0, #0
 80058ba:	4770      	bx	lr
 80058bc:	2020      	movs	r0, #32
 80058be:	4770      	bx	lr

080058c0 <__i2b>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	460c      	mov	r4, r1
 80058c4:	2101      	movs	r1, #1
 80058c6:	f7ff ff07 	bl	80056d8 <_Balloc>
 80058ca:	4602      	mov	r2, r0
 80058cc:	b928      	cbnz	r0, 80058da <__i2b+0x1a>
 80058ce:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <__i2b+0x24>)
 80058d0:	4805      	ldr	r0, [pc, #20]	@ (80058e8 <__i2b+0x28>)
 80058d2:	f240 1145 	movw	r1, #325	@ 0x145
 80058d6:	f000 fcb5 	bl	8006244 <__assert_func>
 80058da:	2301      	movs	r3, #1
 80058dc:	6144      	str	r4, [r0, #20]
 80058de:	6103      	str	r3, [r0, #16]
 80058e0:	bd10      	pop	{r4, pc}
 80058e2:	bf00      	nop
 80058e4:	080069c0 	.word	0x080069c0
 80058e8:	080069d1 	.word	0x080069d1

080058ec <__multiply>:
 80058ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f0:	4617      	mov	r7, r2
 80058f2:	690a      	ldr	r2, [r1, #16]
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	bfa8      	it	ge
 80058fa:	463b      	movge	r3, r7
 80058fc:	4689      	mov	r9, r1
 80058fe:	bfa4      	itt	ge
 8005900:	460f      	movge	r7, r1
 8005902:	4699      	movge	r9, r3
 8005904:	693d      	ldr	r5, [r7, #16]
 8005906:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	eb05 060a 	add.w	r6, r5, sl
 8005912:	42b3      	cmp	r3, r6
 8005914:	b085      	sub	sp, #20
 8005916:	bfb8      	it	lt
 8005918:	3101      	addlt	r1, #1
 800591a:	f7ff fedd 	bl	80056d8 <_Balloc>
 800591e:	b930      	cbnz	r0, 800592e <__multiply+0x42>
 8005920:	4602      	mov	r2, r0
 8005922:	4b41      	ldr	r3, [pc, #260]	@ (8005a28 <__multiply+0x13c>)
 8005924:	4841      	ldr	r0, [pc, #260]	@ (8005a2c <__multiply+0x140>)
 8005926:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800592a:	f000 fc8b 	bl	8006244 <__assert_func>
 800592e:	f100 0414 	add.w	r4, r0, #20
 8005932:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005936:	4623      	mov	r3, r4
 8005938:	2200      	movs	r2, #0
 800593a:	4573      	cmp	r3, lr
 800593c:	d320      	bcc.n	8005980 <__multiply+0x94>
 800593e:	f107 0814 	add.w	r8, r7, #20
 8005942:	f109 0114 	add.w	r1, r9, #20
 8005946:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800594a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800594e:	9302      	str	r3, [sp, #8]
 8005950:	1beb      	subs	r3, r5, r7
 8005952:	3b15      	subs	r3, #21
 8005954:	f023 0303 	bic.w	r3, r3, #3
 8005958:	3304      	adds	r3, #4
 800595a:	3715      	adds	r7, #21
 800595c:	42bd      	cmp	r5, r7
 800595e:	bf38      	it	cc
 8005960:	2304      	movcc	r3, #4
 8005962:	9301      	str	r3, [sp, #4]
 8005964:	9b02      	ldr	r3, [sp, #8]
 8005966:	9103      	str	r1, [sp, #12]
 8005968:	428b      	cmp	r3, r1
 800596a:	d80c      	bhi.n	8005986 <__multiply+0x9a>
 800596c:	2e00      	cmp	r6, #0
 800596e:	dd03      	ble.n	8005978 <__multiply+0x8c>
 8005970:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005974:	2b00      	cmp	r3, #0
 8005976:	d055      	beq.n	8005a24 <__multiply+0x138>
 8005978:	6106      	str	r6, [r0, #16]
 800597a:	b005      	add	sp, #20
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	f843 2b04 	str.w	r2, [r3], #4
 8005984:	e7d9      	b.n	800593a <__multiply+0x4e>
 8005986:	f8b1 a000 	ldrh.w	sl, [r1]
 800598a:	f1ba 0f00 	cmp.w	sl, #0
 800598e:	d01f      	beq.n	80059d0 <__multiply+0xe4>
 8005990:	46c4      	mov	ip, r8
 8005992:	46a1      	mov	r9, r4
 8005994:	2700      	movs	r7, #0
 8005996:	f85c 2b04 	ldr.w	r2, [ip], #4
 800599a:	f8d9 3000 	ldr.w	r3, [r9]
 800599e:	fa1f fb82 	uxth.w	fp, r2
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80059a8:	443b      	add	r3, r7
 80059aa:	f8d9 7000 	ldr.w	r7, [r9]
 80059ae:	0c12      	lsrs	r2, r2, #16
 80059b0:	0c3f      	lsrs	r7, r7, #16
 80059b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80059b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059c0:	4565      	cmp	r5, ip
 80059c2:	f849 3b04 	str.w	r3, [r9], #4
 80059c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80059ca:	d8e4      	bhi.n	8005996 <__multiply+0xaa>
 80059cc:	9b01      	ldr	r3, [sp, #4]
 80059ce:	50e7      	str	r7, [r4, r3]
 80059d0:	9b03      	ldr	r3, [sp, #12]
 80059d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80059d6:	3104      	adds	r1, #4
 80059d8:	f1b9 0f00 	cmp.w	r9, #0
 80059dc:	d020      	beq.n	8005a20 <__multiply+0x134>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	4647      	mov	r7, r8
 80059e2:	46a4      	mov	ip, r4
 80059e4:	f04f 0a00 	mov.w	sl, #0
 80059e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80059ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80059f0:	fb09 220b 	mla	r2, r9, fp, r2
 80059f4:	4452      	add	r2, sl
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059fc:	f84c 3b04 	str.w	r3, [ip], #4
 8005a00:	f857 3b04 	ldr.w	r3, [r7], #4
 8005a04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a08:	f8bc 3000 	ldrh.w	r3, [ip]
 8005a0c:	fb09 330a 	mla	r3, r9, sl, r3
 8005a10:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005a14:	42bd      	cmp	r5, r7
 8005a16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a1a:	d8e5      	bhi.n	80059e8 <__multiply+0xfc>
 8005a1c:	9a01      	ldr	r2, [sp, #4]
 8005a1e:	50a3      	str	r3, [r4, r2]
 8005a20:	3404      	adds	r4, #4
 8005a22:	e79f      	b.n	8005964 <__multiply+0x78>
 8005a24:	3e01      	subs	r6, #1
 8005a26:	e7a1      	b.n	800596c <__multiply+0x80>
 8005a28:	080069c0 	.word	0x080069c0
 8005a2c:	080069d1 	.word	0x080069d1

08005a30 <__pow5mult>:
 8005a30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a34:	4615      	mov	r5, r2
 8005a36:	f012 0203 	ands.w	r2, r2, #3
 8005a3a:	4607      	mov	r7, r0
 8005a3c:	460e      	mov	r6, r1
 8005a3e:	d007      	beq.n	8005a50 <__pow5mult+0x20>
 8005a40:	4c25      	ldr	r4, [pc, #148]	@ (8005ad8 <__pow5mult+0xa8>)
 8005a42:	3a01      	subs	r2, #1
 8005a44:	2300      	movs	r3, #0
 8005a46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005a4a:	f7ff fea7 	bl	800579c <__multadd>
 8005a4e:	4606      	mov	r6, r0
 8005a50:	10ad      	asrs	r5, r5, #2
 8005a52:	d03d      	beq.n	8005ad0 <__pow5mult+0xa0>
 8005a54:	69fc      	ldr	r4, [r7, #28]
 8005a56:	b97c      	cbnz	r4, 8005a78 <__pow5mult+0x48>
 8005a58:	2010      	movs	r0, #16
 8005a5a:	f7ff fd87 	bl	800556c <malloc>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	61f8      	str	r0, [r7, #28]
 8005a62:	b928      	cbnz	r0, 8005a70 <__pow5mult+0x40>
 8005a64:	4b1d      	ldr	r3, [pc, #116]	@ (8005adc <__pow5mult+0xac>)
 8005a66:	481e      	ldr	r0, [pc, #120]	@ (8005ae0 <__pow5mult+0xb0>)
 8005a68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005a6c:	f000 fbea 	bl	8006244 <__assert_func>
 8005a70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005a74:	6004      	str	r4, [r0, #0]
 8005a76:	60c4      	str	r4, [r0, #12]
 8005a78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005a7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005a80:	b94c      	cbnz	r4, 8005a96 <__pow5mult+0x66>
 8005a82:	f240 2171 	movw	r1, #625	@ 0x271
 8005a86:	4638      	mov	r0, r7
 8005a88:	f7ff ff1a 	bl	80058c0 <__i2b>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005a92:	4604      	mov	r4, r0
 8005a94:	6003      	str	r3, [r0, #0]
 8005a96:	f04f 0900 	mov.w	r9, #0
 8005a9a:	07eb      	lsls	r3, r5, #31
 8005a9c:	d50a      	bpl.n	8005ab4 <__pow5mult+0x84>
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	4638      	mov	r0, r7
 8005aa4:	f7ff ff22 	bl	80058ec <__multiply>
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4680      	mov	r8, r0
 8005aac:	4638      	mov	r0, r7
 8005aae:	f7ff fe53 	bl	8005758 <_Bfree>
 8005ab2:	4646      	mov	r6, r8
 8005ab4:	106d      	asrs	r5, r5, #1
 8005ab6:	d00b      	beq.n	8005ad0 <__pow5mult+0xa0>
 8005ab8:	6820      	ldr	r0, [r4, #0]
 8005aba:	b938      	cbnz	r0, 8005acc <__pow5mult+0x9c>
 8005abc:	4622      	mov	r2, r4
 8005abe:	4621      	mov	r1, r4
 8005ac0:	4638      	mov	r0, r7
 8005ac2:	f7ff ff13 	bl	80058ec <__multiply>
 8005ac6:	6020      	str	r0, [r4, #0]
 8005ac8:	f8c0 9000 	str.w	r9, [r0]
 8005acc:	4604      	mov	r4, r0
 8005ace:	e7e4      	b.n	8005a9a <__pow5mult+0x6a>
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ad6:	bf00      	nop
 8005ad8:	08006a84 	.word	0x08006a84
 8005adc:	08006951 	.word	0x08006951
 8005ae0:	080069d1 	.word	0x080069d1

08005ae4 <__lshift>:
 8005ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae8:	460c      	mov	r4, r1
 8005aea:	6849      	ldr	r1, [r1, #4]
 8005aec:	6923      	ldr	r3, [r4, #16]
 8005aee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005af2:	68a3      	ldr	r3, [r4, #8]
 8005af4:	4607      	mov	r7, r0
 8005af6:	4691      	mov	r9, r2
 8005af8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005afc:	f108 0601 	add.w	r6, r8, #1
 8005b00:	42b3      	cmp	r3, r6
 8005b02:	db0b      	blt.n	8005b1c <__lshift+0x38>
 8005b04:	4638      	mov	r0, r7
 8005b06:	f7ff fde7 	bl	80056d8 <_Balloc>
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	b948      	cbnz	r0, 8005b22 <__lshift+0x3e>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	4b28      	ldr	r3, [pc, #160]	@ (8005bb4 <__lshift+0xd0>)
 8005b12:	4829      	ldr	r0, [pc, #164]	@ (8005bb8 <__lshift+0xd4>)
 8005b14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005b18:	f000 fb94 	bl	8006244 <__assert_func>
 8005b1c:	3101      	adds	r1, #1
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	e7ee      	b.n	8005b00 <__lshift+0x1c>
 8005b22:	2300      	movs	r3, #0
 8005b24:	f100 0114 	add.w	r1, r0, #20
 8005b28:	f100 0210 	add.w	r2, r0, #16
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	4553      	cmp	r3, sl
 8005b30:	db33      	blt.n	8005b9a <__lshift+0xb6>
 8005b32:	6920      	ldr	r0, [r4, #16]
 8005b34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b38:	f104 0314 	add.w	r3, r4, #20
 8005b3c:	f019 091f 	ands.w	r9, r9, #31
 8005b40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005b48:	d02b      	beq.n	8005ba2 <__lshift+0xbe>
 8005b4a:	f1c9 0e20 	rsb	lr, r9, #32
 8005b4e:	468a      	mov	sl, r1
 8005b50:	2200      	movs	r2, #0
 8005b52:	6818      	ldr	r0, [r3, #0]
 8005b54:	fa00 f009 	lsl.w	r0, r0, r9
 8005b58:	4310      	orrs	r0, r2
 8005b5a:	f84a 0b04 	str.w	r0, [sl], #4
 8005b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b62:	459c      	cmp	ip, r3
 8005b64:	fa22 f20e 	lsr.w	r2, r2, lr
 8005b68:	d8f3      	bhi.n	8005b52 <__lshift+0x6e>
 8005b6a:	ebac 0304 	sub.w	r3, ip, r4
 8005b6e:	3b15      	subs	r3, #21
 8005b70:	f023 0303 	bic.w	r3, r3, #3
 8005b74:	3304      	adds	r3, #4
 8005b76:	f104 0015 	add.w	r0, r4, #21
 8005b7a:	4560      	cmp	r0, ip
 8005b7c:	bf88      	it	hi
 8005b7e:	2304      	movhi	r3, #4
 8005b80:	50ca      	str	r2, [r1, r3]
 8005b82:	b10a      	cbz	r2, 8005b88 <__lshift+0xa4>
 8005b84:	f108 0602 	add.w	r6, r8, #2
 8005b88:	3e01      	subs	r6, #1
 8005b8a:	4638      	mov	r0, r7
 8005b8c:	612e      	str	r6, [r5, #16]
 8005b8e:	4621      	mov	r1, r4
 8005b90:	f7ff fde2 	bl	8005758 <_Bfree>
 8005b94:	4628      	mov	r0, r5
 8005b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	e7c5      	b.n	8005b2e <__lshift+0x4a>
 8005ba2:	3904      	subs	r1, #4
 8005ba4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005bac:	459c      	cmp	ip, r3
 8005bae:	d8f9      	bhi.n	8005ba4 <__lshift+0xc0>
 8005bb0:	e7ea      	b.n	8005b88 <__lshift+0xa4>
 8005bb2:	bf00      	nop
 8005bb4:	080069c0 	.word	0x080069c0
 8005bb8:	080069d1 	.word	0x080069d1

08005bbc <__mcmp>:
 8005bbc:	690a      	ldr	r2, [r1, #16]
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	6900      	ldr	r0, [r0, #16]
 8005bc2:	1a80      	subs	r0, r0, r2
 8005bc4:	b530      	push	{r4, r5, lr}
 8005bc6:	d10e      	bne.n	8005be6 <__mcmp+0x2a>
 8005bc8:	3314      	adds	r3, #20
 8005bca:	3114      	adds	r1, #20
 8005bcc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005bd0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005bd4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005bd8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005bdc:	4295      	cmp	r5, r2
 8005bde:	d003      	beq.n	8005be8 <__mcmp+0x2c>
 8005be0:	d205      	bcs.n	8005bee <__mcmp+0x32>
 8005be2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005be6:	bd30      	pop	{r4, r5, pc}
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	d3f3      	bcc.n	8005bd4 <__mcmp+0x18>
 8005bec:	e7fb      	b.n	8005be6 <__mcmp+0x2a>
 8005bee:	2001      	movs	r0, #1
 8005bf0:	e7f9      	b.n	8005be6 <__mcmp+0x2a>
	...

08005bf4 <__mdiff>:
 8005bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf8:	4689      	mov	r9, r1
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4648      	mov	r0, r9
 8005c00:	4614      	mov	r4, r2
 8005c02:	f7ff ffdb 	bl	8005bbc <__mcmp>
 8005c06:	1e05      	subs	r5, r0, #0
 8005c08:	d112      	bne.n	8005c30 <__mdiff+0x3c>
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7ff fd63 	bl	80056d8 <_Balloc>
 8005c12:	4602      	mov	r2, r0
 8005c14:	b928      	cbnz	r0, 8005c22 <__mdiff+0x2e>
 8005c16:	4b3f      	ldr	r3, [pc, #252]	@ (8005d14 <__mdiff+0x120>)
 8005c18:	f240 2137 	movw	r1, #567	@ 0x237
 8005c1c:	483e      	ldr	r0, [pc, #248]	@ (8005d18 <__mdiff+0x124>)
 8005c1e:	f000 fb11 	bl	8006244 <__assert_func>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005c28:	4610      	mov	r0, r2
 8005c2a:	b003      	add	sp, #12
 8005c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c30:	bfbc      	itt	lt
 8005c32:	464b      	movlt	r3, r9
 8005c34:	46a1      	movlt	r9, r4
 8005c36:	4630      	mov	r0, r6
 8005c38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005c3c:	bfba      	itte	lt
 8005c3e:	461c      	movlt	r4, r3
 8005c40:	2501      	movlt	r5, #1
 8005c42:	2500      	movge	r5, #0
 8005c44:	f7ff fd48 	bl	80056d8 <_Balloc>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	b918      	cbnz	r0, 8005c54 <__mdiff+0x60>
 8005c4c:	4b31      	ldr	r3, [pc, #196]	@ (8005d14 <__mdiff+0x120>)
 8005c4e:	f240 2145 	movw	r1, #581	@ 0x245
 8005c52:	e7e3      	b.n	8005c1c <__mdiff+0x28>
 8005c54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005c58:	6926      	ldr	r6, [r4, #16]
 8005c5a:	60c5      	str	r5, [r0, #12]
 8005c5c:	f109 0310 	add.w	r3, r9, #16
 8005c60:	f109 0514 	add.w	r5, r9, #20
 8005c64:	f104 0e14 	add.w	lr, r4, #20
 8005c68:	f100 0b14 	add.w	fp, r0, #20
 8005c6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005c70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	46d9      	mov	r9, fp
 8005c78:	f04f 0c00 	mov.w	ip, #0
 8005c7c:	9b01      	ldr	r3, [sp, #4]
 8005c7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005c82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	fa1f f38a 	uxth.w	r3, sl
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	b283      	uxth	r3, r0
 8005c90:	1acb      	subs	r3, r1, r3
 8005c92:	0c00      	lsrs	r0, r0, #16
 8005c94:	4463      	add	r3, ip
 8005c96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005c9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ca4:	4576      	cmp	r6, lr
 8005ca6:	f849 3b04 	str.w	r3, [r9], #4
 8005caa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005cae:	d8e5      	bhi.n	8005c7c <__mdiff+0x88>
 8005cb0:	1b33      	subs	r3, r6, r4
 8005cb2:	3b15      	subs	r3, #21
 8005cb4:	f023 0303 	bic.w	r3, r3, #3
 8005cb8:	3415      	adds	r4, #21
 8005cba:	3304      	adds	r3, #4
 8005cbc:	42a6      	cmp	r6, r4
 8005cbe:	bf38      	it	cc
 8005cc0:	2304      	movcc	r3, #4
 8005cc2:	441d      	add	r5, r3
 8005cc4:	445b      	add	r3, fp
 8005cc6:	461e      	mov	r6, r3
 8005cc8:	462c      	mov	r4, r5
 8005cca:	4544      	cmp	r4, r8
 8005ccc:	d30e      	bcc.n	8005cec <__mdiff+0xf8>
 8005cce:	f108 0103 	add.w	r1, r8, #3
 8005cd2:	1b49      	subs	r1, r1, r5
 8005cd4:	f021 0103 	bic.w	r1, r1, #3
 8005cd8:	3d03      	subs	r5, #3
 8005cda:	45a8      	cmp	r8, r5
 8005cdc:	bf38      	it	cc
 8005cde:	2100      	movcc	r1, #0
 8005ce0:	440b      	add	r3, r1
 8005ce2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ce6:	b191      	cbz	r1, 8005d0e <__mdiff+0x11a>
 8005ce8:	6117      	str	r7, [r2, #16]
 8005cea:	e79d      	b.n	8005c28 <__mdiff+0x34>
 8005cec:	f854 1b04 	ldr.w	r1, [r4], #4
 8005cf0:	46e6      	mov	lr, ip
 8005cf2:	0c08      	lsrs	r0, r1, #16
 8005cf4:	fa1c fc81 	uxtah	ip, ip, r1
 8005cf8:	4471      	add	r1, lr
 8005cfa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005cfe:	b289      	uxth	r1, r1
 8005d00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005d04:	f846 1b04 	str.w	r1, [r6], #4
 8005d08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005d0c:	e7dd      	b.n	8005cca <__mdiff+0xd6>
 8005d0e:	3f01      	subs	r7, #1
 8005d10:	e7e7      	b.n	8005ce2 <__mdiff+0xee>
 8005d12:	bf00      	nop
 8005d14:	080069c0 	.word	0x080069c0
 8005d18:	080069d1 	.word	0x080069d1

08005d1c <__d2b>:
 8005d1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d20:	460f      	mov	r7, r1
 8005d22:	2101      	movs	r1, #1
 8005d24:	ec59 8b10 	vmov	r8, r9, d0
 8005d28:	4616      	mov	r6, r2
 8005d2a:	f7ff fcd5 	bl	80056d8 <_Balloc>
 8005d2e:	4604      	mov	r4, r0
 8005d30:	b930      	cbnz	r0, 8005d40 <__d2b+0x24>
 8005d32:	4602      	mov	r2, r0
 8005d34:	4b23      	ldr	r3, [pc, #140]	@ (8005dc4 <__d2b+0xa8>)
 8005d36:	4824      	ldr	r0, [pc, #144]	@ (8005dc8 <__d2b+0xac>)
 8005d38:	f240 310f 	movw	r1, #783	@ 0x30f
 8005d3c:	f000 fa82 	bl	8006244 <__assert_func>
 8005d40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005d44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d48:	b10d      	cbz	r5, 8005d4e <__d2b+0x32>
 8005d4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d4e:	9301      	str	r3, [sp, #4]
 8005d50:	f1b8 0300 	subs.w	r3, r8, #0
 8005d54:	d023      	beq.n	8005d9e <__d2b+0x82>
 8005d56:	4668      	mov	r0, sp
 8005d58:	9300      	str	r3, [sp, #0]
 8005d5a:	f7ff fd84 	bl	8005866 <__lo0bits>
 8005d5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005d62:	b1d0      	cbz	r0, 8005d9a <__d2b+0x7e>
 8005d64:	f1c0 0320 	rsb	r3, r0, #32
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	40c2      	lsrs	r2, r0
 8005d70:	6163      	str	r3, [r4, #20]
 8005d72:	9201      	str	r2, [sp, #4]
 8005d74:	9b01      	ldr	r3, [sp, #4]
 8005d76:	61a3      	str	r3, [r4, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	bf0c      	ite	eq
 8005d7c:	2201      	moveq	r2, #1
 8005d7e:	2202      	movne	r2, #2
 8005d80:	6122      	str	r2, [r4, #16]
 8005d82:	b1a5      	cbz	r5, 8005dae <__d2b+0x92>
 8005d84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005d88:	4405      	add	r5, r0
 8005d8a:	603d      	str	r5, [r7, #0]
 8005d8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005d90:	6030      	str	r0, [r6, #0]
 8005d92:	4620      	mov	r0, r4
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d9a:	6161      	str	r1, [r4, #20]
 8005d9c:	e7ea      	b.n	8005d74 <__d2b+0x58>
 8005d9e:	a801      	add	r0, sp, #4
 8005da0:	f7ff fd61 	bl	8005866 <__lo0bits>
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	6163      	str	r3, [r4, #20]
 8005da8:	3020      	adds	r0, #32
 8005daa:	2201      	movs	r2, #1
 8005dac:	e7e8      	b.n	8005d80 <__d2b+0x64>
 8005dae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005db2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005db6:	6038      	str	r0, [r7, #0]
 8005db8:	6918      	ldr	r0, [r3, #16]
 8005dba:	f7ff fd35 	bl	8005828 <__hi0bits>
 8005dbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005dc2:	e7e5      	b.n	8005d90 <__d2b+0x74>
 8005dc4:	080069c0 	.word	0x080069c0
 8005dc8:	080069d1 	.word	0x080069d1

08005dcc <__ssputs_r>:
 8005dcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd0:	688e      	ldr	r6, [r1, #8]
 8005dd2:	461f      	mov	r7, r3
 8005dd4:	42be      	cmp	r6, r7
 8005dd6:	680b      	ldr	r3, [r1, #0]
 8005dd8:	4682      	mov	sl, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	4690      	mov	r8, r2
 8005dde:	d82d      	bhi.n	8005e3c <__ssputs_r+0x70>
 8005de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005de4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005de8:	d026      	beq.n	8005e38 <__ssputs_r+0x6c>
 8005dea:	6965      	ldr	r5, [r4, #20]
 8005dec:	6909      	ldr	r1, [r1, #16]
 8005dee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005df2:	eba3 0901 	sub.w	r9, r3, r1
 8005df6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005dfa:	1c7b      	adds	r3, r7, #1
 8005dfc:	444b      	add	r3, r9
 8005dfe:	106d      	asrs	r5, r5, #1
 8005e00:	429d      	cmp	r5, r3
 8005e02:	bf38      	it	cc
 8005e04:	461d      	movcc	r5, r3
 8005e06:	0553      	lsls	r3, r2, #21
 8005e08:	d527      	bpl.n	8005e5a <__ssputs_r+0x8e>
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f7ff fbd8 	bl	80055c0 <_malloc_r>
 8005e10:	4606      	mov	r6, r0
 8005e12:	b360      	cbz	r0, 8005e6e <__ssputs_r+0xa2>
 8005e14:	6921      	ldr	r1, [r4, #16]
 8005e16:	464a      	mov	r2, r9
 8005e18:	f000 fa06 	bl	8006228 <memcpy>
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005e22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e26:	81a3      	strh	r3, [r4, #12]
 8005e28:	6126      	str	r6, [r4, #16]
 8005e2a:	6165      	str	r5, [r4, #20]
 8005e2c:	444e      	add	r6, r9
 8005e2e:	eba5 0509 	sub.w	r5, r5, r9
 8005e32:	6026      	str	r6, [r4, #0]
 8005e34:	60a5      	str	r5, [r4, #8]
 8005e36:	463e      	mov	r6, r7
 8005e38:	42be      	cmp	r6, r7
 8005e3a:	d900      	bls.n	8005e3e <__ssputs_r+0x72>
 8005e3c:	463e      	mov	r6, r7
 8005e3e:	6820      	ldr	r0, [r4, #0]
 8005e40:	4632      	mov	r2, r6
 8005e42:	4641      	mov	r1, r8
 8005e44:	f000 f9c6 	bl	80061d4 <memmove>
 8005e48:	68a3      	ldr	r3, [r4, #8]
 8005e4a:	1b9b      	subs	r3, r3, r6
 8005e4c:	60a3      	str	r3, [r4, #8]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	4433      	add	r3, r6
 8005e52:	6023      	str	r3, [r4, #0]
 8005e54:	2000      	movs	r0, #0
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	f000 fa36 	bl	80062cc <_realloc_r>
 8005e60:	4606      	mov	r6, r0
 8005e62:	2800      	cmp	r0, #0
 8005e64:	d1e0      	bne.n	8005e28 <__ssputs_r+0x5c>
 8005e66:	6921      	ldr	r1, [r4, #16]
 8005e68:	4650      	mov	r0, sl
 8005e6a:	f7ff fb35 	bl	80054d8 <_free_r>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	f8ca 3000 	str.w	r3, [sl]
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e7a:	81a3      	strh	r3, [r4, #12]
 8005e7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e80:	e7e9      	b.n	8005e56 <__ssputs_r+0x8a>
	...

08005e84 <_svfiprintf_r>:
 8005e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	4698      	mov	r8, r3
 8005e8a:	898b      	ldrh	r3, [r1, #12]
 8005e8c:	061b      	lsls	r3, r3, #24
 8005e8e:	b09d      	sub	sp, #116	@ 0x74
 8005e90:	4607      	mov	r7, r0
 8005e92:	460d      	mov	r5, r1
 8005e94:	4614      	mov	r4, r2
 8005e96:	d510      	bpl.n	8005eba <_svfiprintf_r+0x36>
 8005e98:	690b      	ldr	r3, [r1, #16]
 8005e9a:	b973      	cbnz	r3, 8005eba <_svfiprintf_r+0x36>
 8005e9c:	2140      	movs	r1, #64	@ 0x40
 8005e9e:	f7ff fb8f 	bl	80055c0 <_malloc_r>
 8005ea2:	6028      	str	r0, [r5, #0]
 8005ea4:	6128      	str	r0, [r5, #16]
 8005ea6:	b930      	cbnz	r0, 8005eb6 <_svfiprintf_r+0x32>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005eb0:	b01d      	add	sp, #116	@ 0x74
 8005eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eb6:	2340      	movs	r3, #64	@ 0x40
 8005eb8:	616b      	str	r3, [r5, #20]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ebe:	2320      	movs	r3, #32
 8005ec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ec4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec8:	2330      	movs	r3, #48	@ 0x30
 8005eca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006068 <_svfiprintf_r+0x1e4>
 8005ece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ed2:	f04f 0901 	mov.w	r9, #1
 8005ed6:	4623      	mov	r3, r4
 8005ed8:	469a      	mov	sl, r3
 8005eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ede:	b10a      	cbz	r2, 8005ee4 <_svfiprintf_r+0x60>
 8005ee0:	2a25      	cmp	r2, #37	@ 0x25
 8005ee2:	d1f9      	bne.n	8005ed8 <_svfiprintf_r+0x54>
 8005ee4:	ebba 0b04 	subs.w	fp, sl, r4
 8005ee8:	d00b      	beq.n	8005f02 <_svfiprintf_r+0x7e>
 8005eea:	465b      	mov	r3, fp
 8005eec:	4622      	mov	r2, r4
 8005eee:	4629      	mov	r1, r5
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f7ff ff6b 	bl	8005dcc <__ssputs_r>
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	f000 80a7 	beq.w	800604a <_svfiprintf_r+0x1c6>
 8005efc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005efe:	445a      	add	r2, fp
 8005f00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f02:	f89a 3000 	ldrb.w	r3, [sl]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 809f 	beq.w	800604a <_svfiprintf_r+0x1c6>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f16:	f10a 0a01 	add.w	sl, sl, #1
 8005f1a:	9304      	str	r3, [sp, #16]
 8005f1c:	9307      	str	r3, [sp, #28]
 8005f1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f22:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f24:	4654      	mov	r4, sl
 8005f26:	2205      	movs	r2, #5
 8005f28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f2c:	484e      	ldr	r0, [pc, #312]	@ (8006068 <_svfiprintf_r+0x1e4>)
 8005f2e:	f7fa f96f 	bl	8000210 <memchr>
 8005f32:	9a04      	ldr	r2, [sp, #16]
 8005f34:	b9d8      	cbnz	r0, 8005f6e <_svfiprintf_r+0xea>
 8005f36:	06d0      	lsls	r0, r2, #27
 8005f38:	bf44      	itt	mi
 8005f3a:	2320      	movmi	r3, #32
 8005f3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f40:	0711      	lsls	r1, r2, #28
 8005f42:	bf44      	itt	mi
 8005f44:	232b      	movmi	r3, #43	@ 0x2b
 8005f46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f50:	d015      	beq.n	8005f7e <_svfiprintf_r+0xfa>
 8005f52:	9a07      	ldr	r2, [sp, #28]
 8005f54:	4654      	mov	r4, sl
 8005f56:	2000      	movs	r0, #0
 8005f58:	f04f 0c0a 	mov.w	ip, #10
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f62:	3b30      	subs	r3, #48	@ 0x30
 8005f64:	2b09      	cmp	r3, #9
 8005f66:	d94b      	bls.n	8006000 <_svfiprintf_r+0x17c>
 8005f68:	b1b0      	cbz	r0, 8005f98 <_svfiprintf_r+0x114>
 8005f6a:	9207      	str	r2, [sp, #28]
 8005f6c:	e014      	b.n	8005f98 <_svfiprintf_r+0x114>
 8005f6e:	eba0 0308 	sub.w	r3, r0, r8
 8005f72:	fa09 f303 	lsl.w	r3, r9, r3
 8005f76:	4313      	orrs	r3, r2
 8005f78:	9304      	str	r3, [sp, #16]
 8005f7a:	46a2      	mov	sl, r4
 8005f7c:	e7d2      	b.n	8005f24 <_svfiprintf_r+0xa0>
 8005f7e:	9b03      	ldr	r3, [sp, #12]
 8005f80:	1d19      	adds	r1, r3, #4
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	9103      	str	r1, [sp, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfbb      	ittet	lt
 8005f8a:	425b      	neglt	r3, r3
 8005f8c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f90:	9307      	strge	r3, [sp, #28]
 8005f92:	9307      	strlt	r3, [sp, #28]
 8005f94:	bfb8      	it	lt
 8005f96:	9204      	strlt	r2, [sp, #16]
 8005f98:	7823      	ldrb	r3, [r4, #0]
 8005f9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f9c:	d10a      	bne.n	8005fb4 <_svfiprintf_r+0x130>
 8005f9e:	7863      	ldrb	r3, [r4, #1]
 8005fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fa2:	d132      	bne.n	800600a <_svfiprintf_r+0x186>
 8005fa4:	9b03      	ldr	r3, [sp, #12]
 8005fa6:	1d1a      	adds	r2, r3, #4
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	9203      	str	r2, [sp, #12]
 8005fac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fb0:	3402      	adds	r4, #2
 8005fb2:	9305      	str	r3, [sp, #20]
 8005fb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006078 <_svfiprintf_r+0x1f4>
 8005fb8:	7821      	ldrb	r1, [r4, #0]
 8005fba:	2203      	movs	r2, #3
 8005fbc:	4650      	mov	r0, sl
 8005fbe:	f7fa f927 	bl	8000210 <memchr>
 8005fc2:	b138      	cbz	r0, 8005fd4 <_svfiprintf_r+0x150>
 8005fc4:	9b04      	ldr	r3, [sp, #16]
 8005fc6:	eba0 000a 	sub.w	r0, r0, sl
 8005fca:	2240      	movs	r2, #64	@ 0x40
 8005fcc:	4082      	lsls	r2, r0
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	3401      	adds	r4, #1
 8005fd2:	9304      	str	r3, [sp, #16]
 8005fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd8:	4824      	ldr	r0, [pc, #144]	@ (800606c <_svfiprintf_r+0x1e8>)
 8005fda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005fde:	2206      	movs	r2, #6
 8005fe0:	f7fa f916 	bl	8000210 <memchr>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d036      	beq.n	8006056 <_svfiprintf_r+0x1d2>
 8005fe8:	4b21      	ldr	r3, [pc, #132]	@ (8006070 <_svfiprintf_r+0x1ec>)
 8005fea:	bb1b      	cbnz	r3, 8006034 <_svfiprintf_r+0x1b0>
 8005fec:	9b03      	ldr	r3, [sp, #12]
 8005fee:	3307      	adds	r3, #7
 8005ff0:	f023 0307 	bic.w	r3, r3, #7
 8005ff4:	3308      	adds	r3, #8
 8005ff6:	9303      	str	r3, [sp, #12]
 8005ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffa:	4433      	add	r3, r6
 8005ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffe:	e76a      	b.n	8005ed6 <_svfiprintf_r+0x52>
 8006000:	fb0c 3202 	mla	r2, ip, r2, r3
 8006004:	460c      	mov	r4, r1
 8006006:	2001      	movs	r0, #1
 8006008:	e7a8      	b.n	8005f5c <_svfiprintf_r+0xd8>
 800600a:	2300      	movs	r3, #0
 800600c:	3401      	adds	r4, #1
 800600e:	9305      	str	r3, [sp, #20]
 8006010:	4619      	mov	r1, r3
 8006012:	f04f 0c0a 	mov.w	ip, #10
 8006016:	4620      	mov	r0, r4
 8006018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800601c:	3a30      	subs	r2, #48	@ 0x30
 800601e:	2a09      	cmp	r2, #9
 8006020:	d903      	bls.n	800602a <_svfiprintf_r+0x1a6>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0c6      	beq.n	8005fb4 <_svfiprintf_r+0x130>
 8006026:	9105      	str	r1, [sp, #20]
 8006028:	e7c4      	b.n	8005fb4 <_svfiprintf_r+0x130>
 800602a:	fb0c 2101 	mla	r1, ip, r1, r2
 800602e:	4604      	mov	r4, r0
 8006030:	2301      	movs	r3, #1
 8006032:	e7f0      	b.n	8006016 <_svfiprintf_r+0x192>
 8006034:	ab03      	add	r3, sp, #12
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	462a      	mov	r2, r5
 800603a:	4b0e      	ldr	r3, [pc, #56]	@ (8006074 <_svfiprintf_r+0x1f0>)
 800603c:	a904      	add	r1, sp, #16
 800603e:	4638      	mov	r0, r7
 8006040:	f7fd fe94 	bl	8003d6c <_printf_float>
 8006044:	1c42      	adds	r2, r0, #1
 8006046:	4606      	mov	r6, r0
 8006048:	d1d6      	bne.n	8005ff8 <_svfiprintf_r+0x174>
 800604a:	89ab      	ldrh	r3, [r5, #12]
 800604c:	065b      	lsls	r3, r3, #25
 800604e:	f53f af2d 	bmi.w	8005eac <_svfiprintf_r+0x28>
 8006052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006054:	e72c      	b.n	8005eb0 <_svfiprintf_r+0x2c>
 8006056:	ab03      	add	r3, sp, #12
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	462a      	mov	r2, r5
 800605c:	4b05      	ldr	r3, [pc, #20]	@ (8006074 <_svfiprintf_r+0x1f0>)
 800605e:	a904      	add	r1, sp, #16
 8006060:	4638      	mov	r0, r7
 8006062:	f7fe f91b 	bl	800429c <_printf_i>
 8006066:	e7ed      	b.n	8006044 <_svfiprintf_r+0x1c0>
 8006068:	08006a2a 	.word	0x08006a2a
 800606c:	08006a34 	.word	0x08006a34
 8006070:	08003d6d 	.word	0x08003d6d
 8006074:	08005dcd 	.word	0x08005dcd
 8006078:	08006a30 	.word	0x08006a30

0800607c <__sflush_r>:
 800607c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006084:	0716      	lsls	r6, r2, #28
 8006086:	4605      	mov	r5, r0
 8006088:	460c      	mov	r4, r1
 800608a:	d454      	bmi.n	8006136 <__sflush_r+0xba>
 800608c:	684b      	ldr	r3, [r1, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	dc02      	bgt.n	8006098 <__sflush_r+0x1c>
 8006092:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006094:	2b00      	cmp	r3, #0
 8006096:	dd48      	ble.n	800612a <__sflush_r+0xae>
 8006098:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800609a:	2e00      	cmp	r6, #0
 800609c:	d045      	beq.n	800612a <__sflush_r+0xae>
 800609e:	2300      	movs	r3, #0
 80060a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060a4:	682f      	ldr	r7, [r5, #0]
 80060a6:	6a21      	ldr	r1, [r4, #32]
 80060a8:	602b      	str	r3, [r5, #0]
 80060aa:	d030      	beq.n	800610e <__sflush_r+0x92>
 80060ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060ae:	89a3      	ldrh	r3, [r4, #12]
 80060b0:	0759      	lsls	r1, r3, #29
 80060b2:	d505      	bpl.n	80060c0 <__sflush_r+0x44>
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060ba:	b10b      	cbz	r3, 80060c0 <__sflush_r+0x44>
 80060bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	2300      	movs	r3, #0
 80060c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060c4:	6a21      	ldr	r1, [r4, #32]
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b0      	blx	r6
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	89a3      	ldrh	r3, [r4, #12]
 80060ce:	d106      	bne.n	80060de <__sflush_r+0x62>
 80060d0:	6829      	ldr	r1, [r5, #0]
 80060d2:	291d      	cmp	r1, #29
 80060d4:	d82b      	bhi.n	800612e <__sflush_r+0xb2>
 80060d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006180 <__sflush_r+0x104>)
 80060d8:	40ca      	lsrs	r2, r1
 80060da:	07d6      	lsls	r6, r2, #31
 80060dc:	d527      	bpl.n	800612e <__sflush_r+0xb2>
 80060de:	2200      	movs	r2, #0
 80060e0:	6062      	str	r2, [r4, #4]
 80060e2:	04d9      	lsls	r1, r3, #19
 80060e4:	6922      	ldr	r2, [r4, #16]
 80060e6:	6022      	str	r2, [r4, #0]
 80060e8:	d504      	bpl.n	80060f4 <__sflush_r+0x78>
 80060ea:	1c42      	adds	r2, r0, #1
 80060ec:	d101      	bne.n	80060f2 <__sflush_r+0x76>
 80060ee:	682b      	ldr	r3, [r5, #0]
 80060f0:	b903      	cbnz	r3, 80060f4 <__sflush_r+0x78>
 80060f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80060f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060f6:	602f      	str	r7, [r5, #0]
 80060f8:	b1b9      	cbz	r1, 800612a <__sflush_r+0xae>
 80060fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060fe:	4299      	cmp	r1, r3
 8006100:	d002      	beq.n	8006108 <__sflush_r+0x8c>
 8006102:	4628      	mov	r0, r5
 8006104:	f7ff f9e8 	bl	80054d8 <_free_r>
 8006108:	2300      	movs	r3, #0
 800610a:	6363      	str	r3, [r4, #52]	@ 0x34
 800610c:	e00d      	b.n	800612a <__sflush_r+0xae>
 800610e:	2301      	movs	r3, #1
 8006110:	4628      	mov	r0, r5
 8006112:	47b0      	blx	r6
 8006114:	4602      	mov	r2, r0
 8006116:	1c50      	adds	r0, r2, #1
 8006118:	d1c9      	bne.n	80060ae <__sflush_r+0x32>
 800611a:	682b      	ldr	r3, [r5, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0c6      	beq.n	80060ae <__sflush_r+0x32>
 8006120:	2b1d      	cmp	r3, #29
 8006122:	d001      	beq.n	8006128 <__sflush_r+0xac>
 8006124:	2b16      	cmp	r3, #22
 8006126:	d11e      	bne.n	8006166 <__sflush_r+0xea>
 8006128:	602f      	str	r7, [r5, #0]
 800612a:	2000      	movs	r0, #0
 800612c:	e022      	b.n	8006174 <__sflush_r+0xf8>
 800612e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006132:	b21b      	sxth	r3, r3
 8006134:	e01b      	b.n	800616e <__sflush_r+0xf2>
 8006136:	690f      	ldr	r7, [r1, #16]
 8006138:	2f00      	cmp	r7, #0
 800613a:	d0f6      	beq.n	800612a <__sflush_r+0xae>
 800613c:	0793      	lsls	r3, r2, #30
 800613e:	680e      	ldr	r6, [r1, #0]
 8006140:	bf08      	it	eq
 8006142:	694b      	ldreq	r3, [r1, #20]
 8006144:	600f      	str	r7, [r1, #0]
 8006146:	bf18      	it	ne
 8006148:	2300      	movne	r3, #0
 800614a:	eba6 0807 	sub.w	r8, r6, r7
 800614e:	608b      	str	r3, [r1, #8]
 8006150:	f1b8 0f00 	cmp.w	r8, #0
 8006154:	dde9      	ble.n	800612a <__sflush_r+0xae>
 8006156:	6a21      	ldr	r1, [r4, #32]
 8006158:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800615a:	4643      	mov	r3, r8
 800615c:	463a      	mov	r2, r7
 800615e:	4628      	mov	r0, r5
 8006160:	47b0      	blx	r6
 8006162:	2800      	cmp	r0, #0
 8006164:	dc08      	bgt.n	8006178 <__sflush_r+0xfc>
 8006166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800616a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800616e:	81a3      	strh	r3, [r4, #12]
 8006170:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006178:	4407      	add	r7, r0
 800617a:	eba8 0800 	sub.w	r8, r8, r0
 800617e:	e7e7      	b.n	8006150 <__sflush_r+0xd4>
 8006180:	20400001 	.word	0x20400001

08006184 <_fflush_r>:
 8006184:	b538      	push	{r3, r4, r5, lr}
 8006186:	690b      	ldr	r3, [r1, #16]
 8006188:	4605      	mov	r5, r0
 800618a:	460c      	mov	r4, r1
 800618c:	b913      	cbnz	r3, 8006194 <_fflush_r+0x10>
 800618e:	2500      	movs	r5, #0
 8006190:	4628      	mov	r0, r5
 8006192:	bd38      	pop	{r3, r4, r5, pc}
 8006194:	b118      	cbz	r0, 800619e <_fflush_r+0x1a>
 8006196:	6a03      	ldr	r3, [r0, #32]
 8006198:	b90b      	cbnz	r3, 800619e <_fflush_r+0x1a>
 800619a:	f7fe fa29 	bl	80045f0 <__sinit>
 800619e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d0f3      	beq.n	800618e <_fflush_r+0xa>
 80061a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061a8:	07d0      	lsls	r0, r2, #31
 80061aa:	d404      	bmi.n	80061b6 <_fflush_r+0x32>
 80061ac:	0599      	lsls	r1, r3, #22
 80061ae:	d402      	bmi.n	80061b6 <_fflush_r+0x32>
 80061b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061b2:	f7fe fb36 	bl	8004822 <__retarget_lock_acquire_recursive>
 80061b6:	4628      	mov	r0, r5
 80061b8:	4621      	mov	r1, r4
 80061ba:	f7ff ff5f 	bl	800607c <__sflush_r>
 80061be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061c0:	07da      	lsls	r2, r3, #31
 80061c2:	4605      	mov	r5, r0
 80061c4:	d4e4      	bmi.n	8006190 <_fflush_r+0xc>
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	059b      	lsls	r3, r3, #22
 80061ca:	d4e1      	bmi.n	8006190 <_fflush_r+0xc>
 80061cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ce:	f7fe fb29 	bl	8004824 <__retarget_lock_release_recursive>
 80061d2:	e7dd      	b.n	8006190 <_fflush_r+0xc>

080061d4 <memmove>:
 80061d4:	4288      	cmp	r0, r1
 80061d6:	b510      	push	{r4, lr}
 80061d8:	eb01 0402 	add.w	r4, r1, r2
 80061dc:	d902      	bls.n	80061e4 <memmove+0x10>
 80061de:	4284      	cmp	r4, r0
 80061e0:	4623      	mov	r3, r4
 80061e2:	d807      	bhi.n	80061f4 <memmove+0x20>
 80061e4:	1e43      	subs	r3, r0, #1
 80061e6:	42a1      	cmp	r1, r4
 80061e8:	d008      	beq.n	80061fc <memmove+0x28>
 80061ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061f2:	e7f8      	b.n	80061e6 <memmove+0x12>
 80061f4:	4402      	add	r2, r0
 80061f6:	4601      	mov	r1, r0
 80061f8:	428a      	cmp	r2, r1
 80061fa:	d100      	bne.n	80061fe <memmove+0x2a>
 80061fc:	bd10      	pop	{r4, pc}
 80061fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006206:	e7f7      	b.n	80061f8 <memmove+0x24>

08006208 <_sbrk_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d06      	ldr	r5, [pc, #24]	@ (8006224 <_sbrk_r+0x1c>)
 800620c:	2300      	movs	r3, #0
 800620e:	4604      	mov	r4, r0
 8006210:	4608      	mov	r0, r1
 8006212:	602b      	str	r3, [r5, #0]
 8006214:	f7fb f9c0 	bl	8001598 <_sbrk>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d102      	bne.n	8006222 <_sbrk_r+0x1a>
 800621c:	682b      	ldr	r3, [r5, #0]
 800621e:	b103      	cbz	r3, 8006222 <_sbrk_r+0x1a>
 8006220:	6023      	str	r3, [r4, #0]
 8006222:	bd38      	pop	{r3, r4, r5, pc}
 8006224:	200003d4 	.word	0x200003d4

08006228 <memcpy>:
 8006228:	440a      	add	r2, r1
 800622a:	4291      	cmp	r1, r2
 800622c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006230:	d100      	bne.n	8006234 <memcpy+0xc>
 8006232:	4770      	bx	lr
 8006234:	b510      	push	{r4, lr}
 8006236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800623a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800623e:	4291      	cmp	r1, r2
 8006240:	d1f9      	bne.n	8006236 <memcpy+0xe>
 8006242:	bd10      	pop	{r4, pc}

08006244 <__assert_func>:
 8006244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006246:	4614      	mov	r4, r2
 8006248:	461a      	mov	r2, r3
 800624a:	4b09      	ldr	r3, [pc, #36]	@ (8006270 <__assert_func+0x2c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4605      	mov	r5, r0
 8006250:	68d8      	ldr	r0, [r3, #12]
 8006252:	b14c      	cbz	r4, 8006268 <__assert_func+0x24>
 8006254:	4b07      	ldr	r3, [pc, #28]	@ (8006274 <__assert_func+0x30>)
 8006256:	9100      	str	r1, [sp, #0]
 8006258:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800625c:	4906      	ldr	r1, [pc, #24]	@ (8006278 <__assert_func+0x34>)
 800625e:	462b      	mov	r3, r5
 8006260:	f000 f870 	bl	8006344 <fiprintf>
 8006264:	f000 f880 	bl	8006368 <abort>
 8006268:	4b04      	ldr	r3, [pc, #16]	@ (800627c <__assert_func+0x38>)
 800626a:	461c      	mov	r4, r3
 800626c:	e7f3      	b.n	8006256 <__assert_func+0x12>
 800626e:	bf00      	nop
 8006270:	2000001c 	.word	0x2000001c
 8006274:	08006a45 	.word	0x08006a45
 8006278:	08006a52 	.word	0x08006a52
 800627c:	08006a80 	.word	0x08006a80

08006280 <_calloc_r>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	fba1 5402 	umull	r5, r4, r1, r2
 8006286:	b934      	cbnz	r4, 8006296 <_calloc_r+0x16>
 8006288:	4629      	mov	r1, r5
 800628a:	f7ff f999 	bl	80055c0 <_malloc_r>
 800628e:	4606      	mov	r6, r0
 8006290:	b928      	cbnz	r0, 800629e <_calloc_r+0x1e>
 8006292:	4630      	mov	r0, r6
 8006294:	bd70      	pop	{r4, r5, r6, pc}
 8006296:	220c      	movs	r2, #12
 8006298:	6002      	str	r2, [r0, #0]
 800629a:	2600      	movs	r6, #0
 800629c:	e7f9      	b.n	8006292 <_calloc_r+0x12>
 800629e:	462a      	mov	r2, r5
 80062a0:	4621      	mov	r1, r4
 80062a2:	f7fe fa40 	bl	8004726 <memset>
 80062a6:	e7f4      	b.n	8006292 <_calloc_r+0x12>

080062a8 <__ascii_mbtowc>:
 80062a8:	b082      	sub	sp, #8
 80062aa:	b901      	cbnz	r1, 80062ae <__ascii_mbtowc+0x6>
 80062ac:	a901      	add	r1, sp, #4
 80062ae:	b142      	cbz	r2, 80062c2 <__ascii_mbtowc+0x1a>
 80062b0:	b14b      	cbz	r3, 80062c6 <__ascii_mbtowc+0x1e>
 80062b2:	7813      	ldrb	r3, [r2, #0]
 80062b4:	600b      	str	r3, [r1, #0]
 80062b6:	7812      	ldrb	r2, [r2, #0]
 80062b8:	1e10      	subs	r0, r2, #0
 80062ba:	bf18      	it	ne
 80062bc:	2001      	movne	r0, #1
 80062be:	b002      	add	sp, #8
 80062c0:	4770      	bx	lr
 80062c2:	4610      	mov	r0, r2
 80062c4:	e7fb      	b.n	80062be <__ascii_mbtowc+0x16>
 80062c6:	f06f 0001 	mvn.w	r0, #1
 80062ca:	e7f8      	b.n	80062be <__ascii_mbtowc+0x16>

080062cc <_realloc_r>:
 80062cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	4607      	mov	r7, r0
 80062d2:	4614      	mov	r4, r2
 80062d4:	460d      	mov	r5, r1
 80062d6:	b921      	cbnz	r1, 80062e2 <_realloc_r+0x16>
 80062d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062dc:	4611      	mov	r1, r2
 80062de:	f7ff b96f 	b.w	80055c0 <_malloc_r>
 80062e2:	b92a      	cbnz	r2, 80062f0 <_realloc_r+0x24>
 80062e4:	f7ff f8f8 	bl	80054d8 <_free_r>
 80062e8:	4625      	mov	r5, r4
 80062ea:	4628      	mov	r0, r5
 80062ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f0:	f000 f841 	bl	8006376 <_malloc_usable_size_r>
 80062f4:	4284      	cmp	r4, r0
 80062f6:	4606      	mov	r6, r0
 80062f8:	d802      	bhi.n	8006300 <_realloc_r+0x34>
 80062fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80062fe:	d8f4      	bhi.n	80062ea <_realloc_r+0x1e>
 8006300:	4621      	mov	r1, r4
 8006302:	4638      	mov	r0, r7
 8006304:	f7ff f95c 	bl	80055c0 <_malloc_r>
 8006308:	4680      	mov	r8, r0
 800630a:	b908      	cbnz	r0, 8006310 <_realloc_r+0x44>
 800630c:	4645      	mov	r5, r8
 800630e:	e7ec      	b.n	80062ea <_realloc_r+0x1e>
 8006310:	42b4      	cmp	r4, r6
 8006312:	4622      	mov	r2, r4
 8006314:	4629      	mov	r1, r5
 8006316:	bf28      	it	cs
 8006318:	4632      	movcs	r2, r6
 800631a:	f7ff ff85 	bl	8006228 <memcpy>
 800631e:	4629      	mov	r1, r5
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff f8d9 	bl	80054d8 <_free_r>
 8006326:	e7f1      	b.n	800630c <_realloc_r+0x40>

08006328 <__ascii_wctomb>:
 8006328:	4603      	mov	r3, r0
 800632a:	4608      	mov	r0, r1
 800632c:	b141      	cbz	r1, 8006340 <__ascii_wctomb+0x18>
 800632e:	2aff      	cmp	r2, #255	@ 0xff
 8006330:	d904      	bls.n	800633c <__ascii_wctomb+0x14>
 8006332:	228a      	movs	r2, #138	@ 0x8a
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800633a:	4770      	bx	lr
 800633c:	700a      	strb	r2, [r1, #0]
 800633e:	2001      	movs	r0, #1
 8006340:	4770      	bx	lr
	...

08006344 <fiprintf>:
 8006344:	b40e      	push	{r1, r2, r3}
 8006346:	b503      	push	{r0, r1, lr}
 8006348:	4601      	mov	r1, r0
 800634a:	ab03      	add	r3, sp, #12
 800634c:	4805      	ldr	r0, [pc, #20]	@ (8006364 <fiprintf+0x20>)
 800634e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006352:	6800      	ldr	r0, [r0, #0]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	f000 f83f 	bl	80063d8 <_vfiprintf_r>
 800635a:	b002      	add	sp, #8
 800635c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006360:	b003      	add	sp, #12
 8006362:	4770      	bx	lr
 8006364:	2000001c 	.word	0x2000001c

08006368 <abort>:
 8006368:	b508      	push	{r3, lr}
 800636a:	2006      	movs	r0, #6
 800636c:	f000 fa08 	bl	8006780 <raise>
 8006370:	2001      	movs	r0, #1
 8006372:	f7fb f899 	bl	80014a8 <_exit>

08006376 <_malloc_usable_size_r>:
 8006376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800637a:	1f18      	subs	r0, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	bfbc      	itt	lt
 8006380:	580b      	ldrlt	r3, [r1, r0]
 8006382:	18c0      	addlt	r0, r0, r3
 8006384:	4770      	bx	lr

08006386 <__sfputc_r>:
 8006386:	6893      	ldr	r3, [r2, #8]
 8006388:	3b01      	subs	r3, #1
 800638a:	2b00      	cmp	r3, #0
 800638c:	b410      	push	{r4}
 800638e:	6093      	str	r3, [r2, #8]
 8006390:	da08      	bge.n	80063a4 <__sfputc_r+0x1e>
 8006392:	6994      	ldr	r4, [r2, #24]
 8006394:	42a3      	cmp	r3, r4
 8006396:	db01      	blt.n	800639c <__sfputc_r+0x16>
 8006398:	290a      	cmp	r1, #10
 800639a:	d103      	bne.n	80063a4 <__sfputc_r+0x1e>
 800639c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063a0:	f000 b932 	b.w	8006608 <__swbuf_r>
 80063a4:	6813      	ldr	r3, [r2, #0]
 80063a6:	1c58      	adds	r0, r3, #1
 80063a8:	6010      	str	r0, [r2, #0]
 80063aa:	7019      	strb	r1, [r3, #0]
 80063ac:	4608      	mov	r0, r1
 80063ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <__sfputs_r>:
 80063b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b6:	4606      	mov	r6, r0
 80063b8:	460f      	mov	r7, r1
 80063ba:	4614      	mov	r4, r2
 80063bc:	18d5      	adds	r5, r2, r3
 80063be:	42ac      	cmp	r4, r5
 80063c0:	d101      	bne.n	80063c6 <__sfputs_r+0x12>
 80063c2:	2000      	movs	r0, #0
 80063c4:	e007      	b.n	80063d6 <__sfputs_r+0x22>
 80063c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ca:	463a      	mov	r2, r7
 80063cc:	4630      	mov	r0, r6
 80063ce:	f7ff ffda 	bl	8006386 <__sfputc_r>
 80063d2:	1c43      	adds	r3, r0, #1
 80063d4:	d1f3      	bne.n	80063be <__sfputs_r+0xa>
 80063d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080063d8 <_vfiprintf_r>:
 80063d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063dc:	460d      	mov	r5, r1
 80063de:	b09d      	sub	sp, #116	@ 0x74
 80063e0:	4614      	mov	r4, r2
 80063e2:	4698      	mov	r8, r3
 80063e4:	4606      	mov	r6, r0
 80063e6:	b118      	cbz	r0, 80063f0 <_vfiprintf_r+0x18>
 80063e8:	6a03      	ldr	r3, [r0, #32]
 80063ea:	b90b      	cbnz	r3, 80063f0 <_vfiprintf_r+0x18>
 80063ec:	f7fe f900 	bl	80045f0 <__sinit>
 80063f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80063f2:	07d9      	lsls	r1, r3, #31
 80063f4:	d405      	bmi.n	8006402 <_vfiprintf_r+0x2a>
 80063f6:	89ab      	ldrh	r3, [r5, #12]
 80063f8:	059a      	lsls	r2, r3, #22
 80063fa:	d402      	bmi.n	8006402 <_vfiprintf_r+0x2a>
 80063fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80063fe:	f7fe fa10 	bl	8004822 <__retarget_lock_acquire_recursive>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	071b      	lsls	r3, r3, #28
 8006406:	d501      	bpl.n	800640c <_vfiprintf_r+0x34>
 8006408:	692b      	ldr	r3, [r5, #16]
 800640a:	b99b      	cbnz	r3, 8006434 <_vfiprintf_r+0x5c>
 800640c:	4629      	mov	r1, r5
 800640e:	4630      	mov	r0, r6
 8006410:	f000 f938 	bl	8006684 <__swsetup_r>
 8006414:	b170      	cbz	r0, 8006434 <_vfiprintf_r+0x5c>
 8006416:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006418:	07dc      	lsls	r4, r3, #31
 800641a:	d504      	bpl.n	8006426 <_vfiprintf_r+0x4e>
 800641c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006420:	b01d      	add	sp, #116	@ 0x74
 8006422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006426:	89ab      	ldrh	r3, [r5, #12]
 8006428:	0598      	lsls	r0, r3, #22
 800642a:	d4f7      	bmi.n	800641c <_vfiprintf_r+0x44>
 800642c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800642e:	f7fe f9f9 	bl	8004824 <__retarget_lock_release_recursive>
 8006432:	e7f3      	b.n	800641c <_vfiprintf_r+0x44>
 8006434:	2300      	movs	r3, #0
 8006436:	9309      	str	r3, [sp, #36]	@ 0x24
 8006438:	2320      	movs	r3, #32
 800643a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800643e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006442:	2330      	movs	r3, #48	@ 0x30
 8006444:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80065f4 <_vfiprintf_r+0x21c>
 8006448:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800644c:	f04f 0901 	mov.w	r9, #1
 8006450:	4623      	mov	r3, r4
 8006452:	469a      	mov	sl, r3
 8006454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006458:	b10a      	cbz	r2, 800645e <_vfiprintf_r+0x86>
 800645a:	2a25      	cmp	r2, #37	@ 0x25
 800645c:	d1f9      	bne.n	8006452 <_vfiprintf_r+0x7a>
 800645e:	ebba 0b04 	subs.w	fp, sl, r4
 8006462:	d00b      	beq.n	800647c <_vfiprintf_r+0xa4>
 8006464:	465b      	mov	r3, fp
 8006466:	4622      	mov	r2, r4
 8006468:	4629      	mov	r1, r5
 800646a:	4630      	mov	r0, r6
 800646c:	f7ff ffa2 	bl	80063b4 <__sfputs_r>
 8006470:	3001      	adds	r0, #1
 8006472:	f000 80a7 	beq.w	80065c4 <_vfiprintf_r+0x1ec>
 8006476:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006478:	445a      	add	r2, fp
 800647a:	9209      	str	r2, [sp, #36]	@ 0x24
 800647c:	f89a 3000 	ldrb.w	r3, [sl]
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 809f 	beq.w	80065c4 <_vfiprintf_r+0x1ec>
 8006486:	2300      	movs	r3, #0
 8006488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800648c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006490:	f10a 0a01 	add.w	sl, sl, #1
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	9307      	str	r3, [sp, #28]
 8006498:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800649c:	931a      	str	r3, [sp, #104]	@ 0x68
 800649e:	4654      	mov	r4, sl
 80064a0:	2205      	movs	r2, #5
 80064a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064a6:	4853      	ldr	r0, [pc, #332]	@ (80065f4 <_vfiprintf_r+0x21c>)
 80064a8:	f7f9 feb2 	bl	8000210 <memchr>
 80064ac:	9a04      	ldr	r2, [sp, #16]
 80064ae:	b9d8      	cbnz	r0, 80064e8 <_vfiprintf_r+0x110>
 80064b0:	06d1      	lsls	r1, r2, #27
 80064b2:	bf44      	itt	mi
 80064b4:	2320      	movmi	r3, #32
 80064b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064ba:	0713      	lsls	r3, r2, #28
 80064bc:	bf44      	itt	mi
 80064be:	232b      	movmi	r3, #43	@ 0x2b
 80064c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80064c4:	f89a 3000 	ldrb.w	r3, [sl]
 80064c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80064ca:	d015      	beq.n	80064f8 <_vfiprintf_r+0x120>
 80064cc:	9a07      	ldr	r2, [sp, #28]
 80064ce:	4654      	mov	r4, sl
 80064d0:	2000      	movs	r0, #0
 80064d2:	f04f 0c0a 	mov.w	ip, #10
 80064d6:	4621      	mov	r1, r4
 80064d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064dc:	3b30      	subs	r3, #48	@ 0x30
 80064de:	2b09      	cmp	r3, #9
 80064e0:	d94b      	bls.n	800657a <_vfiprintf_r+0x1a2>
 80064e2:	b1b0      	cbz	r0, 8006512 <_vfiprintf_r+0x13a>
 80064e4:	9207      	str	r2, [sp, #28]
 80064e6:	e014      	b.n	8006512 <_vfiprintf_r+0x13a>
 80064e8:	eba0 0308 	sub.w	r3, r0, r8
 80064ec:	fa09 f303 	lsl.w	r3, r9, r3
 80064f0:	4313      	orrs	r3, r2
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	46a2      	mov	sl, r4
 80064f6:	e7d2      	b.n	800649e <_vfiprintf_r+0xc6>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	1d19      	adds	r1, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	9103      	str	r1, [sp, #12]
 8006500:	2b00      	cmp	r3, #0
 8006502:	bfbb      	ittet	lt
 8006504:	425b      	neglt	r3, r3
 8006506:	f042 0202 	orrlt.w	r2, r2, #2
 800650a:	9307      	strge	r3, [sp, #28]
 800650c:	9307      	strlt	r3, [sp, #28]
 800650e:	bfb8      	it	lt
 8006510:	9204      	strlt	r2, [sp, #16]
 8006512:	7823      	ldrb	r3, [r4, #0]
 8006514:	2b2e      	cmp	r3, #46	@ 0x2e
 8006516:	d10a      	bne.n	800652e <_vfiprintf_r+0x156>
 8006518:	7863      	ldrb	r3, [r4, #1]
 800651a:	2b2a      	cmp	r3, #42	@ 0x2a
 800651c:	d132      	bne.n	8006584 <_vfiprintf_r+0x1ac>
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	1d1a      	adds	r2, r3, #4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	9203      	str	r2, [sp, #12]
 8006526:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800652a:	3402      	adds	r4, #2
 800652c:	9305      	str	r3, [sp, #20]
 800652e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006604 <_vfiprintf_r+0x22c>
 8006532:	7821      	ldrb	r1, [r4, #0]
 8006534:	2203      	movs	r2, #3
 8006536:	4650      	mov	r0, sl
 8006538:	f7f9 fe6a 	bl	8000210 <memchr>
 800653c:	b138      	cbz	r0, 800654e <_vfiprintf_r+0x176>
 800653e:	9b04      	ldr	r3, [sp, #16]
 8006540:	eba0 000a 	sub.w	r0, r0, sl
 8006544:	2240      	movs	r2, #64	@ 0x40
 8006546:	4082      	lsls	r2, r0
 8006548:	4313      	orrs	r3, r2
 800654a:	3401      	adds	r4, #1
 800654c:	9304      	str	r3, [sp, #16]
 800654e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006552:	4829      	ldr	r0, [pc, #164]	@ (80065f8 <_vfiprintf_r+0x220>)
 8006554:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006558:	2206      	movs	r2, #6
 800655a:	f7f9 fe59 	bl	8000210 <memchr>
 800655e:	2800      	cmp	r0, #0
 8006560:	d03f      	beq.n	80065e2 <_vfiprintf_r+0x20a>
 8006562:	4b26      	ldr	r3, [pc, #152]	@ (80065fc <_vfiprintf_r+0x224>)
 8006564:	bb1b      	cbnz	r3, 80065ae <_vfiprintf_r+0x1d6>
 8006566:	9b03      	ldr	r3, [sp, #12]
 8006568:	3307      	adds	r3, #7
 800656a:	f023 0307 	bic.w	r3, r3, #7
 800656e:	3308      	adds	r3, #8
 8006570:	9303      	str	r3, [sp, #12]
 8006572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006574:	443b      	add	r3, r7
 8006576:	9309      	str	r3, [sp, #36]	@ 0x24
 8006578:	e76a      	b.n	8006450 <_vfiprintf_r+0x78>
 800657a:	fb0c 3202 	mla	r2, ip, r2, r3
 800657e:	460c      	mov	r4, r1
 8006580:	2001      	movs	r0, #1
 8006582:	e7a8      	b.n	80064d6 <_vfiprintf_r+0xfe>
 8006584:	2300      	movs	r3, #0
 8006586:	3401      	adds	r4, #1
 8006588:	9305      	str	r3, [sp, #20]
 800658a:	4619      	mov	r1, r3
 800658c:	f04f 0c0a 	mov.w	ip, #10
 8006590:	4620      	mov	r0, r4
 8006592:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006596:	3a30      	subs	r2, #48	@ 0x30
 8006598:	2a09      	cmp	r2, #9
 800659a:	d903      	bls.n	80065a4 <_vfiprintf_r+0x1cc>
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0c6      	beq.n	800652e <_vfiprintf_r+0x156>
 80065a0:	9105      	str	r1, [sp, #20]
 80065a2:	e7c4      	b.n	800652e <_vfiprintf_r+0x156>
 80065a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80065a8:	4604      	mov	r4, r0
 80065aa:	2301      	movs	r3, #1
 80065ac:	e7f0      	b.n	8006590 <_vfiprintf_r+0x1b8>
 80065ae:	ab03      	add	r3, sp, #12
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	462a      	mov	r2, r5
 80065b4:	4b12      	ldr	r3, [pc, #72]	@ (8006600 <_vfiprintf_r+0x228>)
 80065b6:	a904      	add	r1, sp, #16
 80065b8:	4630      	mov	r0, r6
 80065ba:	f7fd fbd7 	bl	8003d6c <_printf_float>
 80065be:	4607      	mov	r7, r0
 80065c0:	1c78      	adds	r0, r7, #1
 80065c2:	d1d6      	bne.n	8006572 <_vfiprintf_r+0x19a>
 80065c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065c6:	07d9      	lsls	r1, r3, #31
 80065c8:	d405      	bmi.n	80065d6 <_vfiprintf_r+0x1fe>
 80065ca:	89ab      	ldrh	r3, [r5, #12]
 80065cc:	059a      	lsls	r2, r3, #22
 80065ce:	d402      	bmi.n	80065d6 <_vfiprintf_r+0x1fe>
 80065d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065d2:	f7fe f927 	bl	8004824 <__retarget_lock_release_recursive>
 80065d6:	89ab      	ldrh	r3, [r5, #12]
 80065d8:	065b      	lsls	r3, r3, #25
 80065da:	f53f af1f 	bmi.w	800641c <_vfiprintf_r+0x44>
 80065de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80065e0:	e71e      	b.n	8006420 <_vfiprintf_r+0x48>
 80065e2:	ab03      	add	r3, sp, #12
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	462a      	mov	r2, r5
 80065e8:	4b05      	ldr	r3, [pc, #20]	@ (8006600 <_vfiprintf_r+0x228>)
 80065ea:	a904      	add	r1, sp, #16
 80065ec:	4630      	mov	r0, r6
 80065ee:	f7fd fe55 	bl	800429c <_printf_i>
 80065f2:	e7e4      	b.n	80065be <_vfiprintf_r+0x1e6>
 80065f4:	08006a2a 	.word	0x08006a2a
 80065f8:	08006a34 	.word	0x08006a34
 80065fc:	08003d6d 	.word	0x08003d6d
 8006600:	080063b5 	.word	0x080063b5
 8006604:	08006a30 	.word	0x08006a30

08006608 <__swbuf_r>:
 8006608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800660a:	460e      	mov	r6, r1
 800660c:	4614      	mov	r4, r2
 800660e:	4605      	mov	r5, r0
 8006610:	b118      	cbz	r0, 800661a <__swbuf_r+0x12>
 8006612:	6a03      	ldr	r3, [r0, #32]
 8006614:	b90b      	cbnz	r3, 800661a <__swbuf_r+0x12>
 8006616:	f7fd ffeb 	bl	80045f0 <__sinit>
 800661a:	69a3      	ldr	r3, [r4, #24]
 800661c:	60a3      	str	r3, [r4, #8]
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	071a      	lsls	r2, r3, #28
 8006622:	d501      	bpl.n	8006628 <__swbuf_r+0x20>
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	b943      	cbnz	r3, 800663a <__swbuf_r+0x32>
 8006628:	4621      	mov	r1, r4
 800662a:	4628      	mov	r0, r5
 800662c:	f000 f82a 	bl	8006684 <__swsetup_r>
 8006630:	b118      	cbz	r0, 800663a <__swbuf_r+0x32>
 8006632:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006636:	4638      	mov	r0, r7
 8006638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	6922      	ldr	r2, [r4, #16]
 800663e:	1a98      	subs	r0, r3, r2
 8006640:	6963      	ldr	r3, [r4, #20]
 8006642:	b2f6      	uxtb	r6, r6
 8006644:	4283      	cmp	r3, r0
 8006646:	4637      	mov	r7, r6
 8006648:	dc05      	bgt.n	8006656 <__swbuf_r+0x4e>
 800664a:	4621      	mov	r1, r4
 800664c:	4628      	mov	r0, r5
 800664e:	f7ff fd99 	bl	8006184 <_fflush_r>
 8006652:	2800      	cmp	r0, #0
 8006654:	d1ed      	bne.n	8006632 <__swbuf_r+0x2a>
 8006656:	68a3      	ldr	r3, [r4, #8]
 8006658:	3b01      	subs	r3, #1
 800665a:	60a3      	str	r3, [r4, #8]
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	1c5a      	adds	r2, r3, #1
 8006660:	6022      	str	r2, [r4, #0]
 8006662:	701e      	strb	r6, [r3, #0]
 8006664:	6962      	ldr	r2, [r4, #20]
 8006666:	1c43      	adds	r3, r0, #1
 8006668:	429a      	cmp	r2, r3
 800666a:	d004      	beq.n	8006676 <__swbuf_r+0x6e>
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	07db      	lsls	r3, r3, #31
 8006670:	d5e1      	bpl.n	8006636 <__swbuf_r+0x2e>
 8006672:	2e0a      	cmp	r6, #10
 8006674:	d1df      	bne.n	8006636 <__swbuf_r+0x2e>
 8006676:	4621      	mov	r1, r4
 8006678:	4628      	mov	r0, r5
 800667a:	f7ff fd83 	bl	8006184 <_fflush_r>
 800667e:	2800      	cmp	r0, #0
 8006680:	d0d9      	beq.n	8006636 <__swbuf_r+0x2e>
 8006682:	e7d6      	b.n	8006632 <__swbuf_r+0x2a>

08006684 <__swsetup_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4b29      	ldr	r3, [pc, #164]	@ (800672c <__swsetup_r+0xa8>)
 8006688:	4605      	mov	r5, r0
 800668a:	6818      	ldr	r0, [r3, #0]
 800668c:	460c      	mov	r4, r1
 800668e:	b118      	cbz	r0, 8006698 <__swsetup_r+0x14>
 8006690:	6a03      	ldr	r3, [r0, #32]
 8006692:	b90b      	cbnz	r3, 8006698 <__swsetup_r+0x14>
 8006694:	f7fd ffac 	bl	80045f0 <__sinit>
 8006698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800669c:	0719      	lsls	r1, r3, #28
 800669e:	d422      	bmi.n	80066e6 <__swsetup_r+0x62>
 80066a0:	06da      	lsls	r2, r3, #27
 80066a2:	d407      	bmi.n	80066b4 <__swsetup_r+0x30>
 80066a4:	2209      	movs	r2, #9
 80066a6:	602a      	str	r2, [r5, #0]
 80066a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066b2:	e033      	b.n	800671c <__swsetup_r+0x98>
 80066b4:	0758      	lsls	r0, r3, #29
 80066b6:	d512      	bpl.n	80066de <__swsetup_r+0x5a>
 80066b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80066ba:	b141      	cbz	r1, 80066ce <__swsetup_r+0x4a>
 80066bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d002      	beq.n	80066ca <__swsetup_r+0x46>
 80066c4:	4628      	mov	r0, r5
 80066c6:	f7fe ff07 	bl	80054d8 <_free_r>
 80066ca:	2300      	movs	r3, #0
 80066cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80066d4:	81a3      	strh	r3, [r4, #12]
 80066d6:	2300      	movs	r3, #0
 80066d8:	6063      	str	r3, [r4, #4]
 80066da:	6923      	ldr	r3, [r4, #16]
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f043 0308 	orr.w	r3, r3, #8
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	6923      	ldr	r3, [r4, #16]
 80066e8:	b94b      	cbnz	r3, 80066fe <__swsetup_r+0x7a>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80066f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066f4:	d003      	beq.n	80066fe <__swsetup_r+0x7a>
 80066f6:	4621      	mov	r1, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	f000 f883 	bl	8006804 <__smakebuf_r>
 80066fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006702:	f013 0201 	ands.w	r2, r3, #1
 8006706:	d00a      	beq.n	800671e <__swsetup_r+0x9a>
 8006708:	2200      	movs	r2, #0
 800670a:	60a2      	str	r2, [r4, #8]
 800670c:	6962      	ldr	r2, [r4, #20]
 800670e:	4252      	negs	r2, r2
 8006710:	61a2      	str	r2, [r4, #24]
 8006712:	6922      	ldr	r2, [r4, #16]
 8006714:	b942      	cbnz	r2, 8006728 <__swsetup_r+0xa4>
 8006716:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800671a:	d1c5      	bne.n	80066a8 <__swsetup_r+0x24>
 800671c:	bd38      	pop	{r3, r4, r5, pc}
 800671e:	0799      	lsls	r1, r3, #30
 8006720:	bf58      	it	pl
 8006722:	6962      	ldrpl	r2, [r4, #20]
 8006724:	60a2      	str	r2, [r4, #8]
 8006726:	e7f4      	b.n	8006712 <__swsetup_r+0x8e>
 8006728:	2000      	movs	r0, #0
 800672a:	e7f7      	b.n	800671c <__swsetup_r+0x98>
 800672c:	2000001c 	.word	0x2000001c

08006730 <_raise_r>:
 8006730:	291f      	cmp	r1, #31
 8006732:	b538      	push	{r3, r4, r5, lr}
 8006734:	4605      	mov	r5, r0
 8006736:	460c      	mov	r4, r1
 8006738:	d904      	bls.n	8006744 <_raise_r+0x14>
 800673a:	2316      	movs	r3, #22
 800673c:	6003      	str	r3, [r0, #0]
 800673e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006742:	bd38      	pop	{r3, r4, r5, pc}
 8006744:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006746:	b112      	cbz	r2, 800674e <_raise_r+0x1e>
 8006748:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800674c:	b94b      	cbnz	r3, 8006762 <_raise_r+0x32>
 800674e:	4628      	mov	r0, r5
 8006750:	f000 f830 	bl	80067b4 <_getpid_r>
 8006754:	4622      	mov	r2, r4
 8006756:	4601      	mov	r1, r0
 8006758:	4628      	mov	r0, r5
 800675a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800675e:	f000 b817 	b.w	8006790 <_kill_r>
 8006762:	2b01      	cmp	r3, #1
 8006764:	d00a      	beq.n	800677c <_raise_r+0x4c>
 8006766:	1c59      	adds	r1, r3, #1
 8006768:	d103      	bne.n	8006772 <_raise_r+0x42>
 800676a:	2316      	movs	r3, #22
 800676c:	6003      	str	r3, [r0, #0]
 800676e:	2001      	movs	r0, #1
 8006770:	e7e7      	b.n	8006742 <_raise_r+0x12>
 8006772:	2100      	movs	r1, #0
 8006774:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006778:	4620      	mov	r0, r4
 800677a:	4798      	blx	r3
 800677c:	2000      	movs	r0, #0
 800677e:	e7e0      	b.n	8006742 <_raise_r+0x12>

08006780 <raise>:
 8006780:	4b02      	ldr	r3, [pc, #8]	@ (800678c <raise+0xc>)
 8006782:	4601      	mov	r1, r0
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	f7ff bfd3 	b.w	8006730 <_raise_r>
 800678a:	bf00      	nop
 800678c:	2000001c 	.word	0x2000001c

08006790 <_kill_r>:
 8006790:	b538      	push	{r3, r4, r5, lr}
 8006792:	4d07      	ldr	r5, [pc, #28]	@ (80067b0 <_kill_r+0x20>)
 8006794:	2300      	movs	r3, #0
 8006796:	4604      	mov	r4, r0
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	f7fa fe73 	bl	8001488 <_kill>
 80067a2:	1c43      	adds	r3, r0, #1
 80067a4:	d102      	bne.n	80067ac <_kill_r+0x1c>
 80067a6:	682b      	ldr	r3, [r5, #0]
 80067a8:	b103      	cbz	r3, 80067ac <_kill_r+0x1c>
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	bd38      	pop	{r3, r4, r5, pc}
 80067ae:	bf00      	nop
 80067b0:	200003d4 	.word	0x200003d4

080067b4 <_getpid_r>:
 80067b4:	f7fa be60 	b.w	8001478 <_getpid>

080067b8 <__swhatbuf_r>:
 80067b8:	b570      	push	{r4, r5, r6, lr}
 80067ba:	460c      	mov	r4, r1
 80067bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c0:	2900      	cmp	r1, #0
 80067c2:	b096      	sub	sp, #88	@ 0x58
 80067c4:	4615      	mov	r5, r2
 80067c6:	461e      	mov	r6, r3
 80067c8:	da0d      	bge.n	80067e6 <__swhatbuf_r+0x2e>
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80067d0:	f04f 0100 	mov.w	r1, #0
 80067d4:	bf14      	ite	ne
 80067d6:	2340      	movne	r3, #64	@ 0x40
 80067d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80067dc:	2000      	movs	r0, #0
 80067de:	6031      	str	r1, [r6, #0]
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	b016      	add	sp, #88	@ 0x58
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	466a      	mov	r2, sp
 80067e8:	f000 f848 	bl	800687c <_fstat_r>
 80067ec:	2800      	cmp	r0, #0
 80067ee:	dbec      	blt.n	80067ca <__swhatbuf_r+0x12>
 80067f0:	9901      	ldr	r1, [sp, #4]
 80067f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80067f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80067fa:	4259      	negs	r1, r3
 80067fc:	4159      	adcs	r1, r3
 80067fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006802:	e7eb      	b.n	80067dc <__swhatbuf_r+0x24>

08006804 <__smakebuf_r>:
 8006804:	898b      	ldrh	r3, [r1, #12]
 8006806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006808:	079d      	lsls	r5, r3, #30
 800680a:	4606      	mov	r6, r0
 800680c:	460c      	mov	r4, r1
 800680e:	d507      	bpl.n	8006820 <__smakebuf_r+0x1c>
 8006810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	6123      	str	r3, [r4, #16]
 8006818:	2301      	movs	r3, #1
 800681a:	6163      	str	r3, [r4, #20]
 800681c:	b003      	add	sp, #12
 800681e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006820:	ab01      	add	r3, sp, #4
 8006822:	466a      	mov	r2, sp
 8006824:	f7ff ffc8 	bl	80067b8 <__swhatbuf_r>
 8006828:	9f00      	ldr	r7, [sp, #0]
 800682a:	4605      	mov	r5, r0
 800682c:	4639      	mov	r1, r7
 800682e:	4630      	mov	r0, r6
 8006830:	f7fe fec6 	bl	80055c0 <_malloc_r>
 8006834:	b948      	cbnz	r0, 800684a <__smakebuf_r+0x46>
 8006836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800683a:	059a      	lsls	r2, r3, #22
 800683c:	d4ee      	bmi.n	800681c <__smakebuf_r+0x18>
 800683e:	f023 0303 	bic.w	r3, r3, #3
 8006842:	f043 0302 	orr.w	r3, r3, #2
 8006846:	81a3      	strh	r3, [r4, #12]
 8006848:	e7e2      	b.n	8006810 <__smakebuf_r+0xc>
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	6020      	str	r0, [r4, #0]
 800684e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006852:	81a3      	strh	r3, [r4, #12]
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800685a:	b15b      	cbz	r3, 8006874 <__smakebuf_r+0x70>
 800685c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006860:	4630      	mov	r0, r6
 8006862:	f000 f81d 	bl	80068a0 <_isatty_r>
 8006866:	b128      	cbz	r0, 8006874 <__smakebuf_r+0x70>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	f043 0301 	orr.w	r3, r3, #1
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	89a3      	ldrh	r3, [r4, #12]
 8006876:	431d      	orrs	r5, r3
 8006878:	81a5      	strh	r5, [r4, #12]
 800687a:	e7cf      	b.n	800681c <__smakebuf_r+0x18>

0800687c <_fstat_r>:
 800687c:	b538      	push	{r3, r4, r5, lr}
 800687e:	4d07      	ldr	r5, [pc, #28]	@ (800689c <_fstat_r+0x20>)
 8006880:	2300      	movs	r3, #0
 8006882:	4604      	mov	r4, r0
 8006884:	4608      	mov	r0, r1
 8006886:	4611      	mov	r1, r2
 8006888:	602b      	str	r3, [r5, #0]
 800688a:	f7fa fe5d 	bl	8001548 <_fstat>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	d102      	bne.n	8006898 <_fstat_r+0x1c>
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	b103      	cbz	r3, 8006898 <_fstat_r+0x1c>
 8006896:	6023      	str	r3, [r4, #0]
 8006898:	bd38      	pop	{r3, r4, r5, pc}
 800689a:	bf00      	nop
 800689c:	200003d4 	.word	0x200003d4

080068a0 <_isatty_r>:
 80068a0:	b538      	push	{r3, r4, r5, lr}
 80068a2:	4d06      	ldr	r5, [pc, #24]	@ (80068bc <_isatty_r+0x1c>)
 80068a4:	2300      	movs	r3, #0
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	602b      	str	r3, [r5, #0]
 80068ac:	f7fa fe5c 	bl	8001568 <_isatty>
 80068b0:	1c43      	adds	r3, r0, #1
 80068b2:	d102      	bne.n	80068ba <_isatty_r+0x1a>
 80068b4:	682b      	ldr	r3, [r5, #0]
 80068b6:	b103      	cbz	r3, 80068ba <_isatty_r+0x1a>
 80068b8:	6023      	str	r3, [r4, #0]
 80068ba:	bd38      	pop	{r3, r4, r5, pc}
 80068bc:	200003d4 	.word	0x200003d4

080068c0 <_init>:
 80068c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068c2:	bf00      	nop
 80068c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c6:	bc08      	pop	{r3}
 80068c8:	469e      	mov	lr, r3
 80068ca:	4770      	bx	lr

080068cc <_fini>:
 80068cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ce:	bf00      	nop
 80068d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068d2:	bc08      	pop	{r3}
 80068d4:	469e      	mov	lr, r3
 80068d6:	4770      	bx	lr
