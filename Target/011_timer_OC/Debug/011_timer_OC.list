
011_timer_OC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cd8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e9c  08002e9c  00003e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002eb4  08002eb4  0000401c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002eb4  08002eb4  00003eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ebc  08002ebc  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08002ec4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000001c  08002ee0  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08002ee0  000040d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb8e  00000000  00000000  0000404c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac1  00000000  00000000  00010bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  000126a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000934  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b77  00000000  00000000  00013b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6d7  00000000  00000000  000356fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfb4c  00000000  00000000  00042dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011291e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003180  00000000  00000000  00112964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00115ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000001c 	.word	0x2000001c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e84 	.word	0x08002e84

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000020 	.word	0x20000020
 8000200:	08002e84 	.word	0x08002e84

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <SysTick_Handler>:

/**
 * @brief  System Tick Handler
 * @note   This function handles system tick timer interrupt
 */
void SysTick_Handler(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000534:	f000 fb20 	bl	8000b78 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000538:	f000 fc6c 	bl	8000e14 <HAL_SYSTICK_IRQHandler>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}

08000540 <TIM2_IRQHandler>:

/**
 * @brief  Timer 2 Interrupt Handler
 * @note   This function handles Timer 2 global interrupt
 */
void TIM2_IRQHandler(void){
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htimer2);
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <TIM2_IRQHandler+0x10>)
 8000546:	f001 fd67 	bl	8002018 <HAL_TIM_IRQHandler>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	20000038 	.word	0x20000038

08000554 <main>:
uint32_t pulse2_value = 12500;
uint32_t pulse3_value = 6250;
uint32_t pulse4_value = 3125;
uint32_t ccr_content;

int main(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	HAL_Init();
 8000558:	f000 fabc 	bl	8000ad4 <HAL_Init>

	SystemClock_Config(SYSCLOCK_FREQ_50MHZ);
 800055c:	2032      	movs	r0, #50	@ 0x32
 800055e:	f000 f93b 	bl	80007d8 <SystemClock_Config>

	GPIO_Init();
 8000562:	f000 f853 	bl	800060c <GPIO_Init>

	UART2_Init();
 8000566:	f000 f82b 	bl	80005c0 <UART2_Init>

	TIMER2_Init();
 800056a:	f000 f873 	bl	8000654 <TIMER2_Init>

	if( HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_1) != HAL_OK){
 800056e:	2100      	movs	r1, #0
 8000570:	4812      	ldr	r0, [pc, #72]	@ (80005bc <main+0x68>)
 8000572:	f001 fc29 	bl	8001dc8 <HAL_TIM_IC_Start_IT>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <main+0x2c>
        Error_handler();
 800057c:	f000 f928 	bl	80007d0 <Error_handler>
    }

    if( HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_2) != HAL_OK){
 8000580:	2104      	movs	r1, #4
 8000582:	480e      	ldr	r0, [pc, #56]	@ (80005bc <main+0x68>)
 8000584:	f001 fc20 	bl	8001dc8 <HAL_TIM_IC_Start_IT>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x3e>
        Error_handler();
 800058e:	f000 f91f 	bl	80007d0 <Error_handler>
    }

    if( HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_3) != HAL_OK){
 8000592:	2108      	movs	r1, #8
 8000594:	4809      	ldr	r0, [pc, #36]	@ (80005bc <main+0x68>)
 8000596:	f001 fc17 	bl	8001dc8 <HAL_TIM_IC_Start_IT>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <main+0x50>
        Error_handler();
 80005a0:	f000 f916 	bl	80007d0 <Error_handler>
    }

    if( HAL_TIM_IC_Start_IT(&htimer2, TIM_CHANNEL_4) != HAL_OK){
 80005a4:	210c      	movs	r1, #12
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <main+0x68>)
 80005a8:	f001 fc0e 	bl	8001dc8 <HAL_TIM_IC_Start_IT>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d002      	beq.n	80005b8 <main+0x64>
        Error_handler();
 80005b2:	f000 f90d 	bl	80007d0 <Error_handler>
    }

	while(1);
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <main+0x64>
 80005bc:	20000038 	.word	0x20000038

080005c0 <UART2_Init>:

	return 0;
}
// UART Initialization Function
void UART2_Init() {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <UART2_Init+0x44>)
 80005c6:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <UART2_Init+0x48>)
 80005c8:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <UART2_Init+0x44>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <UART2_Init+0x44>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <UART2_Init+0x44>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <UART2_Init+0x44>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <UART2_Init+0x44>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	619a      	str	r2, [r3, #24]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <UART2_Init+0x44>)
 80005ec:	220c      	movs	r2, #12
 80005ee:	615a      	str	r2, [r3, #20]

    if (HAL_UART_Init(&huart2) != HAL_OK) {
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <UART2_Init+0x44>)
 80005f2:	f002 f95e 	bl	80028b2 <HAL_UART_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <UART2_Init+0x40>
        Error_handler();
 80005fc:	f000 f8e8 	bl	80007d0 <Error_handler>
    }
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000080 	.word	0x20000080
 8000608:	40004400 	.word	0x40004400

0800060c <GPIO_Init>:

// GPIO Initialization Function
void GPIO_Init(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b0d      	ldr	r3, [pc, #52]	@ (800064c <GPIO_Init+0x40>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061a:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <GPIO_Init+0x40>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	@ 0x30
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <GPIO_Init+0x40>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef ledgpio;
    ledgpio.Pin = GPIO_PIN_5;
 800062e:	2320      	movs	r3, #32
 8000630:	607b      	str	r3, [r7, #4]
    ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000632:	2301      	movs	r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
    ledgpio.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &ledgpio);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	4619      	mov	r1, r3
 800063e:	4804      	ldr	r0, [pc, #16]	@ (8000650 <GPIO_Init+0x44>)
 8000640:	f000 fbf6 	bl	8000e30 <HAL_GPIO_Init>
}
 8000644:	bf00      	nop
 8000646:	3718      	adds	r7, #24
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40020000 	.word	0x40020000

08000654 <TIMER2_Init>:

// Timer 2 Initialization Function (To be implemented)
void TIMER2_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0
    // Timer initialization logic should be added here
    TIM_OC_InitTypeDef tim2OC_init;

	htimer2.Instance = TIM2;
 800065a:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <TIMER2_Init+0xac>)
 800065c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000660:	601a      	str	r2, [r3, #0]
    htimer2.Init.Period = 0xFFFFFFFF;
 8000662:	4b27      	ldr	r3, [pc, #156]	@ (8000700 <TIMER2_Init+0xac>)
 8000664:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000668:	60da      	str	r2, [r3, #12]
    htimer2.Init.Prescaler = 1;
 800066a:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <TIMER2_Init+0xac>)
 800066c:	2201      	movs	r2, #1
 800066e:	605a      	str	r2, [r3, #4]

    if(HAL_TIM_OC_Init(&htimer2) != HAL_OK){
 8000670:	4823      	ldr	r0, [pc, #140]	@ (8000700 <TIMER2_Init+0xac>)
 8000672:	f001 fb59 	bl	8001d28 <HAL_TIM_OC_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <TIMER2_Init+0x2c>
    	Error_handler();
 800067c:	f000 f8a8 	bl	80007d0 <Error_handler>
    }
    tim2OC_init.OCMode = TIM_OCMODE_TOGGLE;
 8000680:	2330      	movs	r3, #48	@ 0x30
 8000682:	607b      	str	r3, [r7, #4]
    tim2OC_init.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
    tim2OC_init.Pulse = pulse1_value;
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <TIMER2_Init+0xb0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	60bb      	str	r3, [r7, #8]

    if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_1) != HAL_OK){
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2200      	movs	r2, #0
 8000692:	4619      	mov	r1, r3
 8000694:	481a      	ldr	r0, [pc, #104]	@ (8000700 <TIMER2_Init+0xac>)
 8000696:	f001 fdaf 	bl	80021f8 <HAL_TIM_OC_ConfigChannel>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <TIMER2_Init+0x50>
    	Error_handler();
 80006a0:	f000 f896 	bl	80007d0 <Error_handler>
    }

    tim2OC_init.Pulse = pulse2_value;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <TIMER2_Init+0xb4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	60bb      	str	r3, [r7, #8]

    if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_2) != HAL_OK){
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2204      	movs	r2, #4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4813      	ldr	r0, [pc, #76]	@ (8000700 <TIMER2_Init+0xac>)
 80006b2:	f001 fda1 	bl	80021f8 <HAL_TIM_OC_ConfigChannel>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <TIMER2_Init+0x6c>
    	Error_handler();
 80006bc:	f000 f888 	bl	80007d0 <Error_handler>
    }

    tim2OC_init.Pulse = pulse3_value;
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <TIMER2_Init+0xb8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60bb      	str	r3, [r7, #8]

    if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_3) != HAL_OK){
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2208      	movs	r2, #8
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <TIMER2_Init+0xac>)
 80006ce:	f001 fd93 	bl	80021f8 <HAL_TIM_OC_ConfigChannel>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <TIMER2_Init+0x88>
    	Error_handler();
 80006d8:	f000 f87a 	bl	80007d0 <Error_handler>
    }

    tim2OC_init.Pulse = pulse4_value;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <TIMER2_Init+0xbc>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	60bb      	str	r3, [r7, #8]

    if(HAL_TIM_OC_ConfigChannel(&htimer2, &tim2OC_init, TIM_CHANNEL_4) != HAL_OK){
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	220c      	movs	r2, #12
 80006e6:	4619      	mov	r1, r3
 80006e8:	4805      	ldr	r0, [pc, #20]	@ (8000700 <TIMER2_Init+0xac>)
 80006ea:	f001 fd85 	bl	80021f8 <HAL_TIM_OC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <TIMER2_Init+0xa4>
    	Error_handler();
 80006f4:	f000 f86c 	bl	80007d0 <Error_handler>
    }
}
 80006f8:	bf00      	nop
 80006fa:	3720      	adds	r7, #32
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000038 	.word	0x20000038
 8000704:	20000000 	.word	0x20000000
 8000708:	20000004 	.word	0x20000004
 800070c:	20000008 	.word	0x20000008
 8000710:	2000000c 	.word	0x2000000c

08000714 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7f1b      	ldrb	r3, [r3, #28]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d10e      	bne.n	8000742 <HAL_TIM_PeriodElapsedCallback+0x2e>
        ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000724:	2100      	movs	r1, #0
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f001 fdc2 	bl	80022b0 <HAL_TIM_ReadCapturedValue>
 800072c:	4603      	mov	r3, r0
 800072e:	4a23      	ldr	r2, [pc, #140]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000730:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, ccr_content+pulse1_value);
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	4b22      	ldr	r3, [pc, #136]	@ (80007c0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	440a      	add	r2, r1
 8000740:	635a      	str	r2, [r3, #52]	@ 0x34
    }

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	7f1b      	ldrb	r3, [r3, #28]
 8000746:	2b02      	cmp	r3, #2
 8000748:	d10e      	bne.n	8000768 <HAL_TIM_PeriodElapsedCallback+0x54>
        ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800074a:	2104      	movs	r1, #4
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f001 fdaf 	bl	80022b0 <HAL_TIM_ReadCapturedValue>
 8000752:	4603      	mov	r3, r0
 8000754:	4a19      	ldr	r2, [pc, #100]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000756:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, ccr_content+pulse2_value);
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	4b19      	ldr	r3, [pc, #100]	@ (80007c4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	440a      	add	r2, r1
 8000766:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7f1b      	ldrb	r3, [r3, #28]
 800076c:	2b04      	cmp	r3, #4
 800076e:	d10e      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x7a>
        ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000770:	2108      	movs	r1, #8
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f001 fd9c 	bl	80022b0 <HAL_TIM_ReadCapturedValue>
 8000778:	4603      	mov	r3, r0
 800077a:	4a10      	ldr	r2, [pc, #64]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800077c:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, ccr_content+pulse3_value);
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000780:	6819      	ldr	r1, [r3, #0]
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	440a      	add	r2, r1
 800078c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }

    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	7f1b      	ldrb	r3, [r3, #28]
 8000792:	2b08      	cmp	r3, #8
 8000794:	d10e      	bne.n	80007b4 <HAL_TIM_PeriodElapsedCallback+0xa0>
        ccr_content = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000796:	210c      	movs	r1, #12
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f001 fd89 	bl	80022b0 <HAL_TIM_ReadCapturedValue>
 800079e:	4603      	mov	r3, r0
 80007a0:	4a06      	ldr	r2, [pc, #24]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80007a2:	6013      	str	r3, [r2, #0]
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_4, ccr_content+pulse4_value);
 80007a4:	4b05      	ldr	r3, [pc, #20]	@ (80007bc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80007aa:	681a      	ldr	r2, [r3, #0]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	440a      	add	r2, r1
 80007b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
}
 80007b4:	bf00      	nop
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	200000c8 	.word	0x200000c8
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000004 	.word	0x20000004
 80007c8:	20000008 	.word	0x20000008
 80007cc:	2000000c 	.word	0x2000000c

080007d0 <Error_handler>:


// Error Handler Function
void Error_handler(void) {
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
    while (1);
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_handler+0x4>

080007d8 <SystemClock_Config>:
}

// System Clock Configuration Function
void SystemClock_Config(uint8_t clock_freq) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b096      	sub	sp, #88	@ 0x58
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
    RCC_OscInitTypeDef osc_init;
    RCC_ClkInitTypeDef clk_init;
    uint32_t FLatency = 0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	657b      	str	r3, [r7, #84]	@ 0x54

    osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_HSI;
 80007e6:	2307      	movs	r3, #7
 80007e8:	623b      	str	r3, [r7, #32]
    osc_init.HSIState = RCC_HSI_ON;
 80007ea:	2301      	movs	r3, #1
 80007ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    osc_init.LSEState = RCC_LSE_ON;
 80007ee:	2301      	movs	r3, #1
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    osc_init.HSEState = RCC_HSE_ON;
 80007f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
    osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f8:	2310      	movs	r3, #16
 80007fa:	633b      	str	r3, [r7, #48]	@ 0x30
    osc_init.PLL.PLLState = RCC_PLL_ON;
 80007fc:	2302      	movs	r3, #2
 80007fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	63fb      	str	r3, [r7, #60]	@ 0x3c

    switch (clock_freq) {
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b78      	cmp	r3, #120	@ 0x78
 8000808:	d020      	beq.n	800084c <SystemClock_Config+0x74>
 800080a:	2b78      	cmp	r3, #120	@ 0x78
 800080c:	dc53      	bgt.n	80008b6 <SystemClock_Config+0xde>
 800080e:	2b32      	cmp	r3, #50	@ 0x32
 8000810:	d002      	beq.n	8000818 <SystemClock_Config+0x40>
 8000812:	2b54      	cmp	r3, #84	@ 0x54
 8000814:	d00d      	beq.n	8000832 <SystemClock_Config+0x5a>
            osc_init.PLL.PLLQ = 2;
            osc_init.PLL.PLLR = 2;
            FLatency = FLASH_ACR_LATENCY_3WS;
            break;
        default:
            return;
 8000816:	e04e      	b.n	80008b6 <SystemClock_Config+0xde>
            osc_init.PLL.PLLM = 16;
 8000818:	2310      	movs	r3, #16
 800081a:	643b      	str	r3, [r7, #64]	@ 0x40
            osc_init.PLL.PLLN = 100;
 800081c:	2364      	movs	r3, #100	@ 0x64
 800081e:	647b      	str	r3, [r7, #68]	@ 0x44
            osc_init.PLL.PLLP = 2;
 8000820:	2302      	movs	r3, #2
 8000822:	64bb      	str	r3, [r7, #72]	@ 0x48
            osc_init.PLL.PLLQ = 2;
 8000824:	2302      	movs	r3, #2
 8000826:	64fb      	str	r3, [r7, #76]	@ 0x4c
            osc_init.PLL.PLLR = 2;
 8000828:	2302      	movs	r3, #2
 800082a:	653b      	str	r3, [r7, #80]	@ 0x50
            FLatency = FLASH_ACR_LATENCY_1WS;
 800082c:	2301      	movs	r3, #1
 800082e:	657b      	str	r3, [r7, #84]	@ 0x54
            break;
 8000830:	e019      	b.n	8000866 <SystemClock_Config+0x8e>
            osc_init.PLL.PLLM = 16;
 8000832:	2310      	movs	r3, #16
 8000834:	643b      	str	r3, [r7, #64]	@ 0x40
            osc_init.PLL.PLLN = 168;
 8000836:	23a8      	movs	r3, #168	@ 0xa8
 8000838:	647b      	str	r3, [r7, #68]	@ 0x44
            osc_init.PLL.PLLP = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	@ 0x48
            osc_init.PLL.PLLQ = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	64fb      	str	r3, [r7, #76]	@ 0x4c
            osc_init.PLL.PLLR = 2;
 8000842:	2302      	movs	r3, #2
 8000844:	653b      	str	r3, [r7, #80]	@ 0x50
            FLatency = FLASH_ACR_LATENCY_2WS;
 8000846:	2302      	movs	r3, #2
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
            break;
 800084a:	e00c      	b.n	8000866 <SystemClock_Config+0x8e>
            osc_init.PLL.PLLM = 16;
 800084c:	2310      	movs	r3, #16
 800084e:	643b      	str	r3, [r7, #64]	@ 0x40
            osc_init.PLL.PLLN = 240;
 8000850:	23f0      	movs	r3, #240	@ 0xf0
 8000852:	647b      	str	r3, [r7, #68]	@ 0x44
            osc_init.PLL.PLLP = 2;
 8000854:	2302      	movs	r3, #2
 8000856:	64bb      	str	r3, [r7, #72]	@ 0x48
            osc_init.PLL.PLLQ = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            osc_init.PLL.PLLR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	653b      	str	r3, [r7, #80]	@ 0x50
            FLatency = FLASH_ACR_LATENCY_3WS;
 8000860:	2303      	movs	r3, #3
 8000862:	657b      	str	r3, [r7, #84]	@ 0x54
            break;
 8000864:	bf00      	nop
    }

    if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	4618      	mov	r0, r3
 800086c:	f000 ffbe 	bl	80017ec <HAL_RCC_OscConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0xa2>
        Error_handler();
 8000876:	f7ff ffab 	bl	80007d0 <Error_handler>
    }
    if (HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK) {
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000880:	4618      	mov	r0, r3
 8000882:	f000 fc69 	bl	8001158 <HAL_RCC_ClockConfig>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <SystemClock_Config+0xb8>
        Error_handler();
 800088c:	f7ff ffa0 	bl	80007d0 <Error_handler>
    }
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000) != HAL_OK) {
 8000890:	f000 fd48 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8000894:	4603      	mov	r3, r0
 8000896:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <SystemClock_Config+0xe8>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	099b      	lsrs	r3, r3, #6
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fa8f 	bl	8000dc2 <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xd6>
        Error_handler();
 80008aa:	f7ff ff91 	bl	80007d0 <Error_handler>
    }
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80008ae:	2004      	movs	r0, #4
 80008b0:	f000 fa94 	bl	8000ddc <HAL_SYSTICK_CLKSourceConfig>
 80008b4:	e000      	b.n	80008b8 <SystemClock_Config+0xe0>
            return;
 80008b6:	bf00      	nop
}
 80008b8:	3758      	adds	r7, #88	@ 0x58
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	10624dd3 	.word	0x10624dd3

080008c4 <HAL_MspInit>:

#include "main.h"

void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	//  NOTE : The HAL_MspInit could be implemented in the user file

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008c8:	2003      	movs	r0, #3
 80008ca:	f000 fa45 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>
	// 2. Enable the required system exception of arm cortex mx processor
	SCB ->SHCSR |= 0x7 << 16; // usg fault, memory fault, and bus fault, system exception.
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <HAL_MspInit+0x40>)
 80008d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000904 <HAL_MspInit+0x40>)
 80008d4:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80008d8:	6253      	str	r3, [r2, #36]	@ 0x24
	// 3. configure the priority fro the system exception.
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2100      	movs	r1, #0
 80008de:	f06f 000b 	mvn.w	r0, #11
 80008e2:	f000 fa44 	bl	8000d6e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	f06f 000a 	mvn.w	r0, #10
 80008ee:	f000 fa3e 	bl	8000d6e <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	f06f 0009 	mvn.w	r0, #9
 80008fa:	f000 fa38 	bl	8000d6e <HAL_NVIC_SetPriority>

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef tim2OC_ch_gpio;
	// 1. Enable the clock for TIM2
	__HAL_RCC_TIM2_CLK_ENABLE();
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	4b2a      	ldr	r3, [pc, #168]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 8000916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000918:	4a29      	ldr	r2, [pc, #164]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	613b      	str	r3, [r7, #16]
 800092a:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	4b23      	ldr	r3, [pc, #140]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000934:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 8000936:	f043 0301 	orr.w	r3, r3, #1
 800093a:	6313      	str	r3, [r2, #48]	@ 0x30
 800093c:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000950:	4a1b      	ldr	r2, [pc, #108]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	6313      	str	r3, [r2, #48]	@ 0x30
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <HAL_TIM_OC_MspInit+0xb8>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095c:	f003 0302 	and.w	r3, r3, #2
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
	/* PA0 --> TIM2_CH1
	PA1 --> TIM2_CH2
	PB10 --> TIM2_CH3
	PB2 --> TIM2_CH4 */

	tim2OC_ch_gpio.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000964:	2303      	movs	r3, #3
 8000966:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpio.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpio.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpio.Alternate = GPIO_AF1_TIM2;
 8000974:	2301      	movs	r3, #1
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOA, &tim2OC_ch_gpio);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	4811      	ldr	r0, [pc, #68]	@ (80009c4 <HAL_TIM_OC_MspInit+0xbc>)
 8000980:	f000 fa56 	bl	8000e30 <HAL_GPIO_Init>

	tim2OC_ch_gpio.Pin = GPIO_PIN_2 | GPIO_PIN_10;
 8000984:	f240 4304 	movw	r3, #1028	@ 0x404
 8000988:	617b      	str	r3, [r7, #20]
	tim2OC_ch_gpio.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	61bb      	str	r3, [r7, #24]
	tim2OC_ch_gpio.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	61fb      	str	r3, [r7, #28]
	tim2OC_ch_gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	623b      	str	r3, [r7, #32]
	tim2OC_ch_gpio.Alternate = GPIO_AF1_TIM2;
 8000996:	2301      	movs	r3, #1
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOB, &tim2OC_ch_gpio);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4809      	ldr	r0, [pc, #36]	@ (80009c8 <HAL_TIM_OC_MspInit+0xc0>)
 80009a2:	f000 fa45 	bl	8000e30 <HAL_GPIO_Init>

	// 3. Configure the NVIC IRQ and its priority
	HAL_NVIC_SetPriority(TIM2_IRQn, 15, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	210f      	movs	r1, #15
 80009aa:	201c      	movs	r0, #28
 80009ac:	f000 f9df 	bl	8000d6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80009b0:	201c      	movs	r0, #28
 80009b2:	f000 f9f8 	bl	8000da6 <HAL_NVIC_EnableIRQ>
	
}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	@ 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020000 	.word	0x40020000
 80009c8:	40020400 	.word	0x40020400

080009cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	// here we are going to do low level inits of uart2
	GPIO_InitTypeDef gpio_uart;
	// 1. enable the clock for USART2
	__HAL_RCC_USART2_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	4a1d      	ldr	r2, [pc, #116]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	4a16      	ldr	r2, [pc, #88]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a00:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
	// 2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;				// UART2_TX
 8000a1c:	2307      	movs	r3, #7
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480c      	ldr	r0, [pc, #48]	@ (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a28:	f000 fa02 	bl	8000e30 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;							// UART2_RX
 8000a2c:	2308      	movs	r3, #8
 8000a2e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4808      	ldr	r0, [pc, #32]	@ (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a38:	f000 f9fa 	bl	8000e30 <HAL_GPIO_Init>
	// 3. Enable the IRQ and set up the priority (NVIC)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a3c:	2026      	movs	r0, #38	@ 0x26
 8000a3e:	f000 f9b2 	bl	8000da6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	2026      	movs	r0, #38	@ 0x26
 8000a48:	f000 f991 	bl	8000d6e <HAL_NVIC_SetPriority>
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	@ 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <SystemInit+0x20>)
 8000a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a66:	4a05      	ldr	r2, [pc, #20]	@ (8000a7c <SystemInit+0x20>)
 8000a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a84:	f7ff ffea 	bl	8000a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a88:	480c      	ldr	r0, [pc, #48]	@ (8000abc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a8a:	490d      	ldr	r1, [pc, #52]	@ (8000ac0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ac4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a90:	e002      	b.n	8000a98 <LoopCopyDataInit>

08000a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a96:	3304      	adds	r3, #4

08000a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a9c:	d3f9      	bcc.n	8000a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000acc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa4:	e001      	b.n	8000aaa <LoopFillZerobss>

08000aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa8:	3204      	adds	r2, #4

08000aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aac:	d3fb      	bcc.n	8000aa6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000aae:	f002 f9c5 	bl	8002e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ab2:	f7ff fd4f 	bl	8000554 <main>
  bx  lr    
 8000ab6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac0:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ac4:	08002ec4 	.word	0x08002ec4
  ldr r2, =_sbss
 8000ac8:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000acc:	200000d0 	.word	0x200000d0

08000ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ad0:	e7fe      	b.n	8000ad0 <ADC_IRQHandler>
	...

08000ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b14 <HAL_Init+0x40>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b14 <HAL_Init+0x40>)
 8000ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <HAL_Init+0x40>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b14 <HAL_Init+0x40>)
 8000aea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	@ (8000b14 <HAL_Init+0x40>)
 8000af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000afc:	2003      	movs	r0, #3
 8000afe:	f000 f92b 	bl	8000d58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 f808 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b08:	f7ff fedc 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40023c00 	.word	0x40023c00

08000b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <HAL_InitTick+0x54>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_InitTick+0x58>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f943 	bl	8000dc2 <HAL_SYSTICK_Config>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e00e      	b.n	8000b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2b0f      	cmp	r3, #15
 8000b4a:	d80a      	bhi.n	8000b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b54:	f000 f90b 	bl	8000d6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b58:	4a06      	ldr	r2, [pc, #24]	@ (8000b74 <HAL_InitTick+0x5c>)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e000      	b.n	8000b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000010 	.word	0x20000010
 8000b70:	20000018 	.word	0x20000018
 8000b74:	20000014 	.word	0x20000014

08000b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4413      	add	r3, r2
 8000b88:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <HAL_IncTick+0x24>)
 8000b8a:	6013      	str	r3, [r2, #0]
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	20000018 	.word	0x20000018
 8000b9c:	200000cc 	.word	0x200000cc

08000ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba4:	4b03      	ldr	r3, [pc, #12]	@ (8000bb4 <HAL_GetTick+0x14>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	200000cc 	.word	0x200000cc

08000bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	@ (8000bfc <__NVIC_SetPriorityGrouping+0x44>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c04:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_GetPriorityGrouping+0x18>)
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	0a1b      	lsrs	r3, r3, #8
 8000c0a:	f003 0307 	and.w	r3, r3, #7
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	db0b      	blt.n	8000c46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	f003 021f 	and.w	r2, r3, #31
 8000c34:	4907      	ldr	r1, [pc, #28]	@ (8000c54 <__NVIC_EnableIRQ+0x38>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	095b      	lsrs	r3, r3, #5
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e100 	.word	0xe000e100

08000c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	db0a      	blt.n	8000c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	490c      	ldr	r1, [pc, #48]	@ (8000ca4 <__NVIC_SetPriority+0x4c>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	0112      	lsls	r2, r2, #4
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c80:	e00a      	b.n	8000c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4908      	ldr	r1, [pc, #32]	@ (8000ca8 <__NVIC_SetPriority+0x50>)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	f003 030f 	and.w	r3, r3, #15
 8000c8e:	3b04      	subs	r3, #4
 8000c90:	0112      	lsls	r2, r2, #4
 8000c92:	b2d2      	uxtb	r2, r2
 8000c94:	440b      	add	r3, r1
 8000c96:	761a      	strb	r2, [r3, #24]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000e100 	.word	0xe000e100
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b089      	sub	sp, #36	@ 0x24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	f1c3 0307 	rsb	r3, r3, #7
 8000cc6:	2b04      	cmp	r3, #4
 8000cc8:	bf28      	it	cs
 8000cca:	2304      	movcs	r3, #4
 8000ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d902      	bls.n	8000cdc <NVIC_EncodePriority+0x30>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3b03      	subs	r3, #3
 8000cda:	e000      	b.n	8000cde <NVIC_EncodePriority+0x32>
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43da      	mvns	r2, r3
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	401a      	ands	r2, r3
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	43d9      	mvns	r1, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	4313      	orrs	r3, r2
         );
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	3724      	adds	r7, #36	@ 0x24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
	...

08000d14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d24:	d301      	bcc.n	8000d2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2301      	movs	r3, #1
 8000d28:	e00f      	b.n	8000d4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <SysTick_Config+0x40>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d32:	210f      	movs	r1, #15
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d38:	f7ff ff8e 	bl	8000c58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d3c:	4b05      	ldr	r3, [pc, #20]	@ (8000d54 <SysTick_Config+0x40>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d42:	4b04      	ldr	r3, [pc, #16]	@ (8000d54 <SysTick_Config+0x40>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	e000e010 	.word	0xe000e010

08000d58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d60:	6878      	ldr	r0, [r7, #4]
 8000d62:	f7ff ff29 	bl	8000bb8 <__NVIC_SetPriorityGrouping>
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b086      	sub	sp, #24
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	4603      	mov	r3, r0
 8000d76:	60b9      	str	r1, [r7, #8]
 8000d78:	607a      	str	r2, [r7, #4]
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d80:	f7ff ff3e 	bl	8000c00 <__NVIC_GetPriorityGrouping>
 8000d84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	68b9      	ldr	r1, [r7, #8]
 8000d8a:	6978      	ldr	r0, [r7, #20]
 8000d8c:	f7ff ff8e 	bl	8000cac <NVIC_EncodePriority>
 8000d90:	4602      	mov	r2, r0
 8000d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ff5d 	bl	8000c58 <__NVIC_SetPriority>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff31 	bl	8000c1c <__NVIC_EnableIRQ>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f7ff ffa2 	bl	8000d14 <SysTick_Config>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
	...

08000ddc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b04      	cmp	r3, #4
 8000de8:	d106      	bne.n	8000df8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000df6:	e005      	b.n	8000e04 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000dfe:	f023 0304 	bic.w	r3, r3, #4
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000e010 	.word	0xe000e010

08000e14 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e18:	f000 f802 	bl	8000e20 <HAL_SYSTICK_Callback>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	@ 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e165      	b.n	8001118 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	f040 8154 	bne.w	8001112 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d005      	beq.n	8000e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d130      	bne.n	8000ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	689b      	ldr	r3, [r3, #8]
 8000e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	68da      	ldr	r2, [r3, #12]
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eb8:	2201      	movs	r2, #1
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	091b      	lsrs	r3, r3, #4
 8000ece:	f003 0201 	and.w	r2, r3, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b03      	cmp	r3, #3
 8000eee:	d017      	beq.n	8000f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d123      	bne.n	8000f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	08da      	lsrs	r2, r3, #3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3208      	adds	r2, #8
 8000f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	f003 0307 	and.w	r3, r3, #7
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	220f      	movs	r2, #15
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	69b9      	ldr	r1, [r7, #24]
 8000f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	2203      	movs	r2, #3
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0203 	and.w	r2, r3, #3
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	f000 80ae 	beq.w	8001112 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b5d      	ldr	r3, [pc, #372]	@ (8001130 <HAL_GPIO_Init+0x300>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	4a5c      	ldr	r2, [pc, #368]	@ (8001130 <HAL_GPIO_Init+0x300>)
 8000fc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001130 <HAL_GPIO_Init+0x300>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd2:	4a58      	ldr	r2, [pc, #352]	@ (8001134 <HAL_GPIO_Init+0x304>)
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	089b      	lsrs	r3, r3, #2
 8000fd8:	3302      	adds	r3, #2
 8000fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	220f      	movs	r2, #15
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8001138 <HAL_GPIO_Init+0x308>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d025      	beq.n	800104a <HAL_GPIO_Init+0x21a>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4e      	ldr	r2, [pc, #312]	@ (800113c <HAL_GPIO_Init+0x30c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d01f      	beq.n	8001046 <HAL_GPIO_Init+0x216>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4d      	ldr	r2, [pc, #308]	@ (8001140 <HAL_GPIO_Init+0x310>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d019      	beq.n	8001042 <HAL_GPIO_Init+0x212>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4c      	ldr	r2, [pc, #304]	@ (8001144 <HAL_GPIO_Init+0x314>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d013      	beq.n	800103e <HAL_GPIO_Init+0x20e>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4b      	ldr	r2, [pc, #300]	@ (8001148 <HAL_GPIO_Init+0x318>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d00d      	beq.n	800103a <HAL_GPIO_Init+0x20a>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4a      	ldr	r2, [pc, #296]	@ (800114c <HAL_GPIO_Init+0x31c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d007      	beq.n	8001036 <HAL_GPIO_Init+0x206>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a49      	ldr	r2, [pc, #292]	@ (8001150 <HAL_GPIO_Init+0x320>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d101      	bne.n	8001032 <HAL_GPIO_Init+0x202>
 800102e:	2306      	movs	r3, #6
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001032:	2307      	movs	r3, #7
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x21c>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x21c>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	@ (8001134 <HAL_GPIO_Init+0x304>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b3a      	ldr	r3, [pc, #232]	@ (8001154 <HAL_GPIO_Init+0x324>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a31      	ldr	r2, [pc, #196]	@ (8001154 <HAL_GPIO_Init+0x324>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <HAL_GPIO_Init+0x324>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a26      	ldr	r2, [pc, #152]	@ (8001154 <HAL_GPIO_Init+0x324>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b25      	ldr	r3, [pc, #148]	@ (8001154 <HAL_GPIO_Init+0x324>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <HAL_GPIO_Init+0x324>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <HAL_GPIO_Init+0x324>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a11      	ldr	r2, [pc, #68]	@ (8001154 <HAL_GPIO_Init+0x324>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae96 	bls.w	8000e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40013c00 	.word	0x40013c00

08001158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0cc      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4b68      	ldr	r3, [pc, #416]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d90c      	bls.n	8001194 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b65      	ldr	r3, [pc, #404]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b63      	ldr	r3, [pc, #396]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0b8      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	2b00      	cmp	r3, #0
 800119e:	d020      	beq.n	80011e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0304 	and.w	r3, r3, #4
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d005      	beq.n	80011b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011ac:	4b59      	ldr	r3, [pc, #356]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	4a58      	ldr	r2, [pc, #352]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0308 	and.w	r3, r3, #8
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c4:	4b53      	ldr	r3, [pc, #332]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	4a52      	ldr	r2, [pc, #328]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011d0:	4b50      	ldr	r3, [pc, #320]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	494d      	ldr	r1, [pc, #308]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	4313      	orrs	r3, r2
 80011e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d044      	beq.n	8001278 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f6:	4b47      	ldr	r3, [pc, #284]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d119      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e07f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d003      	beq.n	8001216 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001212:	2b03      	cmp	r3, #3
 8001214:	d107      	bne.n	8001226 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001216:	4b3f      	ldr	r3, [pc, #252]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e06f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001226:	4b3b      	ldr	r3, [pc, #236]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e067      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f023 0203 	bic.w	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	4934      	ldr	r1, [pc, #208]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001244:	4313      	orrs	r3, r2
 8001246:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001248:	f7ff fcaa 	bl	8000ba0 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124e:	e00a      	b.n	8001266 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001250:	f7ff fca6 	bl	8000ba0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e04f      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001266:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 020c 	and.w	r2, r3, #12
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	429a      	cmp	r2, r3
 8001276:	d1eb      	bne.n	8001250 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	429a      	cmp	r2, r3
 8001284:	d20c      	bcs.n	80012a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	b2d2      	uxtb	r2, r2
 800128c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128e:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <HAL_RCC_ClockConfig+0x1b8>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 030f 	and.w	r3, r3, #15
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e032      	b.n	8001306 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d008      	beq.n	80012be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4916      	ldr	r1, [pc, #88]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d009      	beq.n	80012de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	490e      	ldr	r1, [pc, #56]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012de:	f000 f855 	bl	800138c <HAL_RCC_GetSysClockFreq>
 80012e2:	4602      	mov	r2, r0
 80012e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001314 <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	490a      	ldr	r1, [pc, #40]	@ (8001318 <HAL_RCC_ClockConfig+0x1c0>)
 80012f0:	5ccb      	ldrb	r3, [r1, r3]
 80012f2:	fa22 f303 	lsr.w	r3, r2, r3
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80012fa:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <HAL_RCC_ClockConfig+0x1c8>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fc0a 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00
 8001314:	40023800 	.word	0x40023800
 8001318:	08002e9c 	.word	0x08002e9c
 800131c:	20000010 	.word	0x20000010
 8001320:	20000014 	.word	0x20000014

08001324 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_RCC_GetHCLKFreq+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000010 	.word	0x20000010

0800133c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001340:	f7ff fff0 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 8001344:	4602      	mov	r2, r0
 8001346:	4b05      	ldr	r3, [pc, #20]	@ (800135c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	0a9b      	lsrs	r3, r3, #10
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	4903      	ldr	r1, [pc, #12]	@ (8001360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001352:	5ccb      	ldrb	r3, [r1, r3]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001358:	4618      	mov	r0, r3
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	08002eac 	.word	0x08002eac

08001364 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001368:	f7ff ffdc 	bl	8001324 <HAL_RCC_GetHCLKFreq>
 800136c:	4602      	mov	r2, r0
 800136e:	4b05      	ldr	r3, [pc, #20]	@ (8001384 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	0b5b      	lsrs	r3, r3, #13
 8001374:	f003 0307 	and.w	r3, r3, #7
 8001378:	4903      	ldr	r1, [pc, #12]	@ (8001388 <HAL_RCC_GetPCLK2Freq+0x24>)
 800137a:	5ccb      	ldrb	r3, [r1, r3]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001380:	4618      	mov	r0, r3
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40023800 	.word	0x40023800
 8001388:	08002eac 	.word	0x08002eac

0800138c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800138c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001390:	b0ae      	sub	sp, #184	@ 0xb8
 8001392:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800139a:	2300      	movs	r3, #0
 800139c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b2:	4bcb      	ldr	r3, [pc, #812]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	f200 8206 	bhi.w	80017cc <HAL_RCC_GetSysClockFreq+0x440>
 80013c0:	a201      	add	r2, pc, #4	@ (adr r2, 80013c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013c6:	bf00      	nop
 80013c8:	080013fd 	.word	0x080013fd
 80013cc:	080017cd 	.word	0x080017cd
 80013d0:	080017cd 	.word	0x080017cd
 80013d4:	080017cd 	.word	0x080017cd
 80013d8:	08001405 	.word	0x08001405
 80013dc:	080017cd 	.word	0x080017cd
 80013e0:	080017cd 	.word	0x080017cd
 80013e4:	080017cd 	.word	0x080017cd
 80013e8:	0800140d 	.word	0x0800140d
 80013ec:	080017cd 	.word	0x080017cd
 80013f0:	080017cd 	.word	0x080017cd
 80013f4:	080017cd 	.word	0x080017cd
 80013f8:	080015fd 	.word	0x080015fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013fc:	4bb9      	ldr	r3, [pc, #740]	@ (80016e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80013fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001402:	e1e7      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001404:	4bb8      	ldr	r3, [pc, #736]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001406:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800140a:	e1e3      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800140c:	4bb4      	ldr	r3, [pc, #720]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001414:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001418:	4bb1      	ldr	r3, [pc, #708]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d071      	beq.n	8001508 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001424:	4bae      	ldr	r3, [pc, #696]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	099b      	lsrs	r3, r3, #6
 800142a:	2200      	movs	r2, #0
 800142c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001430:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001434:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800143c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001446:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800144a:	4622      	mov	r2, r4
 800144c:	462b      	mov	r3, r5
 800144e:	f04f 0000 	mov.w	r0, #0
 8001452:	f04f 0100 	mov.w	r1, #0
 8001456:	0159      	lsls	r1, r3, #5
 8001458:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800145c:	0150      	lsls	r0, r2, #5
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	4621      	mov	r1, r4
 8001464:	1a51      	subs	r1, r2, r1
 8001466:	6439      	str	r1, [r7, #64]	@ 0x40
 8001468:	4629      	mov	r1, r5
 800146a:	eb63 0301 	sbc.w	r3, r3, r1
 800146e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800147c:	4649      	mov	r1, r9
 800147e:	018b      	lsls	r3, r1, #6
 8001480:	4641      	mov	r1, r8
 8001482:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001486:	4641      	mov	r1, r8
 8001488:	018a      	lsls	r2, r1, #6
 800148a:	4641      	mov	r1, r8
 800148c:	1a51      	subs	r1, r2, r1
 800148e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001490:	4649      	mov	r1, r9
 8001492:	eb63 0301 	sbc.w	r3, r3, r1
 8001496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80014a4:	4649      	mov	r1, r9
 80014a6:	00cb      	lsls	r3, r1, #3
 80014a8:	4641      	mov	r1, r8
 80014aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014ae:	4641      	mov	r1, r8
 80014b0:	00ca      	lsls	r2, r1, #3
 80014b2:	4610      	mov	r0, r2
 80014b4:	4619      	mov	r1, r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	4622      	mov	r2, r4
 80014ba:	189b      	adds	r3, r3, r2
 80014bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80014be:	462b      	mov	r3, r5
 80014c0:	460a      	mov	r2, r1
 80014c2:	eb42 0303 	adc.w	r3, r2, r3
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014d4:	4629      	mov	r1, r5
 80014d6:	024b      	lsls	r3, r1, #9
 80014d8:	4621      	mov	r1, r4
 80014da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014de:	4621      	mov	r1, r4
 80014e0:	024a      	lsls	r2, r1, #9
 80014e2:	4610      	mov	r0, r2
 80014e4:	4619      	mov	r1, r3
 80014e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80014f8:	f7fe fe84 	bl	8000204 <__aeabi_uldivmod>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4613      	mov	r3, r2
 8001502:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001506:	e067      	b.n	80015d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001508:	4b75      	ldr	r3, [pc, #468]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	099b      	lsrs	r3, r3, #6
 800150e:	2200      	movs	r2, #0
 8001510:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001514:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001518:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800151c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001520:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001522:	2300      	movs	r3, #0
 8001524:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001526:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800152a:	4622      	mov	r2, r4
 800152c:	462b      	mov	r3, r5
 800152e:	f04f 0000 	mov.w	r0, #0
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	0159      	lsls	r1, r3, #5
 8001538:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800153c:	0150      	lsls	r0, r2, #5
 800153e:	4602      	mov	r2, r0
 8001540:	460b      	mov	r3, r1
 8001542:	4621      	mov	r1, r4
 8001544:	1a51      	subs	r1, r2, r1
 8001546:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001548:	4629      	mov	r1, r5
 800154a:	eb63 0301 	sbc.w	r3, r3, r1
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800155c:	4649      	mov	r1, r9
 800155e:	018b      	lsls	r3, r1, #6
 8001560:	4641      	mov	r1, r8
 8001562:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001566:	4641      	mov	r1, r8
 8001568:	018a      	lsls	r2, r1, #6
 800156a:	4641      	mov	r1, r8
 800156c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001570:	4649      	mov	r1, r9
 8001572:	eb63 0b01 	sbc.w	fp, r3, r1
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	f04f 0300 	mov.w	r3, #0
 800157e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001582:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800158a:	4692      	mov	sl, r2
 800158c:	469b      	mov	fp, r3
 800158e:	4623      	mov	r3, r4
 8001590:	eb1a 0303 	adds.w	r3, sl, r3
 8001594:	623b      	str	r3, [r7, #32]
 8001596:	462b      	mov	r3, r5
 8001598:	eb4b 0303 	adc.w	r3, fp, r3
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	f04f 0300 	mov.w	r3, #0
 80015a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015aa:	4629      	mov	r1, r5
 80015ac:	028b      	lsls	r3, r1, #10
 80015ae:	4621      	mov	r1, r4
 80015b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015b4:	4621      	mov	r1, r4
 80015b6:	028a      	lsls	r2, r1, #10
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015c0:	2200      	movs	r2, #0
 80015c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80015c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80015c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80015ca:	f7fe fe1b 	bl	8000204 <__aeabi_uldivmod>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4613      	mov	r3, r2
 80015d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80015d8:	4b41      	ldr	r3, [pc, #260]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	0c1b      	lsrs	r3, r3, #16
 80015de:	f003 0303 	and.w	r3, r3, #3
 80015e2:	3301      	adds	r3, #1
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80015ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80015ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015fa:	e0eb      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015fc:	4b38      	ldr	r3, [pc, #224]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001604:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001608:	4b35      	ldr	r3, [pc, #212]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d06b      	beq.n	80016ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001614:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	099b      	lsrs	r3, r3, #6
 800161a:	2200      	movs	r2, #0
 800161c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800161e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001620:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001626:	663b      	str	r3, [r7, #96]	@ 0x60
 8001628:	2300      	movs	r3, #0
 800162a:	667b      	str	r3, [r7, #100]	@ 0x64
 800162c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001630:	4622      	mov	r2, r4
 8001632:	462b      	mov	r3, r5
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	f04f 0100 	mov.w	r1, #0
 800163c:	0159      	lsls	r1, r3, #5
 800163e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001642:	0150      	lsls	r0, r2, #5
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4621      	mov	r1, r4
 800164a:	1a51      	subs	r1, r2, r1
 800164c:	61b9      	str	r1, [r7, #24]
 800164e:	4629      	mov	r1, r5
 8001650:	eb63 0301 	sbc.w	r3, r3, r1
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001662:	4659      	mov	r1, fp
 8001664:	018b      	lsls	r3, r1, #6
 8001666:	4651      	mov	r1, sl
 8001668:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800166c:	4651      	mov	r1, sl
 800166e:	018a      	lsls	r2, r1, #6
 8001670:	4651      	mov	r1, sl
 8001672:	ebb2 0801 	subs.w	r8, r2, r1
 8001676:	4659      	mov	r1, fp
 8001678:	eb63 0901 	sbc.w	r9, r3, r1
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001688:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800168c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001690:	4690      	mov	r8, r2
 8001692:	4699      	mov	r9, r3
 8001694:	4623      	mov	r3, r4
 8001696:	eb18 0303 	adds.w	r3, r8, r3
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	462b      	mov	r3, r5
 800169e:	eb49 0303 	adc.w	r3, r9, r3
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016b0:	4629      	mov	r1, r5
 80016b2:	024b      	lsls	r3, r1, #9
 80016b4:	4621      	mov	r1, r4
 80016b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ba:	4621      	mov	r1, r4
 80016bc:	024a      	lsls	r2, r1, #9
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c6:	2200      	movs	r2, #0
 80016c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80016ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80016cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80016d0:	f7fe fd98 	bl	8000204 <__aeabi_uldivmod>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4613      	mov	r3, r2
 80016da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016de:	e065      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x420>
 80016e0:	40023800 	.word	0x40023800
 80016e4:	00f42400 	.word	0x00f42400
 80016e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ec:	4b3d      	ldr	r3, [pc, #244]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	099b      	lsrs	r3, r3, #6
 80016f2:	2200      	movs	r2, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	4611      	mov	r1, r2
 80016f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80016fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80016fe:	2300      	movs	r3, #0
 8001700:	657b      	str	r3, [r7, #84]	@ 0x54
 8001702:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001706:	4642      	mov	r2, r8
 8001708:	464b      	mov	r3, r9
 800170a:	f04f 0000 	mov.w	r0, #0
 800170e:	f04f 0100 	mov.w	r1, #0
 8001712:	0159      	lsls	r1, r3, #5
 8001714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001718:	0150      	lsls	r0, r2, #5
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4641      	mov	r1, r8
 8001720:	1a51      	subs	r1, r2, r1
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	4649      	mov	r1, r9
 8001726:	eb63 0301 	sbc.w	r3, r3, r1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001738:	4659      	mov	r1, fp
 800173a:	018b      	lsls	r3, r1, #6
 800173c:	4651      	mov	r1, sl
 800173e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001742:	4651      	mov	r1, sl
 8001744:	018a      	lsls	r2, r1, #6
 8001746:	4651      	mov	r1, sl
 8001748:	1a54      	subs	r4, r2, r1
 800174a:	4659      	mov	r1, fp
 800174c:	eb63 0501 	sbc.w	r5, r3, r1
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	00eb      	lsls	r3, r5, #3
 800175a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800175e:	00e2      	lsls	r2, r4, #3
 8001760:	4614      	mov	r4, r2
 8001762:	461d      	mov	r5, r3
 8001764:	4643      	mov	r3, r8
 8001766:	18e3      	adds	r3, r4, r3
 8001768:	603b      	str	r3, [r7, #0]
 800176a:	464b      	mov	r3, r9
 800176c:	eb45 0303 	adc.w	r3, r5, r3
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800177e:	4629      	mov	r1, r5
 8001780:	028b      	lsls	r3, r1, #10
 8001782:	4621      	mov	r1, r4
 8001784:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001788:	4621      	mov	r1, r4
 800178a:	028a      	lsls	r2, r1, #10
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001794:	2200      	movs	r2, #0
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001798:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800179a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800179e:	f7fe fd31 	bl	8000204 <__aeabi_uldivmod>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4613      	mov	r3, r2
 80017a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0f1b      	lsrs	r3, r3, #28
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80017ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80017c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ca:	e003      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017cc:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	37b8      	adds	r7, #184	@ 0xb8
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	00f42400 	.word	0x00f42400

080017ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e28d      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8083 	beq.w	8001912 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800180c:	4b94      	ldr	r3, [pc, #592]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b04      	cmp	r3, #4
 8001816:	d019      	beq.n	800184c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001818:	4b91      	ldr	r3, [pc, #580]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001820:	2b08      	cmp	r3, #8
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001824:	4b8e      	ldr	r3, [pc, #568]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800182c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001830:	d00c      	beq.n	800184c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001832:	4b8b      	ldr	r3, [pc, #556]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800183a:	2b0c      	cmp	r3, #12
 800183c:	d112      	bne.n	8001864 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183e:	4b88      	ldr	r3, [pc, #544]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001846:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800184a:	d10b      	bne.n	8001864 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184c:	4b84      	ldr	r3, [pc, #528]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d05b      	beq.n	8001910 <HAL_RCC_OscConfig+0x124>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d157      	bne.n	8001910 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e25a      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800186c:	d106      	bne.n	800187c <HAL_RCC_OscConfig+0x90>
 800186e:	4b7c      	ldr	r3, [pc, #496]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7b      	ldr	r2, [pc, #492]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	e01d      	b.n	80018b8 <HAL_RCC_OscConfig+0xcc>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0xb4>
 8001886:	4b76      	ldr	r3, [pc, #472]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a75      	ldr	r2, [pc, #468]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b73      	ldr	r3, [pc, #460]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a72      	ldr	r2, [pc, #456]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0xcc>
 80018a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f96e 	bl	8000ba0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c8:	f7ff f96a 	bl	8000ba0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b64      	cmp	r3, #100	@ 0x64
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e21f      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018da:	4b61      	ldr	r3, [pc, #388]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d0f0      	beq.n	80018c8 <HAL_RCC_OscConfig+0xdc>
 80018e6:	e014      	b.n	8001912 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff f95a 	bl	8000ba0 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f0:	f7ff f956 	bl	8000ba0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	@ 0x64
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e20b      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001902:	4b57      	ldr	r3, [pc, #348]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x104>
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d06f      	beq.n	80019fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800191e:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b00      	cmp	r3, #0
 8001928:	d017      	beq.n	800195a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800192a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001932:	2b08      	cmp	r3, #8
 8001934:	d105      	bne.n	8001942 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001936:	4b4a      	ldr	r3, [pc, #296]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00b      	beq.n	800195a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001942:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800194a:	2b0c      	cmp	r3, #12
 800194c:	d11c      	bne.n	8001988 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800194e:	4b44      	ldr	r3, [pc, #272]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	4b41      	ldr	r3, [pc, #260]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x186>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d001      	beq.n	8001972 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e1d3      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4937      	ldr	r1, [pc, #220]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001986:	e03a      	b.n	80019fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001990:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <HAL_RCC_OscConfig+0x278>)
 8001992:	2201      	movs	r2, #1
 8001994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001996:	f7ff f903 	bl	8000ba0 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199e:	f7ff f8ff 	bl	8000ba0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e1b4      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b28      	ldr	r3, [pc, #160]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4925      	ldr	r1, [pc, #148]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e015      	b.n	80019fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d2:	4b24      	ldr	r3, [pc, #144]	@ (8001a64 <HAL_RCC_OscConfig+0x278>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d8:	f7ff f8e2 	bl	8000ba0 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e0:	f7ff f8de 	bl	8000ba0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e193      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d036      	beq.n	8001a78 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d016      	beq.n	8001a40 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f8c2 	bl	8000ba0 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a20:	f7ff f8be 	bl	8000ba0 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e173      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a32:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_OscConfig+0x274>)
 8001a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x234>
 8001a3e:	e01b      	b.n	8001a78 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a40:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff f8ab 	bl	8000ba0 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4c:	e00e      	b.n	8001a6c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4e:	f7ff f8a7 	bl	8000ba0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d907      	bls.n	8001a6c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e15c      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
 8001a60:	40023800 	.word	0x40023800
 8001a64:	42470000 	.word	0x42470000
 8001a68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1ea      	bne.n	8001a4e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8097 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b83      	ldr	r3, [pc, #524]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10f      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b79      	ldr	r3, [pc, #484]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d118      	bne.n	8001af4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b76      	ldr	r3, [pc, #472]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a75      	ldr	r2, [pc, #468]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ace:	f7ff f867 	bl	8000ba0 <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad6:	f7ff f863 	bl	8000ba0 <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e118      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8001c9c <HAL_RCC_OscConfig+0x4b0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d106      	bne.n	8001b0a <HAL_RCC_OscConfig+0x31e>
 8001afc:	4b66      	ldr	r3, [pc, #408]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b00:	4a65      	ldr	r2, [pc, #404]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b08:	e01c      	b.n	8001b44 <HAL_RCC_OscConfig+0x358>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	2b05      	cmp	r3, #5
 8001b10:	d10c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x340>
 8001b12:	4b61      	ldr	r3, [pc, #388]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b16:	4a60      	ldr	r2, [pc, #384]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b22:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b2a:	e00b      	b.n	8001b44 <HAL_RCC_OscConfig+0x358>
 8001b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b30:	4a59      	ldr	r2, [pc, #356]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b38:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b3c:	4a56      	ldr	r2, [pc, #344]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b3e:	f023 0304 	bic.w	r3, r3, #4
 8001b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d015      	beq.n	8001b78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f828 	bl	8000ba0 <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7ff f824 	bl	8000ba0 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0d7      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0ee      	beq.n	8001b54 <HAL_RCC_OscConfig+0x368>
 8001b76:	e014      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b78:	f7ff f812 	bl	8000ba0 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b80:	f7ff f80e 	bl	8000ba0 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e0c1      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b96:	4b40      	ldr	r3, [pc, #256]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ee      	bne.n	8001b80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ba2:	7dfb      	ldrb	r3, [r7, #23]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a3a      	ldr	r2, [pc, #232]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80ad 	beq.w	8001d18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bbe:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d060      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d145      	bne.n	8001c5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b4>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7fe ffe2 	bl	8000ba0 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be0:	f7fe ffde 	bl	8000ba0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e093      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69da      	ldr	r2, [r3, #28]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c0c:	019b      	lsls	r3, r3, #6
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c14:	085b      	lsrs	r3, r3, #1
 8001c16:	3b01      	subs	r3, #1
 8001c18:	041b      	lsls	r3, r3, #16
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c20:	061b      	lsls	r3, r3, #24
 8001c22:	431a      	orrs	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c28:	071b      	lsls	r3, r3, #28
 8001c2a:	491b      	ldr	r1, [pc, #108]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b4>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7fe ffb3 	bl	8000ba0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c3e:	f7fe ffaf 	bl	8000ba0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e064      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x452>
 8001c5c:	e05c      	b.n	8001d18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_RCC_OscConfig+0x4b4>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7fe ff9c 	bl	8000ba0 <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe ff98 	bl	8000ba0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e04d      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_RCC_OscConfig+0x4ac>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f0      	bne.n	8001c6c <HAL_RCC_OscConfig+0x480>
 8001c8a:	e045      	b.n	8001d18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e040      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40007000 	.word	0x40007000
 8001ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <HAL_RCC_OscConfig+0x538>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d030      	beq.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d129      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d122      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cce:	68fa      	ldr	r2, [r7, #12]
 8001cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d119      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	085b      	lsrs	r3, r3, #1
 8001cec:	3b01      	subs	r3, #1
 8001cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d10f      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e041      	b.n	8001dbe <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d106      	bne.n	8001d54 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f7fe fdda 	bl	8000908 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3304      	adds	r3, #4
 8001d64:	4619      	mov	r1, r3
 8001d66:	4610      	mov	r0, r2
 8001d68:	f000 fb0e 	bl	8002388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
	...

08001dc8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d104      	bne.n	8001de6 <HAL_TIM_IC_Start_IT+0x1e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	e013      	b.n	8001e0e <HAL_TIM_IC_Start_IT+0x46>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d104      	bne.n	8001df6 <HAL_TIM_IC_Start_IT+0x2e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	e00b      	b.n	8001e0e <HAL_TIM_IC_Start_IT+0x46>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d104      	bne.n	8001e06 <HAL_TIM_IC_Start_IT+0x3e>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	e003      	b.n	8001e0e <HAL_TIM_IC_Start_IT+0x46>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <HAL_TIM_IC_Start_IT+0x58>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e013      	b.n	8001e48 <HAL_TIM_IC_Start_IT+0x80>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d104      	bne.n	8001e30 <HAL_TIM_IC_Start_IT+0x68>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e00b      	b.n	8001e48 <HAL_TIM_IC_Start_IT+0x80>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d104      	bne.n	8001e40 <HAL_TIM_IC_Start_IT+0x78>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e003      	b.n	8001e48 <HAL_TIM_IC_Start_IT+0x80>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d102      	bne.n	8001e56 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001e50:	7b7b      	ldrb	r3, [r7, #13]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0cc      	b.n	8001ff4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d104      	bne.n	8001e6a <HAL_TIM_IC_Start_IT+0xa2>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e68:	e013      	b.n	8001e92 <HAL_TIM_IC_Start_IT+0xca>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d104      	bne.n	8001e7a <HAL_TIM_IC_Start_IT+0xb2>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2202      	movs	r2, #2
 8001e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e78:	e00b      	b.n	8001e92 <HAL_TIM_IC_Start_IT+0xca>
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b08      	cmp	r3, #8
 8001e7e:	d104      	bne.n	8001e8a <HAL_TIM_IC_Start_IT+0xc2>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e88:	e003      	b.n	8001e92 <HAL_TIM_IC_Start_IT+0xca>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d104      	bne.n	8001ea2 <HAL_TIM_IC_Start_IT+0xda>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ea0:	e013      	b.n	8001eca <HAL_TIM_IC_Start_IT+0x102>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b04      	cmp	r3, #4
 8001ea6:	d104      	bne.n	8001eb2 <HAL_TIM_IC_Start_IT+0xea>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001eb0:	e00b      	b.n	8001eca <HAL_TIM_IC_Start_IT+0x102>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_IC_Start_IT+0xfa>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ec0:	e003      	b.n	8001eca <HAL_TIM_IC_Start_IT+0x102>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d841      	bhi.n	8001f54 <HAL_TIM_IC_Start_IT+0x18c>
 8001ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed8 <HAL_TIM_IC_Start_IT+0x110>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001f0d 	.word	0x08001f0d
 8001edc:	08001f55 	.word	0x08001f55
 8001ee0:	08001f55 	.word	0x08001f55
 8001ee4:	08001f55 	.word	0x08001f55
 8001ee8:	08001f1f 	.word	0x08001f1f
 8001eec:	08001f55 	.word	0x08001f55
 8001ef0:	08001f55 	.word	0x08001f55
 8001ef4:	08001f55 	.word	0x08001f55
 8001ef8:	08001f31 	.word	0x08001f31
 8001efc:	08001f55 	.word	0x08001f55
 8001f00:	08001f55 	.word	0x08001f55
 8001f04:	08001f55 	.word	0x08001f55
 8001f08:	08001f43 	.word	0x08001f43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0202 	orr.w	r2, r2, #2
 8001f1a:	60da      	str	r2, [r3, #12]
      break;
 8001f1c:	e01d      	b.n	8001f5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0204 	orr.w	r2, r2, #4
 8001f2c:	60da      	str	r2, [r3, #12]
      break;
 8001f2e:	e014      	b.n	8001f5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68da      	ldr	r2, [r3, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0208 	orr.w	r2, r2, #8
 8001f3e:	60da      	str	r2, [r3, #12]
      break;
 8001f40:	e00b      	b.n	8001f5a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0210 	orr.w	r2, r2, #16
 8001f50:	60da      	str	r2, [r3, #12]
      break;
 8001f52:	e002      	b.n	8001f5a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      break;
 8001f58:	bf00      	nop
  }

  if (status == HAL_OK)
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d148      	bne.n	8001ff2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2201      	movs	r2, #1
 8001f66:	6839      	ldr	r1, [r7, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fc69 	bl	8002840 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a22      	ldr	r2, [pc, #136]	@ (8001ffc <HAL_TIM_IC_Start_IT+0x234>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d022      	beq.n	8001fbe <HAL_TIM_IC_Start_IT+0x1f6>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f80:	d01d      	beq.n	8001fbe <HAL_TIM_IC_Start_IT+0x1f6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_TIM_IC_Start_IT+0x238>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d018      	beq.n	8001fbe <HAL_TIM_IC_Start_IT+0x1f6>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_TIM_IC_Start_IT+0x23c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_TIM_IC_Start_IT+0x1f6>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <HAL_TIM_IC_Start_IT+0x240>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d00e      	beq.n	8001fbe <HAL_TIM_IC_Start_IT+0x1f6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a19      	ldr	r2, [pc, #100]	@ (800200c <HAL_TIM_IC_Start_IT+0x244>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d009      	beq.n	8001fbe <HAL_TIM_IC_Start_IT+0x1f6>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a18      	ldr	r2, [pc, #96]	@ (8002010 <HAL_TIM_IC_Start_IT+0x248>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d004      	beq.n	8001fbe <HAL_TIM_IC_Start_IT+0x1f6>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a16      	ldr	r2, [pc, #88]	@ (8002014 <HAL_TIM_IC_Start_IT+0x24c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d111      	bne.n	8001fe2 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b06      	cmp	r3, #6
 8001fce:	d010      	beq.n	8001ff2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe0:	e007      	b.n	8001ff2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40000400 	.word	0x40000400
 8002004:	40000800 	.word	0x40000800
 8002008:	40000c00 	.word	0x40000c00
 800200c:	40010400 	.word	0x40010400
 8002010:	40014000 	.word	0x40014000
 8002014:	40001800 	.word	0x40001800

08002018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d020      	beq.n	800207c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01b      	beq.n	800207c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0202 	mvn.w	r2, #2
 800204c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f972 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f964 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f975 	bl	8002360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	2b00      	cmp	r3, #0
 8002084:	d020      	beq.n	80020c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0204 	mvn.w	r2, #4
 8002098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f94c 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 80020b4:	e005      	b.n	80020c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f93e 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f94f 	bl	8002360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d020      	beq.n	8002114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d01b      	beq.n	8002114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f06f 0208 	mvn.w	r2, #8
 80020e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2204      	movs	r2, #4
 80020ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f926 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 8002100:	e005      	b.n	800210e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f918 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f929 	bl	8002360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b00      	cmp	r3, #0
 800211c:	d020      	beq.n	8002160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f003 0310 	and.w	r3, r3, #16
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01b      	beq.n	8002160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f06f 0210 	mvn.w	r2, #16
 8002130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2208      	movs	r2, #8
 8002136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	69db      	ldr	r3, [r3, #28]
 800213e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f900 	bl	800234c <HAL_TIM_IC_CaptureCallback>
 800214c:	e005      	b.n	800215a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f8f2 	bl	8002338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 f903 	bl	8002360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00c      	beq.n	8002184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d007      	beq.n	8002184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f06f 0201 	mvn.w	r2, #1
 800217c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7fe fac8 	bl	8000714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fb7b 	bl	800289e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d007      	beq.n	80021cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f8d4 	bl	8002374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00c      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f06f 0220 	mvn.w	r2, #32
 80021e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 fb4d 	bl	800288a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800220e:	2b01      	cmp	r3, #1
 8002210:	d101      	bne.n	8002216 <HAL_TIM_OC_ConfigChannel+0x1e>
 8002212:	2302      	movs	r3, #2
 8002214:	e048      	b.n	80022a8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d839      	bhi.n	8002298 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002224:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_TIM_OC_ConfigChannel+0x34>)
 8002226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222a:	bf00      	nop
 800222c:	08002261 	.word	0x08002261
 8002230:	08002299 	.word	0x08002299
 8002234:	08002299 	.word	0x08002299
 8002238:	08002299 	.word	0x08002299
 800223c:	0800226f 	.word	0x0800226f
 8002240:	08002299 	.word	0x08002299
 8002244:	08002299 	.word	0x08002299
 8002248:	08002299 	.word	0x08002299
 800224c:	0800227d 	.word	0x0800227d
 8002250:	08002299 	.word	0x08002299
 8002254:	08002299 	.word	0x08002299
 8002258:	08002299 	.word	0x08002299
 800225c:	0800228b 	.word	0x0800228b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f93a 	bl	80024e0 <TIM_OC1_SetConfig>
      break;
 800226c:	e017      	b.n	800229e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68b9      	ldr	r1, [r7, #8]
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f9a3 	bl	80025c0 <TIM_OC2_SetConfig>
      break;
 800227a:	e010      	b.n	800229e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	4618      	mov	r0, r3
 8002284:	f000 fa12 	bl	80026ac <TIM_OC3_SetConfig>
      break;
 8002288:	e009      	b.n	800229e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68b9      	ldr	r1, [r7, #8]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 fa7f 	bl	8002794 <TIM_OC4_SetConfig>
      break;
 8002296:	e002      	b.n	800229e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	75fb      	strb	r3, [r7, #23]
      break;
 800229c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	d831      	bhi.n	8002328 <HAL_TIM_ReadCapturedValue+0x78>
 80022c4:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <HAL_TIM_ReadCapturedValue+0x1c>)
 80022c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ca:	bf00      	nop
 80022cc:	08002301 	.word	0x08002301
 80022d0:	08002329 	.word	0x08002329
 80022d4:	08002329 	.word	0x08002329
 80022d8:	08002329 	.word	0x08002329
 80022dc:	0800230b 	.word	0x0800230b
 80022e0:	08002329 	.word	0x08002329
 80022e4:	08002329 	.word	0x08002329
 80022e8:	08002329 	.word	0x08002329
 80022ec:	08002315 	.word	0x08002315
 80022f0:	08002329 	.word	0x08002329
 80022f4:	08002329 	.word	0x08002329
 80022f8:	08002329 	.word	0x08002329
 80022fc:	0800231f 	.word	0x0800231f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002306:	60fb      	str	r3, [r7, #12]

      break;
 8002308:	e00f      	b.n	800232a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002310:	60fb      	str	r3, [r7, #12]

      break;
 8002312:	e00a      	b.n	800232a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231a:	60fb      	str	r3, [r7, #12]

      break;
 800231c:	e005      	b.n	800232a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002324:	60fb      	str	r3, [r7, #12]

      break;
 8002326:	e000      	b.n	800232a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002328:	bf00      	nop
  }

  return tmpreg;
 800232a:	68fb      	ldr	r3, [r7, #12]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a46      	ldr	r2, [pc, #280]	@ (80024b4 <TIM_Base_SetConfig+0x12c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <TIM_Base_SetConfig+0x40>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023a6:	d00f      	beq.n	80023c8 <TIM_Base_SetConfig+0x40>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a43      	ldr	r2, [pc, #268]	@ (80024b8 <TIM_Base_SetConfig+0x130>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d00b      	beq.n	80023c8 <TIM_Base_SetConfig+0x40>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a42      	ldr	r2, [pc, #264]	@ (80024bc <TIM_Base_SetConfig+0x134>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d007      	beq.n	80023c8 <TIM_Base_SetConfig+0x40>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a41      	ldr	r2, [pc, #260]	@ (80024c0 <TIM_Base_SetConfig+0x138>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d003      	beq.n	80023c8 <TIM_Base_SetConfig+0x40>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a40      	ldr	r2, [pc, #256]	@ (80024c4 <TIM_Base_SetConfig+0x13c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d108      	bne.n	80023da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a35      	ldr	r2, [pc, #212]	@ (80024b4 <TIM_Base_SetConfig+0x12c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d02b      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e8:	d027      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a32      	ldr	r2, [pc, #200]	@ (80024b8 <TIM_Base_SetConfig+0x130>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d023      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a31      	ldr	r2, [pc, #196]	@ (80024bc <TIM_Base_SetConfig+0x134>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d01f      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a30      	ldr	r2, [pc, #192]	@ (80024c0 <TIM_Base_SetConfig+0x138>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d01b      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a2f      	ldr	r2, [pc, #188]	@ (80024c4 <TIM_Base_SetConfig+0x13c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d017      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a2e      	ldr	r2, [pc, #184]	@ (80024c8 <TIM_Base_SetConfig+0x140>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d013      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a2d      	ldr	r2, [pc, #180]	@ (80024cc <TIM_Base_SetConfig+0x144>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d00f      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <TIM_Base_SetConfig+0x148>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00b      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a2b      	ldr	r2, [pc, #172]	@ (80024d4 <TIM_Base_SetConfig+0x14c>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <TIM_Base_SetConfig+0x150>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d003      	beq.n	800243a <TIM_Base_SetConfig+0xb2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a29      	ldr	r2, [pc, #164]	@ (80024dc <TIM_Base_SetConfig+0x154>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d108      	bne.n	800244c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a10      	ldr	r2, [pc, #64]	@ (80024b4 <TIM_Base_SetConfig+0x12c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_Base_SetConfig+0xf8>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a12      	ldr	r2, [pc, #72]	@ (80024c4 <TIM_Base_SetConfig+0x13c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d103      	bne.n	8002488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f023 0201 	bic.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	611a      	str	r2, [r3, #16]
  }
}
 80024a6:	bf00      	nop
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40010000 	.word	0x40010000
 80024b8:	40000400 	.word	0x40000400
 80024bc:	40000800 	.word	0x40000800
 80024c0:	40000c00 	.word	0x40000c00
 80024c4:	40010400 	.word	0x40010400
 80024c8:	40014000 	.word	0x40014000
 80024cc:	40014400 	.word	0x40014400
 80024d0:	40014800 	.word	0x40014800
 80024d4:	40001800 	.word	0x40001800
 80024d8:	40001c00 	.word	0x40001c00
 80024dc:	40002000 	.word	0x40002000

080024e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a1b      	ldr	r3, [r3, #32]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	f023 0201 	bic.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800250e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0303 	bic.w	r3, r3, #3
 8002516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f023 0302 	bic.w	r3, r3, #2
 8002528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	4313      	orrs	r3, r2
 8002532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a20      	ldr	r2, [pc, #128]	@ (80025b8 <TIM_OC1_SetConfig+0xd8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d003      	beq.n	8002544 <TIM_OC1_SetConfig+0x64>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <TIM_OC1_SetConfig+0xdc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d10c      	bne.n	800255e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f023 0308 	bic.w	r3, r3, #8
 800254a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4313      	orrs	r3, r2
 8002554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f023 0304 	bic.w	r3, r3, #4
 800255c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a15      	ldr	r2, [pc, #84]	@ (80025b8 <TIM_OC1_SetConfig+0xd8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d003      	beq.n	800256e <TIM_OC1_SetConfig+0x8e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a14      	ldr	r2, [pc, #80]	@ (80025bc <TIM_OC1_SetConfig+0xdc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d111      	bne.n	8002592 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	621a      	str	r2, [r3, #32]
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	40010000 	.word	0x40010000
 80025bc:	40010400 	.word	0x40010400

080025c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	f023 0210 	bic.w	r2, r3, #16
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f023 0320 	bic.w	r3, r3, #32
 800260a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a22      	ldr	r2, [pc, #136]	@ (80026a4 <TIM_OC2_SetConfig+0xe4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_OC2_SetConfig+0x68>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a21      	ldr	r2, [pc, #132]	@ (80026a8 <TIM_OC2_SetConfig+0xe8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d10d      	bne.n	8002644 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800262e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	4313      	orrs	r3, r2
 800263a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002642:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a17      	ldr	r2, [pc, #92]	@ (80026a4 <TIM_OC2_SetConfig+0xe4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d003      	beq.n	8002654 <TIM_OC2_SetConfig+0x94>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a16      	ldr	r2, [pc, #88]	@ (80026a8 <TIM_OC2_SetConfig+0xe8>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d113      	bne.n	800267c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800265a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002662:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	621a      	str	r2, [r3, #32]
}
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	40010000 	.word	0x40010000
 80026a8:	40010400 	.word	0x40010400

080026ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68fa      	ldr	r2, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a21      	ldr	r2, [pc, #132]	@ (800278c <TIM_OC3_SetConfig+0xe0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d003      	beq.n	8002712 <TIM_OC3_SetConfig+0x66>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a20      	ldr	r2, [pc, #128]	@ (8002790 <TIM_OC3_SetConfig+0xe4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d10d      	bne.n	800272e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002718:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	697a      	ldr	r2, [r7, #20]
 8002722:	4313      	orrs	r3, r2
 8002724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800272c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a16      	ldr	r2, [pc, #88]	@ (800278c <TIM_OC3_SetConfig+0xe0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d003      	beq.n	800273e <TIM_OC3_SetConfig+0x92>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a15      	ldr	r2, [pc, #84]	@ (8002790 <TIM_OC3_SetConfig+0xe4>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d113      	bne.n	8002766 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002744:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800274c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	621a      	str	r2, [r3, #32]
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	40010000 	.word	0x40010000
 8002790:	40010400 	.word	0x40010400

08002794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80027de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	031b      	lsls	r3, r3, #12
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a12      	ldr	r2, [pc, #72]	@ (8002838 <TIM_OC4_SetConfig+0xa4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d003      	beq.n	80027fc <TIM_OC4_SetConfig+0x68>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a11      	ldr	r2, [pc, #68]	@ (800283c <TIM_OC4_SetConfig+0xa8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d109      	bne.n	8002810 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	019b      	lsls	r3, r3, #6
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	621a      	str	r2, [r3, #32]
}
 800282a:	bf00      	nop
 800282c:	371c      	adds	r7, #28
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	40010000 	.word	0x40010000
 800283c:	40010400 	.word	0x40010400

08002840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f003 031f 	and.w	r3, r3, #31
 8002852:	2201      	movs	r2, #1
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a1a      	ldr	r2, [r3, #32]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1a      	ldr	r2, [r3, #32]
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	431a      	orrs	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr

080028b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e042      	b.n	800294a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d106      	bne.n	80028de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7fe f877 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2224      	movs	r2, #36	@ 0x24
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f82c 	bl	8002954 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800290a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800291a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800292a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b0c0      	sub	sp, #256	@ 0x100
 800295a:	af00      	add	r7, sp, #0
 800295c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	68d9      	ldr	r1, [r3, #12]
 8002972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	ea40 0301 	orr.w	r3, r0, r1
 800297c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002982:	689a      	ldr	r2, [r3, #8]
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	431a      	orrs	r2, r3
 800298c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	431a      	orrs	r2, r3
 8002994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4313      	orrs	r3, r2
 800299c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80029a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80029ac:	f021 010c 	bic.w	r1, r1, #12
 80029b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80029ba:	430b      	orrs	r3, r1
 80029bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80029ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ce:	6999      	ldr	r1, [r3, #24]
 80029d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	ea40 0301 	orr.w	r3, r0, r1
 80029da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002c20 <UART_SetConfig+0x2cc>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d005      	beq.n	80029f4 <UART_SetConfig+0xa0>
 80029e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002c24 <UART_SetConfig+0x2d0>)
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d104      	bne.n	80029fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80029f4:	f7fe fcb6 	bl	8001364 <HAL_RCC_GetPCLK2Freq>
 80029f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80029fc:	e003      	b.n	8002a06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80029fe:	f7fe fc9d 	bl	800133c <HAL_RCC_GetPCLK1Freq>
 8002a02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a10:	f040 810c 	bne.w	8002c2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002a1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002a22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002a26:	4622      	mov	r2, r4
 8002a28:	462b      	mov	r3, r5
 8002a2a:	1891      	adds	r1, r2, r2
 8002a2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002a2e:	415b      	adcs	r3, r3
 8002a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a36:	4621      	mov	r1, r4
 8002a38:	eb12 0801 	adds.w	r8, r2, r1
 8002a3c:	4629      	mov	r1, r5
 8002a3e:	eb43 0901 	adc.w	r9, r3, r1
 8002a42:	f04f 0200 	mov.w	r2, #0
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a56:	4690      	mov	r8, r2
 8002a58:	4699      	mov	r9, r3
 8002a5a:	4623      	mov	r3, r4
 8002a5c:	eb18 0303 	adds.w	r3, r8, r3
 8002a60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a64:	462b      	mov	r3, r5
 8002a66:	eb49 0303 	adc.w	r3, r9, r3
 8002a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002a7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002a7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002a82:	460b      	mov	r3, r1
 8002a84:	18db      	adds	r3, r3, r3
 8002a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a88:	4613      	mov	r3, r2
 8002a8a:	eb42 0303 	adc.w	r3, r2, r3
 8002a8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002a94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002a98:	f7fd fbb4 	bl	8000204 <__aeabi_uldivmod>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4b61      	ldr	r3, [pc, #388]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002aa2:	fba3 2302 	umull	r2, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	011c      	lsls	r4, r3, #4
 8002aaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ab4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ab8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	1891      	adds	r1, r2, r2
 8002ac2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ac4:	415b      	adcs	r3, r3
 8002ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ac8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002acc:	4641      	mov	r1, r8
 8002ace:	eb12 0a01 	adds.w	sl, r2, r1
 8002ad2:	4649      	mov	r1, r9
 8002ad4:	eb43 0b01 	adc.w	fp, r3, r1
 8002ad8:	f04f 0200 	mov.w	r2, #0
 8002adc:	f04f 0300 	mov.w	r3, #0
 8002ae0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ae4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ae8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002aec:	4692      	mov	sl, r2
 8002aee:	469b      	mov	fp, r3
 8002af0:	4643      	mov	r3, r8
 8002af2:	eb1a 0303 	adds.w	r3, sl, r3
 8002af6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002afa:	464b      	mov	r3, r9
 8002afc:	eb4b 0303 	adc.w	r3, fp, r3
 8002b00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	18db      	adds	r3, r3, r3
 8002b1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b1e:	4613      	mov	r3, r2
 8002b20:	eb42 0303 	adc.w	r3, r2, r3
 8002b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002b2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002b2e:	f7fd fb69 	bl	8000204 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4611      	mov	r1, r2
 8002b38:	4b3b      	ldr	r3, [pc, #236]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002b3a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b3e:	095b      	lsrs	r3, r3, #5
 8002b40:	2264      	movs	r2, #100	@ 0x64
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	1acb      	subs	r3, r1, r3
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002b4e:	4b36      	ldr	r3, [pc, #216]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002b50:	fba3 2302 	umull	r2, r3, r3, r2
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002b5c:	441c      	add	r4, r3
 8002b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002b6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002b70:	4642      	mov	r2, r8
 8002b72:	464b      	mov	r3, r9
 8002b74:	1891      	adds	r1, r2, r2
 8002b76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b78:	415b      	adcs	r3, r3
 8002b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002b80:	4641      	mov	r1, r8
 8002b82:	1851      	adds	r1, r2, r1
 8002b84:	6339      	str	r1, [r7, #48]	@ 0x30
 8002b86:	4649      	mov	r1, r9
 8002b88:	414b      	adcs	r3, r1
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002b98:	4659      	mov	r1, fp
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4651      	mov	r1, sl
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4642      	mov	r2, r8
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bb4:	464b      	mov	r3, r9
 8002bb6:	460a      	mov	r2, r1
 8002bb8:	eb42 0303 	adc.w	r3, r2, r3
 8002bbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002bd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	18db      	adds	r3, r3, r3
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bda:	4613      	mov	r3, r2
 8002bdc:	eb42 0303 	adc.w	r3, r2, r3
 8002be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002be2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002be6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002bea:	f7fd fb0b 	bl	8000204 <__aeabi_uldivmod>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	2164      	movs	r1, #100	@ 0x64
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	3332      	adds	r3, #50	@ 0x32
 8002c06:	4a08      	ldr	r2, [pc, #32]	@ (8002c28 <UART_SetConfig+0x2d4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 0207 	and.w	r2, r3, #7
 8002c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4422      	add	r2, r4
 8002c1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002c1c:	e106      	b.n	8002e2c <UART_SetConfig+0x4d8>
 8002c1e:	bf00      	nop
 8002c20:	40011000 	.word	0x40011000
 8002c24:	40011400 	.word	0x40011400
 8002c28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c30:	2200      	movs	r2, #0
 8002c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002c3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002c3e:	4642      	mov	r2, r8
 8002c40:	464b      	mov	r3, r9
 8002c42:	1891      	adds	r1, r2, r2
 8002c44:	6239      	str	r1, [r7, #32]
 8002c46:	415b      	adcs	r3, r3
 8002c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c4e:	4641      	mov	r1, r8
 8002c50:	1854      	adds	r4, r2, r1
 8002c52:	4649      	mov	r1, r9
 8002c54:	eb43 0501 	adc.w	r5, r3, r1
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	f04f 0300 	mov.w	r3, #0
 8002c60:	00eb      	lsls	r3, r5, #3
 8002c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c66:	00e2      	lsls	r2, r4, #3
 8002c68:	4614      	mov	r4, r2
 8002c6a:	461d      	mov	r5, r3
 8002c6c:	4643      	mov	r3, r8
 8002c6e:	18e3      	adds	r3, r4, r3
 8002c70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c74:	464b      	mov	r3, r9
 8002c76:	eb45 0303 	adc.w	r3, r5, r3
 8002c7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002c8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	008b      	lsls	r3, r1, #2
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	008a      	lsls	r2, r1, #2
 8002ca8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002cac:	f7fd faaa 	bl	8000204 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4b60      	ldr	r3, [pc, #384]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002cb6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	011c      	lsls	r4, r3, #4
 8002cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002cc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ccc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	61b9      	str	r1, [r7, #24]
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	61fb      	str	r3, [r7, #28]
 8002cdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce0:	4641      	mov	r1, r8
 8002ce2:	1851      	adds	r1, r2, r1
 8002ce4:	6139      	str	r1, [r7, #16]
 8002ce6:	4649      	mov	r1, r9
 8002ce8:	414b      	adcs	r3, r1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	00cb      	lsls	r3, r1, #3
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d02:	4651      	mov	r1, sl
 8002d04:	00ca      	lsls	r2, r1, #3
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4642      	mov	r2, r8
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002d14:	464b      	mov	r3, r9
 8002d16:	460a      	mov	r2, r1
 8002d18:	eb42 0303 	adc.w	r3, r2, r3
 8002d1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f04f 0300 	mov.w	r3, #0
 8002d34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002d38:	4649      	mov	r1, r9
 8002d3a:	008b      	lsls	r3, r1, #2
 8002d3c:	4641      	mov	r1, r8
 8002d3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d42:	4641      	mov	r1, r8
 8002d44:	008a      	lsls	r2, r1, #2
 8002d46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002d4a:	f7fd fa5b 	bl	8000204 <__aeabi_uldivmod>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4611      	mov	r1, r2
 8002d54:	4b38      	ldr	r3, [pc, #224]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002d56:	fba3 2301 	umull	r2, r3, r3, r1
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2264      	movs	r2, #100	@ 0x64
 8002d5e:	fb02 f303 	mul.w	r3, r2, r3
 8002d62:	1acb      	subs	r3, r1, r3
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	3332      	adds	r3, #50	@ 0x32
 8002d68:	4a33      	ldr	r2, [pc, #204]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d74:	441c      	add	r4, r3
 8002d76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002d80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002d84:	4642      	mov	r2, r8
 8002d86:	464b      	mov	r3, r9
 8002d88:	1891      	adds	r1, r2, r2
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	415b      	adcs	r3, r3
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d94:	4641      	mov	r1, r8
 8002d96:	1851      	adds	r1, r2, r1
 8002d98:	6039      	str	r1, [r7, #0]
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	414b      	adcs	r3, r1
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	f04f 0200 	mov.w	r2, #0
 8002da4:	f04f 0300 	mov.w	r3, #0
 8002da8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002dac:	4659      	mov	r1, fp
 8002dae:	00cb      	lsls	r3, r1, #3
 8002db0:	4651      	mov	r1, sl
 8002db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002db6:	4651      	mov	r1, sl
 8002db8:	00ca      	lsls	r2, r1, #3
 8002dba:	4610      	mov	r0, r2
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	4642      	mov	r2, r8
 8002dc2:	189b      	adds	r3, r3, r2
 8002dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002dc6:	464b      	mov	r3, r9
 8002dc8:	460a      	mov	r2, r1
 8002dca:	eb42 0303 	adc.w	r3, r2, r3
 8002dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dda:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002de8:	4649      	mov	r1, r9
 8002dea:	008b      	lsls	r3, r1, #2
 8002dec:	4641      	mov	r1, r8
 8002dee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002df2:	4641      	mov	r1, r8
 8002df4:	008a      	lsls	r2, r1, #2
 8002df6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002dfa:	f7fd fa03 	bl	8000204 <__aeabi_uldivmod>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002e04:	fba3 1302 	umull	r1, r3, r3, r2
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	2164      	movs	r1, #100	@ 0x64
 8002e0c:	fb01 f303 	mul.w	r3, r1, r3
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	3332      	adds	r3, #50	@ 0x32
 8002e16:	4a08      	ldr	r2, [pc, #32]	@ (8002e38 <UART_SetConfig+0x4e4>)
 8002e18:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4422      	add	r2, r4
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002e32:	46bd      	mov	sp, r7
 8002e34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e38:	51eb851f 	.word	0x51eb851f

08002e3c <__libc_init_array>:
 8002e3c:	b570      	push	{r4, r5, r6, lr}
 8002e3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002e74 <__libc_init_array+0x38>)
 8002e40:	4c0d      	ldr	r4, [pc, #52]	@ (8002e78 <__libc_init_array+0x3c>)
 8002e42:	1b64      	subs	r4, r4, r5
 8002e44:	10a4      	asrs	r4, r4, #2
 8002e46:	2600      	movs	r6, #0
 8002e48:	42a6      	cmp	r6, r4
 8002e4a:	d109      	bne.n	8002e60 <__libc_init_array+0x24>
 8002e4c:	4d0b      	ldr	r5, [pc, #44]	@ (8002e7c <__libc_init_array+0x40>)
 8002e4e:	4c0c      	ldr	r4, [pc, #48]	@ (8002e80 <__libc_init_array+0x44>)
 8002e50:	f000 f818 	bl	8002e84 <_init>
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	2600      	movs	r6, #0
 8002e5a:	42a6      	cmp	r6, r4
 8002e5c:	d105      	bne.n	8002e6a <__libc_init_array+0x2e>
 8002e5e:	bd70      	pop	{r4, r5, r6, pc}
 8002e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e64:	4798      	blx	r3
 8002e66:	3601      	adds	r6, #1
 8002e68:	e7ee      	b.n	8002e48 <__libc_init_array+0xc>
 8002e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6e:	4798      	blx	r3
 8002e70:	3601      	adds	r6, #1
 8002e72:	e7f2      	b.n	8002e5a <__libc_init_array+0x1e>
 8002e74:	08002ebc 	.word	0x08002ebc
 8002e78:	08002ebc 	.word	0x08002ebc
 8002e7c:	08002ebc 	.word	0x08002ebc
 8002e80:	08002ec0 	.word	0x08002ec0

08002e84 <_init>:
 8002e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e86:	bf00      	nop
 8002e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e8a:	bc08      	pop	{r3}
 8002e8c:	469e      	mov	lr, r3
 8002e8e:	4770      	bx	lr

08002e90 <_fini>:
 8002e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e92:	bf00      	nop
 8002e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e96:	bc08      	pop	{r3}
 8002e98:	469e      	mov	lr, r3
 8002e9a:	4770      	bx	lr
