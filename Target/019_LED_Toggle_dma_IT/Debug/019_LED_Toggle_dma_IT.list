
019_LED_Toggle_dma_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002844  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a08  08002a08  00003a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a28  08002a28  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a28  08002a28  00003a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a30  08002a30  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a30  08002a30  00003a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a34  08002a34  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002a38  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08002a48  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002a48  000040d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008aa7  00000000  00000000  00004040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001833  00000000  00000000  0000cae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0000e320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000595  00000000  00000000  0000ea68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000203a8  00000000  00000000  0000effd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009084  00000000  00000000  0002f3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4b5c  00000000  00000000  00038429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fcf85  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ce0  00000000  00000000  000fcfc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000feca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080029f0 	.word	0x080029f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	080029f0 	.word	0x080029f0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint32_t current_ticks= 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 fa8b 	bl	8000a54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f83b 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000542:	f000 f923 	bl	800078c <MX_GPIO_Init>
  MX_DMA_Init();
 8000546:	f000 f8cf 	bl	80006e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800054a:	f000 f8a3 	bl	8000694 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0, HAL_DMA_XFER_CPLT_CB_ID, &my_Dma_TC_cb);
 800054e:	4a15      	ldr	r2, [pc, #84]	@ (80005a4 <main+0x74>)
 8000550:	2100      	movs	r1, #0
 8000552:	4815      	ldr	r0, [pc, #84]	@ (80005a8 <main+0x78>)
 8000554:	f000 fe92 	bl	800127c <HAL_DMA_RegisterCallback>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t) &led_data[0], (uint32_t) &GPIOA -> ODR, 1);
 8000558:	4914      	ldr	r1, [pc, #80]	@ (80005ac <main+0x7c>)
 800055a:	2301      	movs	r3, #1
 800055c:	4a14      	ldr	r2, [pc, #80]	@ (80005b0 <main+0x80>)
 800055e:	4812      	ldr	r0, [pc, #72]	@ (80005a8 <main+0x78>)
 8000560:	f000 fcaa 	bl	8000eb8 <HAL_DMA_Start_IT>

	  /*delay of 1 sec */
	  current_ticks = HAL_GetTick();
 8000564:	f000 fadc 	bl	8000b20 <HAL_GetTick>
 8000568:	6078      	str	r0, [r7, #4]
	  while((current_ticks + 1000) >= HAL_GetTick());
 800056a:	bf00      	nop
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 8000572:	f000 fad5 	bl	8000b20 <HAL_GetTick>
 8000576:	4603      	mov	r3, r0
 8000578:	429c      	cmp	r4, r3
 800057a:	d2f7      	bcs.n	800056c <main+0x3c>

	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t) &led_data[1], (uint32_t) &GPIOA -> ODR, 1);
 800057c:	490d      	ldr	r1, [pc, #52]	@ (80005b4 <main+0x84>)
 800057e:	2301      	movs	r3, #1
 8000580:	4a0b      	ldr	r2, [pc, #44]	@ (80005b0 <main+0x80>)
 8000582:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <main+0x78>)
 8000584:	f000 fc98 	bl	8000eb8 <HAL_DMA_Start_IT>

	  	  /*delay of 1 sec */
	  	  current_ticks = HAL_GetTick();
 8000588:	f000 faca 	bl	8000b20 <HAL_GetTick>
 800058c:	6078      	str	r0, [r7, #4]
	  	  while((current_ticks + 1000) >= HAL_GetTick());
 800058e:	bf00      	nop
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 8000596:	f000 fac3 	bl	8000b20 <HAL_GetTick>
 800059a:	4603      	mov	r3, r0
 800059c:	429c      	cmp	r4, r3
 800059e:	d2f7      	bcs.n	8000590 <main+0x60>
	  HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t) &led_data[0], (uint32_t) &GPIOA -> ODR, 1);
 80005a0:	e7da      	b.n	8000558 <main+0x28>
 80005a2:	bf00      	nop
 80005a4:	08000869 	.word	0x08000869
 80005a8:	20000074 	.word	0x20000074
 80005ac:	20000000 	.word	0x20000000
 80005b0:	40020014 	.word	0x40020014
 80005b4:	20000001 	.word	0x20000001

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 031c 	add.w	r3, r7, #28
 80005c2:	2234      	movs	r2, #52	@ 0x34
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 f9e6 	bl	8002998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e4:	4a29      	ldr	r2, [pc, #164]	@ (800068c <SystemClock_Config+0xd4>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ec:	4b27      	ldr	r3, [pc, #156]	@ (800068c <SystemClock_Config+0xd4>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	4b24      	ldr	r3, [pc, #144]	@ (8000690 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000604:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <SystemClock_Config+0xd8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <SystemClock_Config+0xd8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000620:	2310      	movs	r3, #16
 8000622:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000624:	2302      	movs	r3, #2
 8000626:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000628:	2300      	movs	r3, #0
 800062a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800062c:	2310      	movs	r3, #16
 800062e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000630:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000634:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000636:	2304      	movs	r3, #4
 8000638:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800063a:	2302      	movs	r3, #2
 800063c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fc44 	bl	8001ed4 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000652:	f000 f913 	bl	800087c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2302      	movs	r3, #2
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2102      	movs	r1, #2
 8000672:	4618      	mov	r0, r3
 8000674:	f001 f8e4 	bl	8001840 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800067e:	f000 f8fd 	bl	800087c <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3750      	adds	r7, #80	@ 0x50
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <MX_USART2_UART_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_USART2_UART_Init+0x4c>)
 80006cc:	f001 fea0 	bl	8002410 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f8d1 	bl	800087c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	40004400 	.word	0x40004400

080006e8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
static void MX_DMA_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_DMA_Init+0x98>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <MX_DMA_Init+0x98>)
 80006f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_DMA_Init+0x98>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 800070a:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <MX_DMA_Init+0x9c>)
 800070c:	4a1e      	ldr	r2, [pc, #120]	@ (8000788 <MX_DMA_Init+0xa0>)
 800070e:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000712:	2200      	movs	r2, #0
 8000714:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000718:	2280      	movs	r2, #128	@ 0x80
 800071a:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <MX_DMA_Init+0x9c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_DISABLE;
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <MX_DMA_Init+0x9c>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800072e:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8000734:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 800073a:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <MX_DMA_Init+0x9c>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000740:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000742:	2204      	movs	r2, #4
 8000744:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000746:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000748:	2203      	movs	r2, #3
 800074a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 800074c:	4b0d      	ldr	r3, [pc, #52]	@ (8000784 <MX_DMA_Init+0x9c>)
 800074e:	2200      	movs	r2, #0
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <MX_DMA_Init+0x9c>)
 8000754:	2200      	movs	r2, #0
 8000756:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8000758:	480a      	ldr	r0, [pc, #40]	@ (8000784 <MX_DMA_Init+0x9c>)
 800075a:	f000 faff 	bl	8000d5c <HAL_DMA_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_DMA_Init+0x80>
  {
    Error_Handler( );
 8000764:	f000 f88a 	bl	800087c <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	2038      	movs	r0, #56	@ 0x38
 800076e:	f000 fabe 	bl	8000cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000772:	2038      	movs	r0, #56	@ 0x38
 8000774:	f000 fad7 	bl	8000d26 <HAL_NVIC_EnableIRQ>

}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	20000074 	.word	0x20000074
 8000788:	40026410 	.word	0x40026410

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a2c      	ldr	r2, [pc, #176]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b26      	ldr	r3, [pc, #152]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a25      	ldr	r2, [pc, #148]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b23      	ldr	r3, [pc, #140]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a1e      	ldr	r2, [pc, #120]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <MX_GPIO_Init+0xd0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <MX_GPIO_Init+0xd0>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4812      	ldr	r0, [pc, #72]	@ (8000860 <MX_GPIO_Init+0xd4>)
 8000818:	f000 fff8 	bl	800180c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000822:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	@ (8000864 <MX_GPIO_Init+0xd8>)
 8000834:	f000 fe56 	bl	80014e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000838:	2320      	movs	r3, #32
 800083a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083c:	2301      	movs	r3, #1
 800083e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	@ (8000860 <MX_GPIO_Init+0xd4>)
 8000850:	f000 fe48 	bl	80014e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000854:	bf00      	nop
 8000856:	3728      	adds	r7, #40	@ 0x28
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40023800 	.word	0x40023800
 8000860:	40020000 	.word	0x40020000
 8000864:	40020800 	.word	0x40020800

08000868 <my_Dma_TC_cb>:

/* USER CODE BEGIN 4 */
void my_Dma_TC_cb(DMA_HandleTypeDef *pHandle){
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

}
 8000870:	bf00      	nop
 8000872:	370c      	adds	r7, #12
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000880:	b672      	cpsid	i
}
 8000882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <Error_Handler+0x8>

08000888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <HAL_MspInit+0x4c>)
 8000894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000896:	4a0f      	ldr	r2, [pc, #60]	@ (80008d4 <HAL_MspInit+0x4c>)
 8000898:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800089c:	6453      	str	r3, [r2, #68]	@ 0x44
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	4a08      	ldr	r2, [pc, #32]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c6:	2007      	movs	r0, #7
 80008c8:	f000 fa06 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800

080008d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a19      	ldr	r2, [pc, #100]	@ (800095c <HAL_UART_MspInit+0x84>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d12b      	bne.n	8000952 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	4b18      	ldr	r3, [pc, #96]	@ (8000960 <HAL_UART_MspInit+0x88>)
 8000900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000902:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_UART_MspInit+0x88>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	6413      	str	r3, [r2, #64]	@ 0x40
 800090a:	4b15      	ldr	r3, [pc, #84]	@ (8000960 <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000912:	613b      	str	r3, [r7, #16]
 8000914:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <HAL_UART_MspInit+0x88>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a10      	ldr	r2, [pc, #64]	@ (8000960 <HAL_UART_MspInit+0x88>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000932:	230c      	movs	r3, #12
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000942:	2307      	movs	r3, #7
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <HAL_UART_MspInit+0x8c>)
 800094e:	f000 fdc9 	bl	80014e4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000952:	bf00      	nop
 8000954:	3728      	adds	r7, #40	@ 0x28
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40004400 	.word	0x40004400
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000

08000968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <NMI_Handler+0x4>

08000970 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <HardFault_Handler+0x4>

08000978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <MemManage_Handler+0x4>

08000980 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr

0800099e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009be:	f000 f89b 	bl	8000af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <DMA2_Stream0_IRQHandler+0x10>)
 80009ce:	f000 facb 	bl	8000f68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000074 	.word	0x20000074

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <SystemInit+0x20>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e6:	4a05      	ldr	r2, [pc, #20]	@ (80009fc <SystemInit+0x20>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a38 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a04:	f7ff ffea 	bl	80009dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a0a:	490d      	ldr	r1, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a20:	4c0a      	ldr	r4, [pc, #40]	@ (8000a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f001 ffbb 	bl	80029a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a32:	f7ff fd7d 	bl	8000530 <main>
  bx  lr    
 8000a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a40:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a44:	08002a38 	.word	0x08002a38
  ldr r2, =_sbss
 8000a48:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a4c:	200000d8 	.word	0x200000d8

08000a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a50:	e7fe      	b.n	8000a50 <ADC_IRQHandler>
	...

08000a54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_Init+0x40>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <HAL_Init+0x40>)
 8000a5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_Init+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_Init+0x40>)
 8000a6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_Init+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a07      	ldr	r2, [pc, #28]	@ (8000a94 <HAL_Init+0x40>)
 8000a76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f92b 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 f808 	bl	8000a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff fefe 	bl	8000888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023c00 	.word	0x40023c00

08000a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_InitTick+0x54>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b12      	ldr	r3, [pc, #72]	@ (8000af0 <HAL_InitTick+0x58>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 f943 	bl	8000d42 <HAL_SYSTICK_Config>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e00e      	b.n	8000ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2b0f      	cmp	r3, #15
 8000aca:	d80a      	bhi.n	8000ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000acc:	2200      	movs	r2, #0
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ad4:	f000 f90b 	bl	8000cee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad8:	4a06      	ldr	r2, [pc, #24]	@ (8000af4 <HAL_InitTick+0x5c>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e000      	b.n	8000ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000004 	.word	0x20000004
 8000af0:	2000000c 	.word	0x2000000c
 8000af4:	20000008 	.word	0x20000008

08000af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x20>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <HAL_IncTick+0x24>)
 8000b0a:	6013      	str	r3, [r2, #0]
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000000c 	.word	0x2000000c
 8000b1c:	200000d4 	.word	0x200000d4

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	@ (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	200000d4 	.word	0x200000d4

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	@ (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	@ (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	@ (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	@ 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	@ 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff29 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff3e 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff8e 	bl	8000c2c <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff31 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa2 	bl	8000c94 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000d68:	f7ff feda 	bl	8000b20 <HAL_GetTick>
 8000d6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e099      	b.n	8000eac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f022 0201 	bic.w	r2, r2, #1
 8000d96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d98:	e00f      	b.n	8000dba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d9a:	f7ff fec1 	bl	8000b20 <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b05      	cmp	r3, #5
 8000da6:	d908      	bls.n	8000dba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2220      	movs	r2, #32
 8000dac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e078      	b.n	8000eac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e8      	bne.n	8000d9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000dd0:	697a      	ldr	r2, [r7, #20]
 8000dd2:	4b38      	ldr	r3, [pc, #224]	@ (8000eb4 <HAL_DMA_Init+0x158>)
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685a      	ldr	r2, [r3, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000de6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a1b      	ldr	r3, [r3, #32]
 8000e04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4313      	orrs	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d107      	bne.n	8000e24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	f023 0307 	bic.w	r3, r3, #7
 8000e3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	d117      	bne.n	8000e7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d00e      	beq.n	8000e7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f000 fac3 	bl	80013ec <DMA_CheckFifoParam>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d008      	beq.n	8000e7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2240      	movs	r2, #64	@ 0x40
 8000e70:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2201      	movs	r2, #1
 8000e76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e016      	b.n	8000eac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	697a      	ldr	r2, [r7, #20]
 8000e84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fa7a 	bl	8001380 <DMA_CalcBaseAndBitshift>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e94:	223f      	movs	r2, #63	@ 0x3f
 8000e96:	409a      	lsls	r2, r3
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000eaa:	2300      	movs	r3, #0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	f010803f 	.word	0xf010803f

08000eb8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ece:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d101      	bne.n	8000ede <HAL_DMA_Start_IT+0x26>
 8000eda:	2302      	movs	r3, #2
 8000edc:	e040      	b.n	8000f60 <HAL_DMA_Start_IT+0xa8>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d12f      	bne.n	8000f52 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	2200      	movs	r2, #0
 8000efe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	68f8      	ldr	r0, [r7, #12]
 8000f08:	f000 fa0c 	bl	8001324 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f10:	223f      	movs	r2, #63	@ 0x3f
 8000f12:	409a      	lsls	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0216 	orr.w	r2, r2, #22
 8000f26:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d007      	beq.n	8000f40 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f042 0201 	orr.w	r2, r2, #1
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	e005      	b.n	8000f5e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000f74:	4b8e      	ldr	r3, [pc, #568]	@ (80011b0 <HAL_DMA_IRQHandler+0x248>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a8e      	ldr	r2, [pc, #568]	@ (80011b4 <HAL_DMA_IRQHandler+0x24c>)
 8000f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7e:	0a9b      	lsrs	r3, r3, #10
 8000f80:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f86:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f92:	2208      	movs	r2, #8
 8000f94:	409a      	lsls	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01a      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0304 	and.w	r3, r3, #4
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0204 	bic.w	r2, r2, #4
 8000fba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fcc:	f043 0201 	orr.w	r2, r3, #1
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fd8:	2201      	movs	r2, #1
 8000fda:	409a      	lsls	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d012      	beq.n	800100a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00b      	beq.n	800100a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	409a      	lsls	r2, r3
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001002:	f043 0202 	orr.w	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800100e:	2204      	movs	r2, #4
 8001010:	409a      	lsls	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4013      	ands	r3, r2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d012      	beq.n	8001040 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800102c:	2204      	movs	r2, #4
 800102e:	409a      	lsls	r2, r3
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001038:	f043 0204 	orr.w	r2, r3, #4
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001044:	2210      	movs	r2, #16
 8001046:	409a      	lsls	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4013      	ands	r3, r2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d043      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d03c      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001062:	2210      	movs	r2, #16
 8001064:	409a      	lsls	r2, r3
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d018      	beq.n	80010aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d108      	bne.n	8001098 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d024      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	4798      	blx	r3
 8001096:	e01f      	b.n	80010d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109c:	2b00      	cmp	r3, #0
 800109e:	d01b      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3
 80010a8:	e016      	b.n	80010d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f022 0208 	bic.w	r2, r2, #8
 80010c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010dc:	2220      	movs	r2, #32
 80010de:	409a      	lsls	r2, r3
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4013      	ands	r3, r2
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 808f 	beq.w	8001208 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0310 	and.w	r3, r3, #16
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 8087 	beq.w	8001208 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010fe:	2220      	movs	r2, #32
 8001100:	409a      	lsls	r2, r3
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b05      	cmp	r3, #5
 8001110:	d136      	bne.n	8001180 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f022 0216 	bic.w	r2, r2, #22
 8001120:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	695a      	ldr	r2, [r3, #20]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001130:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	2b00      	cmp	r3, #0
 8001138:	d103      	bne.n	8001142 <HAL_DMA_IRQHandler+0x1da>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800113e:	2b00      	cmp	r3, #0
 8001140:	d007      	beq.n	8001152 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 0208 	bic.w	r2, r2, #8
 8001150:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001156:	223f      	movs	r2, #63	@ 0x3f
 8001158:	409a      	lsls	r2, r3
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001172:	2b00      	cmp	r3, #0
 8001174:	d07e      	beq.n	8001274 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	4798      	blx	r3
        }
        return;
 800117e:	e079      	b.n	8001274 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d01d      	beq.n	80011ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10d      	bne.n	80011b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d031      	beq.n	8001208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	4798      	blx	r3
 80011ac:	e02c      	b.n	8001208 <HAL_DMA_IRQHandler+0x2a0>
 80011ae:	bf00      	nop
 80011b0:	20000004 	.word	0x20000004
 80011b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d023      	beq.n	8001208 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	4798      	blx	r3
 80011c8:	e01e      	b.n	8001208 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10f      	bne.n	80011f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0210 	bic.w	r2, r2, #16
 80011e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800120c:	2b00      	cmp	r3, #0
 800120e:	d032      	beq.n	8001276 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d022      	beq.n	8001262 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2205      	movs	r2, #5
 8001220:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 0201 	bic.w	r2, r2, #1
 8001232:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	3301      	adds	r3, #1
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	429a      	cmp	r2, r3
 800123e:	d307      	bcc.n	8001250 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f2      	bne.n	8001234 <HAL_DMA_IRQHandler+0x2cc>
 800124e:	e000      	b.n	8001252 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001250:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	4798      	blx	r3
 8001272:	e000      	b.n	8001276 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001274:	bf00      	nop
    }
  }
}
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	460b      	mov	r3, r1
 8001286:	607a      	str	r2, [r7, #4]
 8001288:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_DMA_RegisterCallback+0x20>
 8001298:	2302      	movs	r3, #2
 800129a:	e03d      	b.n	8001318 <HAL_DMA_RegisterCallback+0x9c>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d12c      	bne.n	800130a <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 80012b0:	7afb      	ldrb	r3, [r7, #11]
 80012b2:	2b05      	cmp	r3, #5
 80012b4:	d826      	bhi.n	8001304 <HAL_DMA_RegisterCallback+0x88>
 80012b6:	a201      	add	r2, pc, #4	@ (adr r2, 80012bc <HAL_DMA_RegisterCallback+0x40>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012dd 	.word	0x080012dd
 80012c4:	080012e5 	.word	0x080012e5
 80012c8:	080012ed 	.word	0x080012ed
 80012cc:	080012f5 	.word	0x080012f5
 80012d0:	080012fd 	.word	0x080012fd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 80012da:	e018      	b.n	800130e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80012e2:	e014      	b.n	800130e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 80012ea:	e010      	b.n	800130e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 80012f2:	e00c      	b.n	800130e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 80012fa:	e008      	b.n	800130e <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8001302:	e004      	b.n	800130e <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	75fb      	strb	r3, [r7, #23]
      break;
 8001308:	e001      	b.n	800130e <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 8001316:	7dfb      	ldrb	r3, [r7, #23]
}
 8001318:	4618      	mov	r0, r3
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001340:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b40      	cmp	r3, #64	@ 0x40
 8001350:	d108      	bne.n	8001364 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001362:	e007      	b.n	8001374 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	60da      	str	r2, [r3, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	3b10      	subs	r3, #16
 8001390:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <DMA_CalcBaseAndBitshift+0x64>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800139a:	4a13      	ldr	r2, [pc, #76]	@ (80013e8 <DMA_CalcBaseAndBitshift+0x68>)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d909      	bls.n	80013c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013b6:	f023 0303 	bic.w	r3, r3, #3
 80013ba:	1d1a      	adds	r2, r3, #4
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	659a      	str	r2, [r3, #88]	@ 0x58
 80013c0:	e007      	b.n	80013d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013ca:	f023 0303 	bic.w	r3, r3, #3
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	aaaaaaab 	.word	0xaaaaaaab
 80013e8:	08002a20 	.word	0x08002a20

080013ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b085      	sub	sp, #20
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d11f      	bne.n	8001446 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d856      	bhi.n	80014ba <DMA_CheckFifoParam+0xce>
 800140c:	a201      	add	r2, pc, #4	@ (adr r2, 8001414 <DMA_CheckFifoParam+0x28>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	08001437 	.word	0x08001437
 800141c:	08001425 	.word	0x08001425
 8001420:	080014bb 	.word	0x080014bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001428:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d046      	beq.n	80014be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001434:	e043      	b.n	80014be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800143e:	d140      	bne.n	80014c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001444:	e03d      	b.n	80014c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	699b      	ldr	r3, [r3, #24]
 800144a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800144e:	d121      	bne.n	8001494 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	2b03      	cmp	r3, #3
 8001454:	d837      	bhi.n	80014c6 <DMA_CheckFifoParam+0xda>
 8001456:	a201      	add	r2, pc, #4	@ (adr r2, 800145c <DMA_CheckFifoParam+0x70>)
 8001458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145c:	0800146d 	.word	0x0800146d
 8001460:	08001473 	.word	0x08001473
 8001464:	0800146d 	.word	0x0800146d
 8001468:	08001485 	.word	0x08001485
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
      break;
 8001470:	e030      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d025      	beq.n	80014ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001482:	e022      	b.n	80014ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001488:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800148c:	d11f      	bne.n	80014ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001492:	e01c      	b.n	80014ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d903      	bls.n	80014a2 <DMA_CheckFifoParam+0xb6>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b03      	cmp	r3, #3
 800149e:	d003      	beq.n	80014a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014a0:	e018      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
      break;
 80014a6:	e015      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00e      	beq.n	80014d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
      break;
 80014b8:	e00b      	b.n	80014d2 <DMA_CheckFifoParam+0xe6>
      break;
 80014ba:	bf00      	nop
 80014bc:	e00a      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      break;
 80014be:	bf00      	nop
 80014c0:	e008      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      break;
 80014c2:	bf00      	nop
 80014c4:	e006      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      break;
 80014c6:	bf00      	nop
 80014c8:	e004      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      break;
 80014ca:	bf00      	nop
 80014cc:	e002      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80014ce:	bf00      	nop
 80014d0:	e000      	b.n	80014d4 <DMA_CheckFifoParam+0xe8>
      break;
 80014d2:	bf00      	nop
    }
  } 
  
  return status; 
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop

080014e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b089      	sub	sp, #36	@ 0x24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	61fb      	str	r3, [r7, #28]
 80014fe:	e165      	b.n	80017cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001500:	2201      	movs	r2, #1
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	697a      	ldr	r2, [r7, #20]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	429a      	cmp	r2, r3
 800151a:	f040 8154 	bne.w	80017c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d005      	beq.n	8001536 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001532:	2b02      	cmp	r3, #2
 8001534:	d130      	bne.n	8001598 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	2203      	movs	r2, #3
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68da      	ldr	r2, [r3, #12]
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800156c:	2201      	movs	r2, #1
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	091b      	lsrs	r3, r3, #4
 8001582:	f003 0201 	and.w	r2, r3, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d017      	beq.n	80015d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	2203      	movs	r2, #3
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d123      	bne.n	8001628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	08da      	lsrs	r2, r3, #3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3208      	adds	r2, #8
 80015e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4313      	orrs	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	69b9      	ldr	r1, [r7, #24]
 8001624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	2203      	movs	r2, #3
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 0203 	and.w	r2, r3, #3
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 80ae 	beq.w	80017c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b5d      	ldr	r3, [pc, #372]	@ (80017e4 <HAL_GPIO_Init+0x300>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a5c      	ldr	r2, [pc, #368]	@ (80017e4 <HAL_GPIO_Init+0x300>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b5a      	ldr	r3, [pc, #360]	@ (80017e4 <HAL_GPIO_Init+0x300>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001686:	4a58      	ldr	r2, [pc, #352]	@ (80017e8 <HAL_GPIO_Init+0x304>)
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	220f      	movs	r2, #15
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4a4f      	ldr	r2, [pc, #316]	@ (80017ec <HAL_GPIO_Init+0x308>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d025      	beq.n	80016fe <HAL_GPIO_Init+0x21a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a4e      	ldr	r2, [pc, #312]	@ (80017f0 <HAL_GPIO_Init+0x30c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d01f      	beq.n	80016fa <HAL_GPIO_Init+0x216>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4d      	ldr	r2, [pc, #308]	@ (80017f4 <HAL_GPIO_Init+0x310>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d019      	beq.n	80016f6 <HAL_GPIO_Init+0x212>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4c      	ldr	r2, [pc, #304]	@ (80017f8 <HAL_GPIO_Init+0x314>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4b      	ldr	r2, [pc, #300]	@ (80017fc <HAL_GPIO_Init+0x318>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00d      	beq.n	80016ee <HAL_GPIO_Init+0x20a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001800 <HAL_GPIO_Init+0x31c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d007      	beq.n	80016ea <HAL_GPIO_Init+0x206>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a49      	ldr	r2, [pc, #292]	@ (8001804 <HAL_GPIO_Init+0x320>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_GPIO_Init+0x202>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e00c      	b.n	8001700 <HAL_GPIO_Init+0x21c>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e00a      	b.n	8001700 <HAL_GPIO_Init+0x21c>
 80016ea:	2305      	movs	r3, #5
 80016ec:	e008      	b.n	8001700 <HAL_GPIO_Init+0x21c>
 80016ee:	2304      	movs	r3, #4
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x21c>
 80016f2:	2303      	movs	r3, #3
 80016f4:	e004      	b.n	8001700 <HAL_GPIO_Init+0x21c>
 80016f6:	2302      	movs	r3, #2
 80016f8:	e002      	b.n	8001700 <HAL_GPIO_Init+0x21c>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_GPIO_Init+0x21c>
 80016fe:	2300      	movs	r3, #0
 8001700:	69fa      	ldr	r2, [r7, #28]
 8001702:	f002 0203 	and.w	r2, r2, #3
 8001706:	0092      	lsls	r2, r2, #2
 8001708:	4093      	lsls	r3, r2
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4313      	orrs	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001710:	4935      	ldr	r1, [pc, #212]	@ (80017e8 <HAL_GPIO_Init+0x304>)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	089b      	lsrs	r3, r3, #2
 8001716:	3302      	adds	r3, #2
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800171e:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <HAL_GPIO_Init+0x324>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001742:	4a31      	ldr	r2, [pc, #196]	@ (8001808 <HAL_GPIO_Init+0x324>)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001748:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <HAL_GPIO_Init+0x324>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800176c:	4a26      	ldr	r2, [pc, #152]	@ (8001808 <HAL_GPIO_Init+0x324>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_GPIO_Init+0x324>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <HAL_GPIO_Init+0x324>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800179c:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <HAL_GPIO_Init+0x324>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017c0:	4a11      	ldr	r2, [pc, #68]	@ (8001808 <HAL_GPIO_Init+0x324>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3301      	adds	r3, #1
 80017ca:	61fb      	str	r3, [r7, #28]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	2b0f      	cmp	r3, #15
 80017d0:	f67f ae96 	bls.w	8001500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3724      	adds	r7, #36	@ 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	40013800 	.word	0x40013800
 80017ec:	40020000 	.word	0x40020000
 80017f0:	40020400 	.word	0x40020400
 80017f4:	40020800 	.word	0x40020800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40021400 	.word	0x40021400
 8001804:	40021800 	.word	0x40021800
 8001808:	40013c00 	.word	0x40013c00

0800180c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	460b      	mov	r3, r1
 8001816:	807b      	strh	r3, [r7, #2]
 8001818:	4613      	mov	r3, r2
 800181a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800181c:	787b      	ldrb	r3, [r7, #1]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001822:	887a      	ldrh	r2, [r7, #2]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001828:	e003      	b.n	8001832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800182a:	887b      	ldrh	r3, [r7, #2]
 800182c:	041a      	lsls	r2, r3, #16
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	619a      	str	r2, [r3, #24]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d101      	bne.n	8001854 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e0cc      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001854:	4b68      	ldr	r3, [pc, #416]	@ (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d90c      	bls.n	800187c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b65      	ldr	r3, [pc, #404]	@ (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e0b8      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001894:	4b59      	ldr	r3, [pc, #356]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	4a58      	ldr	r2, [pc, #352]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800189e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018ac:	4b53      	ldr	r3, [pc, #332]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	4a52      	ldr	r2, [pc, #328]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018b8:	4b50      	ldr	r3, [pc, #320]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	494d      	ldr	r1, [pc, #308]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d044      	beq.n	8001960 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d107      	bne.n	80018ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b47      	ldr	r3, [pc, #284]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d119      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e07f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d003      	beq.n	80018fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d107      	bne.n	800190e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018fe:	4b3f      	ldr	r3, [pc, #252]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e06f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190e:	4b3b      	ldr	r3, [pc, #236]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e067      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800191e:	4b37      	ldr	r3, [pc, #220]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f023 0203 	bic.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4934      	ldr	r1, [pc, #208]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001930:	f7ff f8f6 	bl	8000b20 <HAL_GetTick>
 8001934:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	e00a      	b.n	800194e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001938:	f7ff f8f2 	bl	8000b20 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e04f      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194e:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 020c 	and.w	r2, r3, #12
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	429a      	cmp	r2, r3
 800195e:	d1eb      	bne.n	8001938 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001960:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d20c      	bcs.n	8001988 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e032      	b.n	80019ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0304 	and.w	r3, r3, #4
 8001990:	2b00      	cmp	r3, #0
 8001992:	d008      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001994:	4b19      	ldr	r3, [pc, #100]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	4916      	ldr	r1, [pc, #88]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b2:	4b12      	ldr	r3, [pc, #72]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	490e      	ldr	r1, [pc, #56]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019c6:	f000 f855 	bl	8001a74 <HAL_RCC_GetSysClockFreq>
 80019ca:	4602      	mov	r2, r0
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	490a      	ldr	r1, [pc, #40]	@ (8001a00 <HAL_RCC_ClockConfig+0x1c0>)
 80019d8:	5ccb      	ldrb	r3, [r1, r3]
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	4a09      	ldr	r2, [pc, #36]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff f856 	bl	8000a98 <HAL_InitTick>

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00
 80019fc:	40023800 	.word	0x40023800
 8001a00:	08002a08 	.word	0x08002a08
 8001a04:	20000004 	.word	0x20000004
 8001a08:	20000008 	.word	0x20000008

08001a0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a28:	f7ff fff0 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	0a9b      	lsrs	r3, r3, #10
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	4903      	ldr	r1, [pc, #12]	@ (8001a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3a:	5ccb      	ldrb	r3, [r1, r3]
 8001a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40023800 	.word	0x40023800
 8001a48:	08002a18 	.word	0x08002a18

08001a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a50:	f7ff ffdc 	bl	8001a0c <HAL_RCC_GetHCLKFreq>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	0b5b      	lsrs	r3, r3, #13
 8001a5c:	f003 0307 	and.w	r3, r3, #7
 8001a60:	4903      	ldr	r1, [pc, #12]	@ (8001a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a62:	5ccb      	ldrb	r3, [r1, r3]
 8001a64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	08002a18 	.word	0x08002a18

08001a74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a78:	b0ae      	sub	sp, #184	@ 0xb8
 8001a7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a9a:	4bcb      	ldr	r3, [pc, #812]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b0c      	cmp	r3, #12
 8001aa4:	f200 8206 	bhi.w	8001eb4 <HAL_RCC_GetSysClockFreq+0x440>
 8001aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ab0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aae:	bf00      	nop
 8001ab0:	08001ae5 	.word	0x08001ae5
 8001ab4:	08001eb5 	.word	0x08001eb5
 8001ab8:	08001eb5 	.word	0x08001eb5
 8001abc:	08001eb5 	.word	0x08001eb5
 8001ac0:	08001aed 	.word	0x08001aed
 8001ac4:	08001eb5 	.word	0x08001eb5
 8001ac8:	08001eb5 	.word	0x08001eb5
 8001acc:	08001eb5 	.word	0x08001eb5
 8001ad0:	08001af5 	.word	0x08001af5
 8001ad4:	08001eb5 	.word	0x08001eb5
 8001ad8:	08001eb5 	.word	0x08001eb5
 8001adc:	08001eb5 	.word	0x08001eb5
 8001ae0:	08001ce5 	.word	0x08001ce5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4bb9      	ldr	r3, [pc, #740]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x358>)
 8001ae6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001aea:	e1e7      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aec:	4bb8      	ldr	r3, [pc, #736]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001af2:	e1e3      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af4:	4bb4      	ldr	r3, [pc, #720]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001afc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b00:	4bb1      	ldr	r3, [pc, #708]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d071      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	4bae      	ldr	r3, [pc, #696]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	099b      	lsrs	r3, r3, #6
 8001b12:	2200      	movs	r2, #0
 8001b14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b18:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001b2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b32:	4622      	mov	r2, r4
 8001b34:	462b      	mov	r3, r5
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	f04f 0100 	mov.w	r1, #0
 8001b3e:	0159      	lsls	r1, r3, #5
 8001b40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b44:	0150      	lsls	r0, r2, #5
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	1a51      	subs	r1, r2, r1
 8001b4e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001b50:	4629      	mov	r1, r5
 8001b52:	eb63 0301 	sbc.w	r3, r3, r1
 8001b56:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001b64:	4649      	mov	r1, r9
 8001b66:	018b      	lsls	r3, r1, #6
 8001b68:	4641      	mov	r1, r8
 8001b6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b6e:	4641      	mov	r1, r8
 8001b70:	018a      	lsls	r2, r1, #6
 8001b72:	4641      	mov	r1, r8
 8001b74:	1a51      	subs	r1, r2, r1
 8001b76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001b78:	4649      	mov	r1, r9
 8001b7a:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001b8c:	4649      	mov	r1, r9
 8001b8e:	00cb      	lsls	r3, r1, #3
 8001b90:	4641      	mov	r1, r8
 8001b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001b96:	4641      	mov	r1, r8
 8001b98:	00ca      	lsls	r2, r1, #3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	189b      	adds	r3, r3, r2
 8001ba4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ba6:	462b      	mov	r3, r5
 8001ba8:	460a      	mov	r2, r1
 8001baa:	eb42 0303 	adc.w	r3, r2, r3
 8001bae:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	024b      	lsls	r3, r1, #9
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bc6:	4621      	mov	r1, r4
 8001bc8:	024a      	lsls	r2, r1, #9
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001bdc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001be0:	f7fe fb10 	bl	8000204 <__aeabi_uldivmod>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4613      	mov	r3, r2
 8001bea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001bee:	e067      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bf0:	4b75      	ldr	r3, [pc, #468]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bfc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001c00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c0e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c12:	4622      	mov	r2, r4
 8001c14:	462b      	mov	r3, r5
 8001c16:	f04f 0000 	mov.w	r0, #0
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	0159      	lsls	r1, r3, #5
 8001c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c24:	0150      	lsls	r0, r2, #5
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	1a51      	subs	r1, r2, r1
 8001c2e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001c30:	4629      	mov	r1, r5
 8001c32:	eb63 0301 	sbc.w	r3, r3, r1
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001c44:	4649      	mov	r1, r9
 8001c46:	018b      	lsls	r3, r1, #6
 8001c48:	4641      	mov	r1, r8
 8001c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c4e:	4641      	mov	r1, r8
 8001c50:	018a      	lsls	r2, r1, #6
 8001c52:	4641      	mov	r1, r8
 8001c54:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c58:	4649      	mov	r1, r9
 8001c5a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001c6a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001c6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001c72:	4692      	mov	sl, r2
 8001c74:	469b      	mov	fp, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	eb1a 0303 	adds.w	r3, sl, r3
 8001c7c:	623b      	str	r3, [r7, #32]
 8001c7e:	462b      	mov	r3, r5
 8001c80:	eb4b 0303 	adc.w	r3, fp, r3
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	f04f 0300 	mov.w	r3, #0
 8001c8e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c92:	4629      	mov	r1, r5
 8001c94:	028b      	lsls	r3, r1, #10
 8001c96:	4621      	mov	r1, r4
 8001c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	028a      	lsls	r2, r1, #10
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ca8:	2200      	movs	r2, #0
 8001caa:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cac:	677a      	str	r2, [r7, #116]	@ 0x74
 8001cae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001cb2:	f7fe faa7 	bl	8000204 <__aeabi_uldivmod>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4613      	mov	r3, r2
 8001cbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cc0:	4b41      	ldr	r3, [pc, #260]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001cd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001ce2:	e0eb      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce4:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf0:	4b35      	ldr	r3, [pc, #212]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d06b      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfc:	4b32      	ldr	r3, [pc, #200]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	2200      	movs	r2, #0
 8001d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d10:	2300      	movs	r3, #0
 8001d12:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001d18:	4622      	mov	r2, r4
 8001d1a:	462b      	mov	r3, r5
 8001d1c:	f04f 0000 	mov.w	r0, #0
 8001d20:	f04f 0100 	mov.w	r1, #0
 8001d24:	0159      	lsls	r1, r3, #5
 8001d26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2a:	0150      	lsls	r0, r2, #5
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	460b      	mov	r3, r1
 8001d30:	4621      	mov	r1, r4
 8001d32:	1a51      	subs	r1, r2, r1
 8001d34:	61b9      	str	r1, [r7, #24]
 8001d36:	4629      	mov	r1, r5
 8001d38:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	f04f 0200 	mov.w	r2, #0
 8001d42:	f04f 0300 	mov.w	r3, #0
 8001d46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001d4a:	4659      	mov	r1, fp
 8001d4c:	018b      	lsls	r3, r1, #6
 8001d4e:	4651      	mov	r1, sl
 8001d50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d54:	4651      	mov	r1, sl
 8001d56:	018a      	lsls	r2, r1, #6
 8001d58:	4651      	mov	r1, sl
 8001d5a:	ebb2 0801 	subs.w	r8, r2, r1
 8001d5e:	4659      	mov	r1, fp
 8001d60:	eb63 0901 	sbc.w	r9, r3, r1
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	f04f 0300 	mov.w	r3, #0
 8001d6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d78:	4690      	mov	r8, r2
 8001d7a:	4699      	mov	r9, r3
 8001d7c:	4623      	mov	r3, r4
 8001d7e:	eb18 0303 	adds.w	r3, r8, r3
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	462b      	mov	r3, r5
 8001d86:	eb49 0303 	adc.w	r3, r9, r3
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	f04f 0200 	mov.w	r2, #0
 8001d90:	f04f 0300 	mov.w	r3, #0
 8001d94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001d98:	4629      	mov	r1, r5
 8001d9a:	024b      	lsls	r3, r1, #9
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da2:	4621      	mov	r1, r4
 8001da4:	024a      	lsls	r2, r1, #9
 8001da6:	4610      	mov	r0, r2
 8001da8:	4619      	mov	r1, r3
 8001daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dae:	2200      	movs	r2, #0
 8001db0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001db2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001db4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001db8:	f7fe fa24 	bl	8000204 <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001dc6:	e065      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x420>
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x458>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	099b      	lsrs	r3, r3, #6
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4611      	mov	r1, r2
 8001de0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001de4:	653b      	str	r3, [r7, #80]	@ 0x50
 8001de6:	2300      	movs	r3, #0
 8001de8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001dee:	4642      	mov	r2, r8
 8001df0:	464b      	mov	r3, r9
 8001df2:	f04f 0000 	mov.w	r0, #0
 8001df6:	f04f 0100 	mov.w	r1, #0
 8001dfa:	0159      	lsls	r1, r3, #5
 8001dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e00:	0150      	lsls	r0, r2, #5
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4641      	mov	r1, r8
 8001e08:	1a51      	subs	r1, r2, r1
 8001e0a:	60b9      	str	r1, [r7, #8]
 8001e0c:	4649      	mov	r1, r9
 8001e0e:	eb63 0301 	sbc.w	r3, r3, r1
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001e20:	4659      	mov	r1, fp
 8001e22:	018b      	lsls	r3, r1, #6
 8001e24:	4651      	mov	r1, sl
 8001e26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e2a:	4651      	mov	r1, sl
 8001e2c:	018a      	lsls	r2, r1, #6
 8001e2e:	4651      	mov	r1, sl
 8001e30:	1a54      	subs	r4, r2, r1
 8001e32:	4659      	mov	r1, fp
 8001e34:	eb63 0501 	sbc.w	r5, r3, r1
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	f04f 0300 	mov.w	r3, #0
 8001e40:	00eb      	lsls	r3, r5, #3
 8001e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e46:	00e2      	lsls	r2, r4, #3
 8001e48:	4614      	mov	r4, r2
 8001e4a:	461d      	mov	r5, r3
 8001e4c:	4643      	mov	r3, r8
 8001e4e:	18e3      	adds	r3, r4, r3
 8001e50:	603b      	str	r3, [r7, #0]
 8001e52:	464b      	mov	r3, r9
 8001e54:	eb45 0303 	adc.w	r3, r5, r3
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e66:	4629      	mov	r1, r5
 8001e68:	028b      	lsls	r3, r1, #10
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e70:	4621      	mov	r1, r4
 8001e72:	028a      	lsls	r2, r1, #10
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e80:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e86:	f7fe f9bd 	bl	8000204 <__aeabi_uldivmod>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4613      	mov	r3, r2
 8001e90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x458>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	0f1b      	lsrs	r3, r3, #28
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001ea2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ea6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eb2:	e003      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001eb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001eba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ebc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	37b8      	adds	r7, #184	@ 0xb8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	00f42400 	.word	0x00f42400

08001ed4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e28d      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 8083 	beq.w	8001ffa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ef4:	4b94      	ldr	r3, [pc, #592]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d019      	beq.n	8001f34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f00:	4b91      	ldr	r3, [pc, #580]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f0c:	4b8e      	ldr	r3, [pc, #568]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f18:	d00c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1a:	4b8b      	ldr	r3, [pc, #556]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001f22:	2b0c      	cmp	r3, #12
 8001f24:	d112      	bne.n	8001f4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f32:	d10b      	bne.n	8001f4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f34:	4b84      	ldr	r3, [pc, #528]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d05b      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x124>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d157      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e25a      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f54:	d106      	bne.n	8001f64 <HAL_RCC_OscConfig+0x90>
 8001f56:	4b7c      	ldr	r3, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a7b      	ldr	r2, [pc, #492]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e01d      	b.n	8001fa0 <HAL_RCC_OscConfig+0xcc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f6c:	d10c      	bne.n	8001f88 <HAL_RCC_OscConfig+0xb4>
 8001f6e:	4b76      	ldr	r3, [pc, #472]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a75      	ldr	r2, [pc, #468]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	4b73      	ldr	r3, [pc, #460]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a72      	ldr	r2, [pc, #456]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f84:	6013      	str	r3, [r2, #0]
 8001f86:	e00b      	b.n	8001fa0 <HAL_RCC_OscConfig+0xcc>
 8001f88:	4b6f      	ldr	r3, [pc, #444]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f92:	6013      	str	r3, [r2, #0]
 8001f94:	4b6c      	ldr	r3, [pc, #432]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a6b      	ldr	r2, [pc, #428]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d013      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa8:	f7fe fdba 	bl	8000b20 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb0:	f7fe fdb6 	bl	8000b20 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	@ 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e21f      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b61      	ldr	r3, [pc, #388]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xdc>
 8001fce:	e014      	b.n	8001ffa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fda6 	bl	8000b20 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7fe fda2 	bl	8000b20 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	@ 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e20b      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	4b57      	ldr	r3, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x104>
 8001ff6:	e000      	b.n	8001ffa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b00      	cmp	r3, #0
 8002004:	d06f      	beq.n	80020e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002006:	4b50      	ldr	r3, [pc, #320]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b00      	cmp	r3, #0
 8002010:	d017      	beq.n	8002042 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002012:	4b4d      	ldr	r3, [pc, #308]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
        || \
 800201a:	2b08      	cmp	r3, #8
 800201c:	d105      	bne.n	800202a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800201e:	4b4a      	ldr	r3, [pc, #296]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00b      	beq.n	8002042 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800202a:	4b47      	ldr	r3, [pc, #284]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002032:	2b0c      	cmp	r3, #12
 8002034:	d11c      	bne.n	8002070 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002036:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b41      	ldr	r3, [pc, #260]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d005      	beq.n	800205a <HAL_RCC_OscConfig+0x186>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d001      	beq.n	800205a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e1d3      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b3b      	ldr	r3, [pc, #236]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4937      	ldr	r1, [pc, #220]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e03a      	b.n	80020e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d020      	beq.n	80020ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b34      	ldr	r3, [pc, #208]	@ (800214c <HAL_RCC_OscConfig+0x278>)
 800207a:	2201      	movs	r2, #1
 800207c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207e:	f7fe fd4f 	bl	8000b20 <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002086:	f7fe fd4b 	bl	8000b20 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e1b4      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002098:	4b2b      	ldr	r3, [pc, #172]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4925      	ldr	r1, [pc, #148]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
 80020b8:	e015      	b.n	80020e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ba:	4b24      	ldr	r3, [pc, #144]	@ (800214c <HAL_RCC_OscConfig+0x278>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe fd2e 	bl	8000b20 <HAL_GetTick>
 80020c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c8:	f7fe fd2a 	bl	8000b20 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e193      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020da:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f0      	bne.n	80020c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d036      	beq.n	8002160 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d016      	beq.n	8002128 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002100:	f7fe fd0e 	bl	8000b20 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe fd0a 	bl	8000b20 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e173      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_RCC_OscConfig+0x274>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x234>
 8002126:	e01b      	b.n	8002160 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002128:	4b09      	ldr	r3, [pc, #36]	@ (8002150 <HAL_RCC_OscConfig+0x27c>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe fcf7 	bl	8000b20 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	e00e      	b.n	8002154 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7fe fcf3 	bl	8000b20 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d907      	bls.n	8002154 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e15c      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
 8002148:	40023800 	.word	0x40023800
 800214c:	42470000 	.word	0x42470000
 8002150:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002154:	4b8a      	ldr	r3, [pc, #552]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ea      	bne.n	8002136 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0304 	and.w	r3, r3, #4
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 8097 	beq.w	800229c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002172:	4b83      	ldr	r3, [pc, #524]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d10f      	bne.n	800219e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b7f      	ldr	r3, [pc, #508]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a7e      	ldr	r2, [pc, #504]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b7c      	ldr	r3, [pc, #496]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b79      	ldr	r3, [pc, #484]	@ (8002384 <HAL_RCC_OscConfig+0x4b0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b76      	ldr	r3, [pc, #472]	@ (8002384 <HAL_RCC_OscConfig+0x4b0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a75      	ldr	r2, [pc, #468]	@ (8002384 <HAL_RCC_OscConfig+0x4b0>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fcb3 	bl	8000b20 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe fcaf 	bl	8000b20 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e118      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b6c      	ldr	r3, [pc, #432]	@ (8002384 <HAL_RCC_OscConfig+0x4b0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x31e>
 80021e4:	4b66      	ldr	r3, [pc, #408]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e8:	4a65      	ldr	r2, [pc, #404]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f0:	e01c      	b.n	800222c <HAL_RCC_OscConfig+0x358>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b05      	cmp	r3, #5
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x340>
 80021fa:	4b61      	ldr	r3, [pc, #388]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	4a60      	ldr	r2, [pc, #384]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	6713      	str	r3, [r2, #112]	@ 0x70
 8002206:	4b5e      	ldr	r3, [pc, #376]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a5d      	ldr	r2, [pc, #372]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
 8002212:	e00b      	b.n	800222c <HAL_RCC_OscConfig+0x358>
 8002214:	4b5a      	ldr	r3, [pc, #360]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002218:	4a59      	ldr	r2, [pc, #356]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002220:	4b57      	ldr	r3, [pc, #348]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002224:	4a56      	ldr	r2, [pc, #344]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002226:	f023 0304 	bic.w	r3, r3, #4
 800222a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d015      	beq.n	8002260 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fc74 	bl	8000b20 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223a:	e00a      	b.n	8002252 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fc70 	bl	8000b20 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e0d7      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002252:	4b4b      	ldr	r3, [pc, #300]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0ee      	beq.n	800223c <HAL_RCC_OscConfig+0x368>
 800225e:	e014      	b.n	800228a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7fe fc5e 	bl	8000b20 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7fe fc5a 	bl	8000b20 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e0c1      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	4b40      	ldr	r3, [pc, #256]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1ee      	bne.n	8002268 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800228a:	7dfb      	ldrb	r3, [r7, #23]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002290:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002294:	4a3a      	ldr	r2, [pc, #232]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002296:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800229a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 80ad 	beq.w	8002400 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a6:	4b36      	ldr	r3, [pc, #216]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 030c 	and.w	r3, r3, #12
 80022ae:	2b08      	cmp	r3, #8
 80022b0:	d060      	beq.n	8002374 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d145      	bne.n	8002346 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	4b33      	ldr	r3, [pc, #204]	@ (8002388 <HAL_RCC_OscConfig+0x4b4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fc2e 	bl	8000b20 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fc2a 	bl	8000b20 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e093      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b29      	ldr	r3, [pc, #164]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f4:	019b      	lsls	r3, r3, #6
 80022f6:	431a      	orrs	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022fc:	085b      	lsrs	r3, r3, #1
 80022fe:	3b01      	subs	r3, #1
 8002300:	041b      	lsls	r3, r3, #16
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002308:	061b      	lsls	r3, r3, #24
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	071b      	lsls	r3, r3, #28
 8002312:	491b      	ldr	r1, [pc, #108]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <HAL_RCC_OscConfig+0x4b4>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231e:	f7fe fbff 	bl	8000b20 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002326:	f7fe fbfb 	bl	8000b20 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e064      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x452>
 8002344:	e05c      	b.n	8002400 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002346:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <HAL_RCC_OscConfig+0x4b4>)
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fbe8 	bl	8000b20 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fbe4 	bl	8000b20 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e04d      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002366:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_RCC_OscConfig+0x4ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1f0      	bne.n	8002354 <HAL_RCC_OscConfig+0x480>
 8002372:	e045      	b.n	8002400 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d107      	bne.n	800238c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e040      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000
 8002388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800238c:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <HAL_RCC_OscConfig+0x538>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d030      	beq.n	80023fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d129      	bne.n	80023fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d122      	bne.n	80023fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d119      	bne.n	80023fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d2:	085b      	lsrs	r3, r3, #1
 80023d4:	3b01      	subs	r3, #1
 80023d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d8:	429a      	cmp	r2, r3
 80023da:	d10f      	bne.n	80023fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d107      	bne.n	80023fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e000      	b.n	8002402 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	40023800 	.word	0x40023800

08002410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e042      	b.n	80024a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7fe fa4e 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2224      	movs	r2, #36	@ 0x24
 8002440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f82b 	bl	80024b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	695a      	ldr	r2, [r3, #20]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b4:	b0c0      	sub	sp, #256	@ 0x100
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024cc:	68d9      	ldr	r1, [r3, #12]
 80024ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	ea40 0301 	orr.w	r3, r0, r1
 80024d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002508:	f021 010c 	bic.w	r1, r1, #12
 800250c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002516:	430b      	orrs	r3, r1
 8002518:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800251a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800252a:	6999      	ldr	r1, [r3, #24]
 800252c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	ea40 0301 	orr.w	r3, r0, r1
 8002536:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	4b8f      	ldr	r3, [pc, #572]	@ (800277c <UART_SetConfig+0x2cc>)
 8002540:	429a      	cmp	r2, r3
 8002542:	d005      	beq.n	8002550 <UART_SetConfig+0xa0>
 8002544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4b8d      	ldr	r3, [pc, #564]	@ (8002780 <UART_SetConfig+0x2d0>)
 800254c:	429a      	cmp	r2, r3
 800254e:	d104      	bne.n	800255a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002550:	f7ff fa7c 	bl	8001a4c <HAL_RCC_GetPCLK2Freq>
 8002554:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002558:	e003      	b.n	8002562 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800255a:	f7ff fa63 	bl	8001a24 <HAL_RCC_GetPCLK1Freq>
 800255e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800256c:	f040 810c 	bne.w	8002788 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002574:	2200      	movs	r2, #0
 8002576:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800257a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800257e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002582:	4622      	mov	r2, r4
 8002584:	462b      	mov	r3, r5
 8002586:	1891      	adds	r1, r2, r2
 8002588:	65b9      	str	r1, [r7, #88]	@ 0x58
 800258a:	415b      	adcs	r3, r3
 800258c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800258e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002592:	4621      	mov	r1, r4
 8002594:	eb12 0801 	adds.w	r8, r2, r1
 8002598:	4629      	mov	r1, r5
 800259a:	eb43 0901 	adc.w	r9, r3, r1
 800259e:	f04f 0200 	mov.w	r2, #0
 80025a2:	f04f 0300 	mov.w	r3, #0
 80025a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025b2:	4690      	mov	r8, r2
 80025b4:	4699      	mov	r9, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	eb18 0303 	adds.w	r3, r8, r3
 80025bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025c0:	462b      	mov	r3, r5
 80025c2:	eb49 0303 	adc.w	r3, r9, r3
 80025c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025de:	460b      	mov	r3, r1
 80025e0:	18db      	adds	r3, r3, r3
 80025e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80025e4:	4613      	mov	r3, r2
 80025e6:	eb42 0303 	adc.w	r3, r2, r3
 80025ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80025ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025f4:	f7fd fe06 	bl	8000204 <__aeabi_uldivmod>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4b61      	ldr	r3, [pc, #388]	@ (8002784 <UART_SetConfig+0x2d4>)
 80025fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	011c      	lsls	r4, r3, #4
 8002606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800260a:	2200      	movs	r2, #0
 800260c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002610:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002614:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002618:	4642      	mov	r2, r8
 800261a:	464b      	mov	r3, r9
 800261c:	1891      	adds	r1, r2, r2
 800261e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002620:	415b      	adcs	r3, r3
 8002622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002624:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002628:	4641      	mov	r1, r8
 800262a:	eb12 0a01 	adds.w	sl, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb43 0b01 	adc.w	fp, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002640:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002644:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002648:	4692      	mov	sl, r2
 800264a:	469b      	mov	fp, r3
 800264c:	4643      	mov	r3, r8
 800264e:	eb1a 0303 	adds.w	r3, sl, r3
 8002652:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002656:	464b      	mov	r3, r9
 8002658:	eb4b 0303 	adc.w	r3, fp, r3
 800265c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800266c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002670:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002674:	460b      	mov	r3, r1
 8002676:	18db      	adds	r3, r3, r3
 8002678:	643b      	str	r3, [r7, #64]	@ 0x40
 800267a:	4613      	mov	r3, r2
 800267c:	eb42 0303 	adc.w	r3, r2, r3
 8002680:	647b      	str	r3, [r7, #68]	@ 0x44
 8002682:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002686:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800268a:	f7fd fdbb 	bl	8000204 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4611      	mov	r1, r2
 8002694:	4b3b      	ldr	r3, [pc, #236]	@ (8002784 <UART_SetConfig+0x2d4>)
 8002696:	fba3 2301 	umull	r2, r3, r3, r1
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	2264      	movs	r2, #100	@ 0x64
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	1acb      	subs	r3, r1, r3
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026aa:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <UART_SetConfig+0x2d4>)
 80026ac:	fba3 2302 	umull	r2, r3, r3, r2
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026b8:	441c      	add	r4, r3
 80026ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026be:	2200      	movs	r2, #0
 80026c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026cc:	4642      	mov	r2, r8
 80026ce:	464b      	mov	r3, r9
 80026d0:	1891      	adds	r1, r2, r2
 80026d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026d4:	415b      	adcs	r3, r3
 80026d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026dc:	4641      	mov	r1, r8
 80026de:	1851      	adds	r1, r2, r1
 80026e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80026e2:	4649      	mov	r1, r9
 80026e4:	414b      	adcs	r3, r1
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80026e8:	f04f 0200 	mov.w	r2, #0
 80026ec:	f04f 0300 	mov.w	r3, #0
 80026f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026f4:	4659      	mov	r1, fp
 80026f6:	00cb      	lsls	r3, r1, #3
 80026f8:	4651      	mov	r1, sl
 80026fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026fe:	4651      	mov	r1, sl
 8002700:	00ca      	lsls	r2, r1, #3
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	4603      	mov	r3, r0
 8002708:	4642      	mov	r2, r8
 800270a:	189b      	adds	r3, r3, r2
 800270c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002710:	464b      	mov	r3, r9
 8002712:	460a      	mov	r2, r1
 8002714:	eb42 0303 	adc.w	r3, r2, r3
 8002718:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800271c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002728:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800272c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002730:	460b      	mov	r3, r1
 8002732:	18db      	adds	r3, r3, r3
 8002734:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002736:	4613      	mov	r3, r2
 8002738:	eb42 0303 	adc.w	r3, r2, r3
 800273c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800273e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002742:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002746:	f7fd fd5d 	bl	8000204 <__aeabi_uldivmod>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <UART_SetConfig+0x2d4>)
 8002750:	fba3 1302 	umull	r1, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	2164      	movs	r1, #100	@ 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	3332      	adds	r3, #50	@ 0x32
 8002762:	4a08      	ldr	r2, [pc, #32]	@ (8002784 <UART_SetConfig+0x2d4>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 0207 	and.w	r2, r3, #7
 800276e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4422      	add	r2, r4
 8002776:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002778:	e106      	b.n	8002988 <UART_SetConfig+0x4d8>
 800277a:	bf00      	nop
 800277c:	40011000 	.word	0x40011000
 8002780:	40011400 	.word	0x40011400
 8002784:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002792:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002796:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800279a:	4642      	mov	r2, r8
 800279c:	464b      	mov	r3, r9
 800279e:	1891      	adds	r1, r2, r2
 80027a0:	6239      	str	r1, [r7, #32]
 80027a2:	415b      	adcs	r3, r3
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027aa:	4641      	mov	r1, r8
 80027ac:	1854      	adds	r4, r2, r1
 80027ae:	4649      	mov	r1, r9
 80027b0:	eb43 0501 	adc.w	r5, r3, r1
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	f04f 0300 	mov.w	r3, #0
 80027bc:	00eb      	lsls	r3, r5, #3
 80027be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027c2:	00e2      	lsls	r2, r4, #3
 80027c4:	4614      	mov	r4, r2
 80027c6:	461d      	mov	r5, r3
 80027c8:	4643      	mov	r3, r8
 80027ca:	18e3      	adds	r3, r4, r3
 80027cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027d0:	464b      	mov	r3, r9
 80027d2:	eb45 0303 	adc.w	r3, r5, r3
 80027d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027ea:	f04f 0200 	mov.w	r2, #0
 80027ee:	f04f 0300 	mov.w	r3, #0
 80027f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027f6:	4629      	mov	r1, r5
 80027f8:	008b      	lsls	r3, r1, #2
 80027fa:	4621      	mov	r1, r4
 80027fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002800:	4621      	mov	r1, r4
 8002802:	008a      	lsls	r2, r1, #2
 8002804:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002808:	f7fd fcfc 	bl	8000204 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4b60      	ldr	r3, [pc, #384]	@ (8002994 <UART_SetConfig+0x4e4>)
 8002812:	fba3 2302 	umull	r2, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	011c      	lsls	r4, r3, #4
 800281a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002824:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002828:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	61b9      	str	r1, [r7, #24]
 8002834:	415b      	adcs	r3, r3
 8002836:	61fb      	str	r3, [r7, #28]
 8002838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800283c:	4641      	mov	r1, r8
 800283e:	1851      	adds	r1, r2, r1
 8002840:	6139      	str	r1, [r7, #16]
 8002842:	4649      	mov	r1, r9
 8002844:	414b      	adcs	r3, r1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002854:	4659      	mov	r1, fp
 8002856:	00cb      	lsls	r3, r1, #3
 8002858:	4651      	mov	r1, sl
 800285a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800285e:	4651      	mov	r1, sl
 8002860:	00ca      	lsls	r2, r1, #3
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	4603      	mov	r3, r0
 8002868:	4642      	mov	r2, r8
 800286a:	189b      	adds	r3, r3, r2
 800286c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002870:	464b      	mov	r3, r9
 8002872:	460a      	mov	r2, r1
 8002874:	eb42 0303 	adc.w	r3, r2, r3
 8002878:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002886:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002894:	4649      	mov	r1, r9
 8002896:	008b      	lsls	r3, r1, #2
 8002898:	4641      	mov	r1, r8
 800289a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800289e:	4641      	mov	r1, r8
 80028a0:	008a      	lsls	r2, r1, #2
 80028a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028a6:	f7fd fcad 	bl	8000204 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	4b38      	ldr	r3, [pc, #224]	@ (8002994 <UART_SetConfig+0x4e4>)
 80028b2:	fba3 2301 	umull	r2, r3, r3, r1
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2264      	movs	r2, #100	@ 0x64
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	1acb      	subs	r3, r1, r3
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	3332      	adds	r3, #50	@ 0x32
 80028c4:	4a33      	ldr	r2, [pc, #204]	@ (8002994 <UART_SetConfig+0x4e4>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d0:	441c      	add	r4, r3
 80028d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d6:	2200      	movs	r2, #0
 80028d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80028da:	677a      	str	r2, [r7, #116]	@ 0x74
 80028dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028e0:	4642      	mov	r2, r8
 80028e2:	464b      	mov	r3, r9
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	415b      	adcs	r3, r3
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f0:	4641      	mov	r1, r8
 80028f2:	1851      	adds	r1, r2, r1
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	4649      	mov	r1, r9
 80028f8:	414b      	adcs	r3, r1
 80028fa:	607b      	str	r3, [r7, #4]
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002908:	4659      	mov	r1, fp
 800290a:	00cb      	lsls	r3, r1, #3
 800290c:	4651      	mov	r1, sl
 800290e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002912:	4651      	mov	r1, sl
 8002914:	00ca      	lsls	r2, r1, #3
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	4603      	mov	r3, r0
 800291c:	4642      	mov	r2, r8
 800291e:	189b      	adds	r3, r3, r2
 8002920:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002922:	464b      	mov	r3, r9
 8002924:	460a      	mov	r2, r1
 8002926:	eb42 0303 	adc.w	r3, r2, r3
 800292a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800292c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	663b      	str	r3, [r7, #96]	@ 0x60
 8002936:	667a      	str	r2, [r7, #100]	@ 0x64
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002944:	4649      	mov	r1, r9
 8002946:	008b      	lsls	r3, r1, #2
 8002948:	4641      	mov	r1, r8
 800294a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800294e:	4641      	mov	r1, r8
 8002950:	008a      	lsls	r2, r1, #2
 8002952:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002956:	f7fd fc55 	bl	8000204 <__aeabi_uldivmod>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <UART_SetConfig+0x4e4>)
 8002960:	fba3 1302 	umull	r1, r3, r3, r2
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	2164      	movs	r1, #100	@ 0x64
 8002968:	fb01 f303 	mul.w	r3, r1, r3
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	3332      	adds	r3, #50	@ 0x32
 8002972:	4a08      	ldr	r2, [pc, #32]	@ (8002994 <UART_SetConfig+0x4e4>)
 8002974:	fba2 2303 	umull	r2, r3, r2, r3
 8002978:	095b      	lsrs	r3, r3, #5
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4422      	add	r2, r4
 8002986:	609a      	str	r2, [r3, #8]
}
 8002988:	bf00      	nop
 800298a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800298e:	46bd      	mov	sp, r7
 8002990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002994:	51eb851f 	.word	0x51eb851f

08002998 <memset>:
 8002998:	4402      	add	r2, r0
 800299a:	4603      	mov	r3, r0
 800299c:	4293      	cmp	r3, r2
 800299e:	d100      	bne.n	80029a2 <memset+0xa>
 80029a0:	4770      	bx	lr
 80029a2:	f803 1b01 	strb.w	r1, [r3], #1
 80029a6:	e7f9      	b.n	800299c <memset+0x4>

080029a8 <__libc_init_array>:
 80029a8:	b570      	push	{r4, r5, r6, lr}
 80029aa:	4d0d      	ldr	r5, [pc, #52]	@ (80029e0 <__libc_init_array+0x38>)
 80029ac:	4c0d      	ldr	r4, [pc, #52]	@ (80029e4 <__libc_init_array+0x3c>)
 80029ae:	1b64      	subs	r4, r4, r5
 80029b0:	10a4      	asrs	r4, r4, #2
 80029b2:	2600      	movs	r6, #0
 80029b4:	42a6      	cmp	r6, r4
 80029b6:	d109      	bne.n	80029cc <__libc_init_array+0x24>
 80029b8:	4d0b      	ldr	r5, [pc, #44]	@ (80029e8 <__libc_init_array+0x40>)
 80029ba:	4c0c      	ldr	r4, [pc, #48]	@ (80029ec <__libc_init_array+0x44>)
 80029bc:	f000 f818 	bl	80029f0 <_init>
 80029c0:	1b64      	subs	r4, r4, r5
 80029c2:	10a4      	asrs	r4, r4, #2
 80029c4:	2600      	movs	r6, #0
 80029c6:	42a6      	cmp	r6, r4
 80029c8:	d105      	bne.n	80029d6 <__libc_init_array+0x2e>
 80029ca:	bd70      	pop	{r4, r5, r6, pc}
 80029cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80029d0:	4798      	blx	r3
 80029d2:	3601      	adds	r6, #1
 80029d4:	e7ee      	b.n	80029b4 <__libc_init_array+0xc>
 80029d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029da:	4798      	blx	r3
 80029dc:	3601      	adds	r6, #1
 80029de:	e7f2      	b.n	80029c6 <__libc_init_array+0x1e>
 80029e0:	08002a30 	.word	0x08002a30
 80029e4:	08002a30 	.word	0x08002a30
 80029e8:	08002a30 	.word	0x08002a30
 80029ec:	08002a34 	.word	0x08002a34

080029f0 <_init>:
 80029f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029f2:	bf00      	nop
 80029f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f6:	bc08      	pop	{r3}
 80029f8:	469e      	mov	lr, r3
 80029fa:	4770      	bx	lr

080029fc <_fini>:
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	bf00      	nop
 8002a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a02:	bc08      	pop	{r3}
 8002a04:	469e      	mov	lr, r3
 8002a06:	4770      	bx	lr
