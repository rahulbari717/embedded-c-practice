
007_PLL_SYSCLK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002df0  08002df0  00003df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e80  08002e80  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e80  08002e80  00003e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e88  08002e88  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e88  08002e88  00003e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e8c  08002e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002e90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002eec  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002eec  00004210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dbf  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001543  00000000  00000000  0000be4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000670  00000000  00000000  0000d390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004e8  00000000  00000000  0000da00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002137d  00000000  00000000  0000dee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008838  00000000  00000000  0002f265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c838c  00000000  00000000  00037a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffe29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e74  00000000  00000000  000ffe6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00101ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002dd8 	.word	0x08002dd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08002dd8 	.word	0x08002dd8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <SysTick_Handler>:
 */
#include "main.h"

extern UART_HandleTypeDef huart2;

void SysTick_Handler(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_IncTick();
 80005f0:	f000 fa6e 	bl	8000ad0 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 80005f4:	f000 fbba 	bl	8000d6c <HAL_SYSTICK_IRQHandler>
}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}

080005fc <Error_handler>:
 */
#include "main.h"

UART_HandleTypeDef huart2;

void Error_handler(void){
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
	while(1);
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <Error_handler+0x4>

08000604 <UART2_Init>:
}

void UART2_Init(){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000608:	4b0f      	ldr	r3, [pc, #60]	@ (8000648 <UART2_Init+0x44>)
 800060a:	4a10      	ldr	r2, [pc, #64]	@ (800064c <UART2_Init+0x48>)
 800060c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800060e:	4b0e      	ldr	r3, [pc, #56]	@ (8000648 <UART2_Init+0x44>)
 8000610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000614:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000616:	4b0c      	ldr	r3, [pc, #48]	@ (8000648 <UART2_Init+0x44>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800061c:	4b0a      	ldr	r3, [pc, #40]	@ (8000648 <UART2_Init+0x44>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <UART2_Init+0x44>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000628:	4b07      	ldr	r3, [pc, #28]	@ (8000648 <UART2_Init+0x44>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <UART2_Init+0x44>)
 8000630:	220c      	movs	r2, #12
 8000632:	615a      	str	r2, [r3, #20]

	if(HAL_UART_Init(&huart2) != HAL_OK){
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <UART2_Init+0x44>)
 8000636:	f001 fb23 	bl	8001c80 <HAL_UART_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <UART2_Init+0x40>
		// there is problem
		Error_handler();
 8000640:	f7ff ffdc 	bl	80005fc <Error_handler>
	}
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000078 	.word	0x20000078
 800064c:	40004400 	.word	0x40004400

08000650 <SystemClock_Config>:

void SystemClock_Config(uint8_t clock_freq){
 8000650:	b580      	push	{r7, lr}
 8000652:	b096      	sub	sp, #88	@ 0x58
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	uint32_t FLatency = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	657b      	str	r3, [r7, #84]	@ 0x54

	osc_init.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	623b      	str	r3, [r7, #32]
	osc_init.HSIState = RCC_HSI_ON;
 8000662:	2301      	movs	r3, #1
 8000664:	62fb      	str	r3, [r7, #44]	@ 0x2c
	osc_init.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000666:	2310      	movs	r3, #16
 8000668:	633b      	str	r3, [r7, #48]	@ 0x30
	osc_init.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	@ 0x38
	osc_init.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066e:	2300      	movs	r3, #0
 8000670:	63fb      	str	r3, [r7, #60]	@ 0x3c

	switch(clock_freq)
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	2b78      	cmp	r3, #120	@ 0x78
 8000676:	d038      	beq.n	80006ea <SystemClock_Config+0x9a>
 8000678:	2b78      	cmp	r3, #120	@ 0x78
 800067a:	dc77      	bgt.n	800076c <SystemClock_Config+0x11c>
 800067c:	2b32      	cmp	r3, #50	@ 0x32
 800067e:	d002      	beq.n	8000686 <SystemClock_Config+0x36>
 8000680:	2b54      	cmp	r3, #84	@ 0x54
 8000682:	d019      	beq.n	80006b8 <SystemClock_Config+0x68>
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
			FLatency = FLASH_ACR_LATENCY_3WS;
			break;
		}
		default:
			return;
 8000684:	e072      	b.n	800076c <SystemClock_Config+0x11c>
			osc_init.PLL.PLLM = 16;
 8000686:	2310      	movs	r3, #16
 8000688:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 100;
 800068a:	2364      	movs	r3, #100	@ 0x64
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 8000692:	2302      	movs	r3, #2
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 8000696:	2302      	movs	r3, #2
 8000698:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006aa:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006b0:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_1WS;
 80006b2:	2301      	movs	r3, #1
 80006b4:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 80006b6:	e031      	b.n	800071c <SystemClock_Config+0xcc>
			osc_init.PLL.PLLM = 16;
 80006b8:	2310      	movs	r3, #16
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 168;
 80006bc:	23a8      	movs	r3, #168	@ 0xa8
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_2WS;
 80006e4:	2302      	movs	r3, #2
 80006e6:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 80006e8:	e018      	b.n	800071c <SystemClock_Config+0xcc>
			osc_init.PLL.PLLM = 16;
 80006ea:	2310      	movs	r3, #16
 80006ec:	643b      	str	r3, [r7, #64]	@ 0x40
			osc_init.PLL.PLLN = 240;
 80006ee:	23f0      	movs	r3, #240	@ 0xf0
 80006f0:	647b      	str	r3, [r7, #68]	@ 0x44
			osc_init.PLL.PLLP = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	64bb      	str	r3, [r7, #72]	@ 0x48
			osc_init.PLL.PLLQ = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
			osc_init.PLL.PLLR = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	653b      	str	r3, [r7, #80]	@ 0x50
			clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80006fe:	230f      	movs	r3, #15
 8000700:	60fb      	str	r3, [r7, #12]
			clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2302      	movs	r3, #2
 8000704:	613b      	str	r3, [r7, #16]
			clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
			clk_init.APB1CLKDivider = RCC_HCLK_DIV4;
 800070a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800070e:	61bb      	str	r3, [r7, #24]
			clk_init.APB2CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000714:	61fb      	str	r3, [r7, #28]
			FLatency = FLASH_ACR_LATENCY_3WS;
 8000716:	2303      	movs	r3, #3
 8000718:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 800071a:	bf00      	nop
	}

	if(HAL_RCC_OscConfig(&osc_init) != HAL_OK){
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f001 f80f 	bl	8001744 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xe0>
		Error_handler();
 800072c:	f7ff ff66 	bl	80005fc <Error_handler>
	}
	if(HAL_RCC_ClockConfig(&clk_init, FLatency) != HAL_OK){
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fcba 	bl	80010b0 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xf6>
		Error_handler();
 8000742:	f7ff ff5b 	bl	80005fc <Error_handler>
	}
	if(HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000) != HAL_OK){
 8000746:	f000 fd99 	bl	800127c <HAL_RCC_GetHCLKFreq>
 800074a:	4603      	mov	r3, r0
 800074c:	4a09      	ldr	r2, [pc, #36]	@ (8000774 <SystemClock_Config+0x124>)
 800074e:	fba2 2303 	umull	r2, r3, r2, r3
 8000752:	099b      	lsrs	r3, r3, #6
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fae0 	bl	8000d1a <HAL_SYSTICK_Config>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0x114>
		Error_handler();
 8000760:	f7ff ff4c 	bl	80005fc <Error_handler>
	}
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000764:	2004      	movs	r0, #4
 8000766:	f000 fae5 	bl	8000d34 <HAL_SYSTICK_CLKSourceConfig>
 800076a:	e000      	b.n	800076e <SystemClock_Config+0x11e>
			return;
 800076c:	bf00      	nop

}
 800076e:	3758      	adds	r7, #88	@ 0x58
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	10624dd3 	.word	0x10624dd3

08000778 <main>:

int main(void){
 8000778:	b580      	push	{r7, lr}
 800077a:	b09a      	sub	sp, #104	@ 0x68
 800077c:	af00      	add	r7, sp, #0
	
	char msg[100];
	HAL_Init();
 800077e:	f000 f955 	bl	8000a2c <HAL_Init>

	SystemClock_Config(SYSCLOCK_FREQ_120MHZ);
 8000782:	2078      	movs	r0, #120	@ 0x78
 8000784:	f7ff ff64 	bl	8000650 <SystemClock_Config>
	
	UART2_Init();
 8000788:	f7ff ff3c 	bl	8000604 <UART2_Init>

	memset(msg, 0, sizeof(msg));
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2264      	movs	r2, #100	@ 0x64
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 fea2 	bl	80024dc <memset>
	sprintf(msg,"SYSCLK : %ldHz\r\n", HAL_RCC_GetSysClockFreq());
 8000798:	f000 fda4 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 800079c:	4602      	mov	r2, r0
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	492f      	ldr	r1, [pc, #188]	@ (8000860 <main+0xe8>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fe78 	bl	8002498 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fd30 	bl	8000210 <strlen>
 80007b0:	4603      	mov	r3, r0
 80007b2:	b29a      	uxth	r2, r3
 80007b4:	1d39      	adds	r1, r7, #4
 80007b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ba:	482a      	ldr	r0, [pc, #168]	@ (8000864 <main+0xec>)
 80007bc:	f001 fab0 	bl	8001d20 <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2264      	movs	r2, #100	@ 0x64
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fe88 	bl	80024dc <memset>
	sprintf(msg,"HCLK : %ldHz\r\n", HAL_RCC_GetHCLKFreq());
 80007cc:	f000 fd56 	bl	800127c <HAL_RCC_GetHCLKFreq>
 80007d0:	4602      	mov	r2, r0
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	4924      	ldr	r1, [pc, #144]	@ (8000868 <main+0xf0>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fe5e 	bl	8002498 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fd16 	bl	8000210 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	1d39      	adds	r1, r7, #4
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007ee:	481d      	ldr	r0, [pc, #116]	@ (8000864 <main+0xec>)
 80007f0:	f001 fa96 	bl	8001d20 <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2264      	movs	r2, #100	@ 0x64
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fe6e 	bl	80024dc <memset>
	sprintf(msg,"PCLK1 : %ldHz\r\n", HAL_RCC_GetPCLK1Freq());
 8000800:	f000 fd48 	bl	8001294 <HAL_RCC_GetPCLK1Freq>
 8000804:	4602      	mov	r2, r0
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	4918      	ldr	r1, [pc, #96]	@ (800086c <main+0xf4>)
 800080a:	4618      	mov	r0, r3
 800080c:	f001 fe44 	bl	8002498 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fcfc 	bl	8000210 <strlen>
 8000818:	4603      	mov	r3, r0
 800081a:	b29a      	uxth	r2, r3
 800081c:	1d39      	adds	r1, r7, #4
 800081e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000822:	4810      	ldr	r0, [pc, #64]	@ (8000864 <main+0xec>)
 8000824:	f001 fa7c 	bl	8001d20 <HAL_UART_Transmit>

	memset(msg, 0, sizeof(msg));
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2264      	movs	r2, #100	@ 0x64
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f001 fe54 	bl	80024dc <memset>
	sprintf(msg,"PCLK2 : %ldHz\r\n", HAL_RCC_GetPCLK2Freq());
 8000834:	f000 fd42 	bl	80012bc <HAL_RCC_GetPCLK2Freq>
 8000838:	4602      	mov	r2, r0
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	490c      	ldr	r1, [pc, #48]	@ (8000870 <main+0xf8>)
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fe2a 	bl	8002498 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fce2 	bl	8000210 <strlen>
 800084c:	4603      	mov	r3, r0
 800084e:	b29a      	uxth	r2, r3
 8000850:	1d39      	adds	r1, r7, #4
 8000852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000856:	4803      	ldr	r0, [pc, #12]	@ (8000864 <main+0xec>)
 8000858:	f001 fa62 	bl	8001d20 <HAL_UART_Transmit>

	while(1);
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <main+0xe4>
 8000860:	08002df0 	.word	0x08002df0
 8000864:	20000078 	.word	0x20000078
 8000868:	08002e04 	.word	0x08002e04
 800086c:	08002e14 	.word	0x08002e14
 8000870:	08002e24 	.word	0x08002e24

08000874 <HAL_MspInit>:
  */

#include "stm32f4xx_hal.h"

void HAL_MspInit(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
	//  NOTE : The HAL_MspInit could be implemented in the user file

	// 1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 fa19 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>
	// 2. Enable the required system exception of arm cortex mx processor
	SCB ->SHCSR |= 0x7 << 16; // usg fault, memory fault, and bus fault, system exception.
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_MspInit+0x40>)
 8000880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000882:	4a0c      	ldr	r2, [pc, #48]	@ (80008b4 <HAL_MspInit+0x40>)
 8000884:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8000888:	6253      	str	r3, [r2, #36]	@ 0x24
	// 3. configure the priority fro the system exception.
	HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	f06f 000b 	mvn.w	r0, #11
 8000892:	f000 fa18 	bl	8000cc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	f06f 000a 	mvn.w	r0, #10
 800089e:	f000 fa12 	bl	8000cc6 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	f06f 0009 	mvn.w	r0, #9
 80008aa:	f000 fa0c 	bl	8000cc6 <HAL_NVIC_SetPriority>

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000ed00 	.word	0xe000ed00

080008b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	// here we are going to do low level inits of uart2
	GPIO_InitTypeDef gpio_uart;
	// 1. enable the clock for USART2
	__HAL_RCC_USART2_CLK_ENABLE();
 80008c0:	2300      	movs	r3, #0
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000940 <HAL_UART_MspInit+0x88>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000940 <HAL_UART_MspInit+0x88>)
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000940 <HAL_UART_MspInit+0x88>)
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <HAL_UART_MspInit+0x88>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e4:	4a16      	ldr	r2, [pc, #88]	@ (8000940 <HAL_UART_MspInit+0x88>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <HAL_UART_MspInit+0x88>)
 80008ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
	// 2. Do the pin muxing configurations
	gpio_uart.Pin = GPIO_PIN_2;
 80008f8:	2304      	movs	r3, #4
 80008fa:	617b      	str	r3, [r7, #20]
	gpio_uart.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61bb      	str	r3, [r7, #24]
	gpio_uart.Pull = GPIO_PULLUP;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
	gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
	gpio_uart.Alternate = GPIO_AF7_USART2;				// UART2_TX
 8000908:	2307      	movs	r3, #7
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	480c      	ldr	r0, [pc, #48]	@ (8000944 <HAL_UART_MspInit+0x8c>)
 8000914:	f000 fa38 	bl	8000d88 <HAL_GPIO_Init>

	gpio_uart.Pin = GPIO_PIN_3;							// UART2_RX
 8000918:	2308      	movs	r3, #8
 800091a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &gpio_uart);
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	4619      	mov	r1, r3
 8000922:	4808      	ldr	r0, [pc, #32]	@ (8000944 <HAL_UART_MspInit+0x8c>)
 8000924:	f000 fa30 	bl	8000d88 <HAL_GPIO_Init>
	// 3. Enable the IRQ and set up the priority (NVIC)
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000928:	2026      	movs	r0, #38	@ 0x26
 800092a:	f000 f9e8 	bl	8000cfe <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	210f      	movs	r1, #15
 8000932:	2026      	movs	r0, #38	@ 0x26
 8000934:	f000 f9c7 	bl	8000cc6 <HAL_NVIC_SetPriority>
}
 8000938:	bf00      	nop
 800093a:	3728      	adds	r7, #40	@ 0x28
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	@ (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	@ (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000978:	f001 fdb8 	bl	80024ec <__errno>
 800097c:	4603      	mov	r3, r0
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000986:	e009      	b.n	800099c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000988:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098e:	4b07      	ldr	r3, [pc, #28]	@ (80009ac <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	4a05      	ldr	r2, [pc, #20]	@ (80009ac <_sbrk+0x64>)
 8000998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20020000 	.word	0x20020000
 80009a8:	00000400 	.word	0x00000400
 80009ac:	200000c0 	.word	0x200000c0
 80009b0:	20000210 	.word	0x20000210

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	@ (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009dc:	f7ff ffea 	bl	80009b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e0:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e2:	490d      	ldr	r1, [pc, #52]	@ (8000a18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e8:	e002      	b.n	80009f0 <LoopCopyDataInit>

080009ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ee:	3304      	adds	r3, #4

080009f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f4:	d3f9      	bcc.n	80009ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009f8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a24 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009fc:	e001      	b.n	8000a02 <LoopFillZerobss>

080009fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a00:	3204      	adds	r2, #4

08000a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a04:	d3fb      	bcc.n	80009fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f001 fd77 	bl	80024f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff feb5 	bl	8000778 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a1c:	08002e90 	.word	0x08002e90
  ldr r2, =_sbss
 8000a20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a24:	20000210 	.word	0x20000210

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	@ (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f92b 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f808 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff ff08 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b12      	ldr	r3, [pc, #72]	@ (8000ac4 <HAL_InitTick+0x54>)
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_InitTick+0x58>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f000 f943 	bl	8000d1a <HAL_SYSTICK_Config>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e00e      	b.n	8000abc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d80a      	bhi.n	8000aba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aac:	f000 f90b 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab0:	4a06      	ldr	r2, [pc, #24]	@ (8000acc <HAL_InitTick+0x5c>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e000      	b.n	8000abc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000000 	.word	0x20000000
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	20000004 	.word	0x20000004

08000ad0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <HAL_IncTick+0x20>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_IncTick+0x24>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4413      	add	r3, r2
 8000ae0:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <HAL_IncTick+0x24>)
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000008 	.word	0x20000008
 8000af4:	200000c4 	.word	0x200000c4

08000af8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return uwTick;
 8000afc:	4b03      	ldr	r3, [pc, #12]	@ (8000b0c <HAL_GetTick+0x14>)
 8000afe:	681b      	ldr	r3, [r3, #0]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	200000c4 	.word	0x200000c4

08000b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b42:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <__NVIC_SetPriorityGrouping+0x44>)
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	60d3      	str	r3, [r2, #12]
}
 8000b48:	bf00      	nop
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000ed00 	.word	0xe000ed00

08000b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b5c:	4b04      	ldr	r3, [pc, #16]	@ (8000b70 <__NVIC_GetPriorityGrouping+0x18>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	f003 0307 	and.w	r3, r3, #7
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	db0b      	blt.n	8000b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	f003 021f 	and.w	r2, r3, #31
 8000b8c:	4907      	ldr	r1, [pc, #28]	@ (8000bac <__NVIC_EnableIRQ+0x38>)
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	095b      	lsrs	r3, r3, #5
 8000b94:	2001      	movs	r0, #1
 8000b96:	fa00 f202 	lsl.w	r2, r0, r2
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000e100 	.word	0xe000e100

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	@ (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	@ (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	@ 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	@ 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	@ (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	@ (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff29 	bl	8000b10 <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff3e 	bl	8000b58 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff31 	bl	8000b74 <__NVIC_EnableIRQ>
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ffa2 	bl	8000c6c <SysTick_Config>
 8000d28:	4603      	mov	r3, r0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	d106      	bne.n	8000d50 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a08      	ldr	r2, [pc, #32]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000d4e:	e005      	b.n	8000d5c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a04      	ldr	r2, [pc, #16]	@ (8000d68 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000d56:	f023 0304 	bic.w	r3, r3, #4
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000d70:	f000 f802 	bl	8000d78 <HAL_SYSTICK_Callback>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e165      	b.n	8001070 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8154 	bne.w	800106a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80ae 	beq.w	800106a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b5d      	ldr	r3, [pc, #372]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a5c      	ldr	r2, [pc, #368]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001088 <HAL_GPIO_Init+0x300>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a58      	ldr	r2, [pc, #352]	@ (800108c <HAL_GPIO_Init+0x304>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4f      	ldr	r2, [pc, #316]	@ (8001090 <HAL_GPIO_Init+0x308>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d025      	beq.n	8000fa2 <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a4e      	ldr	r2, [pc, #312]	@ (8001094 <HAL_GPIO_Init+0x30c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d01f      	beq.n	8000f9e <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a4d      	ldr	r2, [pc, #308]	@ (8001098 <HAL_GPIO_Init+0x310>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a4c      	ldr	r2, [pc, #304]	@ (800109c <HAL_GPIO_Init+0x314>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x20e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4b      	ldr	r2, [pc, #300]	@ (80010a0 <HAL_GPIO_Init+0x318>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x20a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a4a      	ldr	r2, [pc, #296]	@ (80010a4 <HAL_GPIO_Init+0x31c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x206>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	@ (80010a8 <HAL_GPIO_Init+0x320>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x202>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00c      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00a      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e008      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f92:	2304      	movs	r3, #4
 8000f94:	e006      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f96:	2303      	movs	r3, #3
 8000f98:	e004      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	e002      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <HAL_GPIO_Init+0x21c>
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	69fa      	ldr	r2, [r7, #28]
 8000fa6:	f002 0203 	and.w	r2, r2, #3
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	4093      	lsls	r3, r2
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fb4:	4935      	ldr	r1, [pc, #212]	@ (800108c <HAL_GPIO_Init+0x304>)
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	089b      	lsrs	r3, r3, #2
 8000fba:	3302      	adds	r3, #2
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe6:	4a31      	ldr	r2, [pc, #196]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fec:	4b2f      	ldr	r3, [pc, #188]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001010:	4a26      	ldr	r2, [pc, #152]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	43db      	mvns	r3, r3
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4013      	ands	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800103a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <HAL_GPIO_Init+0x324>)
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001064:	4a11      	ldr	r2, [pc, #68]	@ (80010ac <HAL_GPIO_Init+0x324>)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3301      	adds	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	2b0f      	cmp	r3, #15
 8001074:	f67f ae96 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3724      	adds	r7, #36	@ 0x24
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800
 800108c:	40013800 	.word	0x40013800
 8001090:	40020000 	.word	0x40020000
 8001094:	40020400 	.word	0x40020400
 8001098:	40020800 	.word	0x40020800
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	40021000 	.word	0x40021000
 80010a4:	40021400 	.word	0x40021400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40013c00 	.word	0x40013c00

080010b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e0cc      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010c4:	4b68      	ldr	r3, [pc, #416]	@ (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	683a      	ldr	r2, [r7, #0]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d90c      	bls.n	80010ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010d2:	4b65      	ldr	r3, [pc, #404]	@ (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010da:	4b63      	ldr	r3, [pc, #396]	@ (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0b8      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	2b00      	cmp	r3, #0
 8001102:	d005      	beq.n	8001110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001104:	4b59      	ldr	r3, [pc, #356]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4a58      	ldr	r2, [pc, #352]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800110e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d005      	beq.n	8001128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800111c:	4b53      	ldr	r3, [pc, #332]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	4a52      	ldr	r2, [pc, #328]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001122:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001128:	4b50      	ldr	r3, [pc, #320]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	494d      	ldr	r1, [pc, #308]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001136:	4313      	orrs	r3, r2
 8001138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d044      	beq.n	80011d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114e:	4b47      	ldr	r3, [pc, #284]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d119      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e07f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d003      	beq.n	800116e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800116a:	2b03      	cmp	r3, #3
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800116e:	4b3f      	ldr	r3, [pc, #252]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e06f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800117e:	4b3b      	ldr	r3, [pc, #236]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e067      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800118e:	4b37      	ldr	r3, [pc, #220]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f023 0203 	bic.w	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	4934      	ldr	r1, [pc, #208]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800119c:	4313      	orrs	r3, r2
 800119e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011a0:	f7ff fcaa 	bl	8000af8 <HAL_GetTick>
 80011a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a6:	e00a      	b.n	80011be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011a8:	f7ff fca6 	bl	8000af8 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d901      	bls.n	80011be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e04f      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011be:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 020c 	and.w	r2, r3, #12
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d1eb      	bne.n	80011a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011d0:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d20c      	bcs.n	80011f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011de:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011e0:	683a      	ldr	r2, [r7, #0]
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <HAL_RCC_ClockConfig+0x1b8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011f4:	2301      	movs	r3, #1
 80011f6:	e032      	b.n	800125e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001204:	4b19      	ldr	r3, [pc, #100]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	4916      	ldr	r1, [pc, #88]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691b      	ldr	r3, [r3, #16]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	490e      	ldr	r1, [pc, #56]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	4313      	orrs	r3, r2
 8001234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001236:	f000 f855 	bl	80012e4 <HAL_RCC_GetSysClockFreq>
 800123a:	4602      	mov	r2, r0
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	091b      	lsrs	r3, r3, #4
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	490a      	ldr	r1, [pc, #40]	@ (8001270 <HAL_RCC_ClockConfig+0x1c0>)
 8001248:	5ccb      	ldrb	r3, [r1, r3]
 800124a:	fa22 f303 	lsr.w	r3, r2, r3
 800124e:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <HAL_RCC_ClockConfig+0x1c4>)
 8001250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_RCC_ClockConfig+0x1c8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fc0a 	bl	8000a70 <HAL_InitTick>

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00
 800126c:	40023800 	.word	0x40023800
 8001270:	08002e34 	.word	0x08002e34
 8001274:	20000000 	.word	0x20000000
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001280:	4b03      	ldr	r3, [pc, #12]	@ (8001290 <HAL_RCC_GetHCLKFreq+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000000 	.word	0x20000000

08001294 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001298:	f7ff fff0 	bl	800127c <HAL_RCC_GetHCLKFreq>
 800129c:	4602      	mov	r2, r0
 800129e:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	0a9b      	lsrs	r3, r3, #10
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	4903      	ldr	r1, [pc, #12]	@ (80012b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800
 80012b8:	08002e44 	.word	0x08002e44

080012bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80012c0:	f7ff ffdc 	bl	800127c <HAL_RCC_GetHCLKFreq>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	0b5b      	lsrs	r3, r3, #13
 80012cc:	f003 0307 	and.w	r3, r3, #7
 80012d0:	4903      	ldr	r1, [pc, #12]	@ (80012e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012d2:	5ccb      	ldrb	r3, [r1, r3]
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	08002e44 	.word	0x08002e44

080012e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e8:	b0ae      	sub	sp, #184	@ 0xb8
 80012ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800130a:	4bcb      	ldr	r3, [pc, #812]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b0c      	cmp	r3, #12
 8001314:	f200 8206 	bhi.w	8001724 <HAL_RCC_GetSysClockFreq+0x440>
 8001318:	a201      	add	r2, pc, #4	@ (adr r2, 8001320 <HAL_RCC_GetSysClockFreq+0x3c>)
 800131a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800131e:	bf00      	nop
 8001320:	08001355 	.word	0x08001355
 8001324:	08001725 	.word	0x08001725
 8001328:	08001725 	.word	0x08001725
 800132c:	08001725 	.word	0x08001725
 8001330:	0800135d 	.word	0x0800135d
 8001334:	08001725 	.word	0x08001725
 8001338:	08001725 	.word	0x08001725
 800133c:	08001725 	.word	0x08001725
 8001340:	08001365 	.word	0x08001365
 8001344:	08001725 	.word	0x08001725
 8001348:	08001725 	.word	0x08001725
 800134c:	08001725 	.word	0x08001725
 8001350:	08001555 	.word	0x08001555
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001354:	4bb9      	ldr	r3, [pc, #740]	@ (800163c <HAL_RCC_GetSysClockFreq+0x358>)
 8001356:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800135a:	e1e7      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800135c:	4bb8      	ldr	r3, [pc, #736]	@ (8001640 <HAL_RCC_GetSysClockFreq+0x35c>)
 800135e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001362:	e1e3      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001364:	4bb4      	ldr	r3, [pc, #720]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800136c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001370:	4bb1      	ldr	r3, [pc, #708]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d071      	beq.n	8001460 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137c:	4bae      	ldr	r3, [pc, #696]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	2200      	movs	r2, #0
 8001384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001388:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800138c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001394:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800139e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80013a2:	4622      	mov	r2, r4
 80013a4:	462b      	mov	r3, r5
 80013a6:	f04f 0000 	mov.w	r0, #0
 80013aa:	f04f 0100 	mov.w	r1, #0
 80013ae:	0159      	lsls	r1, r3, #5
 80013b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013b4:	0150      	lsls	r0, r2, #5
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4621      	mov	r1, r4
 80013bc:	1a51      	subs	r1, r2, r1
 80013be:	6439      	str	r1, [r7, #64]	@ 0x40
 80013c0:	4629      	mov	r1, r5
 80013c2:	eb63 0301 	sbc.w	r3, r3, r1
 80013c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80013d4:	4649      	mov	r1, r9
 80013d6:	018b      	lsls	r3, r1, #6
 80013d8:	4641      	mov	r1, r8
 80013da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013de:	4641      	mov	r1, r8
 80013e0:	018a      	lsls	r2, r1, #6
 80013e2:	4641      	mov	r1, r8
 80013e4:	1a51      	subs	r1, r2, r1
 80013e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013e8:	4649      	mov	r1, r9
 80013ea:	eb63 0301 	sbc.w	r3, r3, r1
 80013ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	f04f 0300 	mov.w	r3, #0
 80013f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80013fc:	4649      	mov	r1, r9
 80013fe:	00cb      	lsls	r3, r1, #3
 8001400:	4641      	mov	r1, r8
 8001402:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001406:	4641      	mov	r1, r8
 8001408:	00ca      	lsls	r2, r1, #3
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	4603      	mov	r3, r0
 8001410:	4622      	mov	r2, r4
 8001412:	189b      	adds	r3, r3, r2
 8001414:	633b      	str	r3, [r7, #48]	@ 0x30
 8001416:	462b      	mov	r3, r5
 8001418:	460a      	mov	r2, r1
 800141a:	eb42 0303 	adc.w	r3, r2, r3
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001420:	f04f 0200 	mov.w	r2, #0
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800142c:	4629      	mov	r1, r5
 800142e:	024b      	lsls	r3, r1, #9
 8001430:	4621      	mov	r1, r4
 8001432:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001436:	4621      	mov	r1, r4
 8001438:	024a      	lsls	r2, r1, #9
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001442:	2200      	movs	r2, #0
 8001444:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001448:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800144c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001450:	f7fe ff36 	bl	80002c0 <__aeabi_uldivmod>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4613      	mov	r3, r2
 800145a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800145e:	e067      	b.n	8001530 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001460:	4b75      	ldr	r3, [pc, #468]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	099b      	lsrs	r3, r3, #6
 8001466:	2200      	movs	r2, #0
 8001468:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800146c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001470:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001478:	67bb      	str	r3, [r7, #120]	@ 0x78
 800147a:	2300      	movs	r3, #0
 800147c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800147e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001482:	4622      	mov	r2, r4
 8001484:	462b      	mov	r3, r5
 8001486:	f04f 0000 	mov.w	r0, #0
 800148a:	f04f 0100 	mov.w	r1, #0
 800148e:	0159      	lsls	r1, r3, #5
 8001490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001494:	0150      	lsls	r0, r2, #5
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4621      	mov	r1, r4
 800149c:	1a51      	subs	r1, r2, r1
 800149e:	62b9      	str	r1, [r7, #40]	@ 0x28
 80014a0:	4629      	mov	r1, r5
 80014a2:	eb63 0301 	sbc.w	r3, r3, r1
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80014b4:	4649      	mov	r1, r9
 80014b6:	018b      	lsls	r3, r1, #6
 80014b8:	4641      	mov	r1, r8
 80014ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014be:	4641      	mov	r1, r8
 80014c0:	018a      	lsls	r2, r1, #6
 80014c2:	4641      	mov	r1, r8
 80014c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80014c8:	4649      	mov	r1, r9
 80014ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014e2:	4692      	mov	sl, r2
 80014e4:	469b      	mov	fp, r3
 80014e6:	4623      	mov	r3, r4
 80014e8:	eb1a 0303 	adds.w	r3, sl, r3
 80014ec:	623b      	str	r3, [r7, #32]
 80014ee:	462b      	mov	r3, r5
 80014f0:	eb4b 0303 	adc.w	r3, fp, r3
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001502:	4629      	mov	r1, r5
 8001504:	028b      	lsls	r3, r1, #10
 8001506:	4621      	mov	r1, r4
 8001508:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800150c:	4621      	mov	r1, r4
 800150e:	028a      	lsls	r2, r1, #10
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001518:	2200      	movs	r2, #0
 800151a:	673b      	str	r3, [r7, #112]	@ 0x70
 800151c:	677a      	str	r2, [r7, #116]	@ 0x74
 800151e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001522:	f7fe fecd 	bl	80002c0 <__aeabi_uldivmod>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4613      	mov	r3, r2
 800152c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001530:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	0c1b      	lsrs	r3, r3, #16
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	3301      	adds	r3, #1
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001542:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001552:	e0eb      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001554:	4b38      	ldr	r3, [pc, #224]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800155c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001560:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d06b      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800156c:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <HAL_RCC_GetSysClockFreq+0x354>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	099b      	lsrs	r3, r3, #6
 8001572:	2200      	movs	r2, #0
 8001574:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001576:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001578:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800157a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800157e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001580:	2300      	movs	r3, #0
 8001582:	667b      	str	r3, [r7, #100]	@ 0x64
 8001584:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001588:	4622      	mov	r2, r4
 800158a:	462b      	mov	r3, r5
 800158c:	f04f 0000 	mov.w	r0, #0
 8001590:	f04f 0100 	mov.w	r1, #0
 8001594:	0159      	lsls	r1, r3, #5
 8001596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800159a:	0150      	lsls	r0, r2, #5
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4621      	mov	r1, r4
 80015a2:	1a51      	subs	r1, r2, r1
 80015a4:	61b9      	str	r1, [r7, #24]
 80015a6:	4629      	mov	r1, r5
 80015a8:	eb63 0301 	sbc.w	r3, r3, r1
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80015ba:	4659      	mov	r1, fp
 80015bc:	018b      	lsls	r3, r1, #6
 80015be:	4651      	mov	r1, sl
 80015c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015c4:	4651      	mov	r1, sl
 80015c6:	018a      	lsls	r2, r1, #6
 80015c8:	4651      	mov	r1, sl
 80015ca:	ebb2 0801 	subs.w	r8, r2, r1
 80015ce:	4659      	mov	r1, fp
 80015d0:	eb63 0901 	sbc.w	r9, r3, r1
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015e8:	4690      	mov	r8, r2
 80015ea:	4699      	mov	r9, r3
 80015ec:	4623      	mov	r3, r4
 80015ee:	eb18 0303 	adds.w	r3, r8, r3
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	462b      	mov	r3, r5
 80015f6:	eb49 0303 	adc.w	r3, r9, r3
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001608:	4629      	mov	r1, r5
 800160a:	024b      	lsls	r3, r1, #9
 800160c:	4621      	mov	r1, r4
 800160e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001612:	4621      	mov	r1, r4
 8001614:	024a      	lsls	r2, r1, #9
 8001616:	4610      	mov	r0, r2
 8001618:	4619      	mov	r1, r3
 800161a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800161e:	2200      	movs	r2, #0
 8001620:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001622:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001624:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001628:	f7fe fe4a 	bl	80002c0 <__aeabi_uldivmod>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4613      	mov	r3, r2
 8001632:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001636:	e065      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x420>
 8001638:	40023800 	.word	0x40023800
 800163c:	00f42400 	.word	0x00f42400
 8001640:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001644:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <HAL_RCC_GetSysClockFreq+0x458>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	099b      	lsrs	r3, r3, #6
 800164a:	2200      	movs	r2, #0
 800164c:	4618      	mov	r0, r3
 800164e:	4611      	mov	r1, r2
 8001650:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001654:	653b      	str	r3, [r7, #80]	@ 0x50
 8001656:	2300      	movs	r3, #0
 8001658:	657b      	str	r3, [r7, #84]	@ 0x54
 800165a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800165e:	4642      	mov	r2, r8
 8001660:	464b      	mov	r3, r9
 8001662:	f04f 0000 	mov.w	r0, #0
 8001666:	f04f 0100 	mov.w	r1, #0
 800166a:	0159      	lsls	r1, r3, #5
 800166c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001670:	0150      	lsls	r0, r2, #5
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4641      	mov	r1, r8
 8001678:	1a51      	subs	r1, r2, r1
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	4649      	mov	r1, r9
 800167e:	eb63 0301 	sbc.w	r3, r3, r1
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	f04f 0200 	mov.w	r2, #0
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001690:	4659      	mov	r1, fp
 8001692:	018b      	lsls	r3, r1, #6
 8001694:	4651      	mov	r1, sl
 8001696:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800169a:	4651      	mov	r1, sl
 800169c:	018a      	lsls	r2, r1, #6
 800169e:	4651      	mov	r1, sl
 80016a0:	1a54      	subs	r4, r2, r1
 80016a2:	4659      	mov	r1, fp
 80016a4:	eb63 0501 	sbc.w	r5, r3, r1
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	00eb      	lsls	r3, r5, #3
 80016b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016b6:	00e2      	lsls	r2, r4, #3
 80016b8:	4614      	mov	r4, r2
 80016ba:	461d      	mov	r5, r3
 80016bc:	4643      	mov	r3, r8
 80016be:	18e3      	adds	r3, r4, r3
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	464b      	mov	r3, r9
 80016c4:	eb45 0303 	adc.w	r3, r5, r3
 80016c8:	607b      	str	r3, [r7, #4]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016d6:	4629      	mov	r1, r5
 80016d8:	028b      	lsls	r3, r1, #10
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016e0:	4621      	mov	r1, r4
 80016e2:	028a      	lsls	r2, r1, #10
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016ec:	2200      	movs	r2, #0
 80016ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016f0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016f6:	f7fe fde3 	bl	80002c0 <__aeabi_uldivmod>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4613      	mov	r3, r2
 8001700:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001704:	4b0d      	ldr	r3, [pc, #52]	@ (800173c <HAL_RCC_GetSysClockFreq+0x458>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	0f1b      	lsrs	r3, r3, #28
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001712:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001716:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001722:	e003      	b.n	800172c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001726:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800172a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800172c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001730:	4618      	mov	r0, r3
 8001732:	37b8      	adds	r7, #184	@ 0xb8
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	00f42400 	.word	0x00f42400

08001744 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b086      	sub	sp, #24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e28d      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8083 	beq.w	800186a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001764:	4b94      	ldr	r3, [pc, #592]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b04      	cmp	r3, #4
 800176e:	d019      	beq.n	80017a4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001770:	4b91      	ldr	r3, [pc, #580]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 030c 	and.w	r3, r3, #12
        || \
 8001778:	2b08      	cmp	r3, #8
 800177a:	d106      	bne.n	800178a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800177c:	4b8e      	ldr	r3, [pc, #568]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001788:	d00c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178a:	4b8b      	ldr	r3, [pc, #556]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d112      	bne.n	80017bc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001796:	4b88      	ldr	r3, [pc, #544]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017a2:	d10b      	bne.n	80017bc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	4b84      	ldr	r3, [pc, #528]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d05b      	beq.n	8001868 <HAL_RCC_OscConfig+0x124>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d157      	bne.n	8001868 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e25a      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c4:	d106      	bne.n	80017d4 <HAL_RCC_OscConfig+0x90>
 80017c6:	4b7c      	ldr	r3, [pc, #496]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a7b      	ldr	r2, [pc, #492]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e01d      	b.n	8001810 <HAL_RCC_OscConfig+0xcc>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0xb4>
 80017de:	4b76      	ldr	r3, [pc, #472]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a75      	ldr	r2, [pc, #468]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b73      	ldr	r3, [pc, #460]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a72      	ldr	r2, [pc, #456]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0xcc>
 80017f8:	4b6f      	ldr	r3, [pc, #444]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a6e      	ldr	r2, [pc, #440]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b6c      	ldr	r3, [pc, #432]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a6b      	ldr	r2, [pc, #428]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f96e 	bl	8000af8 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff f96a 	bl	8000af8 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	@ 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e21f      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b61      	ldr	r3, [pc, #388]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0xdc>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff f95a 	bl	8000af8 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff f956 	bl	8000af8 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e20b      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	4b57      	ldr	r3, [pc, #348]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x104>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d06f      	beq.n	8001956 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001876:	4b50      	ldr	r3, [pc, #320]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	d017      	beq.n	80018b2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001882:	4b4d      	ldr	r3, [pc, #308]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
        || \
 800188a:	2b08      	cmp	r3, #8
 800188c:	d105      	bne.n	800189a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800188e:	4b4a      	ldr	r3, [pc, #296]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00b      	beq.n	80018b2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189a:	4b47      	ldr	r3, [pc, #284]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80018a2:	2b0c      	cmp	r3, #12
 80018a4:	d11c      	bne.n	80018e0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a6:	4b44      	ldr	r3, [pc, #272]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d116      	bne.n	80018e0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b2:	4b41      	ldr	r3, [pc, #260]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d005      	beq.n	80018ca <HAL_RCC_OscConfig+0x186>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e1d3      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b3b      	ldr	r3, [pc, #236]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4937      	ldr	r1, [pc, #220]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018de:	e03a      	b.n	8001956 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d020      	beq.n	800192a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e8:	4b34      	ldr	r3, [pc, #208]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ee:	f7ff f903 	bl	8000af8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff f8ff 	bl	8000af8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1b4      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b28      	ldr	r3, [pc, #160]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4925      	ldr	r1, [pc, #148]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
 8001928:	e015      	b.n	8001956 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <HAL_RCC_OscConfig+0x278>)
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff f8e2 	bl	8000af8 <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff f8de 	bl	8000af8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e193      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194a:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f0      	bne.n	8001938 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d036      	beq.n	80019d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d016      	beq.n	8001998 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196a:	4b15      	ldr	r3, [pc, #84]	@ (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff f8c2 	bl	8000af8 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff f8be 	bl	8000af8 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e173      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198a:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <HAL_RCC_OscConfig+0x274>)
 800198c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x234>
 8001996:	e01b      	b.n	80019d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_OscConfig+0x27c>)
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199e:	f7ff f8ab 	bl	8000af8 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	e00e      	b.n	80019c4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff f8a7 	bl	8000af8 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d907      	bls.n	80019c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e15c      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
 80019b8:	40023800 	.word	0x40023800
 80019bc:	42470000 	.word	0x42470000
 80019c0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	4b8a      	ldr	r3, [pc, #552]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 80019c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ea      	bne.n	80019a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 8097 	beq.w	8001b0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e2:	4b83      	ldr	r3, [pc, #524]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10f      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b79      	ldr	r3, [pc, #484]	@ (8001bf4 <HAL_RCC_OscConfig+0x4b0>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1a:	4b76      	ldr	r3, [pc, #472]	@ (8001bf4 <HAL_RCC_OscConfig+0x4b0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a75      	ldr	r2, [pc, #468]	@ (8001bf4 <HAL_RCC_OscConfig+0x4b0>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff f867 	bl	8000af8 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2e:	f7ff f863 	bl	8000af8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e118      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	4b6c      	ldr	r3, [pc, #432]	@ (8001bf4 <HAL_RCC_OscConfig+0x4b0>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x31e>
 8001a54:	4b66      	ldr	r3, [pc, #408]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a58:	4a65      	ldr	r2, [pc, #404]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a60:	e01c      	b.n	8001a9c <HAL_RCC_OscConfig+0x358>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x340>
 8001a6a:	4b61      	ldr	r3, [pc, #388]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6e:	4a60      	ldr	r2, [pc, #384]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a70:	f043 0304 	orr.w	r3, r3, #4
 8001a74:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a76:	4b5e      	ldr	r3, [pc, #376]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x358>
 8001a84:	4b5a      	ldr	r3, [pc, #360]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a88:	4a59      	ldr	r2, [pc, #356]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a8a:	f023 0301 	bic.w	r3, r3, #1
 8001a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a90:	4b57      	ldr	r3, [pc, #348]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a94:	4a56      	ldr	r2, [pc, #344]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001a96:	f023 0304 	bic.w	r3, r3, #4
 8001a9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d015      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa4:	f7ff f828 	bl	8000af8 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aac:	f7ff f824 	bl	8000af8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0d7      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0ee      	beq.n	8001aac <HAL_RCC_OscConfig+0x368>
 8001ace:	e014      	b.n	8001afa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f812 	bl	8000af8 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad8:	f7ff f80e 	bl	8000af8 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0c1      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aee:	4b40      	ldr	r3, [pc, #256]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ee      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b00:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b04:	4a3a      	ldr	r2, [pc, #232]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80ad 	beq.w	8001c70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b16:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d060      	beq.n	8001be4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d145      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b33      	ldr	r3, [pc, #204]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7fe ffe2 	bl	8000af8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe ffde 	bl	8000af8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e093      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	69da      	ldr	r2, [r3, #28]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	431a      	orrs	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	041b      	lsls	r3, r3, #16
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b78:	061b      	lsls	r3, r3, #24
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b80:	071b      	lsls	r3, r3, #28
 8001b82:	491b      	ldr	r1, [pc, #108]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b88:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b4>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8e:	f7fe ffb3 	bl	8000af8 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b96:	f7fe ffaf 	bl	8000af8 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e064      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x452>
 8001bb4:	e05c      	b.n	8001c70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb6:	4b10      	ldr	r3, [pc, #64]	@ (8001bf8 <HAL_RCC_OscConfig+0x4b4>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbc:	f7fe ff9c 	bl	8000af8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc4:	f7fe ff98 	bl	8000af8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e04d      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x480>
 8001be2:	e045      	b.n	8001c70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e040      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <HAL_RCC_OscConfig+0x538>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d030      	beq.n	8001c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d129      	bne.n	8001c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d122      	bne.n	8001c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d119      	bne.n	8001c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	3b01      	subs	r3, #1
 8001c46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d10f      	bne.n	8001c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d107      	bne.n	8001c6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800

08001c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e042      	b.n	8001d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d106      	bne.n	8001cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7fe fe06 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2224      	movs	r2, #36	@ 0x24
 8001cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f973 	bl	8001fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	@ 0x28
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b20      	cmp	r3, #32
 8001d3e:	d175      	bne.n	8001e2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <HAL_UART_Transmit+0x2c>
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e06e      	b.n	8001e2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2221      	movs	r2, #33	@ 0x21
 8001d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d5e:	f7fe fecb 	bl	8000af8 <HAL_GetTick>
 8001d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	88fa      	ldrh	r2, [r7, #6]
 8001d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	88fa      	ldrh	r2, [r7, #6]
 8001d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d78:	d108      	bne.n	8001d8c <HAL_UART_Transmit+0x6c>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d104      	bne.n	8001d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	e003      	b.n	8001d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d94:	e02e      	b.n	8001df4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2180      	movs	r1, #128	@ 0x80
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f000 f848 	bl	8001e36 <UART_WaitOnFlagUntilTimeout>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e03a      	b.n	8001e2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10b      	bne.n	8001dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	881b      	ldrh	r3, [r3, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	e007      	b.n	8001de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	781a      	ldrb	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	3301      	adds	r3, #1
 8001de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1cb      	bne.n	8001d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2200      	movs	r2, #0
 8001e06:	2140      	movs	r1, #64	@ 0x40
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f814 	bl	8001e36 <UART_WaitOnFlagUntilTimeout>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2220      	movs	r2, #32
 8001e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e006      	b.n	8001e2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3720      	adds	r7, #32
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4613      	mov	r3, r2
 8001e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e46:	e03b      	b.n	8001ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e48:	6a3b      	ldr	r3, [r7, #32]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e4e:	d037      	beq.n	8001ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e50:	f7fe fe52 	bl	8000af8 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	6a3a      	ldr	r2, [r7, #32]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d302      	bcc.n	8001e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e03a      	b.n	8001ee0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b80      	cmp	r3, #128	@ 0x80
 8001e7c:	d020      	beq.n	8001ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2b40      	cmp	r3, #64	@ 0x40
 8001e82:	d01d      	beq.n	8001ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d116      	bne.n	8001ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f000 f81d 	bl	8001ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2208      	movs	r2, #8
 8001eb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e00f      	b.n	8001ee0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	bf0c      	ite	eq
 8001ed0:	2301      	moveq	r3, #1
 8001ed2:	2300      	movne	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d0b4      	beq.n	8001e48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b095      	sub	sp, #84	@ 0x54
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001efa:	e853 3f00 	ldrex	r3, [r3]
 8001efe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001f10:	643a      	str	r2, [r7, #64]	@ 0x40
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001f16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f18:	e841 2300 	strex	r3, r2, [r1]
 8001f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e5      	bne.n	8001ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3314      	adds	r3, #20
 8001f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	e853 3f00 	ldrex	r3, [r3]
 8001f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f023 0301 	bic.w	r3, r3, #1
 8001f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3314      	adds	r3, #20
 8001f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f4c:	e841 2300 	strex	r3, r2, [r1]
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e5      	bne.n	8001f24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d119      	bne.n	8001f94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	330c      	adds	r3, #12
 8001f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	e853 3f00 	ldrex	r3, [r3]
 8001f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f023 0310 	bic.w	r3, r3, #16
 8001f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001f80:	61ba      	str	r2, [r7, #24]
 8001f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f84:	6979      	ldr	r1, [r7, #20]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	e841 2300 	strex	r3, r2, [r1]
 8001f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d1e5      	bne.n	8001f60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001fa2:	bf00      	nop
 8001fa4:	3754      	adds	r7, #84	@ 0x54
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb4:	b0c0      	sub	sp, #256	@ 0x100
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fcc:	68d9      	ldr	r1, [r3, #12]
 8001fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	ea40 0301 	orr.w	r3, r0, r1
 8001fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002008:	f021 010c 	bic.w	r1, r1, #12
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002016:	430b      	orrs	r3, r1
 8002018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800201a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	695b      	ldr	r3, [r3, #20]
 8002022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202a:	6999      	ldr	r1, [r3, #24]
 800202c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	ea40 0301 	orr.w	r3, r0, r1
 8002036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	4b8f      	ldr	r3, [pc, #572]	@ (800227c <UART_SetConfig+0x2cc>)
 8002040:	429a      	cmp	r2, r3
 8002042:	d005      	beq.n	8002050 <UART_SetConfig+0xa0>
 8002044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b8d      	ldr	r3, [pc, #564]	@ (8002280 <UART_SetConfig+0x2d0>)
 800204c:	429a      	cmp	r2, r3
 800204e:	d104      	bne.n	800205a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002050:	f7ff f934 	bl	80012bc <HAL_RCC_GetPCLK2Freq>
 8002054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002058:	e003      	b.n	8002062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800205a:	f7ff f91b 	bl	8001294 <HAL_RCC_GetPCLK1Freq>
 800205e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002066:	69db      	ldr	r3, [r3, #28]
 8002068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800206c:	f040 810c 	bne.w	8002288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002074:	2200      	movs	r2, #0
 8002076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800207a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800207e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002082:	4622      	mov	r2, r4
 8002084:	462b      	mov	r3, r5
 8002086:	1891      	adds	r1, r2, r2
 8002088:	65b9      	str	r1, [r7, #88]	@ 0x58
 800208a:	415b      	adcs	r3, r3
 800208c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800208e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002092:	4621      	mov	r1, r4
 8002094:	eb12 0801 	adds.w	r8, r2, r1
 8002098:	4629      	mov	r1, r5
 800209a:	eb43 0901 	adc.w	r9, r3, r1
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	f04f 0300 	mov.w	r3, #0
 80020a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020b2:	4690      	mov	r8, r2
 80020b4:	4699      	mov	r9, r3
 80020b6:	4623      	mov	r3, r4
 80020b8:	eb18 0303 	adds.w	r3, r8, r3
 80020bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020c0:	462b      	mov	r3, r5
 80020c2:	eb49 0303 	adc.w	r3, r9, r3
 80020c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020de:	460b      	mov	r3, r1
 80020e0:	18db      	adds	r3, r3, r3
 80020e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80020e4:	4613      	mov	r3, r2
 80020e6:	eb42 0303 	adc.w	r3, r2, r3
 80020ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80020ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020f4:	f7fe f8e4 	bl	80002c0 <__aeabi_uldivmod>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <UART_SetConfig+0x2d4>)
 80020fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	011c      	lsls	r4, r3, #4
 8002106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800210a:	2200      	movs	r2, #0
 800210c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002110:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002118:	4642      	mov	r2, r8
 800211a:	464b      	mov	r3, r9
 800211c:	1891      	adds	r1, r2, r2
 800211e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002120:	415b      	adcs	r3, r3
 8002122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002128:	4641      	mov	r1, r8
 800212a:	eb12 0a01 	adds.w	sl, r2, r1
 800212e:	4649      	mov	r1, r9
 8002130:	eb43 0b01 	adc.w	fp, r3, r1
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002148:	4692      	mov	sl, r2
 800214a:	469b      	mov	fp, r3
 800214c:	4643      	mov	r3, r8
 800214e:	eb1a 0303 	adds.w	r3, sl, r3
 8002152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002156:	464b      	mov	r3, r9
 8002158:	eb4b 0303 	adc.w	r3, fp, r3
 800215c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800216c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002174:	460b      	mov	r3, r1
 8002176:	18db      	adds	r3, r3, r3
 8002178:	643b      	str	r3, [r7, #64]	@ 0x40
 800217a:	4613      	mov	r3, r2
 800217c:	eb42 0303 	adc.w	r3, r2, r3
 8002180:	647b      	str	r3, [r7, #68]	@ 0x44
 8002182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800218a:	f7fe f899 	bl	80002c0 <__aeabi_uldivmod>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4611      	mov	r1, r2
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <UART_SetConfig+0x2d4>)
 8002196:	fba3 2301 	umull	r2, r3, r3, r1
 800219a:	095b      	lsrs	r3, r3, #5
 800219c:	2264      	movs	r2, #100	@ 0x64
 800219e:	fb02 f303 	mul.w	r3, r2, r3
 80021a2:	1acb      	subs	r3, r1, r3
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80021aa:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <UART_SetConfig+0x2d4>)
 80021ac:	fba3 2302 	umull	r2, r3, r3, r2
 80021b0:	095b      	lsrs	r3, r3, #5
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80021b8:	441c      	add	r4, r3
 80021ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021be:	2200      	movs	r2, #0
 80021c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021cc:	4642      	mov	r2, r8
 80021ce:	464b      	mov	r3, r9
 80021d0:	1891      	adds	r1, r2, r2
 80021d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021d4:	415b      	adcs	r3, r3
 80021d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021dc:	4641      	mov	r1, r8
 80021de:	1851      	adds	r1, r2, r1
 80021e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80021e2:	4649      	mov	r1, r9
 80021e4:	414b      	adcs	r3, r1
 80021e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	f04f 0300 	mov.w	r3, #0
 80021f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021f4:	4659      	mov	r1, fp
 80021f6:	00cb      	lsls	r3, r1, #3
 80021f8:	4651      	mov	r1, sl
 80021fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021fe:	4651      	mov	r1, sl
 8002200:	00ca      	lsls	r2, r1, #3
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	4603      	mov	r3, r0
 8002208:	4642      	mov	r2, r8
 800220a:	189b      	adds	r3, r3, r2
 800220c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002210:	464b      	mov	r3, r9
 8002212:	460a      	mov	r2, r1
 8002214:	eb42 0303 	adc.w	r3, r2, r3
 8002218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002228:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800222c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002230:	460b      	mov	r3, r1
 8002232:	18db      	adds	r3, r3, r3
 8002234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002236:	4613      	mov	r3, r2
 8002238:	eb42 0303 	adc.w	r3, r2, r3
 800223c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800223e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002246:	f7fe f83b 	bl	80002c0 <__aeabi_uldivmod>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <UART_SetConfig+0x2d4>)
 8002250:	fba3 1302 	umull	r1, r3, r3, r2
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	2164      	movs	r1, #100	@ 0x64
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	3332      	adds	r3, #50	@ 0x32
 8002262:	4a08      	ldr	r2, [pc, #32]	@ (8002284 <UART_SetConfig+0x2d4>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4422      	add	r2, r4
 8002276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002278:	e106      	b.n	8002488 <UART_SetConfig+0x4d8>
 800227a:	bf00      	nop
 800227c:	40011000 	.word	0x40011000
 8002280:	40011400 	.word	0x40011400
 8002284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800228c:	2200      	movs	r2, #0
 800228e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002292:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800229a:	4642      	mov	r2, r8
 800229c:	464b      	mov	r3, r9
 800229e:	1891      	adds	r1, r2, r2
 80022a0:	6239      	str	r1, [r7, #32]
 80022a2:	415b      	adcs	r3, r3
 80022a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80022aa:	4641      	mov	r1, r8
 80022ac:	1854      	adds	r4, r2, r1
 80022ae:	4649      	mov	r1, r9
 80022b0:	eb43 0501 	adc.w	r5, r3, r1
 80022b4:	f04f 0200 	mov.w	r2, #0
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	00eb      	lsls	r3, r5, #3
 80022be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022c2:	00e2      	lsls	r2, r4, #3
 80022c4:	4614      	mov	r4, r2
 80022c6:	461d      	mov	r5, r3
 80022c8:	4643      	mov	r3, r8
 80022ca:	18e3      	adds	r3, r4, r3
 80022cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022d0:	464b      	mov	r3, r9
 80022d2:	eb45 0303 	adc.w	r3, r5, r3
 80022d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022f6:	4629      	mov	r1, r5
 80022f8:	008b      	lsls	r3, r1, #2
 80022fa:	4621      	mov	r1, r4
 80022fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002300:	4621      	mov	r1, r4
 8002302:	008a      	lsls	r2, r1, #2
 8002304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002308:	f7fd ffda 	bl	80002c0 <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4b60      	ldr	r3, [pc, #384]	@ (8002494 <UART_SetConfig+0x4e4>)
 8002312:	fba3 2302 	umull	r2, r3, r3, r2
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	011c      	lsls	r4, r3, #4
 800231a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800231e:	2200      	movs	r2, #0
 8002320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002324:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800232c:	4642      	mov	r2, r8
 800232e:	464b      	mov	r3, r9
 8002330:	1891      	adds	r1, r2, r2
 8002332:	61b9      	str	r1, [r7, #24]
 8002334:	415b      	adcs	r3, r3
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800233c:	4641      	mov	r1, r8
 800233e:	1851      	adds	r1, r2, r1
 8002340:	6139      	str	r1, [r7, #16]
 8002342:	4649      	mov	r1, r9
 8002344:	414b      	adcs	r3, r1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002354:	4659      	mov	r1, fp
 8002356:	00cb      	lsls	r3, r1, #3
 8002358:	4651      	mov	r1, sl
 800235a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800235e:	4651      	mov	r1, sl
 8002360:	00ca      	lsls	r2, r1, #3
 8002362:	4610      	mov	r0, r2
 8002364:	4619      	mov	r1, r3
 8002366:	4603      	mov	r3, r0
 8002368:	4642      	mov	r2, r8
 800236a:	189b      	adds	r3, r3, r2
 800236c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002370:	464b      	mov	r3, r9
 8002372:	460a      	mov	r2, r1
 8002374:	eb42 0303 	adc.w	r3, r2, r3
 8002378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002394:	4649      	mov	r1, r9
 8002396:	008b      	lsls	r3, r1, #2
 8002398:	4641      	mov	r1, r8
 800239a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800239e:	4641      	mov	r1, r8
 80023a0:	008a      	lsls	r2, r1, #2
 80023a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80023a6:	f7fd ff8b 	bl	80002c0 <__aeabi_uldivmod>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4611      	mov	r1, r2
 80023b0:	4b38      	ldr	r3, [pc, #224]	@ (8002494 <UART_SetConfig+0x4e4>)
 80023b2:	fba3 2301 	umull	r2, r3, r3, r1
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	2264      	movs	r2, #100	@ 0x64
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	1acb      	subs	r3, r1, r3
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	3332      	adds	r3, #50	@ 0x32
 80023c4:	4a33      	ldr	r2, [pc, #204]	@ (8002494 <UART_SetConfig+0x4e4>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023d0:	441c      	add	r4, r3
 80023d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023d6:	2200      	movs	r2, #0
 80023d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80023da:	677a      	str	r2, [r7, #116]	@ 0x74
 80023dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023e0:	4642      	mov	r2, r8
 80023e2:	464b      	mov	r3, r9
 80023e4:	1891      	adds	r1, r2, r2
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	415b      	adcs	r3, r3
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023f0:	4641      	mov	r1, r8
 80023f2:	1851      	adds	r1, r2, r1
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	4649      	mov	r1, r9
 80023f8:	414b      	adcs	r3, r1
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	f04f 0200 	mov.w	r2, #0
 8002400:	f04f 0300 	mov.w	r3, #0
 8002404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002408:	4659      	mov	r1, fp
 800240a:	00cb      	lsls	r3, r1, #3
 800240c:	4651      	mov	r1, sl
 800240e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002412:	4651      	mov	r1, sl
 8002414:	00ca      	lsls	r2, r1, #3
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	4603      	mov	r3, r0
 800241c:	4642      	mov	r2, r8
 800241e:	189b      	adds	r3, r3, r2
 8002420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002422:	464b      	mov	r3, r9
 8002424:	460a      	mov	r2, r1
 8002426:	eb42 0303 	adc.w	r3, r2, r3
 800242a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800242c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	663b      	str	r3, [r7, #96]	@ 0x60
 8002436:	667a      	str	r2, [r7, #100]	@ 0x64
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002444:	4649      	mov	r1, r9
 8002446:	008b      	lsls	r3, r1, #2
 8002448:	4641      	mov	r1, r8
 800244a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800244e:	4641      	mov	r1, r8
 8002450:	008a      	lsls	r2, r1, #2
 8002452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002456:	f7fd ff33 	bl	80002c0 <__aeabi_uldivmod>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <UART_SetConfig+0x4e4>)
 8002460:	fba3 1302 	umull	r1, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	2164      	movs	r1, #100	@ 0x64
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	3332      	adds	r3, #50	@ 0x32
 8002472:	4a08      	ldr	r2, [pc, #32]	@ (8002494 <UART_SetConfig+0x4e4>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	f003 020f 	and.w	r2, r3, #15
 800247e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4422      	add	r2, r4
 8002486:	609a      	str	r2, [r3, #8]
}
 8002488:	bf00      	nop
 800248a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800248e:	46bd      	mov	sp, r7
 8002490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002494:	51eb851f 	.word	0x51eb851f

08002498 <siprintf>:
 8002498:	b40e      	push	{r1, r2, r3}
 800249a:	b510      	push	{r4, lr}
 800249c:	b09d      	sub	sp, #116	@ 0x74
 800249e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80024a0:	9002      	str	r0, [sp, #8]
 80024a2:	9006      	str	r0, [sp, #24]
 80024a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024a8:	480a      	ldr	r0, [pc, #40]	@ (80024d4 <siprintf+0x3c>)
 80024aa:	9107      	str	r1, [sp, #28]
 80024ac:	9104      	str	r1, [sp, #16]
 80024ae:	490a      	ldr	r1, [pc, #40]	@ (80024d8 <siprintf+0x40>)
 80024b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80024b4:	9105      	str	r1, [sp, #20]
 80024b6:	2400      	movs	r4, #0
 80024b8:	a902      	add	r1, sp, #8
 80024ba:	6800      	ldr	r0, [r0, #0]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80024c0:	f000 f994 	bl	80027ec <_svfiprintf_r>
 80024c4:	9b02      	ldr	r3, [sp, #8]
 80024c6:	701c      	strb	r4, [r3, #0]
 80024c8:	b01d      	add	sp, #116	@ 0x74
 80024ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ce:	b003      	add	sp, #12
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	2000000c 	.word	0x2000000c
 80024d8:	ffff0208 	.word	0xffff0208

080024dc <memset>:
 80024dc:	4402      	add	r2, r0
 80024de:	4603      	mov	r3, r0
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d100      	bne.n	80024e6 <memset+0xa>
 80024e4:	4770      	bx	lr
 80024e6:	f803 1b01 	strb.w	r1, [r3], #1
 80024ea:	e7f9      	b.n	80024e0 <memset+0x4>

080024ec <__errno>:
 80024ec:	4b01      	ldr	r3, [pc, #4]	@ (80024f4 <__errno+0x8>)
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	2000000c 	.word	0x2000000c

080024f8 <__libc_init_array>:
 80024f8:	b570      	push	{r4, r5, r6, lr}
 80024fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002530 <__libc_init_array+0x38>)
 80024fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002534 <__libc_init_array+0x3c>)
 80024fe:	1b64      	subs	r4, r4, r5
 8002500:	10a4      	asrs	r4, r4, #2
 8002502:	2600      	movs	r6, #0
 8002504:	42a6      	cmp	r6, r4
 8002506:	d109      	bne.n	800251c <__libc_init_array+0x24>
 8002508:	4d0b      	ldr	r5, [pc, #44]	@ (8002538 <__libc_init_array+0x40>)
 800250a:	4c0c      	ldr	r4, [pc, #48]	@ (800253c <__libc_init_array+0x44>)
 800250c:	f000 fc64 	bl	8002dd8 <_init>
 8002510:	1b64      	subs	r4, r4, r5
 8002512:	10a4      	asrs	r4, r4, #2
 8002514:	2600      	movs	r6, #0
 8002516:	42a6      	cmp	r6, r4
 8002518:	d105      	bne.n	8002526 <__libc_init_array+0x2e>
 800251a:	bd70      	pop	{r4, r5, r6, pc}
 800251c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002520:	4798      	blx	r3
 8002522:	3601      	adds	r6, #1
 8002524:	e7ee      	b.n	8002504 <__libc_init_array+0xc>
 8002526:	f855 3b04 	ldr.w	r3, [r5], #4
 800252a:	4798      	blx	r3
 800252c:	3601      	adds	r6, #1
 800252e:	e7f2      	b.n	8002516 <__libc_init_array+0x1e>
 8002530:	08002e88 	.word	0x08002e88
 8002534:	08002e88 	.word	0x08002e88
 8002538:	08002e88 	.word	0x08002e88
 800253c:	08002e8c 	.word	0x08002e8c

08002540 <__retarget_lock_acquire_recursive>:
 8002540:	4770      	bx	lr

08002542 <__retarget_lock_release_recursive>:
 8002542:	4770      	bx	lr

08002544 <_free_r>:
 8002544:	b538      	push	{r3, r4, r5, lr}
 8002546:	4605      	mov	r5, r0
 8002548:	2900      	cmp	r1, #0
 800254a:	d041      	beq.n	80025d0 <_free_r+0x8c>
 800254c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002550:	1f0c      	subs	r4, r1, #4
 8002552:	2b00      	cmp	r3, #0
 8002554:	bfb8      	it	lt
 8002556:	18e4      	addlt	r4, r4, r3
 8002558:	f000 f8e0 	bl	800271c <__malloc_lock>
 800255c:	4a1d      	ldr	r2, [pc, #116]	@ (80025d4 <_free_r+0x90>)
 800255e:	6813      	ldr	r3, [r2, #0]
 8002560:	b933      	cbnz	r3, 8002570 <_free_r+0x2c>
 8002562:	6063      	str	r3, [r4, #4]
 8002564:	6014      	str	r4, [r2, #0]
 8002566:	4628      	mov	r0, r5
 8002568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800256c:	f000 b8dc 	b.w	8002728 <__malloc_unlock>
 8002570:	42a3      	cmp	r3, r4
 8002572:	d908      	bls.n	8002586 <_free_r+0x42>
 8002574:	6820      	ldr	r0, [r4, #0]
 8002576:	1821      	adds	r1, r4, r0
 8002578:	428b      	cmp	r3, r1
 800257a:	bf01      	itttt	eq
 800257c:	6819      	ldreq	r1, [r3, #0]
 800257e:	685b      	ldreq	r3, [r3, #4]
 8002580:	1809      	addeq	r1, r1, r0
 8002582:	6021      	streq	r1, [r4, #0]
 8002584:	e7ed      	b.n	8002562 <_free_r+0x1e>
 8002586:	461a      	mov	r2, r3
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	b10b      	cbz	r3, 8002590 <_free_r+0x4c>
 800258c:	42a3      	cmp	r3, r4
 800258e:	d9fa      	bls.n	8002586 <_free_r+0x42>
 8002590:	6811      	ldr	r1, [r2, #0]
 8002592:	1850      	adds	r0, r2, r1
 8002594:	42a0      	cmp	r0, r4
 8002596:	d10b      	bne.n	80025b0 <_free_r+0x6c>
 8002598:	6820      	ldr	r0, [r4, #0]
 800259a:	4401      	add	r1, r0
 800259c:	1850      	adds	r0, r2, r1
 800259e:	4283      	cmp	r3, r0
 80025a0:	6011      	str	r1, [r2, #0]
 80025a2:	d1e0      	bne.n	8002566 <_free_r+0x22>
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	6053      	str	r3, [r2, #4]
 80025aa:	4408      	add	r0, r1
 80025ac:	6010      	str	r0, [r2, #0]
 80025ae:	e7da      	b.n	8002566 <_free_r+0x22>
 80025b0:	d902      	bls.n	80025b8 <_free_r+0x74>
 80025b2:	230c      	movs	r3, #12
 80025b4:	602b      	str	r3, [r5, #0]
 80025b6:	e7d6      	b.n	8002566 <_free_r+0x22>
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	1821      	adds	r1, r4, r0
 80025bc:	428b      	cmp	r3, r1
 80025be:	bf04      	itt	eq
 80025c0:	6819      	ldreq	r1, [r3, #0]
 80025c2:	685b      	ldreq	r3, [r3, #4]
 80025c4:	6063      	str	r3, [r4, #4]
 80025c6:	bf04      	itt	eq
 80025c8:	1809      	addeq	r1, r1, r0
 80025ca:	6021      	streq	r1, [r4, #0]
 80025cc:	6054      	str	r4, [r2, #4]
 80025ce:	e7ca      	b.n	8002566 <_free_r+0x22>
 80025d0:	bd38      	pop	{r3, r4, r5, pc}
 80025d2:	bf00      	nop
 80025d4:	2000020c 	.word	0x2000020c

080025d8 <sbrk_aligned>:
 80025d8:	b570      	push	{r4, r5, r6, lr}
 80025da:	4e0f      	ldr	r6, [pc, #60]	@ (8002618 <sbrk_aligned+0x40>)
 80025dc:	460c      	mov	r4, r1
 80025de:	6831      	ldr	r1, [r6, #0]
 80025e0:	4605      	mov	r5, r0
 80025e2:	b911      	cbnz	r1, 80025ea <sbrk_aligned+0x12>
 80025e4:	f000 fba4 	bl	8002d30 <_sbrk_r>
 80025e8:	6030      	str	r0, [r6, #0]
 80025ea:	4621      	mov	r1, r4
 80025ec:	4628      	mov	r0, r5
 80025ee:	f000 fb9f 	bl	8002d30 <_sbrk_r>
 80025f2:	1c43      	adds	r3, r0, #1
 80025f4:	d103      	bne.n	80025fe <sbrk_aligned+0x26>
 80025f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80025fa:	4620      	mov	r0, r4
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
 80025fe:	1cc4      	adds	r4, r0, #3
 8002600:	f024 0403 	bic.w	r4, r4, #3
 8002604:	42a0      	cmp	r0, r4
 8002606:	d0f8      	beq.n	80025fa <sbrk_aligned+0x22>
 8002608:	1a21      	subs	r1, r4, r0
 800260a:	4628      	mov	r0, r5
 800260c:	f000 fb90 	bl	8002d30 <_sbrk_r>
 8002610:	3001      	adds	r0, #1
 8002612:	d1f2      	bne.n	80025fa <sbrk_aligned+0x22>
 8002614:	e7ef      	b.n	80025f6 <sbrk_aligned+0x1e>
 8002616:	bf00      	nop
 8002618:	20000208 	.word	0x20000208

0800261c <_malloc_r>:
 800261c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002620:	1ccd      	adds	r5, r1, #3
 8002622:	f025 0503 	bic.w	r5, r5, #3
 8002626:	3508      	adds	r5, #8
 8002628:	2d0c      	cmp	r5, #12
 800262a:	bf38      	it	cc
 800262c:	250c      	movcc	r5, #12
 800262e:	2d00      	cmp	r5, #0
 8002630:	4606      	mov	r6, r0
 8002632:	db01      	blt.n	8002638 <_malloc_r+0x1c>
 8002634:	42a9      	cmp	r1, r5
 8002636:	d904      	bls.n	8002642 <_malloc_r+0x26>
 8002638:	230c      	movs	r3, #12
 800263a:	6033      	str	r3, [r6, #0]
 800263c:	2000      	movs	r0, #0
 800263e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002642:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002718 <_malloc_r+0xfc>
 8002646:	f000 f869 	bl	800271c <__malloc_lock>
 800264a:	f8d8 3000 	ldr.w	r3, [r8]
 800264e:	461c      	mov	r4, r3
 8002650:	bb44      	cbnz	r4, 80026a4 <_malloc_r+0x88>
 8002652:	4629      	mov	r1, r5
 8002654:	4630      	mov	r0, r6
 8002656:	f7ff ffbf 	bl	80025d8 <sbrk_aligned>
 800265a:	1c43      	adds	r3, r0, #1
 800265c:	4604      	mov	r4, r0
 800265e:	d158      	bne.n	8002712 <_malloc_r+0xf6>
 8002660:	f8d8 4000 	ldr.w	r4, [r8]
 8002664:	4627      	mov	r7, r4
 8002666:	2f00      	cmp	r7, #0
 8002668:	d143      	bne.n	80026f2 <_malloc_r+0xd6>
 800266a:	2c00      	cmp	r4, #0
 800266c:	d04b      	beq.n	8002706 <_malloc_r+0xea>
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	4639      	mov	r1, r7
 8002672:	4630      	mov	r0, r6
 8002674:	eb04 0903 	add.w	r9, r4, r3
 8002678:	f000 fb5a 	bl	8002d30 <_sbrk_r>
 800267c:	4581      	cmp	r9, r0
 800267e:	d142      	bne.n	8002706 <_malloc_r+0xea>
 8002680:	6821      	ldr	r1, [r4, #0]
 8002682:	1a6d      	subs	r5, r5, r1
 8002684:	4629      	mov	r1, r5
 8002686:	4630      	mov	r0, r6
 8002688:	f7ff ffa6 	bl	80025d8 <sbrk_aligned>
 800268c:	3001      	adds	r0, #1
 800268e:	d03a      	beq.n	8002706 <_malloc_r+0xea>
 8002690:	6823      	ldr	r3, [r4, #0]
 8002692:	442b      	add	r3, r5
 8002694:	6023      	str	r3, [r4, #0]
 8002696:	f8d8 3000 	ldr.w	r3, [r8]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	bb62      	cbnz	r2, 80026f8 <_malloc_r+0xdc>
 800269e:	f8c8 7000 	str.w	r7, [r8]
 80026a2:	e00f      	b.n	80026c4 <_malloc_r+0xa8>
 80026a4:	6822      	ldr	r2, [r4, #0]
 80026a6:	1b52      	subs	r2, r2, r5
 80026a8:	d420      	bmi.n	80026ec <_malloc_r+0xd0>
 80026aa:	2a0b      	cmp	r2, #11
 80026ac:	d917      	bls.n	80026de <_malloc_r+0xc2>
 80026ae:	1961      	adds	r1, r4, r5
 80026b0:	42a3      	cmp	r3, r4
 80026b2:	6025      	str	r5, [r4, #0]
 80026b4:	bf18      	it	ne
 80026b6:	6059      	strne	r1, [r3, #4]
 80026b8:	6863      	ldr	r3, [r4, #4]
 80026ba:	bf08      	it	eq
 80026bc:	f8c8 1000 	streq.w	r1, [r8]
 80026c0:	5162      	str	r2, [r4, r5]
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	4630      	mov	r0, r6
 80026c6:	f000 f82f 	bl	8002728 <__malloc_unlock>
 80026ca:	f104 000b 	add.w	r0, r4, #11
 80026ce:	1d23      	adds	r3, r4, #4
 80026d0:	f020 0007 	bic.w	r0, r0, #7
 80026d4:	1ac2      	subs	r2, r0, r3
 80026d6:	bf1c      	itt	ne
 80026d8:	1a1b      	subne	r3, r3, r0
 80026da:	50a3      	strne	r3, [r4, r2]
 80026dc:	e7af      	b.n	800263e <_malloc_r+0x22>
 80026de:	6862      	ldr	r2, [r4, #4]
 80026e0:	42a3      	cmp	r3, r4
 80026e2:	bf0c      	ite	eq
 80026e4:	f8c8 2000 	streq.w	r2, [r8]
 80026e8:	605a      	strne	r2, [r3, #4]
 80026ea:	e7eb      	b.n	80026c4 <_malloc_r+0xa8>
 80026ec:	4623      	mov	r3, r4
 80026ee:	6864      	ldr	r4, [r4, #4]
 80026f0:	e7ae      	b.n	8002650 <_malloc_r+0x34>
 80026f2:	463c      	mov	r4, r7
 80026f4:	687f      	ldr	r7, [r7, #4]
 80026f6:	e7b6      	b.n	8002666 <_malloc_r+0x4a>
 80026f8:	461a      	mov	r2, r3
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	42a3      	cmp	r3, r4
 80026fe:	d1fb      	bne.n	80026f8 <_malloc_r+0xdc>
 8002700:	2300      	movs	r3, #0
 8002702:	6053      	str	r3, [r2, #4]
 8002704:	e7de      	b.n	80026c4 <_malloc_r+0xa8>
 8002706:	230c      	movs	r3, #12
 8002708:	6033      	str	r3, [r6, #0]
 800270a:	4630      	mov	r0, r6
 800270c:	f000 f80c 	bl	8002728 <__malloc_unlock>
 8002710:	e794      	b.n	800263c <_malloc_r+0x20>
 8002712:	6005      	str	r5, [r0, #0]
 8002714:	e7d6      	b.n	80026c4 <_malloc_r+0xa8>
 8002716:	bf00      	nop
 8002718:	2000020c 	.word	0x2000020c

0800271c <__malloc_lock>:
 800271c:	4801      	ldr	r0, [pc, #4]	@ (8002724 <__malloc_lock+0x8>)
 800271e:	f7ff bf0f 	b.w	8002540 <__retarget_lock_acquire_recursive>
 8002722:	bf00      	nop
 8002724:	20000204 	.word	0x20000204

08002728 <__malloc_unlock>:
 8002728:	4801      	ldr	r0, [pc, #4]	@ (8002730 <__malloc_unlock+0x8>)
 800272a:	f7ff bf0a 	b.w	8002542 <__retarget_lock_release_recursive>
 800272e:	bf00      	nop
 8002730:	20000204 	.word	0x20000204

08002734 <__ssputs_r>:
 8002734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002738:	688e      	ldr	r6, [r1, #8]
 800273a:	461f      	mov	r7, r3
 800273c:	42be      	cmp	r6, r7
 800273e:	680b      	ldr	r3, [r1, #0]
 8002740:	4682      	mov	sl, r0
 8002742:	460c      	mov	r4, r1
 8002744:	4690      	mov	r8, r2
 8002746:	d82d      	bhi.n	80027a4 <__ssputs_r+0x70>
 8002748:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800274c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002750:	d026      	beq.n	80027a0 <__ssputs_r+0x6c>
 8002752:	6965      	ldr	r5, [r4, #20]
 8002754:	6909      	ldr	r1, [r1, #16]
 8002756:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800275a:	eba3 0901 	sub.w	r9, r3, r1
 800275e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002762:	1c7b      	adds	r3, r7, #1
 8002764:	444b      	add	r3, r9
 8002766:	106d      	asrs	r5, r5, #1
 8002768:	429d      	cmp	r5, r3
 800276a:	bf38      	it	cc
 800276c:	461d      	movcc	r5, r3
 800276e:	0553      	lsls	r3, r2, #21
 8002770:	d527      	bpl.n	80027c2 <__ssputs_r+0x8e>
 8002772:	4629      	mov	r1, r5
 8002774:	f7ff ff52 	bl	800261c <_malloc_r>
 8002778:	4606      	mov	r6, r0
 800277a:	b360      	cbz	r0, 80027d6 <__ssputs_r+0xa2>
 800277c:	6921      	ldr	r1, [r4, #16]
 800277e:	464a      	mov	r2, r9
 8002780:	f000 fae6 	bl	8002d50 <memcpy>
 8002784:	89a3      	ldrh	r3, [r4, #12]
 8002786:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800278a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278e:	81a3      	strh	r3, [r4, #12]
 8002790:	6126      	str	r6, [r4, #16]
 8002792:	6165      	str	r5, [r4, #20]
 8002794:	444e      	add	r6, r9
 8002796:	eba5 0509 	sub.w	r5, r5, r9
 800279a:	6026      	str	r6, [r4, #0]
 800279c:	60a5      	str	r5, [r4, #8]
 800279e:	463e      	mov	r6, r7
 80027a0:	42be      	cmp	r6, r7
 80027a2:	d900      	bls.n	80027a6 <__ssputs_r+0x72>
 80027a4:	463e      	mov	r6, r7
 80027a6:	6820      	ldr	r0, [r4, #0]
 80027a8:	4632      	mov	r2, r6
 80027aa:	4641      	mov	r1, r8
 80027ac:	f000 faa6 	bl	8002cfc <memmove>
 80027b0:	68a3      	ldr	r3, [r4, #8]
 80027b2:	1b9b      	subs	r3, r3, r6
 80027b4:	60a3      	str	r3, [r4, #8]
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	4433      	add	r3, r6
 80027ba:	6023      	str	r3, [r4, #0]
 80027bc:	2000      	movs	r0, #0
 80027be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027c2:	462a      	mov	r2, r5
 80027c4:	f000 fad2 	bl	8002d6c <_realloc_r>
 80027c8:	4606      	mov	r6, r0
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d1e0      	bne.n	8002790 <__ssputs_r+0x5c>
 80027ce:	6921      	ldr	r1, [r4, #16]
 80027d0:	4650      	mov	r0, sl
 80027d2:	f7ff feb7 	bl	8002544 <_free_r>
 80027d6:	230c      	movs	r3, #12
 80027d8:	f8ca 3000 	str.w	r3, [sl]
 80027dc:	89a3      	ldrh	r3, [r4, #12]
 80027de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027e2:	81a3      	strh	r3, [r4, #12]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027e8:	e7e9      	b.n	80027be <__ssputs_r+0x8a>
	...

080027ec <_svfiprintf_r>:
 80027ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f0:	4698      	mov	r8, r3
 80027f2:	898b      	ldrh	r3, [r1, #12]
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	b09d      	sub	sp, #116	@ 0x74
 80027f8:	4607      	mov	r7, r0
 80027fa:	460d      	mov	r5, r1
 80027fc:	4614      	mov	r4, r2
 80027fe:	d510      	bpl.n	8002822 <_svfiprintf_r+0x36>
 8002800:	690b      	ldr	r3, [r1, #16]
 8002802:	b973      	cbnz	r3, 8002822 <_svfiprintf_r+0x36>
 8002804:	2140      	movs	r1, #64	@ 0x40
 8002806:	f7ff ff09 	bl	800261c <_malloc_r>
 800280a:	6028      	str	r0, [r5, #0]
 800280c:	6128      	str	r0, [r5, #16]
 800280e:	b930      	cbnz	r0, 800281e <_svfiprintf_r+0x32>
 8002810:	230c      	movs	r3, #12
 8002812:	603b      	str	r3, [r7, #0]
 8002814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002818:	b01d      	add	sp, #116	@ 0x74
 800281a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800281e:	2340      	movs	r3, #64	@ 0x40
 8002820:	616b      	str	r3, [r5, #20]
 8002822:	2300      	movs	r3, #0
 8002824:	9309      	str	r3, [sp, #36]	@ 0x24
 8002826:	2320      	movs	r3, #32
 8002828:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800282c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002830:	2330      	movs	r3, #48	@ 0x30
 8002832:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80029d0 <_svfiprintf_r+0x1e4>
 8002836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800283a:	f04f 0901 	mov.w	r9, #1
 800283e:	4623      	mov	r3, r4
 8002840:	469a      	mov	sl, r3
 8002842:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002846:	b10a      	cbz	r2, 800284c <_svfiprintf_r+0x60>
 8002848:	2a25      	cmp	r2, #37	@ 0x25
 800284a:	d1f9      	bne.n	8002840 <_svfiprintf_r+0x54>
 800284c:	ebba 0b04 	subs.w	fp, sl, r4
 8002850:	d00b      	beq.n	800286a <_svfiprintf_r+0x7e>
 8002852:	465b      	mov	r3, fp
 8002854:	4622      	mov	r2, r4
 8002856:	4629      	mov	r1, r5
 8002858:	4638      	mov	r0, r7
 800285a:	f7ff ff6b 	bl	8002734 <__ssputs_r>
 800285e:	3001      	adds	r0, #1
 8002860:	f000 80a7 	beq.w	80029b2 <_svfiprintf_r+0x1c6>
 8002864:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002866:	445a      	add	r2, fp
 8002868:	9209      	str	r2, [sp, #36]	@ 0x24
 800286a:	f89a 3000 	ldrb.w	r3, [sl]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f000 809f 	beq.w	80029b2 <_svfiprintf_r+0x1c6>
 8002874:	2300      	movs	r3, #0
 8002876:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800287a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800287e:	f10a 0a01 	add.w	sl, sl, #1
 8002882:	9304      	str	r3, [sp, #16]
 8002884:	9307      	str	r3, [sp, #28]
 8002886:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800288a:	931a      	str	r3, [sp, #104]	@ 0x68
 800288c:	4654      	mov	r4, sl
 800288e:	2205      	movs	r2, #5
 8002890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002894:	484e      	ldr	r0, [pc, #312]	@ (80029d0 <_svfiprintf_r+0x1e4>)
 8002896:	f7fd fcc3 	bl	8000220 <memchr>
 800289a:	9a04      	ldr	r2, [sp, #16]
 800289c:	b9d8      	cbnz	r0, 80028d6 <_svfiprintf_r+0xea>
 800289e:	06d0      	lsls	r0, r2, #27
 80028a0:	bf44      	itt	mi
 80028a2:	2320      	movmi	r3, #32
 80028a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028a8:	0711      	lsls	r1, r2, #28
 80028aa:	bf44      	itt	mi
 80028ac:	232b      	movmi	r3, #43	@ 0x2b
 80028ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028b2:	f89a 3000 	ldrb.w	r3, [sl]
 80028b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80028b8:	d015      	beq.n	80028e6 <_svfiprintf_r+0xfa>
 80028ba:	9a07      	ldr	r2, [sp, #28]
 80028bc:	4654      	mov	r4, sl
 80028be:	2000      	movs	r0, #0
 80028c0:	f04f 0c0a 	mov.w	ip, #10
 80028c4:	4621      	mov	r1, r4
 80028c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80028ca:	3b30      	subs	r3, #48	@ 0x30
 80028cc:	2b09      	cmp	r3, #9
 80028ce:	d94b      	bls.n	8002968 <_svfiprintf_r+0x17c>
 80028d0:	b1b0      	cbz	r0, 8002900 <_svfiprintf_r+0x114>
 80028d2:	9207      	str	r2, [sp, #28]
 80028d4:	e014      	b.n	8002900 <_svfiprintf_r+0x114>
 80028d6:	eba0 0308 	sub.w	r3, r0, r8
 80028da:	fa09 f303 	lsl.w	r3, r9, r3
 80028de:	4313      	orrs	r3, r2
 80028e0:	9304      	str	r3, [sp, #16]
 80028e2:	46a2      	mov	sl, r4
 80028e4:	e7d2      	b.n	800288c <_svfiprintf_r+0xa0>
 80028e6:	9b03      	ldr	r3, [sp, #12]
 80028e8:	1d19      	adds	r1, r3, #4
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	9103      	str	r1, [sp, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bfbb      	ittet	lt
 80028f2:	425b      	neglt	r3, r3
 80028f4:	f042 0202 	orrlt.w	r2, r2, #2
 80028f8:	9307      	strge	r3, [sp, #28]
 80028fa:	9307      	strlt	r3, [sp, #28]
 80028fc:	bfb8      	it	lt
 80028fe:	9204      	strlt	r2, [sp, #16]
 8002900:	7823      	ldrb	r3, [r4, #0]
 8002902:	2b2e      	cmp	r3, #46	@ 0x2e
 8002904:	d10a      	bne.n	800291c <_svfiprintf_r+0x130>
 8002906:	7863      	ldrb	r3, [r4, #1]
 8002908:	2b2a      	cmp	r3, #42	@ 0x2a
 800290a:	d132      	bne.n	8002972 <_svfiprintf_r+0x186>
 800290c:	9b03      	ldr	r3, [sp, #12]
 800290e:	1d1a      	adds	r2, r3, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	9203      	str	r2, [sp, #12]
 8002914:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002918:	3402      	adds	r4, #2
 800291a:	9305      	str	r3, [sp, #20]
 800291c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80029e0 <_svfiprintf_r+0x1f4>
 8002920:	7821      	ldrb	r1, [r4, #0]
 8002922:	2203      	movs	r2, #3
 8002924:	4650      	mov	r0, sl
 8002926:	f7fd fc7b 	bl	8000220 <memchr>
 800292a:	b138      	cbz	r0, 800293c <_svfiprintf_r+0x150>
 800292c:	9b04      	ldr	r3, [sp, #16]
 800292e:	eba0 000a 	sub.w	r0, r0, sl
 8002932:	2240      	movs	r2, #64	@ 0x40
 8002934:	4082      	lsls	r2, r0
 8002936:	4313      	orrs	r3, r2
 8002938:	3401      	adds	r4, #1
 800293a:	9304      	str	r3, [sp, #16]
 800293c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002940:	4824      	ldr	r0, [pc, #144]	@ (80029d4 <_svfiprintf_r+0x1e8>)
 8002942:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002946:	2206      	movs	r2, #6
 8002948:	f7fd fc6a 	bl	8000220 <memchr>
 800294c:	2800      	cmp	r0, #0
 800294e:	d036      	beq.n	80029be <_svfiprintf_r+0x1d2>
 8002950:	4b21      	ldr	r3, [pc, #132]	@ (80029d8 <_svfiprintf_r+0x1ec>)
 8002952:	bb1b      	cbnz	r3, 800299c <_svfiprintf_r+0x1b0>
 8002954:	9b03      	ldr	r3, [sp, #12]
 8002956:	3307      	adds	r3, #7
 8002958:	f023 0307 	bic.w	r3, r3, #7
 800295c:	3308      	adds	r3, #8
 800295e:	9303      	str	r3, [sp, #12]
 8002960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002962:	4433      	add	r3, r6
 8002964:	9309      	str	r3, [sp, #36]	@ 0x24
 8002966:	e76a      	b.n	800283e <_svfiprintf_r+0x52>
 8002968:	fb0c 3202 	mla	r2, ip, r2, r3
 800296c:	460c      	mov	r4, r1
 800296e:	2001      	movs	r0, #1
 8002970:	e7a8      	b.n	80028c4 <_svfiprintf_r+0xd8>
 8002972:	2300      	movs	r3, #0
 8002974:	3401      	adds	r4, #1
 8002976:	9305      	str	r3, [sp, #20]
 8002978:	4619      	mov	r1, r3
 800297a:	f04f 0c0a 	mov.w	ip, #10
 800297e:	4620      	mov	r0, r4
 8002980:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002984:	3a30      	subs	r2, #48	@ 0x30
 8002986:	2a09      	cmp	r2, #9
 8002988:	d903      	bls.n	8002992 <_svfiprintf_r+0x1a6>
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0c6      	beq.n	800291c <_svfiprintf_r+0x130>
 800298e:	9105      	str	r1, [sp, #20]
 8002990:	e7c4      	b.n	800291c <_svfiprintf_r+0x130>
 8002992:	fb0c 2101 	mla	r1, ip, r1, r2
 8002996:	4604      	mov	r4, r0
 8002998:	2301      	movs	r3, #1
 800299a:	e7f0      	b.n	800297e <_svfiprintf_r+0x192>
 800299c:	ab03      	add	r3, sp, #12
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	462a      	mov	r2, r5
 80029a2:	4b0e      	ldr	r3, [pc, #56]	@ (80029dc <_svfiprintf_r+0x1f0>)
 80029a4:	a904      	add	r1, sp, #16
 80029a6:	4638      	mov	r0, r7
 80029a8:	f3af 8000 	nop.w
 80029ac:	1c42      	adds	r2, r0, #1
 80029ae:	4606      	mov	r6, r0
 80029b0:	d1d6      	bne.n	8002960 <_svfiprintf_r+0x174>
 80029b2:	89ab      	ldrh	r3, [r5, #12]
 80029b4:	065b      	lsls	r3, r3, #25
 80029b6:	f53f af2d 	bmi.w	8002814 <_svfiprintf_r+0x28>
 80029ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029bc:	e72c      	b.n	8002818 <_svfiprintf_r+0x2c>
 80029be:	ab03      	add	r3, sp, #12
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	462a      	mov	r2, r5
 80029c4:	4b05      	ldr	r3, [pc, #20]	@ (80029dc <_svfiprintf_r+0x1f0>)
 80029c6:	a904      	add	r1, sp, #16
 80029c8:	4638      	mov	r0, r7
 80029ca:	f000 f879 	bl	8002ac0 <_printf_i>
 80029ce:	e7ed      	b.n	80029ac <_svfiprintf_r+0x1c0>
 80029d0:	08002e4c 	.word	0x08002e4c
 80029d4:	08002e56 	.word	0x08002e56
 80029d8:	00000000 	.word	0x00000000
 80029dc:	08002735 	.word	0x08002735
 80029e0:	08002e52 	.word	0x08002e52

080029e4 <_printf_common>:
 80029e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029e8:	4616      	mov	r6, r2
 80029ea:	4698      	mov	r8, r3
 80029ec:	688a      	ldr	r2, [r1, #8]
 80029ee:	690b      	ldr	r3, [r1, #16]
 80029f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029f4:	4293      	cmp	r3, r2
 80029f6:	bfb8      	it	lt
 80029f8:	4613      	movlt	r3, r2
 80029fa:	6033      	str	r3, [r6, #0]
 80029fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a00:	4607      	mov	r7, r0
 8002a02:	460c      	mov	r4, r1
 8002a04:	b10a      	cbz	r2, 8002a0a <_printf_common+0x26>
 8002a06:	3301      	adds	r3, #1
 8002a08:	6033      	str	r3, [r6, #0]
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	0699      	lsls	r1, r3, #26
 8002a0e:	bf42      	ittt	mi
 8002a10:	6833      	ldrmi	r3, [r6, #0]
 8002a12:	3302      	addmi	r3, #2
 8002a14:	6033      	strmi	r3, [r6, #0]
 8002a16:	6825      	ldr	r5, [r4, #0]
 8002a18:	f015 0506 	ands.w	r5, r5, #6
 8002a1c:	d106      	bne.n	8002a2c <_printf_common+0x48>
 8002a1e:	f104 0a19 	add.w	sl, r4, #25
 8002a22:	68e3      	ldr	r3, [r4, #12]
 8002a24:	6832      	ldr	r2, [r6, #0]
 8002a26:	1a9b      	subs	r3, r3, r2
 8002a28:	42ab      	cmp	r3, r5
 8002a2a:	dc26      	bgt.n	8002a7a <_printf_common+0x96>
 8002a2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	3b00      	subs	r3, #0
 8002a34:	bf18      	it	ne
 8002a36:	2301      	movne	r3, #1
 8002a38:	0692      	lsls	r2, r2, #26
 8002a3a:	d42b      	bmi.n	8002a94 <_printf_common+0xb0>
 8002a3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a40:	4641      	mov	r1, r8
 8002a42:	4638      	mov	r0, r7
 8002a44:	47c8      	blx	r9
 8002a46:	3001      	adds	r0, #1
 8002a48:	d01e      	beq.n	8002a88 <_printf_common+0xa4>
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	6922      	ldr	r2, [r4, #16]
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf02      	ittt	eq
 8002a56:	68e5      	ldreq	r5, [r4, #12]
 8002a58:	6833      	ldreq	r3, [r6, #0]
 8002a5a:	1aed      	subeq	r5, r5, r3
 8002a5c:	68a3      	ldr	r3, [r4, #8]
 8002a5e:	bf0c      	ite	eq
 8002a60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a64:	2500      	movne	r5, #0
 8002a66:	4293      	cmp	r3, r2
 8002a68:	bfc4      	itt	gt
 8002a6a:	1a9b      	subgt	r3, r3, r2
 8002a6c:	18ed      	addgt	r5, r5, r3
 8002a6e:	2600      	movs	r6, #0
 8002a70:	341a      	adds	r4, #26
 8002a72:	42b5      	cmp	r5, r6
 8002a74:	d11a      	bne.n	8002aac <_printf_common+0xc8>
 8002a76:	2000      	movs	r0, #0
 8002a78:	e008      	b.n	8002a8c <_printf_common+0xa8>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	4652      	mov	r2, sl
 8002a7e:	4641      	mov	r1, r8
 8002a80:	4638      	mov	r0, r7
 8002a82:	47c8      	blx	r9
 8002a84:	3001      	adds	r0, #1
 8002a86:	d103      	bne.n	8002a90 <_printf_common+0xac>
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a90:	3501      	adds	r5, #1
 8002a92:	e7c6      	b.n	8002a22 <_printf_common+0x3e>
 8002a94:	18e1      	adds	r1, r4, r3
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	2030      	movs	r0, #48	@ 0x30
 8002a9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a9e:	4422      	add	r2, r4
 8002aa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002aa4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	e7c7      	b.n	8002a3c <_printf_common+0x58>
 8002aac:	2301      	movs	r3, #1
 8002aae:	4622      	mov	r2, r4
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	4638      	mov	r0, r7
 8002ab4:	47c8      	blx	r9
 8002ab6:	3001      	adds	r0, #1
 8002ab8:	d0e6      	beq.n	8002a88 <_printf_common+0xa4>
 8002aba:	3601      	adds	r6, #1
 8002abc:	e7d9      	b.n	8002a72 <_printf_common+0x8e>
	...

08002ac0 <_printf_i>:
 8002ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac4:	7e0f      	ldrb	r7, [r1, #24]
 8002ac6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ac8:	2f78      	cmp	r7, #120	@ 0x78
 8002aca:	4691      	mov	r9, r2
 8002acc:	4680      	mov	r8, r0
 8002ace:	460c      	mov	r4, r1
 8002ad0:	469a      	mov	sl, r3
 8002ad2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ad6:	d807      	bhi.n	8002ae8 <_printf_i+0x28>
 8002ad8:	2f62      	cmp	r7, #98	@ 0x62
 8002ada:	d80a      	bhi.n	8002af2 <_printf_i+0x32>
 8002adc:	2f00      	cmp	r7, #0
 8002ade:	f000 80d1 	beq.w	8002c84 <_printf_i+0x1c4>
 8002ae2:	2f58      	cmp	r7, #88	@ 0x58
 8002ae4:	f000 80b8 	beq.w	8002c58 <_printf_i+0x198>
 8002ae8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002aec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002af0:	e03a      	b.n	8002b68 <_printf_i+0xa8>
 8002af2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002af6:	2b15      	cmp	r3, #21
 8002af8:	d8f6      	bhi.n	8002ae8 <_printf_i+0x28>
 8002afa:	a101      	add	r1, pc, #4	@ (adr r1, 8002b00 <_printf_i+0x40>)
 8002afc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b00:	08002b59 	.word	0x08002b59
 8002b04:	08002b6d 	.word	0x08002b6d
 8002b08:	08002ae9 	.word	0x08002ae9
 8002b0c:	08002ae9 	.word	0x08002ae9
 8002b10:	08002ae9 	.word	0x08002ae9
 8002b14:	08002ae9 	.word	0x08002ae9
 8002b18:	08002b6d 	.word	0x08002b6d
 8002b1c:	08002ae9 	.word	0x08002ae9
 8002b20:	08002ae9 	.word	0x08002ae9
 8002b24:	08002ae9 	.word	0x08002ae9
 8002b28:	08002ae9 	.word	0x08002ae9
 8002b2c:	08002c6b 	.word	0x08002c6b
 8002b30:	08002b97 	.word	0x08002b97
 8002b34:	08002c25 	.word	0x08002c25
 8002b38:	08002ae9 	.word	0x08002ae9
 8002b3c:	08002ae9 	.word	0x08002ae9
 8002b40:	08002c8d 	.word	0x08002c8d
 8002b44:	08002ae9 	.word	0x08002ae9
 8002b48:	08002b97 	.word	0x08002b97
 8002b4c:	08002ae9 	.word	0x08002ae9
 8002b50:	08002ae9 	.word	0x08002ae9
 8002b54:	08002c2d 	.word	0x08002c2d
 8002b58:	6833      	ldr	r3, [r6, #0]
 8002b5a:	1d1a      	adds	r2, r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6032      	str	r2, [r6, #0]
 8002b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e09c      	b.n	8002ca6 <_printf_i+0x1e6>
 8002b6c:	6833      	ldr	r3, [r6, #0]
 8002b6e:	6820      	ldr	r0, [r4, #0]
 8002b70:	1d19      	adds	r1, r3, #4
 8002b72:	6031      	str	r1, [r6, #0]
 8002b74:	0606      	lsls	r6, r0, #24
 8002b76:	d501      	bpl.n	8002b7c <_printf_i+0xbc>
 8002b78:	681d      	ldr	r5, [r3, #0]
 8002b7a:	e003      	b.n	8002b84 <_printf_i+0xc4>
 8002b7c:	0645      	lsls	r5, r0, #25
 8002b7e:	d5fb      	bpl.n	8002b78 <_printf_i+0xb8>
 8002b80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b84:	2d00      	cmp	r5, #0
 8002b86:	da03      	bge.n	8002b90 <_printf_i+0xd0>
 8002b88:	232d      	movs	r3, #45	@ 0x2d
 8002b8a:	426d      	negs	r5, r5
 8002b8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b90:	4858      	ldr	r0, [pc, #352]	@ (8002cf4 <_printf_i+0x234>)
 8002b92:	230a      	movs	r3, #10
 8002b94:	e011      	b.n	8002bba <_printf_i+0xfa>
 8002b96:	6821      	ldr	r1, [r4, #0]
 8002b98:	6833      	ldr	r3, [r6, #0]
 8002b9a:	0608      	lsls	r0, r1, #24
 8002b9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002ba0:	d402      	bmi.n	8002ba8 <_printf_i+0xe8>
 8002ba2:	0649      	lsls	r1, r1, #25
 8002ba4:	bf48      	it	mi
 8002ba6:	b2ad      	uxthmi	r5, r5
 8002ba8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002baa:	4852      	ldr	r0, [pc, #328]	@ (8002cf4 <_printf_i+0x234>)
 8002bac:	6033      	str	r3, [r6, #0]
 8002bae:	bf14      	ite	ne
 8002bb0:	230a      	movne	r3, #10
 8002bb2:	2308      	moveq	r3, #8
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bba:	6866      	ldr	r6, [r4, #4]
 8002bbc:	60a6      	str	r6, [r4, #8]
 8002bbe:	2e00      	cmp	r6, #0
 8002bc0:	db05      	blt.n	8002bce <_printf_i+0x10e>
 8002bc2:	6821      	ldr	r1, [r4, #0]
 8002bc4:	432e      	orrs	r6, r5
 8002bc6:	f021 0104 	bic.w	r1, r1, #4
 8002bca:	6021      	str	r1, [r4, #0]
 8002bcc:	d04b      	beq.n	8002c66 <_printf_i+0x1a6>
 8002bce:	4616      	mov	r6, r2
 8002bd0:	fbb5 f1f3 	udiv	r1, r5, r3
 8002bd4:	fb03 5711 	mls	r7, r3, r1, r5
 8002bd8:	5dc7      	ldrb	r7, [r0, r7]
 8002bda:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002bde:	462f      	mov	r7, r5
 8002be0:	42bb      	cmp	r3, r7
 8002be2:	460d      	mov	r5, r1
 8002be4:	d9f4      	bls.n	8002bd0 <_printf_i+0x110>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d10b      	bne.n	8002c02 <_printf_i+0x142>
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	07df      	lsls	r7, r3, #31
 8002bee:	d508      	bpl.n	8002c02 <_printf_i+0x142>
 8002bf0:	6923      	ldr	r3, [r4, #16]
 8002bf2:	6861      	ldr	r1, [r4, #4]
 8002bf4:	4299      	cmp	r1, r3
 8002bf6:	bfde      	ittt	le
 8002bf8:	2330      	movle	r3, #48	@ 0x30
 8002bfa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002bfe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002c02:	1b92      	subs	r2, r2, r6
 8002c04:	6122      	str	r2, [r4, #16]
 8002c06:	f8cd a000 	str.w	sl, [sp]
 8002c0a:	464b      	mov	r3, r9
 8002c0c:	aa03      	add	r2, sp, #12
 8002c0e:	4621      	mov	r1, r4
 8002c10:	4640      	mov	r0, r8
 8002c12:	f7ff fee7 	bl	80029e4 <_printf_common>
 8002c16:	3001      	adds	r0, #1
 8002c18:	d14a      	bne.n	8002cb0 <_printf_i+0x1f0>
 8002c1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002c1e:	b004      	add	sp, #16
 8002c20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	6023      	str	r3, [r4, #0]
 8002c2c:	4832      	ldr	r0, [pc, #200]	@ (8002cf8 <_printf_i+0x238>)
 8002c2e:	2778      	movs	r7, #120	@ 0x78
 8002c30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c34:	6823      	ldr	r3, [r4, #0]
 8002c36:	6831      	ldr	r1, [r6, #0]
 8002c38:	061f      	lsls	r7, r3, #24
 8002c3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c3e:	d402      	bmi.n	8002c46 <_printf_i+0x186>
 8002c40:	065f      	lsls	r7, r3, #25
 8002c42:	bf48      	it	mi
 8002c44:	b2ad      	uxthmi	r5, r5
 8002c46:	6031      	str	r1, [r6, #0]
 8002c48:	07d9      	lsls	r1, r3, #31
 8002c4a:	bf44      	itt	mi
 8002c4c:	f043 0320 	orrmi.w	r3, r3, #32
 8002c50:	6023      	strmi	r3, [r4, #0]
 8002c52:	b11d      	cbz	r5, 8002c5c <_printf_i+0x19c>
 8002c54:	2310      	movs	r3, #16
 8002c56:	e7ad      	b.n	8002bb4 <_printf_i+0xf4>
 8002c58:	4826      	ldr	r0, [pc, #152]	@ (8002cf4 <_printf_i+0x234>)
 8002c5a:	e7e9      	b.n	8002c30 <_printf_i+0x170>
 8002c5c:	6823      	ldr	r3, [r4, #0]
 8002c5e:	f023 0320 	bic.w	r3, r3, #32
 8002c62:	6023      	str	r3, [r4, #0]
 8002c64:	e7f6      	b.n	8002c54 <_printf_i+0x194>
 8002c66:	4616      	mov	r6, r2
 8002c68:	e7bd      	b.n	8002be6 <_printf_i+0x126>
 8002c6a:	6833      	ldr	r3, [r6, #0]
 8002c6c:	6825      	ldr	r5, [r4, #0]
 8002c6e:	6961      	ldr	r1, [r4, #20]
 8002c70:	1d18      	adds	r0, r3, #4
 8002c72:	6030      	str	r0, [r6, #0]
 8002c74:	062e      	lsls	r6, r5, #24
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	d501      	bpl.n	8002c7e <_printf_i+0x1be>
 8002c7a:	6019      	str	r1, [r3, #0]
 8002c7c:	e002      	b.n	8002c84 <_printf_i+0x1c4>
 8002c7e:	0668      	lsls	r0, r5, #25
 8002c80:	d5fb      	bpl.n	8002c7a <_printf_i+0x1ba>
 8002c82:	8019      	strh	r1, [r3, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	6123      	str	r3, [r4, #16]
 8002c88:	4616      	mov	r6, r2
 8002c8a:	e7bc      	b.n	8002c06 <_printf_i+0x146>
 8002c8c:	6833      	ldr	r3, [r6, #0]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	6032      	str	r2, [r6, #0]
 8002c92:	681e      	ldr	r6, [r3, #0]
 8002c94:	6862      	ldr	r2, [r4, #4]
 8002c96:	2100      	movs	r1, #0
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f7fd fac1 	bl	8000220 <memchr>
 8002c9e:	b108      	cbz	r0, 8002ca4 <_printf_i+0x1e4>
 8002ca0:	1b80      	subs	r0, r0, r6
 8002ca2:	6060      	str	r0, [r4, #4]
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	6123      	str	r3, [r4, #16]
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cae:	e7aa      	b.n	8002c06 <_printf_i+0x146>
 8002cb0:	6923      	ldr	r3, [r4, #16]
 8002cb2:	4632      	mov	r2, r6
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	4640      	mov	r0, r8
 8002cb8:	47d0      	blx	sl
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d0ad      	beq.n	8002c1a <_printf_i+0x15a>
 8002cbe:	6823      	ldr	r3, [r4, #0]
 8002cc0:	079b      	lsls	r3, r3, #30
 8002cc2:	d413      	bmi.n	8002cec <_printf_i+0x22c>
 8002cc4:	68e0      	ldr	r0, [r4, #12]
 8002cc6:	9b03      	ldr	r3, [sp, #12]
 8002cc8:	4298      	cmp	r0, r3
 8002cca:	bfb8      	it	lt
 8002ccc:	4618      	movlt	r0, r3
 8002cce:	e7a6      	b.n	8002c1e <_printf_i+0x15e>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	4632      	mov	r2, r6
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	47d0      	blx	sl
 8002cda:	3001      	adds	r0, #1
 8002cdc:	d09d      	beq.n	8002c1a <_printf_i+0x15a>
 8002cde:	3501      	adds	r5, #1
 8002ce0:	68e3      	ldr	r3, [r4, #12]
 8002ce2:	9903      	ldr	r1, [sp, #12]
 8002ce4:	1a5b      	subs	r3, r3, r1
 8002ce6:	42ab      	cmp	r3, r5
 8002ce8:	dcf2      	bgt.n	8002cd0 <_printf_i+0x210>
 8002cea:	e7eb      	b.n	8002cc4 <_printf_i+0x204>
 8002cec:	2500      	movs	r5, #0
 8002cee:	f104 0619 	add.w	r6, r4, #25
 8002cf2:	e7f5      	b.n	8002ce0 <_printf_i+0x220>
 8002cf4:	08002e5d 	.word	0x08002e5d
 8002cf8:	08002e6e 	.word	0x08002e6e

08002cfc <memmove>:
 8002cfc:	4288      	cmp	r0, r1
 8002cfe:	b510      	push	{r4, lr}
 8002d00:	eb01 0402 	add.w	r4, r1, r2
 8002d04:	d902      	bls.n	8002d0c <memmove+0x10>
 8002d06:	4284      	cmp	r4, r0
 8002d08:	4623      	mov	r3, r4
 8002d0a:	d807      	bhi.n	8002d1c <memmove+0x20>
 8002d0c:	1e43      	subs	r3, r0, #1
 8002d0e:	42a1      	cmp	r1, r4
 8002d10:	d008      	beq.n	8002d24 <memmove+0x28>
 8002d12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d1a:	e7f8      	b.n	8002d0e <memmove+0x12>
 8002d1c:	4402      	add	r2, r0
 8002d1e:	4601      	mov	r1, r0
 8002d20:	428a      	cmp	r2, r1
 8002d22:	d100      	bne.n	8002d26 <memmove+0x2a>
 8002d24:	bd10      	pop	{r4, pc}
 8002d26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d2e:	e7f7      	b.n	8002d20 <memmove+0x24>

08002d30 <_sbrk_r>:
 8002d30:	b538      	push	{r3, r4, r5, lr}
 8002d32:	4d06      	ldr	r5, [pc, #24]	@ (8002d4c <_sbrk_r+0x1c>)
 8002d34:	2300      	movs	r3, #0
 8002d36:	4604      	mov	r4, r0
 8002d38:	4608      	mov	r0, r1
 8002d3a:	602b      	str	r3, [r5, #0]
 8002d3c:	f7fd fe04 	bl	8000948 <_sbrk>
 8002d40:	1c43      	adds	r3, r0, #1
 8002d42:	d102      	bne.n	8002d4a <_sbrk_r+0x1a>
 8002d44:	682b      	ldr	r3, [r5, #0]
 8002d46:	b103      	cbz	r3, 8002d4a <_sbrk_r+0x1a>
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	bd38      	pop	{r3, r4, r5, pc}
 8002d4c:	20000200 	.word	0x20000200

08002d50 <memcpy>:
 8002d50:	440a      	add	r2, r1
 8002d52:	4291      	cmp	r1, r2
 8002d54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8002d58:	d100      	bne.n	8002d5c <memcpy+0xc>
 8002d5a:	4770      	bx	lr
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d66:	4291      	cmp	r1, r2
 8002d68:	d1f9      	bne.n	8002d5e <memcpy+0xe>
 8002d6a:	bd10      	pop	{r4, pc}

08002d6c <_realloc_r>:
 8002d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d70:	4607      	mov	r7, r0
 8002d72:	4614      	mov	r4, r2
 8002d74:	460d      	mov	r5, r1
 8002d76:	b921      	cbnz	r1, 8002d82 <_realloc_r+0x16>
 8002d78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	f7ff bc4d 	b.w	800261c <_malloc_r>
 8002d82:	b92a      	cbnz	r2, 8002d90 <_realloc_r+0x24>
 8002d84:	f7ff fbde 	bl	8002544 <_free_r>
 8002d88:	4625      	mov	r5, r4
 8002d8a:	4628      	mov	r0, r5
 8002d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d90:	f000 f81a 	bl	8002dc8 <_malloc_usable_size_r>
 8002d94:	4284      	cmp	r4, r0
 8002d96:	4606      	mov	r6, r0
 8002d98:	d802      	bhi.n	8002da0 <_realloc_r+0x34>
 8002d9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002d9e:	d8f4      	bhi.n	8002d8a <_realloc_r+0x1e>
 8002da0:	4621      	mov	r1, r4
 8002da2:	4638      	mov	r0, r7
 8002da4:	f7ff fc3a 	bl	800261c <_malloc_r>
 8002da8:	4680      	mov	r8, r0
 8002daa:	b908      	cbnz	r0, 8002db0 <_realloc_r+0x44>
 8002dac:	4645      	mov	r5, r8
 8002dae:	e7ec      	b.n	8002d8a <_realloc_r+0x1e>
 8002db0:	42b4      	cmp	r4, r6
 8002db2:	4622      	mov	r2, r4
 8002db4:	4629      	mov	r1, r5
 8002db6:	bf28      	it	cs
 8002db8:	4632      	movcs	r2, r6
 8002dba:	f7ff ffc9 	bl	8002d50 <memcpy>
 8002dbe:	4629      	mov	r1, r5
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	f7ff fbbf 	bl	8002544 <_free_r>
 8002dc6:	e7f1      	b.n	8002dac <_realloc_r+0x40>

08002dc8 <_malloc_usable_size_r>:
 8002dc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002dcc:	1f18      	subs	r0, r3, #4
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bfbc      	itt	lt
 8002dd2:	580b      	ldrlt	r3, [r1, r0]
 8002dd4:	18c0      	addlt	r0, r0, r3
 8002dd6:	4770      	bx	lr

08002dd8 <_init>:
 8002dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dda:	bf00      	nop
 8002ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dde:	bc08      	pop	{r3}
 8002de0:	469e      	mov	lr, r3
 8002de2:	4770      	bx	lr

08002de4 <_fini>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	bf00      	nop
 8002de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dea:	bc08      	pop	{r3}
 8002dec:	469e      	mov	lr, r3
 8002dee:	4770      	bx	lr
